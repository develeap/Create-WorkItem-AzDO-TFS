{"version":3,"file":"index.js","mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC/UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzzvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChzmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjpSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjjenwvryvteA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACroBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACheuxipxvwJA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzvlxrsldxjxzkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClvn7EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvzpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzznEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACntzivsrirjizzIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACfntfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzgBA;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtzhvrfxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtfpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACptlnrWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACbkvJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrl/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACngCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjrmEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA","sources":[".././node_modules/@actions/core/lib/command.js",".././node_modules/@actions/core/lib/core.js",".././node_modules/@actions/core/lib/file-command.js",".././node_modules/@actions/core/lib/oidc-utils.js",".././node_modules/@actions/core/lib/path-utils.js",".././node_modules/@actions/core/lib/summary.js",".././node_modules/@actions/core/lib/utils.js",".././node_modules/@actions/http-client/lib/auth.js",".././node_modules/@actions/http-client/lib/index.js",".././node_modules/@actions/http-client/lib/proxy.js",".././node_modules/azure-devops-node-api/AlertApi.js",".././node_modules/azure-devops-node-api/BuildApi.js",".././node_modules/azure-devops-node-api/ClientApiBases.js",".././node_modules/azure-devops-node-api/CoreApi.js",".././node_modules/azure-devops-node-api/DashboardApi.js",".././node_modules/azure-devops-node-api/ExtensionManagementApi.js",".././node_modules/azure-devops-node-api/FeatureManagementApi.js",".././node_modules/azure-devops-node-api/FileContainerApi.js",".././node_modules/azure-devops-node-api/FileContainerApiBase.js",".././node_modules/azure-devops-node-api/GalleryApi.js",".././node_modules/azure-devops-node-api/GalleryCompatHttpClientBase.js",".././node_modules/azure-devops-node-api/GitApi.js",".././node_modules/azure-devops-node-api/LocationsApi.js",".././node_modules/azure-devops-node-api/ManagementApi.js",".././node_modules/azure-devops-node-api/NotificationApi.js",".././node_modules/azure-devops-node-api/PolicyApi.js",".././node_modules/azure-devops-node-api/ProfileApi.js",".././node_modules/azure-devops-node-api/ProjectAnalysisApi.js",".././node_modules/azure-devops-node-api/ReleaseApi.js",".././node_modules/azure-devops-node-api/SecurityRolesApi.js",".././node_modules/azure-devops-node-api/Serialization.js",".././node_modules/azure-devops-node-api/TaskAgentApi.js",".././node_modules/azure-devops-node-api/TaskAgentApiBase.js",".././node_modules/azure-devops-node-api/TaskApi.js",".././node_modules/azure-devops-node-api/TestApi.js",".././node_modules/azure-devops-node-api/TestPlanApi.js",".././node_modules/azure-devops-node-api/TestResultsApi.js",".././node_modules/azure-devops-node-api/TfvcApi.js",".././node_modules/azure-devops-node-api/VsoClient.js",".././node_modules/azure-devops-node-api/WebApi.js",".././node_modules/azure-devops-node-api/WikiApi.js",".././node_modules/azure-devops-node-api/WorkApi.js",".././node_modules/azure-devops-node-api/WorkItemTrackingApi.js",".././node_modules/azure-devops-node-api/WorkItemTrackingProcessApi.js",".././node_modules/azure-devops-node-api/WorkItemTrackingProcessDefinitionsApi.js",".././node_modules/azure-devops-node-api/handlers/basiccreds.js",".././node_modules/azure-devops-node-api/handlers/bearertoken.js",".././node_modules/azure-devops-node-api/handlers/ntlm.js",".././node_modules/azure-devops-node-api/handlers/personalaccesstoken.js",".././node_modules/azure-devops-node-api/interfaces/AlertInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/BuildInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/CommentsInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/CoreInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/DashboardInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/ExtensionManagementInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/FeatureManagementInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/FileContainerInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/GalleryInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/GitInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/LocationsInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/ManagementInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/NotificationInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/PolicyInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/ProfileInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/ProjectAnalysisInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/ReleaseInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/SecurityRolesInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/TaskAgentInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/TestInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/TestPlanInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/TfvcInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/WikiInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/WorkInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/WorkItemTrackingInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/WorkItemTrackingProcessDefinitionsInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/WorkItemTrackingProcessInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/common/FormInputInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/common/OperationsInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/common/System.js",".././node_modules/azure-devops-node-api/interfaces/common/SystemDataInterfaces.js",".././node_modules/azure-devops-node-api/interfaces/common/VSSInterfaces.js",".././node_modules/balanced-match/index.js",".././node_modules/call-bind/callBound.js",".././node_modules/call-bind/index.js",".././node_modules/define-data-property/index.js",".././node_modules/es-define-property/index.js",".././node_modules/es-errors/eval.js",".././node_modules/es-errors/index.js",".././node_modules/es-errors/range.js",".././node_modules/es-errors/ref.js",".././node_modules/es-errors/syntax.js",".././node_modules/es-errors/type.js",".././node_modules/es-errors/uri.js",".././node_modules/function-bind/implementation.js",".././node_modules/function-bind/index.js",".././node_modules/get-intrinsic/index.js",".././node_modules/glob/node_modules/brace-expansion/index.js",".././node_modules/gopd/index.js",".././node_modules/has-property-descriptors/index.js",".././node_modules/has-proto/index.js",".././node_modules/has-symbols/index.js",".././node_modules/has-symbols/shams.js",".././node_modules/hasown/index.js",".././node_modules/object-inspect/index.js",".././node_modules/object-inspect/util.inspect.js",".././node_modules/qs/lib/formats.js",".././node_modules/qs/lib/index.js",".././node_modules/qs/lib/parse.js",".././node_modules/qs/lib/stringify.js",".././node_modules/qs/lib/utils.js",".././node_modules/set-function-length/index.js",".././node_modules/side-channel/index.js",".././node_modules/tunnel/index.js",".././node_modules/tunnel/lib/tunnel.js",".././node_modules/typed-rest-client/Handlers.js",".././node_modules/typed-rest-client/HttpClient.js",".././node_modules/typed-rest-client/RestClient.js",".././node_modules/typed-rest-client/Util.js",".././node_modules/typed-rest-client/handlers/basiccreds.js",".././node_modules/typed-rest-client/handlers/bearertoken.js",".././node_modules/typed-rest-client/handlers/ntlm.js",".././node_modules/typed-rest-client/handlers/personalaccesstoken.js",".././node_modules/typed-rest-client/opensource/Node-SMB/lib/common.js",".././node_modules/typed-rest-client/opensource/Node-SMB/lib/ntlm.js",".././node_modules/typed-rest-client/opensource/Node-SMB/lib/smbhash.js",".././node_modules/uuid/dist/index.js",".././node_modules/uuid/dist/md5.js",".././node_modules/uuid/dist/nil.js",".././node_modules/uuid/dist/parse.js",".././node_modules/uuid/dist/regex.js",".././node_modules/uuid/dist/rng.js",".././node_modules/uuid/dist/sha1.js",".././node_modules/uuid/dist/stringify.js",".././node_modules/uuid/dist/v1.js",".././node_modules/uuid/dist/v3.js",".././node_modules/uuid/dist/v35.js",".././node_modules/uuid/dist/v4.js",".././node_modules/uuid/dist/v5.js",".././node_modules/uuid/dist/validate.js",".././node_modules/uuid/dist/version.js",".././src/main.js","../external node-commonjs \"assert\"","../external node-commonjs \"crypto\"","../external node-commonjs \"events\"","../external node-commonjs \"fs\"","../external node-commonjs \"fs/promises\"","../external node-commonjs \"http\"","../external node-commonjs \"https\"","../external node-commonjs \"net\"","../external node-commonjs \"os\"","../external node-commonjs \"path\"","../external node-commonjs \"stream\"","../external node-commonjs \"string_decoder\"","../external node-commonjs \"tls\"","../external node-commonjs \"url\"","../external node-commonjs \"util\"","../external node-commonjs \"zlib\"",".././node_modules/glob/dist/commonjs/glob.js",".././node_modules/glob/dist/commonjs/has-magic.js",".././node_modules/glob/dist/commonjs/ignore.js",".././node_modules/glob/dist/commonjs/index.js",".././node_modules/glob/dist/commonjs/pattern.js",".././node_modules/glob/dist/commonjs/processor.js",".././node_modules/glob/dist/commonjs/walker.js",".././node_modules/glob/node_modules/minimatch/dist/cjs/assert-valid-pattern.js",".././node_modules/glob/node_modules/minimatch/dist/cjs/ast.js",".././node_modules/glob/node_modules/minimatch/dist/cjs/brace-expressions.js",".././node_modules/glob/node_modules/minimatch/dist/cjs/escape.js",".././node_modules/glob/node_modules/minimatch/dist/cjs/index.js",".././node_modules/glob/node_modules/minimatch/dist/cjs/unescape.js",".././node_modules/minipass/dist/commonjs/index.js",".././node_modules/path-scurry/dist/cjs/index.js",".././node_modules/path-scurry/node_modules/lru-cache/dist/commonjs/index.js",".././node_modules/underscore/underscore-node-f.cjs",".././node_modules/underscore/underscore-node.cjs","../webpack/bootstrap","../webpack/runtime/compat",".././src/index.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.issue = exports.issueCommand = void 0;\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\n/**\n * Commands\n *\n * Command Format:\n *   ::name key=value,key=value::message\n *\n * Examples:\n *   ::warning::This is the message\n *   ::set-env name=MY_VAR::some value\n */\nfunction issueCommand(command, properties, message) {\n    const cmd = new Command(command, properties, message);\n    process.stdout.write(cmd.toString() + os.EOL);\n}\nexports.issueCommand = issueCommand;\nfunction issue(name, message = '') {\n    issueCommand(name, {}, message);\n}\nexports.issue = issue;\nconst CMD_STRING = '::';\nclass Command {\n    constructor(command, properties, message) {\n        if (!command) {\n            command = 'missing.command';\n        }\n        this.command = command;\n        this.properties = properties;\n        this.message = message;\n    }\n    toString() {\n        let cmdStr = CMD_STRING + this.command;\n        if (this.properties && Object.keys(this.properties).length > 0) {\n            cmdStr += ' ';\n            let first = true;\n            for (const key in this.properties) {\n                if (this.properties.hasOwnProperty(key)) {\n                    const val = this.properties[key];\n                    if (val) {\n                        if (first) {\n                            first = false;\n                        }\n                        else {\n                            cmdStr += ',';\n                        }\n                        cmdStr += `${key}=${escapeProperty(val)}`;\n                    }\n                }\n            }\n        }\n        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;\n        return cmdStr;\n    }\n}\nfunction escapeData(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A');\n}\nfunction escapeProperty(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A')\n        .replace(/:/g, '%3A')\n        .replace(/,/g, '%2C');\n}\n//# sourceMappingURL=command.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;\nconst command_1 = require(\"./command\");\nconst file_command_1 = require(\"./file-command\");\nconst utils_1 = require(\"./utils\");\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\nconst oidc_utils_1 = require(\"./oidc-utils\");\n/**\n * The code to exit an action\n */\nvar ExitCode;\n(function (ExitCode) {\n    /**\n     * A code indicating that the action was successful\n     */\n    ExitCode[ExitCode[\"Success\"] = 0] = \"Success\";\n    /**\n     * A code indicating that the action was a failure\n     */\n    ExitCode[ExitCode[\"Failure\"] = 1] = \"Failure\";\n})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));\n//-----------------------------------------------------------------------\n// Variables\n//-----------------------------------------------------------------------\n/**\n * Sets env variable for this action and future actions in the job\n * @param name the name of the variable to set\n * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction exportVariable(name, val) {\n    const convertedVal = utils_1.toCommandValue(val);\n    process.env[name] = convertedVal;\n    const filePath = process.env['GITHUB_ENV'] || '';\n    if (filePath) {\n        return file_command_1.issueFileCommand('ENV', file_command_1.prepareKeyValueMessage(name, val));\n    }\n    command_1.issueCommand('set-env', { name }, convertedVal);\n}\nexports.exportVariable = exportVariable;\n/**\n * Registers a secret which will get masked from logs\n * @param secret value of the secret\n */\nfunction setSecret(secret) {\n    command_1.issueCommand('add-mask', {}, secret);\n}\nexports.setSecret = setSecret;\n/**\n * Prepends inputPath to the PATH (for this action and future actions)\n * @param inputPath\n */\nfunction addPath(inputPath) {\n    const filePath = process.env['GITHUB_PATH'] || '';\n    if (filePath) {\n        file_command_1.issueFileCommand('PATH', inputPath);\n    }\n    else {\n        command_1.issueCommand('add-path', {}, inputPath);\n    }\n    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;\n}\nexports.addPath = addPath;\n/**\n * Gets the value of an input.\n * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.\n * Returns an empty string if the value is not defined.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string\n */\nfunction getInput(name, options) {\n    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';\n    if (options && options.required && !val) {\n        throw new Error(`Input required and not supplied: ${name}`);\n    }\n    if (options && options.trimWhitespace === false) {\n        return val;\n    }\n    return val.trim();\n}\nexports.getInput = getInput;\n/**\n * Gets the values of an multiline input.  Each value is also trimmed.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string[]\n *\n */\nfunction getMultilineInput(name, options) {\n    const inputs = getInput(name, options)\n        .split('\\n')\n        .filter(x => x !== '');\n    if (options && options.trimWhitespace === false) {\n        return inputs;\n    }\n    return inputs.map(input => input.trim());\n}\nexports.getMultilineInput = getMultilineInput;\n/**\n * Gets the input value of the boolean type in the YAML 1.2 \"core schema\" specification.\n * Support boolean input list: `true | True | TRUE | false | False | FALSE` .\n * The return value is also in boolean type.\n * ref: https://yaml.org/spec/1.2/spec.html#id2804923\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   boolean\n */\nfunction getBooleanInput(name, options) {\n    const trueValue = ['true', 'True', 'TRUE'];\n    const falseValue = ['false', 'False', 'FALSE'];\n    const val = getInput(name, options);\n    if (trueValue.includes(val))\n        return true;\n    if (falseValue.includes(val))\n        return false;\n    throw new TypeError(`Input does not meet YAML 1.2 \"Core Schema\" specification: ${name}\\n` +\n        `Support boolean input list: \\`true | True | TRUE | false | False | FALSE\\``);\n}\nexports.getBooleanInput = getBooleanInput;\n/**\n * Sets the value of an output.\n *\n * @param     name     name of the output to set\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setOutput(name, value) {\n    const filePath = process.env['GITHUB_OUTPUT'] || '';\n    if (filePath) {\n        return file_command_1.issueFileCommand('OUTPUT', file_command_1.prepareKeyValueMessage(name, value));\n    }\n    process.stdout.write(os.EOL);\n    command_1.issueCommand('set-output', { name }, utils_1.toCommandValue(value));\n}\nexports.setOutput = setOutput;\n/**\n * Enables or disables the echoing of commands into stdout for the rest of the step.\n * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.\n *\n */\nfunction setCommandEcho(enabled) {\n    command_1.issue('echo', enabled ? 'on' : 'off');\n}\nexports.setCommandEcho = setCommandEcho;\n//-----------------------------------------------------------------------\n// Results\n//-----------------------------------------------------------------------\n/**\n * Sets the action status to failed.\n * When the action exits it will be with an exit code of 1\n * @param message add error issue message\n */\nfunction setFailed(message) {\n    process.exitCode = ExitCode.Failure;\n    error(message);\n}\nexports.setFailed = setFailed;\n//-----------------------------------------------------------------------\n// Logging Commands\n//-----------------------------------------------------------------------\n/**\n * Gets whether Actions Step Debug is on or not\n */\nfunction isDebug() {\n    return process.env['RUNNER_DEBUG'] === '1';\n}\nexports.isDebug = isDebug;\n/**\n * Writes debug message to user log\n * @param message debug message\n */\nfunction debug(message) {\n    command_1.issueCommand('debug', {}, message);\n}\nexports.debug = debug;\n/**\n * Adds an error issue\n * @param message error issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction error(message, properties = {}) {\n    command_1.issueCommand('error', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.error = error;\n/**\n * Adds a warning issue\n * @param message warning issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction warning(message, properties = {}) {\n    command_1.issueCommand('warning', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.warning = warning;\n/**\n * Adds a notice issue\n * @param message notice issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction notice(message, properties = {}) {\n    command_1.issueCommand('notice', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.notice = notice;\n/**\n * Writes info to log with console.log.\n * @param message info message\n */\nfunction info(message) {\n    process.stdout.write(message + os.EOL);\n}\nexports.info = info;\n/**\n * Begin an output group.\n *\n * Output until the next `groupEnd` will be foldable in this group\n *\n * @param name The name of the output group\n */\nfunction startGroup(name) {\n    command_1.issue('group', name);\n}\nexports.startGroup = startGroup;\n/**\n * End an output group.\n */\nfunction endGroup() {\n    command_1.issue('endgroup');\n}\nexports.endGroup = endGroup;\n/**\n * Wrap an asynchronous function call in a group.\n *\n * Returns the same type as the function itself.\n *\n * @param name The name of the group\n * @param fn The function to wrap in the group\n */\nfunction group(name, fn) {\n    return __awaiter(this, void 0, void 0, function* () {\n        startGroup(name);\n        let result;\n        try {\n            result = yield fn();\n        }\n        finally {\n            endGroup();\n        }\n        return result;\n    });\n}\nexports.group = group;\n//-----------------------------------------------------------------------\n// Wrapper action state\n//-----------------------------------------------------------------------\n/**\n * Saves state for current action, the state can only be retrieved by this action's post job execution.\n *\n * @param     name     name of the state to store\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction saveState(name, value) {\n    const filePath = process.env['GITHUB_STATE'] || '';\n    if (filePath) {\n        return file_command_1.issueFileCommand('STATE', file_command_1.prepareKeyValueMessage(name, value));\n    }\n    command_1.issueCommand('save-state', { name }, utils_1.toCommandValue(value));\n}\nexports.saveState = saveState;\n/**\n * Gets the value of an state set by this action's main execution.\n *\n * @param     name     name of the state to get\n * @returns   string\n */\nfunction getState(name) {\n    return process.env[`STATE_${name}`] || '';\n}\nexports.getState = getState;\nfunction getIDToken(aud) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield oidc_utils_1.OidcClient.getIDToken(aud);\n    });\n}\nexports.getIDToken = getIDToken;\n/**\n * Summary exports\n */\nvar summary_1 = require(\"./summary\");\nObject.defineProperty(exports, \"summary\", { enumerable: true, get: function () { return summary_1.summary; } });\n/**\n * @deprecated use core.summary\n */\nvar summary_2 = require(\"./summary\");\nObject.defineProperty(exports, \"markdownSummary\", { enumerable: true, get: function () { return summary_2.markdownSummary; } });\n/**\n * Path exports\n */\nvar path_utils_1 = require(\"./path-utils\");\nObject.defineProperty(exports, \"toPosixPath\", { enumerable: true, get: function () { return path_utils_1.toPosixPath; } });\nObject.defineProperty(exports, \"toWin32Path\", { enumerable: true, get: function () { return path_utils_1.toWin32Path; } });\nObject.defineProperty(exports, \"toPlatformPath\", { enumerable: true, get: function () { return path_utils_1.toPlatformPath; } });\n//# sourceMappingURL=core.js.map","\"use strict\";\n// For internal use, subject to change.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.prepareKeyValueMessage = exports.issueFileCommand = void 0;\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst fs = __importStar(require(\"fs\"));\nconst os = __importStar(require(\"os\"));\nconst uuid_1 = require(\"uuid\");\nconst utils_1 = require(\"./utils\");\nfunction issueFileCommand(command, message) {\n    const filePath = process.env[`GITHUB_${command}`];\n    if (!filePath) {\n        throw new Error(`Unable to find environment variable for file command ${command}`);\n    }\n    if (!fs.existsSync(filePath)) {\n        throw new Error(`Missing file at path: ${filePath}`);\n    }\n    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {\n        encoding: 'utf8'\n    });\n}\nexports.issueFileCommand = issueFileCommand;\nfunction prepareKeyValueMessage(key, value) {\n    const delimiter = `ghadelimiter_${uuid_1.v4()}`;\n    const convertedValue = utils_1.toCommandValue(value);\n    // These should realistically never happen, but just in case someone finds a\n    // way to exploit uuid generation let's not allow keys or values that contain\n    // the delimiter.\n    if (key.includes(delimiter)) {\n        throw new Error(`Unexpected input: name should not contain the delimiter \"${delimiter}\"`);\n    }\n    if (convertedValue.includes(delimiter)) {\n        throw new Error(`Unexpected input: value should not contain the delimiter \"${delimiter}\"`);\n    }\n    return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;\n}\nexports.prepareKeyValueMessage = prepareKeyValueMessage;\n//# sourceMappingURL=file-command.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OidcClient = void 0;\nconst http_client_1 = require(\"@actions/http-client\");\nconst auth_1 = require(\"@actions/http-client/lib/auth\");\nconst core_1 = require(\"./core\");\nclass OidcClient {\n    static createHttpClient(allowRetry = true, maxRetry = 10) {\n        const requestOptions = {\n            allowRetries: allowRetry,\n            maxRetries: maxRetry\n        };\n        return new http_client_1.HttpClient('actions/oidc-client', [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);\n    }\n    static getRequestToken() {\n        const token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];\n        if (!token) {\n            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable');\n        }\n        return token;\n    }\n    static getIDTokenUrl() {\n        const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];\n        if (!runtimeUrl) {\n            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable');\n        }\n        return runtimeUrl;\n    }\n    static getCall(id_token_url) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const httpclient = OidcClient.createHttpClient();\n            const res = yield httpclient\n                .getJson(id_token_url)\n                .catch(error => {\n                throw new Error(`Failed to get ID Token. \\n \n        Error Code : ${error.statusCode}\\n \n        Error Message: ${error.message}`);\n            });\n            const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;\n            if (!id_token) {\n                throw new Error('Response json body do not have ID Token field');\n            }\n            return id_token;\n        });\n    }\n    static getIDToken(audience) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // New ID Token is requested from action service\n                let id_token_url = OidcClient.getIDTokenUrl();\n                if (audience) {\n                    const encodedAudience = encodeURIComponent(audience);\n                    id_token_url = `${id_token_url}&audience=${encodedAudience}`;\n                }\n                core_1.debug(`ID token url is ${id_token_url}`);\n                const id_token = yield OidcClient.getCall(id_token_url);\n                core_1.setSecret(id_token);\n                return id_token;\n            }\n            catch (error) {\n                throw new Error(`Error message: ${error.message}`);\n            }\n        });\n    }\n}\nexports.OidcClient = OidcClient;\n//# sourceMappingURL=oidc-utils.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;\nconst path = __importStar(require(\"path\"));\n/**\n * toPosixPath converts the given path to the posix form. On Windows, \\\\ will be\n * replaced with /.\n *\n * @param pth. Path to transform.\n * @return string Posix path.\n */\nfunction toPosixPath(pth) {\n    return pth.replace(/[\\\\]/g, '/');\n}\nexports.toPosixPath = toPosixPath;\n/**\n * toWin32Path converts the given path to the win32 form. On Linux, / will be\n * replaced with \\\\.\n *\n * @param pth. Path to transform.\n * @return string Win32 path.\n */\nfunction toWin32Path(pth) {\n    return pth.replace(/[/]/g, '\\\\');\n}\nexports.toWin32Path = toWin32Path;\n/**\n * toPlatformPath converts the given path to a platform-specific path. It does\n * this by replacing instances of / and \\ with the platform-specific path\n * separator.\n *\n * @param pth The path to platformize.\n * @return string The platform-specific path.\n */\nfunction toPlatformPath(pth) {\n    return pth.replace(/[/\\\\]/g, path.sep);\n}\nexports.toPlatformPath = toPlatformPath;\n//# sourceMappingURL=path-utils.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;\nconst os_1 = require(\"os\");\nconst fs_1 = require(\"fs\");\nconst { access, appendFile, writeFile } = fs_1.promises;\nexports.SUMMARY_ENV_VAR = 'GITHUB_STEP_SUMMARY';\nexports.SUMMARY_DOCS_URL = 'https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary';\nclass Summary {\n    constructor() {\n        this._buffer = '';\n    }\n    /**\n     * Finds the summary file path from the environment, rejects if env var is not found or file does not exist\n     * Also checks r/w permissions.\n     *\n     * @returns step summary file path\n     */\n    filePath() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._filePath) {\n                return this._filePath;\n            }\n            const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];\n            if (!pathFromEnv) {\n                throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);\n            }\n            try {\n                yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);\n            }\n            catch (_a) {\n                throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);\n            }\n            this._filePath = pathFromEnv;\n            return this._filePath;\n        });\n    }\n    /**\n     * Wraps content in an HTML tag, adding any HTML attributes\n     *\n     * @param {string} tag HTML tag to wrap\n     * @param {string | null} content content within the tag\n     * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add\n     *\n     * @returns {string} content wrapped in HTML element\n     */\n    wrap(tag, content, attrs = {}) {\n        const htmlAttrs = Object.entries(attrs)\n            .map(([key, value]) => ` ${key}=\"${value}\"`)\n            .join('');\n        if (!content) {\n            return `<${tag}${htmlAttrs}>`;\n        }\n        return `<${tag}${htmlAttrs}>${content}</${tag}>`;\n    }\n    /**\n     * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.\n     *\n     * @param {SummaryWriteOptions} [options] (optional) options for write operation\n     *\n     * @returns {Promise<Summary>} summary instance\n     */\n    write(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);\n            const filePath = yield this.filePath();\n            const writeFunc = overwrite ? writeFile : appendFile;\n            yield writeFunc(filePath, this._buffer, { encoding: 'utf8' });\n            return this.emptyBuffer();\n        });\n    }\n    /**\n     * Clears the summary buffer and wipes the summary file\n     *\n     * @returns {Summary} summary instance\n     */\n    clear() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.emptyBuffer().write({ overwrite: true });\n        });\n    }\n    /**\n     * Returns the current summary buffer as a string\n     *\n     * @returns {string} string of summary buffer\n     */\n    stringify() {\n        return this._buffer;\n    }\n    /**\n     * If the summary buffer is empty\n     *\n     * @returns {boolen} true if the buffer is empty\n     */\n    isEmptyBuffer() {\n        return this._buffer.length === 0;\n    }\n    /**\n     * Resets the summary buffer without writing to summary file\n     *\n     * @returns {Summary} summary instance\n     */\n    emptyBuffer() {\n        this._buffer = '';\n        return this;\n    }\n    /**\n     * Adds raw text to the summary buffer\n     *\n     * @param {string} text content to add\n     * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)\n     *\n     * @returns {Summary} summary instance\n     */\n    addRaw(text, addEOL = false) {\n        this._buffer += text;\n        return addEOL ? this.addEOL() : this;\n    }\n    /**\n     * Adds the operating system-specific end-of-line marker to the buffer\n     *\n     * @returns {Summary} summary instance\n     */\n    addEOL() {\n        return this.addRaw(os_1.EOL);\n    }\n    /**\n     * Adds an HTML codeblock to the summary buffer\n     *\n     * @param {string} code content to render within fenced code block\n     * @param {string} lang (optional) language to syntax highlight code\n     *\n     * @returns {Summary} summary instance\n     */\n    addCodeBlock(code, lang) {\n        const attrs = Object.assign({}, (lang && { lang }));\n        const element = this.wrap('pre', this.wrap('code', code), attrs);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML list to the summary buffer\n     *\n     * @param {string[]} items list of items to render\n     * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)\n     *\n     * @returns {Summary} summary instance\n     */\n    addList(items, ordered = false) {\n        const tag = ordered ? 'ol' : 'ul';\n        const listItems = items.map(item => this.wrap('li', item)).join('');\n        const element = this.wrap(tag, listItems);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML table to the summary buffer\n     *\n     * @param {SummaryTableCell[]} rows table rows\n     *\n     * @returns {Summary} summary instance\n     */\n    addTable(rows) {\n        const tableBody = rows\n            .map(row => {\n            const cells = row\n                .map(cell => {\n                if (typeof cell === 'string') {\n                    return this.wrap('td', cell);\n                }\n                const { header, data, colspan, rowspan } = cell;\n                const tag = header ? 'th' : 'td';\n                const attrs = Object.assign(Object.assign({}, (colspan && { colspan })), (rowspan && { rowspan }));\n                return this.wrap(tag, data, attrs);\n            })\n                .join('');\n            return this.wrap('tr', cells);\n        })\n            .join('');\n        const element = this.wrap('table', tableBody);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds a collapsable HTML details element to the summary buffer\n     *\n     * @param {string} label text for the closed state\n     * @param {string} content collapsable content\n     *\n     * @returns {Summary} summary instance\n     */\n    addDetails(label, content) {\n        const element = this.wrap('details', this.wrap('summary', label) + content);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML image tag to the summary buffer\n     *\n     * @param {string} src path to the image you to embed\n     * @param {string} alt text description of the image\n     * @param {SummaryImageOptions} options (optional) addition image attributes\n     *\n     * @returns {Summary} summary instance\n     */\n    addImage(src, alt, options) {\n        const { width, height } = options || {};\n        const attrs = Object.assign(Object.assign({}, (width && { width })), (height && { height }));\n        const element = this.wrap('img', null, Object.assign({ src, alt }, attrs));\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML section heading element\n     *\n     * @param {string} text heading text\n     * @param {number | string} [level=1] (optional) the heading level, default: 1\n     *\n     * @returns {Summary} summary instance\n     */\n    addHeading(text, level) {\n        const tag = `h${level}`;\n        const allowedTag = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tag)\n            ? tag\n            : 'h1';\n        const element = this.wrap(allowedTag, text);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML thematic break (<hr>) to the summary buffer\n     *\n     * @returns {Summary} summary instance\n     */\n    addSeparator() {\n        const element = this.wrap('hr', null);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML line break (<br>) to the summary buffer\n     *\n     * @returns {Summary} summary instance\n     */\n    addBreak() {\n        const element = this.wrap('br', null);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML blockquote to the summary buffer\n     *\n     * @param {string} text quote text\n     * @param {string} cite (optional) citation url\n     *\n     * @returns {Summary} summary instance\n     */\n    addQuote(text, cite) {\n        const attrs = Object.assign({}, (cite && { cite }));\n        const element = this.wrap('blockquote', text, attrs);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML anchor tag to the summary buffer\n     *\n     * @param {string} text link text/content\n     * @param {string} href hyperlink\n     *\n     * @returns {Summary} summary instance\n     */\n    addLink(text, href) {\n        const element = this.wrap('a', text, { href });\n        return this.addRaw(element).addEOL();\n    }\n}\nconst _summary = new Summary();\n/**\n * @deprecated use `core.summary`\n */\nexports.markdownSummary = _summary;\nexports.summary = _summary;\n//# sourceMappingURL=summary.js.map","\"use strict\";\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toCommandProperties = exports.toCommandValue = void 0;\n/**\n * Sanitizes an input into a string so it can be passed into issueCommand safely\n * @param input input to sanitize into a string\n */\nfunction toCommandValue(input) {\n    if (input === null || input === undefined) {\n        return '';\n    }\n    else if (typeof input === 'string' || input instanceof String) {\n        return input;\n    }\n    return JSON.stringify(input);\n}\nexports.toCommandValue = toCommandValue;\n/**\n *\n * @param annotationProperties\n * @returns The command properties to send with the actual annotation command\n * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646\n */\nfunction toCommandProperties(annotationProperties) {\n    if (!Object.keys(annotationProperties).length) {\n        return {};\n    }\n    return {\n        title: annotationProperties.title,\n        file: annotationProperties.file,\n        line: annotationProperties.startLine,\n        endLine: annotationProperties.endLine,\n        col: annotationProperties.startColumn,\n        endColumn: annotationProperties.endColumn\n    };\n}\nexports.toCommandProperties = toCommandProperties;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;\nclass BasicCredentialHandler {\n    constructor(username, password) {\n        this.username = username;\n        this.password = password;\n    }\n    prepareRequest(options) {\n        if (!options.headers) {\n            throw Error('The request has no headers');\n        }\n        options.headers['Authorization'] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString('base64')}`;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication() {\n        return false;\n    }\n    handleAuthentication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('not implemented');\n        });\n    }\n}\nexports.BasicCredentialHandler = BasicCredentialHandler;\nclass BearerCredentialHandler {\n    constructor(token) {\n        this.token = token;\n    }\n    // currently implements pre-authorization\n    // TODO: support preAuth = false where it hooks on 401\n    prepareRequest(options) {\n        if (!options.headers) {\n            throw Error('The request has no headers');\n        }\n        options.headers['Authorization'] = `Bearer ${this.token}`;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication() {\n        return false;\n    }\n    handleAuthentication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('not implemented');\n        });\n    }\n}\nexports.BearerCredentialHandler = BearerCredentialHandler;\nclass PersonalAccessTokenCredentialHandler {\n    constructor(token) {\n        this.token = token;\n    }\n    // currently implements pre-authorization\n    // TODO: support preAuth = false where it hooks on 401\n    prepareRequest(options) {\n        if (!options.headers) {\n            throw Error('The request has no headers');\n        }\n        options.headers['Authorization'] = `Basic ${Buffer.from(`PAT:${this.token}`).toString('base64')}`;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication() {\n        return false;\n    }\n    handleAuthentication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('not implemented');\n        });\n    }\n}\nexports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;\n//# sourceMappingURL=auth.js.map","\"use strict\";\n/* eslint-disable @typescript-eslint/no-explicit-any */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;\nconst http = __importStar(require(\"http\"));\nconst https = __importStar(require(\"https\"));\nconst pm = __importStar(require(\"./proxy\"));\nconst tunnel = __importStar(require(\"tunnel\"));\nvar HttpCodes;\n(function (HttpCodes) {\n    HttpCodes[HttpCodes[\"OK\"] = 200] = \"OK\";\n    HttpCodes[HttpCodes[\"MultipleChoices\"] = 300] = \"MultipleChoices\";\n    HttpCodes[HttpCodes[\"MovedPermanently\"] = 301] = \"MovedPermanently\";\n    HttpCodes[HttpCodes[\"ResourceMoved\"] = 302] = \"ResourceMoved\";\n    HttpCodes[HttpCodes[\"SeeOther\"] = 303] = \"SeeOther\";\n    HttpCodes[HttpCodes[\"NotModified\"] = 304] = \"NotModified\";\n    HttpCodes[HttpCodes[\"UseProxy\"] = 305] = \"UseProxy\";\n    HttpCodes[HttpCodes[\"SwitchProxy\"] = 306] = \"SwitchProxy\";\n    HttpCodes[HttpCodes[\"TemporaryRedirect\"] = 307] = \"TemporaryRedirect\";\n    HttpCodes[HttpCodes[\"PermanentRedirect\"] = 308] = \"PermanentRedirect\";\n    HttpCodes[HttpCodes[\"BadRequest\"] = 400] = \"BadRequest\";\n    HttpCodes[HttpCodes[\"Unauthorized\"] = 401] = \"Unauthorized\";\n    HttpCodes[HttpCodes[\"PaymentRequired\"] = 402] = \"PaymentRequired\";\n    HttpCodes[HttpCodes[\"Forbidden\"] = 403] = \"Forbidden\";\n    HttpCodes[HttpCodes[\"NotFound\"] = 404] = \"NotFound\";\n    HttpCodes[HttpCodes[\"MethodNotAllowed\"] = 405] = \"MethodNotAllowed\";\n    HttpCodes[HttpCodes[\"NotAcceptable\"] = 406] = \"NotAcceptable\";\n    HttpCodes[HttpCodes[\"ProxyAuthenticationRequired\"] = 407] = \"ProxyAuthenticationRequired\";\n    HttpCodes[HttpCodes[\"RequestTimeout\"] = 408] = \"RequestTimeout\";\n    HttpCodes[HttpCodes[\"Conflict\"] = 409] = \"Conflict\";\n    HttpCodes[HttpCodes[\"Gone\"] = 410] = \"Gone\";\n    HttpCodes[HttpCodes[\"TooManyRequests\"] = 429] = \"TooManyRequests\";\n    HttpCodes[HttpCodes[\"InternalServerError\"] = 500] = \"InternalServerError\";\n    HttpCodes[HttpCodes[\"NotImplemented\"] = 501] = \"NotImplemented\";\n    HttpCodes[HttpCodes[\"BadGateway\"] = 502] = \"BadGateway\";\n    HttpCodes[HttpCodes[\"ServiceUnavailable\"] = 503] = \"ServiceUnavailable\";\n    HttpCodes[HttpCodes[\"GatewayTimeout\"] = 504] = \"GatewayTimeout\";\n})(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));\nvar Headers;\n(function (Headers) {\n    Headers[\"Accept\"] = \"accept\";\n    Headers[\"ContentType\"] = \"content-type\";\n})(Headers = exports.Headers || (exports.Headers = {}));\nvar MediaTypes;\n(function (MediaTypes) {\n    MediaTypes[\"ApplicationJson\"] = \"application/json\";\n})(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));\n/**\n * Returns the proxy URL, depending upon the supplied url and proxy environment variables.\n * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n */\nfunction getProxyUrl(serverUrl) {\n    const proxyUrl = pm.getProxyUrl(new URL(serverUrl));\n    return proxyUrl ? proxyUrl.href : '';\n}\nexports.getProxyUrl = getProxyUrl;\nconst HttpRedirectCodes = [\n    HttpCodes.MovedPermanently,\n    HttpCodes.ResourceMoved,\n    HttpCodes.SeeOther,\n    HttpCodes.TemporaryRedirect,\n    HttpCodes.PermanentRedirect\n];\nconst HttpResponseRetryCodes = [\n    HttpCodes.BadGateway,\n    HttpCodes.ServiceUnavailable,\n    HttpCodes.GatewayTimeout\n];\nconst RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];\nconst ExponentialBackoffCeiling = 10;\nconst ExponentialBackoffTimeSlice = 5;\nclass HttpClientError extends Error {\n    constructor(message, statusCode) {\n        super(message);\n        this.name = 'HttpClientError';\n        this.statusCode = statusCode;\n        Object.setPrototypeOf(this, HttpClientError.prototype);\n    }\n}\nexports.HttpClientError = HttpClientError;\nclass HttpClientResponse {\n    constructor(message) {\n        this.message = message;\n    }\n    readBody() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\n                let output = Buffer.alloc(0);\n                this.message.on('data', (chunk) => {\n                    output = Buffer.concat([output, chunk]);\n                });\n                this.message.on('end', () => {\n                    resolve(output.toString());\n                });\n            }));\n        });\n    }\n    readBodyBuffer() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\n                const chunks = [];\n                this.message.on('data', (chunk) => {\n                    chunks.push(chunk);\n                });\n                this.message.on('end', () => {\n                    resolve(Buffer.concat(chunks));\n                });\n            }));\n        });\n    }\n}\nexports.HttpClientResponse = HttpClientResponse;\nfunction isHttps(requestUrl) {\n    const parsedUrl = new URL(requestUrl);\n    return parsedUrl.protocol === 'https:';\n}\nexports.isHttps = isHttps;\nclass HttpClient {\n    constructor(userAgent, handlers, requestOptions) {\n        this._ignoreSslError = false;\n        this._allowRedirects = true;\n        this._allowRedirectDowngrade = false;\n        this._maxRedirects = 50;\n        this._allowRetries = false;\n        this._maxRetries = 1;\n        this._keepAlive = false;\n        this._disposed = false;\n        this.userAgent = userAgent;\n        this.handlers = handlers || [];\n        this.requestOptions = requestOptions;\n        if (requestOptions) {\n            if (requestOptions.ignoreSslError != null) {\n                this._ignoreSslError = requestOptions.ignoreSslError;\n            }\n            this._socketTimeout = requestOptions.socketTimeout;\n            if (requestOptions.allowRedirects != null) {\n                this._allowRedirects = requestOptions.allowRedirects;\n            }\n            if (requestOptions.allowRedirectDowngrade != null) {\n                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;\n            }\n            if (requestOptions.maxRedirects != null) {\n                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);\n            }\n            if (requestOptions.keepAlive != null) {\n                this._keepAlive = requestOptions.keepAlive;\n            }\n            if (requestOptions.allowRetries != null) {\n                this._allowRetries = requestOptions.allowRetries;\n            }\n            if (requestOptions.maxRetries != null) {\n                this._maxRetries = requestOptions.maxRetries;\n            }\n        }\n    }\n    options(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    get(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('GET', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    del(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('DELETE', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    post(requestUrl, data, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('POST', requestUrl, data, additionalHeaders || {});\n        });\n    }\n    patch(requestUrl, data, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('PATCH', requestUrl, data, additionalHeaders || {});\n        });\n    }\n    put(requestUrl, data, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('PUT', requestUrl, data, additionalHeaders || {});\n        });\n    }\n    head(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('HEAD', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    sendStream(verb, requestUrl, stream, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request(verb, requestUrl, stream, additionalHeaders);\n        });\n    }\n    /**\n     * Gets a typed object from an endpoint\n     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise\n     */\n    getJson(requestUrl, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            const res = yield this.get(requestUrl, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    postJson(requestUrl, obj, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = JSON.stringify(obj, null, 2);\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n            const res = yield this.post(requestUrl, data, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    putJson(requestUrl, obj, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = JSON.stringify(obj, null, 2);\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n            const res = yield this.put(requestUrl, data, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    patchJson(requestUrl, obj, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = JSON.stringify(obj, null, 2);\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n            const res = yield this.patch(requestUrl, data, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    /**\n     * Makes a raw http request.\n     * All other methods such as get, post, patch, and request ultimately call this.\n     * Prefer get, del, post and patch\n     */\n    request(verb, requestUrl, data, headers) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._disposed) {\n                throw new Error('Client has already been disposed.');\n            }\n            const parsedUrl = new URL(requestUrl);\n            let info = this._prepareRequest(verb, parsedUrl, headers);\n            // Only perform retries on reads since writes may not be idempotent.\n            const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb)\n                ? this._maxRetries + 1\n                : 1;\n            let numTries = 0;\n            let response;\n            do {\n                response = yield this.requestRaw(info, data);\n                // Check if it's an authentication challenge\n                if (response &&\n                    response.message &&\n                    response.message.statusCode === HttpCodes.Unauthorized) {\n                    let authenticationHandler;\n                    for (const handler of this.handlers) {\n                        if (handler.canHandleAuthentication(response)) {\n                            authenticationHandler = handler;\n                            break;\n                        }\n                    }\n                    if (authenticationHandler) {\n                        return authenticationHandler.handleAuthentication(this, info, data);\n                    }\n                    else {\n                        // We have received an unauthorized response but have no handlers to handle it.\n                        // Let the response return to the caller.\n                        return response;\n                    }\n                }\n                let redirectsRemaining = this._maxRedirects;\n                while (response.message.statusCode &&\n                    HttpRedirectCodes.includes(response.message.statusCode) &&\n                    this._allowRedirects &&\n                    redirectsRemaining > 0) {\n                    const redirectUrl = response.message.headers['location'];\n                    if (!redirectUrl) {\n                        // if there's no location to redirect to, we won't\n                        break;\n                    }\n                    const parsedRedirectUrl = new URL(redirectUrl);\n                    if (parsedUrl.protocol === 'https:' &&\n                        parsedUrl.protocol !== parsedRedirectUrl.protocol &&\n                        !this._allowRedirectDowngrade) {\n                        throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');\n                    }\n                    // we need to finish reading the response before reassigning response\n                    // which will leak the open socket.\n                    yield response.readBody();\n                    // strip authorization header if redirected to a different hostname\n                    if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {\n                        for (const header in headers) {\n                            // header names are case insensitive\n                            if (header.toLowerCase() === 'authorization') {\n                                delete headers[header];\n                            }\n                        }\n                    }\n                    // let's make the request with the new redirectUrl\n                    info = this._prepareRequest(verb, parsedRedirectUrl, headers);\n                    response = yield this.requestRaw(info, data);\n                    redirectsRemaining--;\n                }\n                if (!response.message.statusCode ||\n                    !HttpResponseRetryCodes.includes(response.message.statusCode)) {\n                    // If not a retry code, return immediately instead of retrying\n                    return response;\n                }\n                numTries += 1;\n                if (numTries < maxTries) {\n                    yield response.readBody();\n                    yield this._performExponentialBackoff(numTries);\n                }\n            } while (numTries < maxTries);\n            return response;\n        });\n    }\n    /**\n     * Needs to be called if keepAlive is set to true in request options.\n     */\n    dispose() {\n        if (this._agent) {\n            this._agent.destroy();\n        }\n        this._disposed = true;\n    }\n    /**\n     * Raw request.\n     * @param info\n     * @param data\n     */\n    requestRaw(info, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                function callbackForResult(err, res) {\n                    if (err) {\n                        reject(err);\n                    }\n                    else if (!res) {\n                        // If `err` is not passed, then `res` must be passed.\n                        reject(new Error('Unknown error'));\n                    }\n                    else {\n                        resolve(res);\n                    }\n                }\n                this.requestRawWithCallback(info, data, callbackForResult);\n            });\n        });\n    }\n    /**\n     * Raw request with callback.\n     * @param info\n     * @param data\n     * @param onResult\n     */\n    requestRawWithCallback(info, data, onResult) {\n        if (typeof data === 'string') {\n            if (!info.options.headers) {\n                info.options.headers = {};\n            }\n            info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');\n        }\n        let callbackCalled = false;\n        function handleResult(err, res) {\n            if (!callbackCalled) {\n                callbackCalled = true;\n                onResult(err, res);\n            }\n        }\n        const req = info.httpModule.request(info.options, (msg) => {\n            const res = new HttpClientResponse(msg);\n            handleResult(undefined, res);\n        });\n        let socket;\n        req.on('socket', sock => {\n            socket = sock;\n        });\n        // If we ever get disconnected, we want the socket to timeout eventually\n        req.setTimeout(this._socketTimeout || 3 * 60000, () => {\n            if (socket) {\n                socket.end();\n            }\n            handleResult(new Error(`Request timeout: ${info.options.path}`));\n        });\n        req.on('error', function (err) {\n            // err has statusCode property\n            // res should have headers\n            handleResult(err);\n        });\n        if (data && typeof data === 'string') {\n            req.write(data, 'utf8');\n        }\n        if (data && typeof data !== 'string') {\n            data.on('close', function () {\n                req.end();\n            });\n            data.pipe(req);\n        }\n        else {\n            req.end();\n        }\n    }\n    /**\n     * Gets an http agent. This function is useful when you need an http agent that handles\n     * routing through a proxy server - depending upon the url and proxy environment variables.\n     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n     */\n    getAgent(serverUrl) {\n        const parsedUrl = new URL(serverUrl);\n        return this._getAgent(parsedUrl);\n    }\n    _prepareRequest(method, requestUrl, headers) {\n        const info = {};\n        info.parsedUrl = requestUrl;\n        const usingSsl = info.parsedUrl.protocol === 'https:';\n        info.httpModule = usingSsl ? https : http;\n        const defaultPort = usingSsl ? 443 : 80;\n        info.options = {};\n        info.options.host = info.parsedUrl.hostname;\n        info.options.port = info.parsedUrl.port\n            ? parseInt(info.parsedUrl.port)\n            : defaultPort;\n        info.options.path =\n            (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');\n        info.options.method = method;\n        info.options.headers = this._mergeHeaders(headers);\n        if (this.userAgent != null) {\n            info.options.headers['user-agent'] = this.userAgent;\n        }\n        info.options.agent = this._getAgent(info.parsedUrl);\n        // gives handlers an opportunity to participate\n        if (this.handlers) {\n            for (const handler of this.handlers) {\n                handler.prepareRequest(info.options);\n            }\n        }\n        return info;\n    }\n    _mergeHeaders(headers) {\n        if (this.requestOptions && this.requestOptions.headers) {\n            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));\n        }\n        return lowercaseKeys(headers || {});\n    }\n    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {\n        let clientHeader;\n        if (this.requestOptions && this.requestOptions.headers) {\n            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];\n        }\n        return additionalHeaders[header] || clientHeader || _default;\n    }\n    _getAgent(parsedUrl) {\n        let agent;\n        const proxyUrl = pm.getProxyUrl(parsedUrl);\n        const useProxy = proxyUrl && proxyUrl.hostname;\n        if (this._keepAlive && useProxy) {\n            agent = this._proxyAgent;\n        }\n        if (this._keepAlive && !useProxy) {\n            agent = this._agent;\n        }\n        // if agent is already assigned use that agent.\n        if (agent) {\n            return agent;\n        }\n        const usingSsl = parsedUrl.protocol === 'https:';\n        let maxSockets = 100;\n        if (this.requestOptions) {\n            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;\n        }\n        // This is `useProxy` again, but we need to check `proxyURl` directly for TypeScripts's flow analysis.\n        if (proxyUrl && proxyUrl.hostname) {\n            const agentOptions = {\n                maxSockets,\n                keepAlive: this._keepAlive,\n                proxy: Object.assign(Object.assign({}, ((proxyUrl.username || proxyUrl.password) && {\n                    proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`\n                })), { host: proxyUrl.hostname, port: proxyUrl.port })\n            };\n            let tunnelAgent;\n            const overHttps = proxyUrl.protocol === 'https:';\n            if (usingSsl) {\n                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;\n            }\n            else {\n                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;\n            }\n            agent = tunnelAgent(agentOptions);\n            this._proxyAgent = agent;\n        }\n        // if reusing agent across request and tunneling agent isn't assigned create a new agent\n        if (this._keepAlive && !agent) {\n            const options = { keepAlive: this._keepAlive, maxSockets };\n            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);\n            this._agent = agent;\n        }\n        // if not using private agent and tunnel agent isn't setup then use global agent\n        if (!agent) {\n            agent = usingSsl ? https.globalAgent : http.globalAgent;\n        }\n        if (usingSsl && this._ignoreSslError) {\n            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process\n            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options\n            // we have to cast it to any and change it directly\n            agent.options = Object.assign(agent.options || {}, {\n                rejectUnauthorized: false\n            });\n        }\n        return agent;\n    }\n    _performExponentialBackoff(retryNumber) {\n        return __awaiter(this, void 0, void 0, function* () {\n            retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);\n            const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);\n            return new Promise(resolve => setTimeout(() => resolve(), ms));\n        });\n    }\n    _processResponse(res, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                const statusCode = res.message.statusCode || 0;\n                const response = {\n                    statusCode,\n                    result: null,\n                    headers: {}\n                };\n                // not found leads to null obj returned\n                if (statusCode === HttpCodes.NotFound) {\n                    resolve(response);\n                }\n                // get the result from the body\n                function dateTimeDeserializer(key, value) {\n                    if (typeof value === 'string') {\n                        const a = new Date(value);\n                        if (!isNaN(a.valueOf())) {\n                            return a;\n                        }\n                    }\n                    return value;\n                }\n                let obj;\n                let contents;\n                try {\n                    contents = yield res.readBody();\n                    if (contents && contents.length > 0) {\n                        if (options && options.deserializeDates) {\n                            obj = JSON.parse(contents, dateTimeDeserializer);\n                        }\n                        else {\n                            obj = JSON.parse(contents);\n                        }\n                        response.result = obj;\n                    }\n                    response.headers = res.message.headers;\n                }\n                catch (err) {\n                    // Invalid resource (contents not json);  leaving result obj null\n                }\n                // note that 3xx redirects are handled by the http layer.\n                if (statusCode > 299) {\n                    let msg;\n                    // if exception/error in body, attempt to get better error\n                    if (obj && obj.message) {\n                        msg = obj.message;\n                    }\n                    else if (contents && contents.length > 0) {\n                        // it may be the case that the exception is in the body message as string\n                        msg = contents;\n                    }\n                    else {\n                        msg = `Failed request: (${statusCode})`;\n                    }\n                    const err = new HttpClientError(msg, statusCode);\n                    err.result = response.result;\n                    reject(err);\n                }\n                else {\n                    resolve(response);\n                }\n            }));\n        });\n    }\n}\nexports.HttpClient = HttpClient;\nconst lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkBypass = exports.getProxyUrl = void 0;\nfunction getProxyUrl(reqUrl) {\n    const usingSsl = reqUrl.protocol === 'https:';\n    if (checkBypass(reqUrl)) {\n        return undefined;\n    }\n    const proxyVar = (() => {\n        if (usingSsl) {\n            return process.env['https_proxy'] || process.env['HTTPS_PROXY'];\n        }\n        else {\n            return process.env['http_proxy'] || process.env['HTTP_PROXY'];\n        }\n    })();\n    if (proxyVar) {\n        try {\n            return new URL(proxyVar);\n        }\n        catch (_a) {\n            if (!proxyVar.startsWith('http://') && !proxyVar.startsWith('https://'))\n                return new URL(`http://${proxyVar}`);\n        }\n    }\n    else {\n        return undefined;\n    }\n}\nexports.getProxyUrl = getProxyUrl;\nfunction checkBypass(reqUrl) {\n    if (!reqUrl.hostname) {\n        return false;\n    }\n    const reqHost = reqUrl.hostname;\n    if (isLoopbackAddress(reqHost)) {\n        return true;\n    }\n    const noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';\n    if (!noProxy) {\n        return false;\n    }\n    // Determine the request port\n    let reqPort;\n    if (reqUrl.port) {\n        reqPort = Number(reqUrl.port);\n    }\n    else if (reqUrl.protocol === 'http:') {\n        reqPort = 80;\n    }\n    else if (reqUrl.protocol === 'https:') {\n        reqPort = 443;\n    }\n    // Format the request hostname and hostname with port\n    const upperReqHosts = [reqUrl.hostname.toUpperCase()];\n    if (typeof reqPort === 'number') {\n        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);\n    }\n    // Compare request host against noproxy\n    for (const upperNoProxyItem of noProxy\n        .split(',')\n        .map(x => x.trim().toUpperCase())\n        .filter(x => x)) {\n        if (upperNoProxyItem === '*' ||\n            upperReqHosts.some(x => x === upperNoProxyItem ||\n                x.endsWith(`.${upperNoProxyItem}`) ||\n                (upperNoProxyItem.startsWith('.') &&\n                    x.endsWith(`${upperNoProxyItem}`)))) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.checkBypass = checkBypass;\nfunction isLoopbackAddress(host) {\n    const hostLower = host.toLowerCase();\n    return (hostLower === 'localhost' ||\n        hostLower.startsWith('127.') ||\n        hostLower.startsWith('[::1]') ||\n        hostLower.startsWith('[0:0:0:0:0:0:0:1]'));\n}\n//# sourceMappingURL=proxy.js.map","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst AlertInterfaces = require(\"./interfaces/AlertInterfaces\");\r\nclass AlertApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-Alert-api', options);\r\n    }\r\n    /**\r\n     * Get an alert.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} alertId - ID of alert to retrieve\r\n     * @param {string} repository - Name or id  of a repository that alert is part of\r\n     * @param {string} ref\r\n     * @param {AlertInterfaces.ExpandOption} expand - Expand alert attributes. Possible options are {ValidationFingerprint, None}\r\n     */\r\n    getAlert(project, alertId, repository, ref, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    alertId: alertId,\r\n                    repository: repository\r\n                };\r\n                let queryValues = {\r\n                    ref: ref,\r\n                    expand: expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Alert\", \"e21b4630-b7d2-4031-99e3-3ad328cc4a7f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, AlertInterfaces.TypeInfo.Alert, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get alerts for a repository\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repository - The name or ID of the repository\r\n     * @param {number} top - The maximum number of alerts to return\r\n     * @param {string} orderBy - Must be \"id\" \"firstSeen\" \"lastSeen\" \"fixedOn\" or \"severity\"  Defaults to \"id\"\r\n     * @param {AlertInterfaces.SearchCriteria} criteria - Options to limit the alerts returned\r\n     * @param {string} continuationToken - If there are more alerts than can be returned, a continuation token is placed in the \"x-ms-continuationtoken\" header.  Use that token here to get the next page of alerts\r\n     */\r\n    getAlerts(project, repository, top, orderBy, criteria, continuationToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repository: repository\r\n                };\r\n                let queryValues = {\r\n                    top: top,\r\n                    orderBy: orderBy,\r\n                    criteria: criteria,\r\n                    continuationToken: continuationToken,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Alert\", \"e21b4630-b7d2-4031-99e3-3ad328cc4a7f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, AlertInterfaces.TypeInfo.Alert, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get an alert.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} alertId - ID of alert to retrieve\r\n     * @param {string} repository - Name or id  of a repository that alert is part of\r\n     * @param {string} ref\r\n     * @param {AlertInterfaces.ExpandOption} expand - Expand alert attributes. Possible options are {ValidationFingerprint, None}\r\n     */\r\n    getAlertSarif(project, alertId, repository, ref, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    alertId: alertId,\r\n                    repository: repository\r\n                };\r\n                let queryValues = {\r\n                    ref: ref,\r\n                    expand: expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Alert\", \"e21b4630-b7d2-4031-99e3-3ad328cc4a7f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update the status of an alert\r\n     *\r\n     * @param {AlertInterfaces.AlertStateUpdate} stateUpdate - The new status of the alert\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} alertId - The ID of the alert\r\n     * @param {string} repository - The name or ID of the repository\r\n     */\r\n    updateAlert(stateUpdate, project, alertId, repository) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    alertId: alertId,\r\n                    repository: repository\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Alert\", \"e21b4630-b7d2-4031-99e3-3ad328cc4a7f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, stateUpdate, options);\r\n                    let ret = this.formatResponse(res.result, AlertInterfaces.TypeInfo.Alert, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get instances of an alert.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} alertId - ID of alert to retrieve\r\n     * @param {string} repository - Name or id of a repository that alert is part of\r\n     * @param {string} ref\r\n     */\r\n    getAlertInstances(project, alertId, repository, ref) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    alertId: alertId,\r\n                    repository: repository\r\n                };\r\n                let queryValues = {\r\n                    ref: ref,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Alert\", \"f451ba96-0e95-458a-8dd5-3df894770a49\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, AlertInterfaces.TypeInfo.AlertAnalysisInstance, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Upload a Sarif containing security alerts\r\n     *\r\n     * @param {NodeJS.ReadableStream} contentStream - Content to upload\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repository - The name or ID of a repository\r\n     */\r\n    uploadSarif(customHeaders, contentStream, project, repository) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repository: repository\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Alert\", \"2a141cae-a50d-4c22-b41b-13f77748d035\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"POST\", url, contentStream, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repository\r\n     * @param {AlertInterfaces.AlertType} alertType\r\n     */\r\n    getUxFilters(project, repository, alertType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (alertType == null) {\r\n                throw new TypeError('alertType can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repository: repository\r\n                };\r\n                let queryValues = {\r\n                    alertType: alertType,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Alert\", \"8f90675b-f794-434d-8f2c-cfae0a11c02a\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, AlertInterfaces.TypeInfo.UxFilters, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the status of the Sarif processing job\r\n     *\r\n     * @param {number} sarifId - Sarif ID returned when the Sarif was uploaded\r\n     */\r\n    getSarif(sarifId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    sarifId: sarifId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Alert\", \"a04689e7-0f81-48a2-8d18-40654c47494c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, AlertInterfaces.TypeInfo.SarifUploadStatus, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nexports.AlertApi = AlertApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst BuildInterfaces = require(\"./interfaces/BuildInterfaces\");\r\nclass BuildApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-Build-api', options);\r\n    }\r\n    /**\r\n     * Associates an artifact with a build.\r\n     *\r\n     * @param {BuildInterfaces.BuildArtifact} artifact - The artifact.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     */\r\n    createArtifact(artifact, project, buildId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.5\", \"build\", \"1db06c96-014e-44e1-ac91-90b2d4b3e984\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, artifact, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a specific artifact for a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {string} artifactName - The name of the artifact.\r\n     */\r\n    getArtifact(project, buildId, artifactName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (artifactName == null) {\r\n                throw new TypeError('artifactName can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                let queryValues = {\r\n                    artifactName: artifactName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.5\", \"build\", \"1db06c96-014e-44e1-ac91-90b2d4b3e984\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a specific artifact for a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {string} artifactName - The name of the artifact.\r\n     */\r\n    getArtifactContentZip(project, buildId, artifactName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (artifactName == null) {\r\n                throw new TypeError('artifactName can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                let queryValues = {\r\n                    artifactName: artifactName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.5\", \"build\", \"1db06c96-014e-44e1-ac91-90b2d4b3e984\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets all artifacts for a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     */\r\n    getArtifacts(project, buildId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.5\", \"build\", \"1db06c96-014e-44e1-ac91-90b2d4b3e984\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a file from the build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {string} artifactName - The name of the artifact.\r\n     * @param {string} fileId - The primary key for the file.\r\n     * @param {string} fileName - The name that the file will be set to.\r\n     */\r\n    getFile(project, buildId, artifactName, fileId, fileName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (artifactName == null) {\r\n                throw new TypeError('artifactName can not be null or undefined');\r\n            }\r\n            if (fileId == null) {\r\n                throw new TypeError('fileId can not be null or undefined');\r\n            }\r\n            if (fileName == null) {\r\n                throw new TypeError('fileName can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                let queryValues = {\r\n                    artifactName: artifactName,\r\n                    fileId: fileId,\r\n                    fileName: fileName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.5\", \"build\", \"1db06c96-014e-44e1-ac91-90b2d4b3e984\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the list of attachments of a specific type that are associated with a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {string} type - The type of attachment.\r\n     */\r\n    getAttachments(project, buildId, type) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId,\r\n                    type: type\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"f2192269-89fa-4f94-baf6-8fb128c55159\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a specific attachment.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {string} timelineId - The ID of the timeline.\r\n     * @param {string} recordId - The ID of the timeline record.\r\n     * @param {string} type - The type of the attachment.\r\n     * @param {string} name - The name of the attachment.\r\n     */\r\n    getAttachment(project, buildId, timelineId, recordId, type, name) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId,\r\n                    timelineId: timelineId,\r\n                    recordId: recordId,\r\n                    type: type,\r\n                    name: name\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"af5122d3-3438-485e-a25a-2dbbfde84ee6\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {BuildInterfaces.DefinitionResourceReference[]} resources\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    authorizeProjectResources(resources, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"398c85bc-81aa-4822-947c-a194a05f0fef\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, resources, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} type\r\n     * @param {string} id\r\n     */\r\n    getProjectResources(project, type, id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    type: type,\r\n                    id: id,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"398c85bc-81aa-4822-947c-a194a05f0fef\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a badge that indicates the status of the most recent build for a definition. Note that this API is deprecated. Prefer StatusBadgeController.GetStatusBadge.\r\n     *\r\n     * @param {string} project - The project ID or name.\r\n     * @param {number} definitionId - The ID of the definition.\r\n     * @param {string} branchName - The name of the branch.\r\n     */\r\n    getBadge(project, definitionId, branchName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                let queryValues = {\r\n                    branchName: branchName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"de6a4df8-22cd-44ee-af2d-39f6aa7a4261\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a list of branches for the given source code repository.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} providerName - The name of the source provider.\r\n     * @param {string} serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.\r\n     * @param {string} repository - The vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories.\r\n     * @param {string} branchName - If supplied, the name of the branch to check for specifically.\r\n     */\r\n    listBranches(project, providerName, serviceEndpointId, repository, branchName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    providerName: providerName\r\n                };\r\n                let queryValues = {\r\n                    serviceEndpointId: serviceEndpointId,\r\n                    repository: repository,\r\n                    branchName: branchName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"e05d4403-9b81-4244-8763-20fde28d1976\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a badge that indicates the status of the most recent build for the specified branch.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repoType - The repository type.\r\n     * @param {string} repoId - The repository ID.\r\n     * @param {string} branchName - The branch name.\r\n     */\r\n    getBuildBadge(project, repoType, repoId, branchName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repoType: repoType\r\n                };\r\n                let queryValues = {\r\n                    repoId: repoId,\r\n                    branchName: branchName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"21b3b9ce-fad5-4567-9ad0-80679794e003\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a badge that indicates the status of the most recent build for the specified branch.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repoType - The repository type.\r\n     * @param {string} repoId - The repository ID.\r\n     * @param {string} branchName - The branch name.\r\n     */\r\n    getBuildBadgeData(project, repoType, repoId, branchName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repoType: repoType\r\n                };\r\n                let queryValues = {\r\n                    repoId: repoId,\r\n                    branchName: branchName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"21b3b9ce-fad5-4567-9ad0-80679794e003\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets all retention leases that apply to a specific build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     */\r\n    getRetentionLeasesForBuild(project, buildId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"3da19a6a-f088-45c4-83ce-2ad3a87be6c4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.RetentionLease, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     */\r\n    deleteBuild(project, buildId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.7\", \"build\", \"0cd358e1-9217-4d94-8269-1c1ee6f93dcf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a build\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId\r\n     * @param {string} propertyFilters\r\n     */\r\n    getBuild(project, buildId, propertyFilters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                let queryValues = {\r\n                    propertyFilters: propertyFilters,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.7\", \"build\", \"0cd358e1-9217-4d94-8269-1c1ee6f93dcf\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Build, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a list of builds.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number[]} definitions - A comma-delimited list of definition IDs. If specified, filters to builds for these definitions.\r\n     * @param {number[]} queues - A comma-delimited list of queue IDs. If specified, filters to builds that ran against these queues.\r\n     * @param {string} buildNumber - If specified, filters to builds that match this build number. Append * to do a prefix search.\r\n     * @param {Date} minTime - If specified, filters to builds that finished/started/queued after this date based on the queryOrder specified.\r\n     * @param {Date} maxTime - If specified, filters to builds that finished/started/queued before this date based on the queryOrder specified.\r\n     * @param {string} requestedFor - If specified, filters to builds requested for the specified user.\r\n     * @param {BuildInterfaces.BuildReason} reasonFilter - If specified, filters to builds that match this reason.\r\n     * @param {BuildInterfaces.BuildStatus} statusFilter - If specified, filters to builds that match this status.\r\n     * @param {BuildInterfaces.BuildResult} resultFilter - If specified, filters to builds that match this result.\r\n     * @param {string[]} tagFilters - A comma-delimited list of tags. If specified, filters to builds that have the specified tags.\r\n     * @param {string[]} properties - A comma-delimited list of properties to retrieve.\r\n     * @param {number} top - The maximum number of builds to return.\r\n     * @param {string} continuationToken - A continuation token, returned by a previous call to this method, that can be used to return the next set of builds.\r\n     * @param {number} maxBuildsPerDefinition - The maximum number of builds to return per definition.\r\n     * @param {BuildInterfaces.QueryDeletedOption} deletedFilter - Indicates whether to exclude, include, or only return deleted builds.\r\n     * @param {BuildInterfaces.BuildQueryOrder} queryOrder - The order in which builds should be returned.\r\n     * @param {string} branchName - If specified, filters to builds that built branches that built this branch.\r\n     * @param {number[]} buildIds - A comma-delimited list that specifies the IDs of builds to retrieve.\r\n     * @param {string} repositoryId - If specified, filters to builds that built from this repository.\r\n     * @param {string} repositoryType - If specified, filters to builds that built from repositories of this type.\r\n     */\r\n    getBuilds(project, definitions, queues, buildNumber, minTime, maxTime, requestedFor, reasonFilter, statusFilter, resultFilter, tagFilters, properties, top, continuationToken, maxBuildsPerDefinition, deletedFilter, queryOrder, branchName, buildIds, repositoryId, repositoryType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    definitions: definitions && definitions.join(\",\"),\r\n                    queues: queues && queues.join(\",\"),\r\n                    buildNumber: buildNumber,\r\n                    minTime: minTime,\r\n                    maxTime: maxTime,\r\n                    requestedFor: requestedFor,\r\n                    reasonFilter: reasonFilter,\r\n                    statusFilter: statusFilter,\r\n                    resultFilter: resultFilter,\r\n                    tagFilters: tagFilters && tagFilters.join(\",\"),\r\n                    properties: properties && properties.join(\",\"),\r\n                    '$top': top,\r\n                    continuationToken: continuationToken,\r\n                    maxBuildsPerDefinition: maxBuildsPerDefinition,\r\n                    deletedFilter: deletedFilter,\r\n                    queryOrder: queryOrder,\r\n                    branchName: branchName,\r\n                    buildIds: buildIds && buildIds.join(\",\"),\r\n                    repositoryId: repositoryId,\r\n                    repositoryType: repositoryType,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.7\", \"build\", \"0cd358e1-9217-4d94-8269-1c1ee6f93dcf\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Build, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Queues a build\r\n     *\r\n     * @param {BuildInterfaces.Build} build\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} ignoreWarnings\r\n     * @param {string} checkInTicket\r\n     * @param {number} sourceBuildId\r\n     * @param {number} definitionId - Optional definition id to queue a build without a body. Ignored if there's a valid body\r\n     */\r\n    queueBuild(build, project, ignoreWarnings, checkInTicket, sourceBuildId, definitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    ignoreWarnings: ignoreWarnings,\r\n                    checkInTicket: checkInTicket,\r\n                    sourceBuildId: sourceBuildId,\r\n                    definitionId: definitionId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.7\", \"build\", \"0cd358e1-9217-4d94-8269-1c1ee6f93dcf\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, build, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Build, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates a build.\r\n     *\r\n     * @param {BuildInterfaces.Build} build - The build.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {boolean} retry\r\n     */\r\n    updateBuild(build, project, buildId, retry) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                let queryValues = {\r\n                    retry: retry,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.7\", \"build\", \"0cd358e1-9217-4d94-8269-1c1ee6f93dcf\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, build, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Build, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates multiple builds.\r\n     *\r\n     * @param {BuildInterfaces.Build[]} builds - The builds to update.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateBuilds(builds, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.7\", \"build\", \"0cd358e1-9217-4d94-8269-1c1ee6f93dcf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, builds, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Build, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the changes associated with a build\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId\r\n     * @param {string} continuationToken\r\n     * @param {number} top - The maximum number of changes to return\r\n     * @param {boolean} includeSourceChange\r\n     */\r\n    getBuildChanges(project, buildId, continuationToken, top, includeSourceChange) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                let queryValues = {\r\n                    continuationToken: continuationToken,\r\n                    '$top': top,\r\n                    includeSourceChange: includeSourceChange,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"54572c7b-bbd3-45d4-80dc-28be08941620\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Change, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the changes made to the repository between two given builds.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} fromBuildId - The ID of the first build.\r\n     * @param {number} toBuildId - The ID of the last build.\r\n     * @param {number} top - The maximum number of changes to return.\r\n     */\r\n    getChangesBetweenBuilds(project, fromBuildId, toBuildId, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    fromBuildId: fromBuildId,\r\n                    toBuildId: toBuildId,\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"f10f0ea5-18a1-43ec-a8fb-2042c7be9b43\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Change, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a controller\r\n     *\r\n     * @param {number} controllerId\r\n     */\r\n    getBuildController(controllerId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    controllerId: controllerId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"fcac1932-2ee1-437f-9b6f-7f696be858f6\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildController, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets controller, optionally filtered by name\r\n     *\r\n     * @param {string} name\r\n     */\r\n    getBuildControllers(name) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    name: name,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"fcac1932-2ee1-437f-9b6f-7f696be858f6\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildController, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a new definition.\r\n     *\r\n     * @param {BuildInterfaces.BuildDefinition} definition - The definition.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionToCloneId\r\n     * @param {number} definitionToCloneRevision\r\n     */\r\n    createDefinition(definition, project, definitionToCloneId, definitionToCloneRevision) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    definitionToCloneId: definitionToCloneId,\r\n                    definitionToCloneRevision: definitionToCloneRevision,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.7\", \"build\", \"dbeaf647-6167-421a-bda9-c9327b25e2e6\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, definition, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildDefinition, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes a definition and all associated builds.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The ID of the definition.\r\n     */\r\n    deleteDefinition(project, definitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.7\", \"build\", \"dbeaf647-6167-421a-bda9-c9327b25e2e6\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a definition, optionally at a specific revision.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The ID of the definition.\r\n     * @param {number} revision - The revision number to retrieve. If this is not specified, the latest version will be returned.\r\n     * @param {Date} minMetricsTime - If specified, indicates the date from which metrics should be included.\r\n     * @param {string[]} propertyFilters - A comma-delimited list of properties to include in the results.\r\n     * @param {boolean} includeLatestBuilds\r\n     */\r\n    getDefinition(project, definitionId, revision, minMetricsTime, propertyFilters, includeLatestBuilds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                let queryValues = {\r\n                    revision: revision,\r\n                    minMetricsTime: minMetricsTime,\r\n                    propertyFilters: propertyFilters && propertyFilters.join(\",\"),\r\n                    includeLatestBuilds: includeLatestBuilds,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.7\", \"build\", \"dbeaf647-6167-421a-bda9-c9327b25e2e6\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildDefinition, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a list of definitions.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} name - If specified, filters to definitions whose names match this pattern.\r\n     * @param {string} repositoryId - A repository ID. If specified, filters to definitions that use this repository.\r\n     * @param {string} repositoryType - If specified, filters to definitions that have a repository of this type.\r\n     * @param {BuildInterfaces.DefinitionQueryOrder} queryOrder - Indicates the order in which definitions should be returned.\r\n     * @param {number} top - The maximum number of definitions to return.\r\n     * @param {string} continuationToken - A continuation token, returned by a previous call to this method, that can be used to return the next set of definitions.\r\n     * @param {Date} minMetricsTime - If specified, indicates the date from which metrics should be included.\r\n     * @param {number[]} definitionIds - A comma-delimited list that specifies the IDs of definitions to retrieve.\r\n     * @param {string} path - If specified, filters to definitions under this folder.\r\n     * @param {Date} builtAfter - If specified, filters to definitions that have builds after this date.\r\n     * @param {Date} notBuiltAfter - If specified, filters to definitions that do not have builds after this date.\r\n     * @param {boolean} includeAllProperties - Indicates whether the full definitions should be returned. By default, shallow representations of the definitions are returned.\r\n     * @param {boolean} includeLatestBuilds - Indicates whether to return the latest and latest completed builds for this definition.\r\n     * @param {string} taskIdFilter - If specified, filters to definitions that use the specified task.\r\n     * @param {number} processType - If specified, filters to definitions with the given process type.\r\n     * @param {string} yamlFilename - If specified, filters to YAML definitions that match the given filename. To use this filter includeAllProperties should be set to true\r\n     */\r\n    getDefinitions(project, name, repositoryId, repositoryType, queryOrder, top, continuationToken, minMetricsTime, definitionIds, path, builtAfter, notBuiltAfter, includeAllProperties, includeLatestBuilds, taskIdFilter, processType, yamlFilename) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    name: name,\r\n                    repositoryId: repositoryId,\r\n                    repositoryType: repositoryType,\r\n                    queryOrder: queryOrder,\r\n                    '$top': top,\r\n                    continuationToken: continuationToken,\r\n                    minMetricsTime: minMetricsTime,\r\n                    definitionIds: definitionIds && definitionIds.join(\",\"),\r\n                    path: path,\r\n                    builtAfter: builtAfter,\r\n                    notBuiltAfter: notBuiltAfter,\r\n                    includeAllProperties: includeAllProperties,\r\n                    includeLatestBuilds: includeLatestBuilds,\r\n                    taskIdFilter: taskIdFilter,\r\n                    processType: processType,\r\n                    yamlFilename: yamlFilename,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.7\", \"build\", \"dbeaf647-6167-421a-bda9-c9327b25e2e6\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildDefinitionReference, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Restores a deleted definition\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The identifier of the definition to restore.\r\n     * @param {boolean} deleted - When false, restores a deleted definition.\r\n     */\r\n    restoreDefinition(project, definitionId, deleted) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (deleted == null) {\r\n                throw new TypeError('deleted can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                let queryValues = {\r\n                    deleted: deleted,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.7\", \"build\", \"dbeaf647-6167-421a-bda9-c9327b25e2e6\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, null, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildDefinition, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates an existing build definition.  In order for this operation to succeed, the value of the \"Revision\" property of the request body must match the existing build definition's. It is recommended that you obtain the existing build definition by using GET, modify the build definition as necessary, and then submit the modified definition with PUT.\r\n     *\r\n     * @param {BuildInterfaces.BuildDefinition} definition - The new version of the definition. Its \"Revision\" property must match the existing definition for the update to be accepted.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The ID of the definition.\r\n     * @param {number} secretsSourceDefinitionId\r\n     * @param {number} secretsSourceDefinitionRevision\r\n     */\r\n    updateDefinition(definition, project, definitionId, secretsSourceDefinitionId, secretsSourceDefinitionRevision) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                let queryValues = {\r\n                    secretsSourceDefinitionId: secretsSourceDefinitionId,\r\n                    secretsSourceDefinitionRevision: secretsSourceDefinitionRevision,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.7\", \"build\", \"dbeaf647-6167-421a-bda9-c9327b25e2e6\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, definition, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildDefinition, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the contents of a file in the given source code repository.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} providerName - The name of the source provider.\r\n     * @param {string} serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.\r\n     * @param {string} repository - If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories.\r\n     * @param {string} commitOrBranch - The identifier of the commit or branch from which a file's contents are retrieved.\r\n     * @param {string} path - The path to the file to retrieve, relative to the root of the repository.\r\n     */\r\n    getFileContents(project, providerName, serviceEndpointId, repository, commitOrBranch, path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    providerName: providerName\r\n                };\r\n                let queryValues = {\r\n                    serviceEndpointId: serviceEndpointId,\r\n                    repository: repository,\r\n                    commitOrBranch: commitOrBranch,\r\n                    path: path,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"29d12225-b1d9-425f-b668-6c594a981313\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/plain\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a new folder.\r\n     *\r\n     * @param {BuildInterfaces.Folder} folder - The folder.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} path - The full path of the folder.\r\n     */\r\n    createFolder(folder, project, path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (path == null) {\r\n                throw new TypeError('path can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    path: path,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"a906531b-d2da-4f55-bda7-f3e676cc50d9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, folder, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Folder, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes a definition folder. Definitions and their corresponding builds will also be deleted.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} path - The full path to the folder.\r\n     */\r\n    deleteFolder(project, path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (path == null) {\r\n                throw new TypeError('path can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    path: path,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"a906531b-d2da-4f55-bda7-f3e676cc50d9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a list of build definition folders.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} path - The path to start with.\r\n     * @param {BuildInterfaces.FolderQueryOrder} queryOrder - The order in which folders should be returned.\r\n     */\r\n    getFolders(project, path, queryOrder) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    path: path\r\n                };\r\n                let queryValues = {\r\n                    queryOrder: queryOrder,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"a906531b-d2da-4f55-bda7-f3e676cc50d9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Folder, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates an existing folder at given  existing path\r\n     *\r\n     * @param {BuildInterfaces.Folder} folder - The new version of the folder.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} path - The full path to the folder.\r\n     */\r\n    updateFolder(folder, project, path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (path == null) {\r\n                throw new TypeError('path can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    path: path,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"a906531b-d2da-4f55-bda7-f3e676cc50d9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, folder, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Folder, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets pipeline general settings.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getBuildGeneralSettings(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"c4aefd19-30ff-405b-80ad-aca021e7242a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates pipeline general settings.\r\n     *\r\n     * @param {BuildInterfaces.PipelineGeneralSettings} newSettings\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateBuildGeneralSettings(newSettings, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"c4aefd19-30ff-405b-80ad-aca021e7242a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, newSettings, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns the retention history for the project collection. This includes pipelines that have custom retention rules that may prevent the retention job from cleaning them up, runs per pipeline with retention type, files associated with pipelines owned by the collection with retention type, and the number of files per pipeline.\r\n     *\r\n     * @param {number} daysToLookback\r\n     */\r\n    getRetentionHistory(daysToLookback) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    daysToLookback: daysToLookback,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"1a9c48be-0ef5-4ec2-b94f-f053bdd2d3bf\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildRetentionHistory, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the latest build for a definition, optionally scoped to a specific branch.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} definition - definition name with optional leading folder path, or the definition id\r\n     * @param {string} branchName - optional parameter that indicates the specific branch to use. If not specified, the default branch is used.\r\n     */\r\n    getLatestBuild(project, definition, branchName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definition: definition\r\n                };\r\n                let queryValues = {\r\n                    branchName: branchName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"54481611-01f4-47f3-998f-160da0f0c229\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Build, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds new leases for pipeline runs.\r\n     *\r\n     * @param {BuildInterfaces.NewRetentionLease[]} newLeases\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    addRetentionLeases(newLeases, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"272051e4-9af1-45b5-ae22-8d960a5539d4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, newLeases, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.RetentionLease, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes specific retention leases.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number[]} ids\r\n     */\r\n    deleteRetentionLeasesById(project, ids) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (ids == null) {\r\n                throw new TypeError('ids can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    ids: ids && ids.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"272051e4-9af1-45b5-ae22-8d960a5539d4\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns the details of the retention lease given a lease id.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} leaseId\r\n     */\r\n    getRetentionLease(project, leaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    leaseId: leaseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"272051e4-9af1-45b5-ae22-8d960a5539d4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.RetentionLease, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns any leases matching the specified MinimalRetentionLeases\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {BuildInterfaces.MinimalRetentionLease[]} leasesToFetch - List of JSON-serialized MinimalRetentionLeases separated by '|'\r\n     */\r\n    getRetentionLeasesByMinimalRetentionLeases(project, leasesToFetch) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (leasesToFetch == null) {\r\n                throw new TypeError('leasesToFetch can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    leasesToFetch: leasesToFetch && leasesToFetch.join(\"|\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"272051e4-9af1-45b5-ae22-8d960a5539d4\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.RetentionLease, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns any leases owned by the specified entity, optionally scoped to a single pipeline definition and run.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} ownerId\r\n     * @param {number} definitionId - An optional parameter to limit the search to a specific pipeline definition.\r\n     * @param {number} runId - An optional parameter to limit the search to a single pipeline run. Requires definitionId.\r\n     */\r\n    getRetentionLeasesByOwnerId(project, ownerId, definitionId, runId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    ownerId: ownerId,\r\n                    definitionId: definitionId,\r\n                    runId: runId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"272051e4-9af1-45b5-ae22-8d960a5539d4\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.RetentionLease, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns any leases owned by the specified user, optionally scoped to a single pipeline definition and run.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} userOwnerId - The user id to search for.\r\n     * @param {number} definitionId - An optional parameter to limit the search to a specific pipeline definition.\r\n     * @param {number} runId - An optional parameter to limit the search to a single pipeline run. Requires definitionId.\r\n     */\r\n    getRetentionLeasesByUserId(project, userOwnerId, definitionId, runId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (userOwnerId == null) {\r\n                throw new TypeError('userOwnerId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    userOwnerId: userOwnerId,\r\n                    definitionId: definitionId,\r\n                    runId: runId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"272051e4-9af1-45b5-ae22-8d960a5539d4\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.RetentionLease, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates the duration or pipeline protection status of a retention lease.\r\n     *\r\n     * @param {BuildInterfaces.RetentionLeaseUpdate} leaseUpdate - The new data for the retention lease.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} leaseId - The ID of the lease to update.\r\n     */\r\n    updateRetentionLease(leaseUpdate, project, leaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    leaseId: leaseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"272051e4-9af1-45b5-ae22-8d960a5539d4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, leaseUpdate, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.RetentionLease, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets an individual log file for a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {number} logId - The ID of the log file.\r\n     * @param {number} startLine - The start line.\r\n     * @param {number} endLine - The end line.\r\n     */\r\n    getBuildLog(project, buildId, logId, startLine, endLine) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId,\r\n                    logId: logId\r\n                };\r\n                let queryValues = {\r\n                    startLine: startLine,\r\n                    endLine: endLine,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"35a80daf-7f30-45fc-86e8-6b813d9c90df\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/plain\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets an individual log file for a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {number} logId - The ID of the log file.\r\n     * @param {number} startLine - The start line.\r\n     * @param {number} endLine - The end line.\r\n     */\r\n    getBuildLogLines(project, buildId, logId, startLine, endLine) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId,\r\n                    logId: logId\r\n                };\r\n                let queryValues = {\r\n                    startLine: startLine,\r\n                    endLine: endLine,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"35a80daf-7f30-45fc-86e8-6b813d9c90df\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the logs for a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     */\r\n    getBuildLogs(project, buildId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"35a80daf-7f30-45fc-86e8-6b813d9c90df\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildLog, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the logs for a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     */\r\n    getBuildLogsZip(project, buildId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"35a80daf-7f30-45fc-86e8-6b813d9c90df\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets an individual log file for a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {number} logId - The ID of the log file.\r\n     * @param {number} startLine - The start line.\r\n     * @param {number} endLine - The end line.\r\n     */\r\n    getBuildLogZip(project, buildId, logId, startLine, endLine) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId,\r\n                    logId: logId\r\n                };\r\n                let queryValues = {\r\n                    startLine: startLine,\r\n                    endLine: endLine,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"35a80daf-7f30-45fc-86e8-6b813d9c90df\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets build metrics for a project.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} metricAggregationType - The aggregation type to use (hourly, daily).\r\n     * @param {Date} minMetricsTime - The date from which to calculate metrics.\r\n     */\r\n    getProjectMetrics(project, metricAggregationType, minMetricsTime) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    metricAggregationType: metricAggregationType\r\n                };\r\n                let queryValues = {\r\n                    minMetricsTime: minMetricsTime,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"7433fae7-a6bc-41dc-a6e2-eef9005ce41a\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildMetric, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets build metrics for a definition.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The ID of the definition.\r\n     * @param {Date} minMetricsTime - The date from which to calculate metrics.\r\n     */\r\n    getDefinitionMetrics(project, definitionId, minMetricsTime) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                let queryValues = {\r\n                    minMetricsTime: minMetricsTime,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"d973b939-0ce0-4fec-91d8-da3940fa1827\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildMetric, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets all build definition options supported by the system.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getBuildOptionDefinitions(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"591cb5a4-2d46-4f3a-a697-5cd42b6bd332\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildOptionDefinition, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the contents of a directory in the given source code repository.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} providerName - The name of the source provider.\r\n     * @param {string} serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.\r\n     * @param {string} repository - If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories.\r\n     * @param {string} commitOrBranch - The identifier of the commit or branch from which a file's contents are retrieved.\r\n     * @param {string} path - The path contents to list, relative to the root of the repository.\r\n     */\r\n    getPathContents(project, providerName, serviceEndpointId, repository, commitOrBranch, path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    providerName: providerName\r\n                };\r\n                let queryValues = {\r\n                    serviceEndpointId: serviceEndpointId,\r\n                    repository: repository,\r\n                    commitOrBranch: commitOrBranch,\r\n                    path: path,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"7944d6fb-df01-4709-920a-7a189aa34037\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets properties for a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {string[]} filter - A comma-delimited list of properties. If specified, filters to these specific properties.\r\n     */\r\n    getBuildProperties(project, buildId, filter) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                let queryValues = {\r\n                    filter: filter && filter.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"0a6312e9-0627-49b7-8083-7d74a64849c9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates properties for a build.\r\n     *\r\n     * @param {VSSInterfaces.JsonPatchDocument} document - A json-patch document describing the properties to update.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     */\r\n    updateBuildProperties(customHeaders, document, project, buildId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/json-patch+json\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"0a6312e9-0627-49b7-8083-7d74a64849c9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.update(url, document, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets properties for a definition.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The ID of the definition.\r\n     * @param {string[]} filter - A comma-delimited list of properties. If specified, filters to these specific properties.\r\n     */\r\n    getDefinitionProperties(project, definitionId, filter) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                let queryValues = {\r\n                    filter: filter && filter.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"d9826ad7-2a68-46a9-a6e9-677698777895\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates properties for a definition.\r\n     *\r\n     * @param {VSSInterfaces.JsonPatchDocument} document - A json-patch document describing the properties to update.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The ID of the definition.\r\n     */\r\n    updateDefinitionProperties(customHeaders, document, project, definitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/json-patch+json\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"d9826ad7-2a68-46a9-a6e9-677698777895\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.update(url, document, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a pull request object from source provider.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} providerName - The name of the source provider.\r\n     * @param {string} pullRequestId - Vendor-specific id of the pull request.\r\n     * @param {string} repositoryId - Vendor-specific identifier or the name of the repository that contains the pull request.\r\n     * @param {string} serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.\r\n     */\r\n    getPullRequest(project, providerName, pullRequestId, repositoryId, serviceEndpointId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    providerName: providerName,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                let queryValues = {\r\n                    repositoryId: repositoryId,\r\n                    serviceEndpointId: serviceEndpointId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"d8763ec7-9ff0-4fb4-b2b2-9d757906ff14\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a build report.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {string} type\r\n     */\r\n    getBuildReport(project, buildId, type) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                let queryValues = {\r\n                    type: type,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"45bcaa88-67e1-4042-a035-56d3b4a7d44c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a build report.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {string} type\r\n     */\r\n    getBuildReportHtmlContent(project, buildId, type) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                let queryValues = {\r\n                    type: type,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"45bcaa88-67e1-4042-a035-56d3b4a7d44c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/html\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a list of source code repositories.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} providerName - The name of the source provider.\r\n     * @param {string} serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.\r\n     * @param {string} repository - If specified, the vendor-specific identifier or the name of a single repository to get.\r\n     * @param {BuildInterfaces.ResultSet} resultSet - 'top' for the repositories most relevant for the endpoint. If not set, all repositories are returned. Ignored if 'repository' is set.\r\n     * @param {boolean} pageResults - If set to true, this will limit the set of results and will return a continuation token to continue the query.\r\n     * @param {string} continuationToken - When paging results, this is a continuation token, returned by a previous call to this method, that can be used to return the next set of repositories.\r\n     */\r\n    listRepositories(project, providerName, serviceEndpointId, repository, resultSet, pageResults, continuationToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    providerName: providerName\r\n                };\r\n                let queryValues = {\r\n                    serviceEndpointId: serviceEndpointId,\r\n                    repository: repository,\r\n                    resultSet: resultSet,\r\n                    pageResults: pageResults,\r\n                    continuationToken: continuationToken,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"d44d1680-f978-4834-9b93-8c6e132329c9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {BuildInterfaces.DefinitionResourceReference[]} resources\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId\r\n     */\r\n    authorizeDefinitionResources(resources, project, definitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"ea623316-1967-45eb-89ab-e9e6110cf2d6\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, resources, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId\r\n     */\r\n    getDefinitionResources(project, definitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"ea623316-1967-45eb-89ab-e9e6110cf2d6\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets information about build resources in the system.\r\n     *\r\n     */\r\n    getResourceUsage() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"3813d06c-9e36-4ea1-aac3-61a485d60e3d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the project's retention settings.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getRetentionSettings(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"dadb46e7-5851-4c72-820e-ae8abb82f59f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates the project's retention settings.\r\n     *\r\n     * @param {BuildInterfaces.UpdateProjectRetentionSettingModel} updateModel\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateRetentionSettings(updateModel, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"dadb46e7-5851-4c72-820e-ae8abb82f59f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, updateModel, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets all revisions of a definition.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The ID of the definition.\r\n     */\r\n    getDefinitionRevisions(project, definitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"build\", \"7c116775-52e5-453e-8c5d-914d9762d8c4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildDefinitionRevision, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the build settings.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getBuildSettings(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"aa8c1c9c-ef8b-474a-b8c4-785c7b191d0d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates the build settings.\r\n     *\r\n     * @param {BuildInterfaces.BuildSettings} settings - The new settings.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateBuildSettings(settings, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"aa8c1c9c-ef8b-474a-b8c4-785c7b191d0d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, settings, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of source providers and their capabilities.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    listSourceProviders(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"3ce81729-954f-423d-a581-9fea01d25186\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.SourceProviderAttributes, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a build stage\r\n     *\r\n     * @param {BuildInterfaces.UpdateStageParameters} updateParameters\r\n     * @param {number} buildId\r\n     * @param {string} stageRefName\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateStage(updateParameters, buildId, stageRefName, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId,\r\n                    stageRefName: stageRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"b8aac6c9-744b-46e1-88fc-3550969f9313\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, updateParameters, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * <p>Gets the build status for a definition, optionally scoped to a specific branch, stage, job, and configuration.</p> <p>If there are more than one, then it is required to pass in a stageName value when specifying a jobName, and the same rule then applies for both if passing a configuration parameter.</p>\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} definition - Either the definition name with optional leading folder path, or the definition id.\r\n     * @param {string} branchName - Only consider the most recent build for this branch. If not specified, the default branch is used.\r\n     * @param {string} stageName - Use this stage within the pipeline to render the status.\r\n     * @param {string} jobName - Use this job within a stage of the pipeline to render the status.\r\n     * @param {string} configuration - Use this job configuration to render the status\r\n     * @param {string} label - Replaces the default text on the left side of the badge.\r\n     */\r\n    getStatusBadge(project, definition, branchName, stageName, jobName, configuration, label) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definition: definition\r\n                };\r\n                let queryValues = {\r\n                    branchName: branchName,\r\n                    stageName: stageName,\r\n                    jobName: jobName,\r\n                    configuration: configuration,\r\n                    label: label,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"07acfdce-4757-4439-b422-ddd13a2fcc10\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds a tag to a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {string} tag - The tag to add.\r\n     */\r\n    addBuildTag(project, buildId, tag) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId,\r\n                    tag: tag\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"build\", \"6e6114b2-8161-44c8-8f6c-c5505782427f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds tags to a build.\r\n     *\r\n     * @param {string[]} tags - The tags to add. Request body is composed directly from listed tags.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     */\r\n    addBuildTags(tags, project, buildId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"build\", \"6e6114b2-8161-44c8-8f6c-c5505782427f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, tags, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a tag from a build. NOTE: This API will not work for tags with special characters. To remove tags with special characters, use the PATCH method instead (in 6.0+)\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {string} tag - The tag to remove.\r\n     */\r\n    deleteBuildTag(project, buildId, tag) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId,\r\n                    tag: tag\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"build\", \"6e6114b2-8161-44c8-8f6c-c5505782427f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the tags for a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     */\r\n    getBuildTags(project, buildId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"build\", \"6e6114b2-8161-44c8-8f6c-c5505782427f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds/Removes tags from a build.\r\n     *\r\n     * @param {BuildInterfaces.UpdateTagParameters} updateParameters - The tags to add/remove.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     */\r\n    updateBuildTags(updateParameters, project, buildId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"build\", \"6e6114b2-8161-44c8-8f6c-c5505782427f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, updateParameters, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds a tag to a definition\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The ID of the definition.\r\n     * @param {string} tag - The tag to add.\r\n     */\r\n    addDefinitionTag(project, definitionId, tag) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId,\r\n                    tag: tag\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"build\", \"cb894432-134a-4d31-a839-83beceaace4b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds multiple tags to a definition.\r\n     *\r\n     * @param {string[]} tags - The tags to add.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The ID of the definition.\r\n     */\r\n    addDefinitionTags(tags, project, definitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"build\", \"cb894432-134a-4d31-a839-83beceaace4b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, tags, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a tag from a definition. NOTE: This API will not work for tags with special characters. To remove tags with special characters, use the PATCH method instead (in 6.0+)\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The ID of the definition.\r\n     * @param {string} tag - The tag to remove.\r\n     */\r\n    deleteDefinitionTag(project, definitionId, tag) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId,\r\n                    tag: tag\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"build\", \"cb894432-134a-4d31-a839-83beceaace4b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the tags for a definition.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The ID of the definition.\r\n     * @param {number} revision - The definition revision number. If not specified, uses the latest revision of the definition.\r\n     */\r\n    getDefinitionTags(project, definitionId, revision) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                let queryValues = {\r\n                    revision: revision,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"build\", \"cb894432-134a-4d31-a839-83beceaace4b\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds/Removes tags from a definition.\r\n     *\r\n     * @param {BuildInterfaces.UpdateTagParameters} updateParameters - The tags to add/remove.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The ID of the definition.\r\n     */\r\n    updateDefinitionTags(updateParameters, project, definitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"build\", \"cb894432-134a-4d31-a839-83beceaace4b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, updateParameters, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a tag from builds, definitions, and from the tag store\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} tag - The tag to remove.\r\n     */\r\n    deleteTag(project, tag) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    tag: tag\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"build\", \"d84ac5c6-edc7-43d5-adc9-1b34be5dea09\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a list of all build tags in the project.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getTags(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"build\", \"d84ac5c6-edc7-43d5-adc9-1b34be5dea09\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes a build definition template.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} templateId - The ID of the template.\r\n     */\r\n    deleteTemplate(project, templateId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    templateId: templateId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"build\", \"e884571e-7f92-4d6a-9274-3f5649900835\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a specific build definition template.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} templateId - The ID of the requested template.\r\n     */\r\n    getTemplate(project, templateId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    templateId: templateId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"build\", \"e884571e-7f92-4d6a-9274-3f5649900835\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildDefinitionTemplate, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets all definition templates.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getTemplates(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"build\", \"e884571e-7f92-4d6a-9274-3f5649900835\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildDefinitionTemplate, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates an existing build definition template.\r\n     *\r\n     * @param {BuildInterfaces.BuildDefinitionTemplate} template - The new version of the template.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} templateId - The ID of the template.\r\n     */\r\n    saveTemplate(template, project, templateId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    templateId: templateId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"build\", \"e884571e-7f92-4d6a-9274-3f5649900835\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, template, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.BuildDefinitionTemplate, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets details for a build\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId\r\n     * @param {string} timelineId\r\n     * @param {number} changeId\r\n     * @param {string} planId\r\n     */\r\n    getBuildTimeline(project, buildId, timelineId, changeId, planId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId,\r\n                    timelineId: timelineId\r\n                };\r\n                let queryValues = {\r\n                    changeId: changeId,\r\n                    planId: planId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"8baac422-4c6e-4de5-8532-db96d92acffa\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.Timeline, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Recreates the webhooks for the specified triggers in the given source code repository.\r\n     *\r\n     * @param {BuildInterfaces.DefinitionTriggerType[]} triggerTypes - The types of triggers to restore webhooks for.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} providerName - The name of the source provider.\r\n     * @param {string} serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.\r\n     * @param {string} repository - If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories.\r\n     */\r\n    restoreWebhooks(triggerTypes, project, providerName, serviceEndpointId, repository) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    providerName: providerName\r\n                };\r\n                let queryValues = {\r\n                    serviceEndpointId: serviceEndpointId,\r\n                    repository: repository,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"793bceb8-9736-4030-bd2f-fb3ce6d6b478\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, triggerTypes, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a list of webhooks installed in the given source code repository.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} providerName - The name of the source provider.\r\n     * @param {string} serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.\r\n     * @param {string} repository - If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories.\r\n     */\r\n    listWebhooks(project, providerName, serviceEndpointId, repository) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    providerName: providerName\r\n                };\r\n                let queryValues = {\r\n                    serviceEndpointId: serviceEndpointId,\r\n                    repository: repository,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"8f20ff82-9498-4812-9f6e-9c01bdc50e99\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, BuildInterfaces.TypeInfo.RepositoryWebhook, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the work items associated with a build. Only work items in the same project are returned.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {number} top - The maximum number of work items to return.\r\n     */\r\n    getBuildWorkItemsRefs(project, buildId, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                let queryValues = {\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"5a21f5d2-5642-47e4-a0bd-1356e6731bee\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the work items associated with a build, filtered to specific commits.\r\n     *\r\n     * @param {string[]} commitIds - A comma-delimited list of commit IDs.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - The ID of the build.\r\n     * @param {number} top - The maximum number of work items to return, or the number of commits to consider if no commit IDs are specified.\r\n     */\r\n    getBuildWorkItemsRefsFromCommits(commitIds, project, buildId, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                let queryValues = {\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"5a21f5d2-5642-47e4-a0bd-1356e6731bee\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, commitIds, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets all the work items between two builds.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} fromBuildId - The ID of the first build.\r\n     * @param {number} toBuildId - The ID of the last build.\r\n     * @param {number} top - The maximum number of work items to return.\r\n     */\r\n    getWorkItemsBetweenBuilds(project, fromBuildId, toBuildId, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (fromBuildId == null) {\r\n                throw new TypeError('fromBuildId can not be null or undefined');\r\n            }\r\n            if (toBuildId == null) {\r\n                throw new TypeError('toBuildId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    fromBuildId: fromBuildId,\r\n                    toBuildId: toBuildId,\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"build\", \"52ba8915-5518-42e3-a4bb-b0182d159e2d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Converts a definition to YAML, optionally at a specific revision.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - The ID of the definition.\r\n     * @param {number} revision - The revision number to retrieve. If this is not specified, the latest version will be returned.\r\n     * @param {Date} minMetricsTime - If specified, indicates the date from which metrics should be included.\r\n     * @param {string[]} propertyFilters - A comma-delimited list of properties to include in the results.\r\n     * @param {boolean} includeLatestBuilds\r\n     */\r\n    getDefinitionYaml(project, definitionId, revision, minMetricsTime, propertyFilters, includeLatestBuilds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                let queryValues = {\r\n                    revision: revision,\r\n                    minMetricsTime: minMetricsTime,\r\n                    propertyFilters: propertyFilters && propertyFilters.join(\",\"),\r\n                    includeLatestBuilds: includeLatestBuilds,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"build\", \"7c3df3a1-7e51-4150-8cf7-540347f8697f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nBuildApi.RESOURCE_AREA_ID = \"965220d5-5bb9-42cf-8d67-9b146df2a5a4\";\r\nexports.BuildApi = BuildApi;\r\n","\"use strict\";\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for full license information.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst vsom = require(\"./VsoClient\");\r\nconst serm = require(\"./Serialization\");\r\nconst rm = require(\"typed-rest-client/RestClient\");\r\nconst hm = require(\"typed-rest-client/HttpClient\");\r\nclass ClientApiBase {\r\n    constructor(baseUrl, handlers, userAgent, options) {\r\n        this.baseUrl = baseUrl;\r\n        this.http = new hm.HttpClient(userAgent, handlers, options);\r\n        this.rest = new rm.RestClient(userAgent, null, handlers, options);\r\n        this.vsoClient = new vsom.VsoClient(baseUrl, this.rest);\r\n        this.userAgent = userAgent;\r\n    }\r\n    createAcceptHeader(type, apiVersion) {\r\n        return type + (apiVersion ? (';api-version=' + apiVersion) : '');\r\n    }\r\n    createRequestOptions(type, apiVersion) {\r\n        let options = {};\r\n        options.acceptHeader = this.createAcceptHeader(type, apiVersion);\r\n        return options;\r\n    }\r\n    formatResponse(data, responseTypeMetadata, isCollection) {\r\n        let serializationData = {\r\n            responseTypeMetadata: responseTypeMetadata,\r\n            responseIsCollection: isCollection\r\n        };\r\n        let deserializedResult = serm.ContractSerializer.deserialize(data, serializationData.responseTypeMetadata, false, serializationData.responseIsCollection);\r\n        return deserializedResult;\r\n    }\r\n}\r\nexports.ClientApiBase = ClientApiBase;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst CoreInterfaces = require(\"./interfaces/CoreInterfaces\");\r\nconst OperationsInterfaces = require(\"./interfaces/common/OperationsInterfaces\");\r\nclass CoreApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-Core-api', options);\r\n    }\r\n    /**\r\n     * Removes the avatar for the project.\r\n     *\r\n     * @param {string} projectId - The ID or name of the project.\r\n     */\r\n    removeProjectAvatar(projectId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"core\", \"54b2a2a0-859b-4d05-827c-ec4c862f641a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Sets the avatar for the project.\r\n     *\r\n     * @param {CoreInterfaces.ProjectAvatar} avatarBlob - The avatar blob data object to upload.\r\n     * @param {string} projectId - The ID or name of the project.\r\n     */\r\n    setProjectAvatar(avatarBlob, projectId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"core\", \"54b2a2a0-859b-4d05-827c-ec4c862f641a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, avatarBlob, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets list of user readable teams in a project and teams user is member of (excluded from readable list).\r\n     *\r\n     * @param {string} projectId - The name or ID (GUID) of the team project containing the teams to retrieve.\r\n     * @param {boolean} expandIdentity - A value indicating whether or not to expand Identity information in the result WebApiTeam object.\r\n     * @param {number} top - Maximum number of teams to return.\r\n     * @param {number} skip - Number of teams to skip.\r\n     */\r\n    getProjectTeamsByCategory(projectId, expandIdentity, top, skip) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId\r\n                };\r\n                let queryValues = {\r\n                    '$expandIdentity': expandIdentity,\r\n                    '$top': top,\r\n                    '$skip': skip,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"core\", \"6f9619ff-8b86-d011-b42d-00c04fc964ff\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {CoreInterfaces.WebApiConnectedServiceDetails} connectedServiceCreationData\r\n     * @param {string} projectId\r\n     */\r\n    createConnectedService(connectedServiceCreationData, projectId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"core\", \"b4f70219-e18b-42c5-abe3-98b07d35525e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, connectedServiceCreationData, options);\r\n                    let ret = this.formatResponse(res.result, CoreInterfaces.TypeInfo.WebApiConnectedService, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} projectId\r\n     * @param {string} name\r\n     */\r\n    getConnectedServiceDetails(projectId, name) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId,\r\n                    name: name\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"core\", \"b4f70219-e18b-42c5-abe3-98b07d35525e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, CoreInterfaces.TypeInfo.WebApiConnectedServiceDetails, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} projectId\r\n     * @param {CoreInterfaces.ConnectedServiceKind} kind\r\n     */\r\n    getConnectedServices(projectId, kind) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId\r\n                };\r\n                let queryValues = {\r\n                    kind: kind,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"core\", \"b4f70219-e18b-42c5-abe3-98b07d35525e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, CoreInterfaces.TypeInfo.WebApiConnectedService, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {CoreInterfaces.IdentityData} mruData\r\n     * @param {string} mruName\r\n     */\r\n    createIdentityMru(mruData, mruName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    mruName: mruName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"core\", \"5ead0b70-2572-4697-97e9-f341069a783a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, mruData, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {CoreInterfaces.IdentityData} mruData\r\n     * @param {string} mruName\r\n     */\r\n    deleteIdentityMru(mruData, mruName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    mruName: mruName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"core\", \"5ead0b70-2572-4697-97e9-f341069a783a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} mruName\r\n     */\r\n    getIdentityMru(mruName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    mruName: mruName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"core\", \"5ead0b70-2572-4697-97e9-f341069a783a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {CoreInterfaces.IdentityData} mruData\r\n     * @param {string} mruName\r\n     */\r\n    updateIdentityMru(mruData, mruName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    mruName: mruName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"core\", \"5ead0b70-2572-4697-97e9-f341069a783a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, mruData, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of members for a specific team.\r\n     *\r\n     * @param {string} projectId - The name or ID (GUID) of the team project the team belongs to.\r\n     * @param {string} teamId - The name or ID (GUID) of the team .\r\n     * @param {number} top\r\n     * @param {number} skip\r\n     */\r\n    getTeamMembersWithExtendedProperties(projectId, teamId, top, skip) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId,\r\n                    teamId: teamId\r\n                };\r\n                let queryValues = {\r\n                    '$top': top,\r\n                    '$skip': skip,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"core\", \"294c494c-2600-4d7e-b76c-3dd50c3c95be\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a process by ID.\r\n     *\r\n     * @param {string} processId - ID for a process.\r\n     */\r\n    getProcessById(processId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"core\", \"93878975-88c5-4e6a-8abb-7ddd77a8a7d8\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, CoreInterfaces.TypeInfo.Process, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of processes.\r\n     *\r\n     */\r\n    getProcesses() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"core\", \"93878975-88c5-4e6a-8abb-7ddd77a8a7d8\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, CoreInterfaces.TypeInfo.Process, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get project collection with the specified id or name.\r\n     *\r\n     * @param {string} collectionId\r\n     */\r\n    getProjectCollection(collectionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    collectionId: collectionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"core\", \"8031090f-ef1d-4af6-85fc-698cd75d42bf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, CoreInterfaces.TypeInfo.TeamProjectCollection, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get project collection references for this application.\r\n     *\r\n     * @param {number} top\r\n     * @param {number} skip\r\n     */\r\n    getProjectCollections(top, skip) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    '$top': top,\r\n                    '$skip': skip,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"core\", \"8031090f-ef1d-4af6-85fc-698cd75d42bf\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the history of changes to the project.\r\n     *\r\n     * @param {number} minRevision - The minimum revision number to return in the history.\r\n     */\r\n    getProjectHistoryEntries(minRevision) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    minRevision: minRevision,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"core\", \"6488a877-4749-4954-82ea-7340d36be9f2\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, CoreInterfaces.TypeInfo.ProjectInfo, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get project with the specified id or name, optionally including capabilities.\r\n     *\r\n     * @param {string} projectId\r\n     * @param {boolean} includeCapabilities - Include capabilities (such as source control) in the team project result (default: false).\r\n     * @param {boolean} includeHistory - Search within renamed projects (that had such name in the past).\r\n     */\r\n    getProject(projectId, includeCapabilities, includeHistory) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId\r\n                };\r\n                let queryValues = {\r\n                    includeCapabilities: includeCapabilities,\r\n                    includeHistory: includeHistory,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.4\", \"core\", \"603fe2ac-9723-48b9-88ad-09305aa6c6e1\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, CoreInterfaces.TypeInfo.TeamProject, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get all projects in the organization that the authenticated user has access to.\r\n     *\r\n     * @param {any} stateFilter - Filter on team projects in a specific team project state (default: WellFormed).\r\n     * @param {number} top\r\n     * @param {number} skip\r\n     * @param {number} continuationToken - Pointer that shows how many projects already been fetched.\r\n     * @param {boolean} getDefaultTeamImageUrl\r\n     */\r\n    getProjects(stateFilter, top, skip, continuationToken, getDefaultTeamImageUrl) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    stateFilter: stateFilter,\r\n                    '$top': top,\r\n                    '$skip': skip,\r\n                    continuationToken: continuationToken,\r\n                    getDefaultTeamImageUrl: getDefaultTeamImageUrl,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.4\", \"core\", \"603fe2ac-9723-48b9-88ad-09305aa6c6e1\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, CoreInterfaces.TypeInfo.TeamProjectReference, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Queues a project to be created. Use the [GetOperation](../../operations/operations/get) to periodically check for create project status.\r\n     *\r\n     * @param {CoreInterfaces.TeamProject} projectToCreate - The project to create.\r\n     */\r\n    queueCreateProject(projectToCreate) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.4\", \"core\", \"603fe2ac-9723-48b9-88ad-09305aa6c6e1\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, projectToCreate, options);\r\n                    let ret = this.formatResponse(res.result, OperationsInterfaces.TypeInfo.OperationReference, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Queues a project to be deleted. Use the [GetOperation](../../operations/operations/get) to periodically check for delete project status.\r\n     *\r\n     * @param {string} projectId - The project id of the project to delete.\r\n     */\r\n    queueDeleteProject(projectId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.4\", \"core\", \"603fe2ac-9723-48b9-88ad-09305aa6c6e1\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, OperationsInterfaces.TypeInfo.OperationReference, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update an existing project's name, abbreviation, description, or restore a project.\r\n     *\r\n     * @param {CoreInterfaces.TeamProject} projectUpdate - The updates for the project. The state must be set to wellFormed to restore the project.\r\n     * @param {string} projectId - The project id of the project to update.\r\n     */\r\n    updateProject(projectUpdate, projectId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.4\", \"core\", \"603fe2ac-9723-48b9-88ad-09305aa6c6e1\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, projectUpdate, options);\r\n                    let ret = this.formatResponse(res.result, OperationsInterfaces.TypeInfo.OperationReference, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a collection of team project properties for multiple projects.\r\n     *\r\n     * @param {string[]} projectIds - A comma-delimited string of team project IDs\r\n     * @param {string[]} properties\r\n     */\r\n    getProjectsProperties(projectIds, properties) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (projectIds == null) {\r\n                throw new TypeError('projectIds can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    projectIds: projectIds && projectIds.join(\",\"),\r\n                    properties: properties && properties.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"core\", \"0a3ffdfc-fe94-47a6-bb27-79bf3f762eac\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a collection of team project properties.\r\n     *\r\n     * @param {string} projectId - The team project ID.\r\n     * @param {string[]} keys - A comma-delimited string of team project property names. Wildcard characters (\"?\" and \"*\") are supported. If no key is specified, all properties will be returned.\r\n     */\r\n    getProjectProperties(projectId, keys) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId\r\n                };\r\n                let queryValues = {\r\n                    keys: keys && keys.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"core\", \"4976a71a-4487-49aa-8aab-a1eda469037a\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create, update, and delete team project properties.\r\n     *\r\n     * @param {string} projectId - The team project ID.\r\n     * @param {VSSInterfaces.JsonPatchDocument} patchDocument - A JSON Patch document that represents an array of property operations. See RFC 6902 for more details on JSON Patch. The accepted operation verbs are Add and Remove, where Add is used for both creating and updating properties. The path consists of a forward slash and a property name.\r\n     */\r\n    setProjectProperties(customHeaders, projectId, patchDocument) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/json-patch+json\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"core\", \"4976a71a-4487-49aa-8aab-a1eda469037a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.update(url, patchDocument, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {CoreInterfaces.Proxy} proxy\r\n     */\r\n    createOrUpdateProxy(proxy) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"core\", \"ec1f4311-f2b4-4c15-b2b8-8990b80d2908\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, proxy, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} proxyUrl\r\n     * @param {string} site\r\n     */\r\n    deleteProxy(proxyUrl, site) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (proxyUrl == null) {\r\n                throw new TypeError('proxyUrl can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    proxyUrl: proxyUrl,\r\n                    site: site,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"core\", \"ec1f4311-f2b4-4c15-b2b8-8990b80d2908\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} proxyUrl\r\n     */\r\n    getProxies(proxyUrl) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    proxyUrl: proxyUrl,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"core\", \"ec1f4311-f2b4-4c15-b2b8-8990b80d2908\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of all teams.\r\n     *\r\n     * @param {boolean} mine - If true, then return all teams requesting user is member. Otherwise return all teams user has read access.\r\n     * @param {number} top - Maximum number of teams to return.\r\n     * @param {number} skip - Number of teams to skip.\r\n     * @param {boolean} expandIdentity - A value indicating whether or not to expand Identity information in the result WebApiTeam object.\r\n     */\r\n    getAllTeams(mine, top, skip, expandIdentity) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    '$mine': mine,\r\n                    '$top': top,\r\n                    '$skip': skip,\r\n                    '$expandIdentity': expandIdentity,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"core\", \"7a4d9ee9-3433-4347-b47a-7a80f1cf307e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a team in a team project.\r\n     *\r\n     * @param {CoreInterfaces.WebApiTeam} team - The team data used to create the team.\r\n     * @param {string} projectId - The name or ID (GUID) of the team project in which to create the team.\r\n     */\r\n    createTeam(team, projectId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"core\", \"d30a3dd1-f8ba-442a-b86a-bd0c0c383e59\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, team, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a team.\r\n     *\r\n     * @param {string} projectId - The name or ID (GUID) of the team project containing the team to delete.\r\n     * @param {string} teamId - The name or ID of the team to delete.\r\n     */\r\n    deleteTeam(projectId, teamId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId,\r\n                    teamId: teamId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"core\", \"d30a3dd1-f8ba-442a-b86a-bd0c0c383e59\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a specific team.\r\n     *\r\n     * @param {string} projectId - The name or ID (GUID) of the team project containing the team.\r\n     * @param {string} teamId - The name or ID (GUID) of the team.\r\n     * @param {boolean} expandIdentity - A value indicating whether or not to expand Identity information in the result WebApiTeam object.\r\n     */\r\n    getTeam(projectId, teamId, expandIdentity) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId,\r\n                    teamId: teamId\r\n                };\r\n                let queryValues = {\r\n                    '$expandIdentity': expandIdentity,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"core\", \"d30a3dd1-f8ba-442a-b86a-bd0c0c383e59\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of teams.\r\n     *\r\n     * @param {string} projectId\r\n     * @param {boolean} mine - If true return all the teams requesting user is member, otherwise return all the teams user has read access.\r\n     * @param {number} top - Maximum number of teams to return.\r\n     * @param {number} skip - Number of teams to skip.\r\n     * @param {boolean} expandIdentity - A value indicating whether or not to expand Identity information in the result WebApiTeam object.\r\n     */\r\n    getTeams(projectId, mine, top, skip, expandIdentity) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId\r\n                };\r\n                let queryValues = {\r\n                    '$mine': mine,\r\n                    '$top': top,\r\n                    '$skip': skip,\r\n                    '$expandIdentity': expandIdentity,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"core\", \"d30a3dd1-f8ba-442a-b86a-bd0c0c383e59\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a team's name and/or description.\r\n     *\r\n     * @param {CoreInterfaces.WebApiTeam} teamData\r\n     * @param {string} projectId - The name or ID (GUID) of the team project containing the team to update.\r\n     * @param {string} teamId - The name of ID of the team to update.\r\n     */\r\n    updateTeam(teamData, projectId, teamId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId,\r\n                    teamId: teamId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"core\", \"d30a3dd1-f8ba-442a-b86a-bd0c0c383e59\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, teamData, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nCoreApi.RESOURCE_AREA_ID = \"79134c72-4a58-4b42-976c-04e7115f32bf\";\r\nexports.CoreApi = CoreApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst DashboardInterfaces = require(\"./interfaces/DashboardInterfaces\");\r\nclass DashboardApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-Dashboard-api', options);\r\n    }\r\n    /**\r\n     * Create the supplied dashboard.\r\n     *\r\n     * @param {DashboardInterfaces.Dashboard} dashboard - The initial state of the dashboard\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     */\r\n    createDashboard(dashboard, teamContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Dashboard\", \"454b3e51-2e6e-48d4-ad81-978154089351\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, dashboard, options);\r\n                    let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.Dashboard, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a dashboard given its ID. This also deletes the widgets associated with this dashboard.\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} dashboardId - ID of the dashboard to delete.\r\n     */\r\n    deleteDashboard(teamContext, dashboardId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    dashboardId: dashboardId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Dashboard\", \"454b3e51-2e6e-48d4-ad81-978154089351\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a dashboard by its ID.\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} dashboardId\r\n     */\r\n    getDashboard(teamContext, dashboardId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    dashboardId: dashboardId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Dashboard\", \"454b3e51-2e6e-48d4-ad81-978154089351\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.Dashboard, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of dashboards under a project.\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     */\r\n    getDashboardsByProject(teamContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Dashboard\", \"454b3e51-2e6e-48d4-ad81-978154089351\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.Dashboard, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Replace configuration for the specified dashboard. Replaces Widget list on Dashboard, only if property is supplied.\r\n     *\r\n     * @param {DashboardInterfaces.Dashboard} dashboard - The Configuration of the dashboard to replace.\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} dashboardId - ID of the dashboard to replace.\r\n     */\r\n    replaceDashboard(dashboard, teamContext, dashboardId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    dashboardId: dashboardId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Dashboard\", \"454b3e51-2e6e-48d4-ad81-978154089351\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, dashboard, options);\r\n                    let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.Dashboard, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update the name and position of dashboards in the supplied group, and remove omitted dashboards. Does not modify dashboard content.\r\n     *\r\n     * @param {DashboardInterfaces.DashboardGroup} group\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     */\r\n    replaceDashboards(group, teamContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Dashboard\", \"454b3e51-2e6e-48d4-ad81-978154089351\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, group, options);\r\n                    let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.DashboardGroup, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a widget on the specified dashboard.\r\n     *\r\n     * @param {DashboardInterfaces.Widget} widget - State of the widget to add\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} dashboardId - ID of dashboard the widget will be added to.\r\n     */\r\n    createWidget(widget, teamContext, dashboardId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    dashboardId: dashboardId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Dashboard\", \"bdcff53a-8355-4172-a00a-40497ea23afc\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, widget, options);\r\n                    let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.Widget, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete the specified widget.\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} dashboardId - ID of the dashboard containing the widget.\r\n     * @param {string} widgetId - ID of the widget to update.\r\n     */\r\n    deleteWidget(teamContext, dashboardId, widgetId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    dashboardId: dashboardId,\r\n                    widgetId: widgetId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Dashboard\", \"bdcff53a-8355-4172-a00a-40497ea23afc\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.Dashboard, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the current state of the specified widget.\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} dashboardId - ID of the dashboard containing the widget.\r\n     * @param {string} widgetId - ID of the widget to read.\r\n     */\r\n    getWidget(teamContext, dashboardId, widgetId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    dashboardId: dashboardId,\r\n                    widgetId: widgetId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Dashboard\", \"bdcff53a-8355-4172-a00a-40497ea23afc\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.Widget, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Override the  state of the specified widget.\r\n     *\r\n     * @param {DashboardInterfaces.Widget} widget - State to be written for the widget.\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} dashboardId - ID of the dashboard containing the widget.\r\n     * @param {string} widgetId - ID of the widget to update.\r\n     */\r\n    replaceWidget(widget, teamContext, dashboardId, widgetId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    dashboardId: dashboardId,\r\n                    widgetId: widgetId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Dashboard\", \"bdcff53a-8355-4172-a00a-40497ea23afc\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, widget, options);\r\n                    let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.Widget, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Perform a partial update of the specified widget.\r\n     *\r\n     * @param {DashboardInterfaces.Widget} widget - Description of the widget changes to apply. All non-null fields will be replaced.\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} dashboardId - ID of the dashboard containing the widget.\r\n     * @param {string} widgetId - ID of the widget to update.\r\n     */\r\n    updateWidget(widget, teamContext, dashboardId, widgetId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    dashboardId: dashboardId,\r\n                    widgetId: widgetId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Dashboard\", \"bdcff53a-8355-4172-a00a-40497ea23afc\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, widget, options);\r\n                    let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.Widget, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the widget metadata satisfying the specified contribution ID.\r\n     *\r\n     * @param {string} contributionId - The ID of Contribution for the Widget\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getWidgetMetadata(contributionId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    contributionId: contributionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Dashboard\", \"6b3628d3-e96f-4fc7-b176-50240b03b515\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.WidgetMetadataResponse, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get all available widget metadata in alphabetical order, including widgets marked with isVisibleFromCatalog == false.\r\n     *\r\n     * @param {DashboardInterfaces.WidgetScope} scope\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getWidgetTypes(scope, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (scope == null) {\r\n                throw new TypeError('scope can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    '$scope': scope,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Dashboard\", \"6b3628d3-e96f-4fc7-b176-50240b03b515\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, DashboardInterfaces.TypeInfo.WidgetTypesResponse, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nDashboardApi.RESOURCE_AREA_ID = \"31c84e0a-3ece-48fd-a29d-100849af99ba\";\r\nexports.DashboardApi = DashboardApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst ExtensionManagementInterfaces = require(\"./interfaces/ExtensionManagementInterfaces\");\r\nconst GalleryInterfaces = require(\"./interfaces/GalleryInterfaces\");\r\nclass ExtensionManagementApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-ExtensionManagement-api', options);\r\n    }\r\n    /**\r\n     * This API is called by acquisition/install page to get possible user actions like Buy/Request\r\n     *\r\n     * @param {string} itemId - Fully qualified name of extension (<publisher_id>.<extension_id>)\r\n     * @param {boolean} testCommerce - Parameter to test paid preview extension without making azure plans public\r\n     * @param {boolean} isFreeOrTrialInstall - Parameter represents install or trial workflow (required for legacy install flows)\r\n     * @param {boolean} isAccountOwner - Parameter represents whether user is owner or PCA of an account\r\n     * @param {boolean} isLinked - Parameter represents whether account is linked with a subscription\r\n     * @param {boolean} isConnectedServer - Parameter represents whether Buy operation should be evaluated\r\n     * @param {boolean} isBuyOperationValid\r\n     */\r\n    getAcquisitionOptions(itemId, testCommerce, isFreeOrTrialInstall, isAccountOwner, isLinked, isConnectedServer, isBuyOperationValid) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (itemId == null) {\r\n                throw new TypeError('itemId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    itemId: itemId,\r\n                    testCommerce: testCommerce,\r\n                    isFreeOrTrialInstall: isFreeOrTrialInstall,\r\n                    isAccountOwner: isAccountOwner,\r\n                    isLinked: isLinked,\r\n                    isConnectedServer: isConnectedServer,\r\n                    isBuyOperationValid: isBuyOperationValid,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"ExtensionManagement\", \"288dff58-d13b-468e-9671-0fb754e9398c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.AcquisitionOptions, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {ExtensionManagementInterfaces.ExtensionAcquisitionRequest} acquisitionRequest\r\n     */\r\n    requestAcquisition(acquisitionRequest) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"ExtensionManagement\", \"da616457-eed3-4672-92d7-18d21f5c1658\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, acquisitionRequest, options);\r\n                    let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.ExtensionAcquisitionRequest, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     */\r\n    getAuditLog(publisherName, extensionName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"ExtensionManagement\", \"23a312e0-562d-42fb-a505-5a046b5635db\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.ExtensionAuditLog, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} registrationId\r\n     */\r\n    registerAuthorization(publisherName, extensionName, registrationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    registrationId: registrationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"ExtensionManagement\", \"f21cfc80-d2d2-4248-98bb-7820c74c4606\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {any} doc\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} scopeType\r\n     * @param {string} scopeValue\r\n     * @param {string} collectionName\r\n     */\r\n    createDocumentByName(doc, publisherName, extensionName, scopeType, scopeValue, collectionName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    scopeType: scopeType,\r\n                    scopeValue: scopeValue,\r\n                    collectionName: collectionName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"ExtensionManagement\", \"bbe06c18-1c8b-4fcd-b9c6-1535aaab8749\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, doc, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} scopeType\r\n     * @param {string} scopeValue\r\n     * @param {string} collectionName\r\n     * @param {string} documentId\r\n     */\r\n    deleteDocumentByName(publisherName, extensionName, scopeType, scopeValue, collectionName, documentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    scopeType: scopeType,\r\n                    scopeValue: scopeValue,\r\n                    collectionName: collectionName,\r\n                    documentId: documentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"ExtensionManagement\", \"bbe06c18-1c8b-4fcd-b9c6-1535aaab8749\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} scopeType\r\n     * @param {string} scopeValue\r\n     * @param {string} collectionName\r\n     * @param {string} documentId\r\n     */\r\n    getDocumentByName(publisherName, extensionName, scopeType, scopeValue, collectionName, documentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    scopeType: scopeType,\r\n                    scopeValue: scopeValue,\r\n                    collectionName: collectionName,\r\n                    documentId: documentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"ExtensionManagement\", \"bbe06c18-1c8b-4fcd-b9c6-1535aaab8749\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} scopeType\r\n     * @param {string} scopeValue\r\n     * @param {string} collectionName\r\n     */\r\n    getDocumentsByName(publisherName, extensionName, scopeType, scopeValue, collectionName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    scopeType: scopeType,\r\n                    scopeValue: scopeValue,\r\n                    collectionName: collectionName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"ExtensionManagement\", \"bbe06c18-1c8b-4fcd-b9c6-1535aaab8749\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {any} doc\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} scopeType\r\n     * @param {string} scopeValue\r\n     * @param {string} collectionName\r\n     */\r\n    setDocumentByName(doc, publisherName, extensionName, scopeType, scopeValue, collectionName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    scopeType: scopeType,\r\n                    scopeValue: scopeValue,\r\n                    collectionName: collectionName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"ExtensionManagement\", \"bbe06c18-1c8b-4fcd-b9c6-1535aaab8749\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, doc, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {any} doc\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} scopeType\r\n     * @param {string} scopeValue\r\n     * @param {string} collectionName\r\n     */\r\n    updateDocumentByName(doc, publisherName, extensionName, scopeType, scopeValue, collectionName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    scopeType: scopeType,\r\n                    scopeValue: scopeValue,\r\n                    collectionName: collectionName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"ExtensionManagement\", \"bbe06c18-1c8b-4fcd-b9c6-1535aaab8749\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, doc, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Query for one or more data collections for the specified extension.  Note: the token used for authorization must have been issued on behalf of the specified extension.\r\n     *\r\n     * @param {ExtensionManagementInterfaces.ExtensionDataCollectionQuery} collectionQuery\r\n     * @param {string} publisherName - Name of the publisher. Example: \"fabrikam\".\r\n     * @param {string} extensionName - Name of the extension. Example: \"ops-tools\".\r\n     */\r\n    queryCollectionsByName(collectionQuery, publisherName, extensionName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"ExtensionManagement\", \"56c331f1-ce53-4318-adfd-4db5c52a7a2e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, collectionQuery, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * List state and version information for all installed extensions.\r\n     *\r\n     * @param {boolean} includeDisabled - If true (the default), include disabled extensions in the results.\r\n     * @param {boolean} includeErrors - If true, include installed extensions in an error state in the results.\r\n     * @param {boolean} includeInstallationIssues\r\n     * @param {boolean} forceRefresh\r\n     */\r\n    getStates(includeDisabled, includeErrors, includeInstallationIssues, forceRefresh) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    includeDisabled: includeDisabled,\r\n                    includeErrors: includeErrors,\r\n                    includeInstallationIssues: includeInstallationIssues,\r\n                    forceRefresh: forceRefresh,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"ExtensionManagement\", \"92755d3d-9a8a-42b3-8a4d-87359fe5aa93\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.ExtensionState, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {ExtensionManagementInterfaces.InstalledExtensionQuery} query\r\n     */\r\n    queryExtensions(query) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"ExtensionManagement\", \"046c980f-1345-4ce2-bf85-b46d10ff4cfd\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, query, options);\r\n                    let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.InstalledExtension, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * List the installed extensions in the account / project collection.\r\n     *\r\n     * @param {boolean} includeDisabledExtensions - If true (the default), include disabled extensions in the results.\r\n     * @param {boolean} includeErrors - If true, include installed extensions with errors.\r\n     * @param {string[]} assetTypes - Determines which files are returned in the files array.  Provide the wildcard '*' to return all files, or a colon separated list to retrieve files with specific asset types.\r\n     * @param {boolean} includeInstallationIssues\r\n     */\r\n    getInstalledExtensions(includeDisabledExtensions, includeErrors, assetTypes, includeInstallationIssues) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    includeDisabledExtensions: includeDisabledExtensions,\r\n                    includeErrors: includeErrors,\r\n                    assetTypes: assetTypes && assetTypes.join(\":\"),\r\n                    includeInstallationIssues: includeInstallationIssues,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"ExtensionManagement\", \"275424d0-c844-4fe2-bda6-04933a1357d8\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.InstalledExtension, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update an installed extension. Typically this API is used to enable or disable an extension.\r\n     *\r\n     * @param {ExtensionManagementInterfaces.InstalledExtension} extension\r\n     */\r\n    updateInstalledExtension(extension) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"ExtensionManagement\", \"275424d0-c844-4fe2-bda6-04933a1357d8\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, extension, options);\r\n                    let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.InstalledExtension, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get an installed extension by its publisher and extension name.\r\n     *\r\n     * @param {string} publisherName - Name of the publisher. Example: \"fabrikam\".\r\n     * @param {string} extensionName - Name of the extension. Example: \"ops-tools\".\r\n     * @param {string[]} assetTypes - Determines which files are returned in the files array.  Provide the wildcard '*' to return all files, or a colon separated list to retrieve files with specific asset types.\r\n     */\r\n    getInstalledExtensionByName(publisherName, extensionName, assetTypes) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                let queryValues = {\r\n                    assetTypes: assetTypes && assetTypes.join(\":\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"ExtensionManagement\", \"fb0da285-f23e-4b56-8b53-3ef5f9f6de66\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.InstalledExtension, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Install the specified extension into the account / project collection.\r\n     *\r\n     * @param {string} publisherName - Name of the publisher. Example: \"fabrikam\".\r\n     * @param {string} extensionName - Name of the extension. Example: \"ops-tools\".\r\n     * @param {string} version\r\n     */\r\n    installExtensionByName(publisherName, extensionName, version) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    version: version\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"ExtensionManagement\", \"fb0da285-f23e-4b56-8b53-3ef5f9f6de66\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.InstalledExtension, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Uninstall the specified extension from the account / project collection.\r\n     *\r\n     * @param {string} publisherName - Name of the publisher. Example: \"fabrikam\".\r\n     * @param {string} extensionName - Name of the extension. Example: \"ops-tools\".\r\n     * @param {string} reason\r\n     * @param {string} reasonCode\r\n     */\r\n    uninstallExtensionByName(publisherName, extensionName, reason, reasonCode) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                let queryValues = {\r\n                    reason: reason,\r\n                    reasonCode: reasonCode,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"ExtensionManagement\", \"fb0da285-f23e-4b56-8b53-3ef5f9f6de66\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} userId\r\n     */\r\n    getPolicies(userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    userId: userId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"ExtensionManagement\", \"e5cc8c09-407b-4867-8319-2ae3338cbf6f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.UserExtensionPolicy, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} rejectMessage\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} requesterId\r\n     * @param {ExtensionManagementInterfaces.ExtensionRequestState} state\r\n     */\r\n    resolveRequest(rejectMessage, publisherName, extensionName, requesterId, state) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (state == null) {\r\n                throw new TypeError('state can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    requesterId: requesterId\r\n                };\r\n                let queryValues = {\r\n                    state: state,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"ExtensionManagement\", \"aa93e1f3-511c-4364-8b9c-eb98818f2e0b\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, rejectMessage, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     */\r\n    getRequests() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"ExtensionManagement\", \"216b978f-b164-424e-ada2-b77561e842b7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.RequestedExtension, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} rejectMessage\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {ExtensionManagementInterfaces.ExtensionRequestState} state\r\n     */\r\n    resolveAllRequests(rejectMessage, publisherName, extensionName, state) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (state == null) {\r\n                throw new TypeError('state can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                let queryValues = {\r\n                    state: state,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"ExtensionManagement\", \"ba93e1f3-511c-4364-8b9c-eb98818f2e0b\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, rejectMessage, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     */\r\n    deleteRequest(publisherName, extensionName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"ExtensionManagement\", \"f5afca1e-a728-4294-aa2d-4af0173431b5\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} requestMessage\r\n     */\r\n    requestExtension(publisherName, extensionName, requestMessage) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"ExtensionManagement\", \"f5afca1e-a728-4294-aa2d-4af0173431b5\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, requestMessage, options);\r\n                    let ret = this.formatResponse(res.result, ExtensionManagementInterfaces.TypeInfo.RequestedExtension, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     */\r\n    getToken() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"ExtensionManagement\", \"3a2e24ed-1d6f-4cb2-9f3b-45a96bbfaf50\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nExtensionManagementApi.RESOURCE_AREA_ID = \"6c2b0933-3600-42ae-bf8b-93d4f7e83594\";\r\nexports.ExtensionManagementApi = ExtensionManagementApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst FeatureManagementInterfaces = require(\"./interfaces/FeatureManagementInterfaces\");\r\nclass FeatureManagementApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-FeatureManagement-api', options);\r\n    }\r\n    /**\r\n     * Get a specific feature by its id\r\n     *\r\n     * @param {string} featureId - The contribution id of the feature\r\n     */\r\n    getFeature(featureId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    featureId: featureId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"FeatureManagement\", \"c4209f25-7a27-41dd-9f04-06080c7b6afd\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of all defined features\r\n     *\r\n     * @param {string} targetContributionId - Optional target contribution. If null/empty, return all features. If specified include the features that target the specified contribution.\r\n     */\r\n    getFeatures(targetContributionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    targetContributionId: targetContributionId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"FeatureManagement\", \"c4209f25-7a27-41dd-9f04-06080c7b6afd\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the state of the specified feature for the given user/all-users scope\r\n     *\r\n     * @param {string} featureId - Contribution id of the feature\r\n     * @param {string} userScope - User-Scope at which to get the value. Should be \"me\" for the current user or \"host\" for all users.\r\n     */\r\n    getFeatureState(featureId, userScope) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    featureId: featureId,\r\n                    userScope: userScope\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"FeatureManagement\", \"98911314-3f9b-4eaf-80e8-83900d8e85d9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, FeatureManagementInterfaces.TypeInfo.ContributedFeatureState, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Set the state of a feature\r\n     *\r\n     * @param {FeatureManagementInterfaces.ContributedFeatureState} feature - Posted feature state object. Should specify the effective value.\r\n     * @param {string} featureId - Contribution id of the feature\r\n     * @param {string} userScope - User-Scope at which to set the value. Should be \"me\" for the current user or \"host\" for all users.\r\n     * @param {string} reason - Reason for changing the state\r\n     * @param {string} reasonCode - Short reason code\r\n     */\r\n    setFeatureState(feature, featureId, userScope, reason, reasonCode) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    featureId: featureId,\r\n                    userScope: userScope\r\n                };\r\n                let queryValues = {\r\n                    reason: reason,\r\n                    reasonCode: reasonCode,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"FeatureManagement\", \"98911314-3f9b-4eaf-80e8-83900d8e85d9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, feature, options);\r\n                    let ret = this.formatResponse(res.result, FeatureManagementInterfaces.TypeInfo.ContributedFeatureState, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the state of the specified feature for the given named scope\r\n     *\r\n     * @param {string} featureId - Contribution id of the feature\r\n     * @param {string} userScope - User-Scope at which to get the value. Should be \"me\" for the current user or \"host\" for all users.\r\n     * @param {string} scopeName - Scope at which to get the feature setting for (e.g. \"project\" or \"team\")\r\n     * @param {string} scopeValue - Value of the scope (e.g. the project or team id)\r\n     */\r\n    getFeatureStateForScope(featureId, userScope, scopeName, scopeValue) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    featureId: featureId,\r\n                    userScope: userScope,\r\n                    scopeName: scopeName,\r\n                    scopeValue: scopeValue\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"FeatureManagement\", \"dd291e43-aa9f-4cee-8465-a93c78e414a4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, FeatureManagementInterfaces.TypeInfo.ContributedFeatureState, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Set the state of a feature at a specific scope\r\n     *\r\n     * @param {FeatureManagementInterfaces.ContributedFeatureState} feature - Posted feature state object. Should specify the effective value.\r\n     * @param {string} featureId - Contribution id of the feature\r\n     * @param {string} userScope - User-Scope at which to set the value. Should be \"me\" for the current user or \"host\" for all users.\r\n     * @param {string} scopeName - Scope at which to get the feature setting for (e.g. \"project\" or \"team\")\r\n     * @param {string} scopeValue - Value of the scope (e.g. the project or team id)\r\n     * @param {string} reason - Reason for changing the state\r\n     * @param {string} reasonCode - Short reason code\r\n     */\r\n    setFeatureStateForScope(feature, featureId, userScope, scopeName, scopeValue, reason, reasonCode) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    featureId: featureId,\r\n                    userScope: userScope,\r\n                    scopeName: scopeName,\r\n                    scopeValue: scopeValue\r\n                };\r\n                let queryValues = {\r\n                    reason: reason,\r\n                    reasonCode: reasonCode,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"FeatureManagement\", \"dd291e43-aa9f-4cee-8465-a93c78e414a4\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, feature, options);\r\n                    let ret = this.formatResponse(res.result, FeatureManagementInterfaces.TypeInfo.ContributedFeatureState, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the effective state for a list of feature ids\r\n     *\r\n     * @param {FeatureManagementInterfaces.ContributedFeatureStateQuery} query - Features to query along with current scope values\r\n     */\r\n    queryFeatureStates(query) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"FeatureManagement\", \"2b4486ad-122b-400c-ae65-17b6672c1f9d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, query, options);\r\n                    let ret = this.formatResponse(res.result, FeatureManagementInterfaces.TypeInfo.ContributedFeatureStateQuery, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the states of the specified features for the default scope\r\n     *\r\n     * @param {FeatureManagementInterfaces.ContributedFeatureStateQuery} query - Query describing the features to query.\r\n     * @param {string} userScope\r\n     */\r\n    queryFeatureStatesForDefaultScope(query, userScope) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    userScope: userScope\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"FeatureManagement\", \"3f810f28-03e2-4239-b0bc-788add3005e5\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, query, options);\r\n                    let ret = this.formatResponse(res.result, FeatureManagementInterfaces.TypeInfo.ContributedFeatureStateQuery, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the states of the specified features for the specific named scope\r\n     *\r\n     * @param {FeatureManagementInterfaces.ContributedFeatureStateQuery} query - Query describing the features to query.\r\n     * @param {string} userScope\r\n     * @param {string} scopeName\r\n     * @param {string} scopeValue\r\n     */\r\n    queryFeatureStatesForNamedScope(query, userScope, scopeName, scopeValue) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    userScope: userScope,\r\n                    scopeName: scopeName,\r\n                    scopeValue: scopeValue\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"FeatureManagement\", \"f29e997b-c2da-4d15-8380-765788a1a74c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, query, options);\r\n                    let ret = this.formatResponse(res.result, FeatureManagementInterfaces.TypeInfo.ContributedFeatureStateQuery, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nexports.FeatureManagementApi = FeatureManagementApi;\r\n","\"use strict\";\r\n/*\r\n* ---------------------------------------------------------\r\n* Copyright(C) Microsoft Corporation. All rights reserved.\r\n* ---------------------------------------------------------\r\n*\r\n* ---------------------------------------------------------\r\n* Generated file, DO NOT EDIT\r\n* ---------------------------------------------------------\r\n*/\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// Licensed under the MIT license.  See LICENSE file in the project root for full license information.\r\nconst stream = require(\"stream\");\r\nconst zlib = require(\"zlib\");\r\nconst httpm = require(\"typed-rest-client/HttpClient\");\r\nconst FileContainerApiBase = require(\"./FileContainerApiBase\");\r\nconst FileContainerInterfaces = require(\"./interfaces/FileContainerInterfaces\");\r\nclass FileContainerApi extends FileContainerApiBase.FileContainerApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, options);\r\n    }\r\n    /**\r\n     * @param {number} containerId\r\n     * @param {string} scope\r\n     * @param {string} itemPath\r\n     * @param {string} downloadFileName\r\n     */\r\n    getItem(containerId, scope, itemPath, downloadFileName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    containerId: containerId\r\n                };\r\n                let queryValues = {\r\n                    scope: scope,\r\n                    itemPath: itemPath,\r\n                    '$format': \"OctetStream\",\r\n                    downloadFileName: downloadFileName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"4.0-preview.4\", \"Container\", \"e4f5c81e-e250-447b-9fef-bd48471bea5e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/octet-stream', verData.apiVersion);\r\n                    let res = yield this.http.get(url);\r\n                    let rres = {};\r\n                    let statusCode = res.message.statusCode;\r\n                    rres.statusCode = statusCode;\r\n                    // not found leads to null obj returned\r\n                    if (statusCode == httpm.HttpCodes.NotFound) {\r\n                        resolve(rres);\r\n                    }\r\n                    if (statusCode > 299) {\r\n                        let msg;\r\n                        // if exception/error in body, attempt to get better error\r\n                        let contents = yield res.readBody();\r\n                        let obj;\r\n                        if (contents && contents.length > 0) {\r\n                            obj = JSON.parse(contents);\r\n                            if (options && options.responseProcessor) {\r\n                                rres.result = options.responseProcessor(obj);\r\n                            }\r\n                            else {\r\n                                rres.result = obj;\r\n                            }\r\n                        }\r\n                        if (obj && obj.message) {\r\n                            msg = obj.message;\r\n                        }\r\n                        else {\r\n                            msg = \"Failed request: (\" + statusCode + \") \" + res.message.url;\r\n                        }\r\n                        reject(new Error(msg));\r\n                    }\r\n                    else {\r\n                        // if the response is gzipped, unzip it\r\n                        if (res.message.headers[\"content-encoding\"] === \"gzip\") {\r\n                            let unzipStream = zlib.createGunzip();\r\n                            res.message.pipe(unzipStream);\r\n                            rres.result = unzipStream;\r\n                        }\r\n                        else {\r\n                            rres.result = res.message;\r\n                        }\r\n                        resolve(rres);\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    createItem(contentStream, uncompressedLength, containerId, itemPath, scope, options) {\r\n        return new Promise((resolve, reject) => {\r\n            let chunkStream = new ChunkStream(this, uncompressedLength, containerId, itemPath, scope, options);\r\n            chunkStream.on('finish', () => {\r\n                resolve(chunkStream.getItem());\r\n            });\r\n            contentStream.pipe(chunkStream);\r\n        });\r\n    }\r\n    // used by ChunkStream\r\n    _createItem(customHeaders, contentStream, containerId, itemPath, scope, onResult) {\r\n        var routeValues = {\r\n            containerId: containerId\r\n        };\r\n        var queryValues = {\r\n            itemPath: itemPath,\r\n            scope: scope,\r\n        };\r\n        customHeaders = customHeaders || {};\r\n        customHeaders[\"Content-Type\"] = \"\";\r\n        this.vsoClient.getVersioningData(\"4.0-preview.4\", \"Container\", \"e4f5c81e-e250-447b-9fef-bd48471bea5e\", routeValues, queryValues)\r\n            .then((versioningData) => {\r\n            var url = versioningData.requestUrl;\r\n            var serializationData = { responseTypeMetadata: FileContainerInterfaces.TypeInfo.FileContainerItem, responseIsCollection: false };\r\n            let options = this.createRequestOptions('application/octet-stream', versioningData.apiVersion);\r\n            options.additionalHeaders = customHeaders;\r\n            this.rest.uploadStream('PUT', url, contentStream, options)\r\n                .then((res) => {\r\n                let ret = this.formatResponse(res.result, FileContainerInterfaces.TypeInfo.FileContainerItem, false);\r\n                onResult(null, res.statusCode, ret);\r\n            })\r\n                .catch((err) => {\r\n                onResult(err, err.statusCode, null);\r\n            });\r\n        }, (error) => {\r\n            onResult(error, error.statusCode, null);\r\n        });\r\n    }\r\n}\r\nexports.FileContainerApi = FileContainerApi;\r\nclass ChunkStream extends stream.Writable {\r\n    constructor(api, uncompressedLength, containerId, itemPath, scope, options) {\r\n        super();\r\n        this._buffer = new Buffer(ChunkStream.ChunkSize);\r\n        this._length = 0;\r\n        this._startRange = 0;\r\n        this._bytesToSend = 0;\r\n        this._totalReceived = 0;\r\n        this._api = api;\r\n        this._options = options || {};\r\n        this._uncompressedLength = uncompressedLength;\r\n        this._containerId = containerId;\r\n        this._itemPath = itemPath;\r\n        this._scope = scope;\r\n        this._bytesToSend = this._options.isGzipped ? this._options.compressedLength : uncompressedLength;\r\n    }\r\n    _write(data, encoding, callback) {\r\n        let chunk = data;\r\n        if (!chunk) {\r\n            if (this._length == 0) {\r\n                callback();\r\n            }\r\n            else {\r\n                // last chunk\r\n                this._sendChunk(callback);\r\n            }\r\n            return;\r\n        }\r\n        let newBuffer = null;\r\n        if (this._length + chunk.length > ChunkStream.ChunkSize) {\r\n            // overflow\r\n            let overflowPosition = chunk.length - (ChunkStream.ChunkSize - this._length);\r\n            chunk.copy(this._buffer, this._length, 0, overflowPosition);\r\n            this._length += overflowPosition;\r\n            newBuffer = chunk.slice(overflowPosition);\r\n        }\r\n        else {\r\n            chunk.copy(this._buffer, this._length, 0, chunk.length);\r\n            this._length += chunk.length;\r\n        }\r\n        this._totalReceived += chunk.length;\r\n        if (this._length >= ChunkStream.ChunkSize || this._totalReceived >= this._bytesToSend) {\r\n            this._sendChunk(callback, newBuffer);\r\n        }\r\n        else {\r\n            callback();\r\n        }\r\n    }\r\n    _sendChunk(callback, newBuffer) {\r\n        let endRange = this._startRange + this._length;\r\n        let headers = {\r\n            \"Content-Range\": \"bytes \" + this._startRange + \"-\" + (endRange - 1) + \"/\" + this._bytesToSend,\r\n            \"Content-Length\": this._length\r\n        };\r\n        if (this._options.isGzipped) {\r\n            headers[\"Accept-Encoding\"] = \"gzip\";\r\n            headers[\"Content-Encoding\"] = \"gzip\";\r\n            headers[\"x-tfs-filelength\"] = this._uncompressedLength;\r\n        }\r\n        this._startRange = endRange;\r\n        this._api._createItem(headers, new BufferStream(this._buffer, this._length), this._containerId, this._itemPath, this._scope, (err, statusCode, item) => {\r\n            if (newBuffer) {\r\n                this._length = newBuffer.length;\r\n                newBuffer.copy(this._buffer);\r\n            }\r\n            else {\r\n                this._length = 0;\r\n            }\r\n            this._item = item;\r\n            callback(err);\r\n        });\r\n    }\r\n    getItem() {\r\n        return this._item;\r\n    }\r\n}\r\nChunkStream.ChunkSize = (16 * 1024 * 1024);\r\nclass BufferStream extends stream.Readable {\r\n    constructor(buffer, length) {\r\n        super();\r\n        this._position = 0;\r\n        this._length = 0;\r\n        this._buffer = buffer;\r\n        this._length = length;\r\n    }\r\n    _read(size) {\r\n        if (this._position >= this._length) {\r\n            this.push(null);\r\n            return;\r\n        }\r\n        let end = Math.min(this._position + size, this._length);\r\n        this.push(this._buffer.slice(this._position, end));\r\n        this._position = end;\r\n    }\r\n}\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst FileContainerInterfaces = require(\"./interfaces/FileContainerInterfaces\");\r\nclass FileContainerApiBase extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-FileContainer-api', options);\r\n    }\r\n    /**\r\n     * Creates the specified items in the referenced container.\r\n     *\r\n     * @param {VSSInterfaces.VssJsonCollectionWrapperV<FileContainerInterfaces.FileContainerItem[]>} items\r\n     * @param {number} containerId\r\n     * @param {string} scope - A guid representing the scope of the container. This is often the project id.\r\n     */\r\n    createItems(items, containerId, scope) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    containerId: containerId\r\n                };\r\n                let queryValues = {\r\n                    scope: scope,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.4\", \"Container\", \"e4f5c81e-e250-447b-9fef-bd48471bea5e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, items, options);\r\n                    let ret = this.formatResponse(res.result, FileContainerInterfaces.TypeInfo.FileContainerItem, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes the specified items in a container.\r\n     *\r\n     * @param {number} containerId - Container Id.\r\n     * @param {string} itemPath - Path to delete.\r\n     * @param {string} scope - A guid representing the scope of the container. This is often the project id.\r\n     */\r\n    deleteItem(containerId, itemPath, scope) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (itemPath == null) {\r\n                throw new TypeError('itemPath can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    containerId: containerId\r\n                };\r\n                let queryValues = {\r\n                    itemPath: itemPath,\r\n                    scope: scope,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.4\", \"Container\", \"e4f5c81e-e250-447b-9fef-bd48471bea5e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets containers filtered by a comma separated list of artifact uris within the same scope, if not specified returns all containers\r\n     *\r\n     * @param {string} scope - A guid representing the scope of the container. This is often the project id.\r\n     * @param {string} artifactUris\r\n     */\r\n    getContainers(scope, artifactUris) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    scope: scope,\r\n                    artifactUris: artifactUris,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.4\", \"Container\", \"e4f5c81e-e250-447b-9fef-bd48471bea5e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, FileContainerInterfaces.TypeInfo.FileContainer, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the specified file container object in a format dependent upon the given parameters or HTTP Accept request header\r\n     *\r\n     * @param {number} containerId - The requested container Id\r\n     * @param {string} scope - A guid representing the scope of the container. This is often the project id.\r\n     * @param {string} itemPath - The path to the item of interest\r\n     * @param {boolean} metadata - If true, this overrides any specified format parameter or HTTP Accept request header to provide non-recursive information for the given itemPath\r\n     * @param {string} format - If specified, this overrides the HTTP Accept request header to return either 'json' or 'zip'.  If $format is specified, then api-version should also be specified as a query parameter.\r\n     * @param {string} downloadFileName - If specified and returning other than JSON format, then this download name will be used (else defaults to itemPath)\r\n     * @param {boolean} includeDownloadTickets\r\n     * @param {boolean} isShallow - If true, returns only immediate children(files & folders) for the given itemPath. False will return all items recursively within itemPath.\r\n     * @param {boolean} ignoreRequestedMediaType - Set to true to ignore the HTTP Accept request header. Default is false.\r\n     * @param {boolean} includeBlobMetadata\r\n     * @param {boolean} saveAbsolutePath - Set to false to not save the absolute path to the specified directory of the artifact in the returned archive. Works only for artifact directories. Default is true.\r\n     * @param {boolean} preferRedirect - Set to true to get the redirect response which leads to the stream with content. Default is false.\r\n     */\r\n    getItems(containerId, scope, itemPath, metadata, format, downloadFileName, includeDownloadTickets, isShallow, ignoreRequestedMediaType, includeBlobMetadata, saveAbsolutePath, preferRedirect) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    containerId: containerId\r\n                };\r\n                let queryValues = {\r\n                    scope: scope,\r\n                    itemPath: itemPath,\r\n                    metadata: metadata,\r\n                    '$format': format,\r\n                    downloadFileName: downloadFileName,\r\n                    includeDownloadTickets: includeDownloadTickets,\r\n                    isShallow: isShallow,\r\n                    ignoreRequestedMediaType: ignoreRequestedMediaType,\r\n                    includeBlobMetadata: includeBlobMetadata,\r\n                    saveAbsolutePath: saveAbsolutePath,\r\n                    preferRedirect: preferRedirect,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.4\", \"Container\", \"e4f5c81e-e250-447b-9fef-bd48471bea5e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, FileContainerInterfaces.TypeInfo.FileContainerItem, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nexports.FileContainerApiBase = FileContainerApiBase;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst compatBase = require(\"././GalleryCompatHttpClientBase\");\r\nconst GalleryInterfaces = require(\"./interfaces/GalleryInterfaces\");\r\nclass GalleryApi extends compatBase.GalleryCompatHttpClientBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-Gallery-api', options);\r\n    }\r\n    /**\r\n     * @param {string} extensionId\r\n     * @param {string} accountName\r\n     */\r\n    shareExtensionById(extensionId, accountName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    extensionId: extensionId,\r\n                    accountName: accountName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"1f19631b-a0b4-4a03-89c2-d79785d24360\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} extensionId\r\n     * @param {string} accountName\r\n     */\r\n    unshareExtensionById(extensionId, accountName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    extensionId: extensionId,\r\n                    accountName: accountName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"1f19631b-a0b4-4a03-89c2-d79785d24360\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} accountName\r\n     */\r\n    shareExtension(publisherName, extensionName, accountName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    accountName: accountName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"a1e66d8f-f5de-4d16-8309-91a4e015ee46\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} accountName\r\n     */\r\n    unshareExtension(publisherName, extensionName, accountName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    accountName: accountName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"a1e66d8f-f5de-4d16-8309-91a4e015ee46\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} itemId\r\n     * @param {string} installationTarget\r\n     * @param {boolean} testCommerce\r\n     * @param {boolean} isFreeOrTrialInstall\r\n     */\r\n    getAcquisitionOptions(itemId, installationTarget, testCommerce, isFreeOrTrialInstall) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (installationTarget == null) {\r\n                throw new TypeError('installationTarget can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    itemId: itemId\r\n                };\r\n                let queryValues = {\r\n                    installationTarget: installationTarget,\r\n                    testCommerce: testCommerce,\r\n                    isFreeOrTrialInstall: isFreeOrTrialInstall,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"9d0a0105-075e-4760-aa15-8bcf54d1bd7d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.AcquisitionOptions, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {GalleryInterfaces.ExtensionAcquisitionRequest} acquisitionRequest\r\n     */\r\n    requestAcquisition(acquisitionRequest) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"3adb1f2d-e328-446e-be73-9f6d98071c45\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, acquisitionRequest, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionAcquisitionRequest, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} version\r\n     * @param {string} assetType\r\n     * @param {string} accountToken\r\n     * @param {boolean} acceptDefault\r\n     * @param {String} accountTokenHeader - Header to pass the account token\r\n     */\r\n    getAssetByName(customHeaders, publisherName, extensionName, version, assetType, accountToken, acceptDefault, accountTokenHeader) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    version: version,\r\n                    assetType: assetType\r\n                };\r\n                let queryValues = {\r\n                    accountToken: accountToken,\r\n                    acceptDefault: acceptDefault,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"X-Market-AccountToken\"] = \"accountTokenHeader\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"7529171f-a002-4180-93ba-685f358a0482\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} extensionId\r\n     * @param {string} version\r\n     * @param {string} assetType\r\n     * @param {string} accountToken\r\n     * @param {boolean} acceptDefault\r\n     * @param {String} accountTokenHeader - Header to pass the account token\r\n     */\r\n    getAsset(customHeaders, extensionId, version, assetType, accountToken, acceptDefault, accountTokenHeader) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    extensionId: extensionId,\r\n                    version: version,\r\n                    assetType: assetType\r\n                };\r\n                let queryValues = {\r\n                    accountToken: accountToken,\r\n                    acceptDefault: acceptDefault,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"X-Market-AccountToken\"] = \"accountTokenHeader\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"5d545f3d-ef47-488b-8be3-f5ee1517856c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} version\r\n     * @param {string} assetType\r\n     * @param {string} accountToken\r\n     * @param {String} accountTokenHeader - Header to pass the account token\r\n     */\r\n    getAssetAuthenticated(customHeaders, publisherName, extensionName, version, assetType, accountToken, accountTokenHeader) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    version: version,\r\n                    assetType: assetType\r\n                };\r\n                let queryValues = {\r\n                    accountToken: accountToken,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"X-Market-AccountToken\"] = \"accountTokenHeader\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"506aff36-2622-4f70-8063-77cce6366d20\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} azurePublisherId\r\n     */\r\n    associateAzurePublisher(publisherName, azurePublisherId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (azurePublisherId == null) {\r\n                throw new TypeError('azurePublisherId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName\r\n                };\r\n                let queryValues = {\r\n                    azurePublisherId: azurePublisherId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"efd202a6-9d87-4ebc-9229-d2b8ae2fdb6d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     */\r\n    queryAssociatedAzurePublisher(publisherName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"efd202a6-9d87-4ebc-9229-d2b8ae2fdb6d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} languages\r\n     */\r\n    getCategories(languages) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    languages: languages,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"e0a5a71e-3ac3-43a0-ae7d-0bb5c3046a2a\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} categoryName\r\n     * @param {string} languages\r\n     * @param {string} product\r\n     */\r\n    getCategoryDetails(categoryName, languages, product) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    categoryName: categoryName\r\n                };\r\n                let queryValues = {\r\n                    languages: languages,\r\n                    product: product,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"75d3c04d-84d2-4973-acd2-22627587dabc\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} product\r\n     * @param {string} categoryId\r\n     * @param {number} lcid\r\n     * @param {string} source\r\n     * @param {string} productVersion\r\n     * @param {string} skus\r\n     * @param {string} subSkus\r\n     * @param {string} productArchitecture\r\n     */\r\n    getCategoryTree(product, categoryId, lcid, source, productVersion, skus, subSkus, productArchitecture) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    product: product,\r\n                    categoryId: categoryId\r\n                };\r\n                let queryValues = {\r\n                    lcid: lcid,\r\n                    source: source,\r\n                    productVersion: productVersion,\r\n                    skus: skus,\r\n                    subSkus: subSkus,\r\n                    productArchitecture: productArchitecture,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"1102bb42-82b0-4955-8d8a-435d6b4cedd3\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} product\r\n     * @param {number} lcid\r\n     * @param {string} source\r\n     * @param {string} productVersion\r\n     * @param {string} skus\r\n     * @param {string} subSkus\r\n     */\r\n    getRootCategories(product, lcid, source, productVersion, skus, subSkus) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    product: product\r\n                };\r\n                let queryValues = {\r\n                    lcid: lcid,\r\n                    source: source,\r\n                    productVersion: productVersion,\r\n                    skus: skus,\r\n                    subSkus: subSkus,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"31fba831-35b2-46f6-a641-d05de5a877d8\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} version\r\n     */\r\n    getCertificate(publisherName, extensionName, version) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    version: version\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"e905ad6a-3f1f-4d08-9f6d-7d357ff8b7d0\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     */\r\n    getContentVerificationLog(publisherName, extensionName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"c0f1c7c4-3557-4ffb-b774-1e48c4865e99\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {GalleryInterfaces.CustomerSupportRequest} customerSupportRequest\r\n     */\r\n    createSupportRequest(customerSupportRequest) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"8eded385-026a-4c15-b810-b8eb402771f1\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, customerSupportRequest, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     */\r\n    createDraftForEditExtension(publisherName, extensionName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"02b33873-4e61-496e-83a2-59d1df46b7d8\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionDraft, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {GalleryInterfaces.ExtensionDraftPatch} draftPatch\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} draftId\r\n     */\r\n    performEditExtensionDraftOperation(draftPatch, publisherName, extensionName, draftId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    draftId: draftId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"02b33873-4e61-496e-83a2-59d1df46b7d8\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, draftPatch, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionDraft, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {NodeJS.ReadableStream} contentStream - Content to upload\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} draftId\r\n     * @param {String} fileName - Header to pass the filename of the uploaded data\r\n     */\r\n    updatePayloadInDraftForEditExtension(customHeaders, contentStream, publisherName, extensionName, draftId, fileName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    draftId: draftId\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                customHeaders[\"X-Market-UploadFileName\"] = \"fileName\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"02b33873-4e61-496e-83a2-59d1df46b7d8\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"PUT\", url, contentStream, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionDraft, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {NodeJS.ReadableStream} contentStream - Content to upload\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} draftId\r\n     * @param {string} assetType\r\n     */\r\n    addAssetForEditExtensionDraft(customHeaders, contentStream, publisherName, extensionName, draftId, assetType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    draftId: draftId,\r\n                    assetType: assetType\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"f1db9c47-6619-4998-a7e5-d7f9f41a4617\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"PUT\", url, contentStream, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {NodeJS.ReadableStream} contentStream - Content to upload\r\n     * @param {string} publisherName\r\n     * @param {String} product - Header to pass the product type of the payload file\r\n     * @param {String} fileName - Header to pass the filename of the uploaded data\r\n     */\r\n    createDraftForNewExtension(customHeaders, contentStream, publisherName, product, fileName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                customHeaders[\"X-Market-UploadFileProduct\"] = \"product\";\r\n                customHeaders[\"X-Market-UploadFileName\"] = \"fileName\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"b3ab127d-ebb9-4d22-b611-4e09593c8d79\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"POST\", url, contentStream, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionDraft, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {GalleryInterfaces.ExtensionDraftPatch} draftPatch\r\n     * @param {string} publisherName\r\n     * @param {string} draftId\r\n     */\r\n    performNewExtensionDraftOperation(draftPatch, publisherName, draftId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    draftId: draftId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"b3ab127d-ebb9-4d22-b611-4e09593c8d79\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, draftPatch, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionDraft, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {NodeJS.ReadableStream} contentStream - Content to upload\r\n     * @param {string} publisherName\r\n     * @param {string} draftId\r\n     * @param {String} fileName - Header to pass the filename of the uploaded data\r\n     */\r\n    updatePayloadInDraftForNewExtension(customHeaders, contentStream, publisherName, draftId, fileName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    draftId: draftId\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                customHeaders[\"X-Market-UploadFileName\"] = \"fileName\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"b3ab127d-ebb9-4d22-b611-4e09593c8d79\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"PUT\", url, contentStream, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionDraft, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {NodeJS.ReadableStream} contentStream - Content to upload\r\n     * @param {string} publisherName\r\n     * @param {string} draftId\r\n     * @param {string} assetType\r\n     */\r\n    addAssetForNewExtensionDraft(customHeaders, contentStream, publisherName, draftId, assetType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    draftId: draftId,\r\n                    assetType: assetType\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"88c0b1c8-b4f1-498a-9b2a-8446ef9f32e7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"PUT\", url, contentStream, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} draftId\r\n     * @param {string} assetType\r\n     * @param {string} extensionName\r\n     */\r\n    getAssetFromEditExtensionDraft(publisherName, draftId, assetType, extensionName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (extensionName == null) {\r\n                throw new TypeError('extensionName can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    draftId: draftId,\r\n                    assetType: assetType\r\n                };\r\n                let queryValues = {\r\n                    extensionName: extensionName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"88c0b1c8-b4f1-498a-9b2a-8446ef9f32e7\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} draftId\r\n     * @param {string} assetType\r\n     */\r\n    getAssetFromNewExtensionDraft(publisherName, draftId, assetType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    draftId: draftId,\r\n                    assetType: assetType\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"88c0b1c8-b4f1-498a-9b2a-8446ef9f32e7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get install/uninstall events of an extension. If both count and afterDate parameters are specified, count takes precedence.\r\n     *\r\n     * @param {string} publisherName - Name of the publisher\r\n     * @param {string} extensionName - Name of the extension\r\n     * @param {number} count - Count of events to fetch, applies to each event type.\r\n     * @param {Date} afterDate - Fetch events that occurred on or after this date\r\n     * @param {string} include - Filter options. Supported values: install, uninstall, review, acquisition, sales. Default is to fetch all types of events\r\n     * @param {string} includeProperty - Event properties to include. Currently only 'lastContactDetails' is supported for uninstall events\r\n     */\r\n    getExtensionEvents(publisherName, extensionName, count, afterDate, include, includeProperty) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                let queryValues = {\r\n                    count: count,\r\n                    afterDate: afterDate,\r\n                    include: include,\r\n                    includeProperty: includeProperty,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"3d13c499-2168-4d06-bef4-14aba185dcd5\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionEvents, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * API endpoint to publish extension install/uninstall events. This is meant to be invoked by EMS only for sending us data related to install/uninstall of an extension.\r\n     *\r\n     * @param {GalleryInterfaces.ExtensionEvents[]} extensionEvents\r\n     */\r\n    publishExtensionEvents(extensionEvents) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"0bf2bd3a-70e0-4d5d-8bf7-bd4a9c2ab6e7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, extensionEvents, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {GalleryInterfaces.ExtensionQuery} extensionQuery\r\n     * @param {string} accountToken\r\n     * @param {String} accountTokenHeader - Header to pass the account token\r\n     */\r\n    queryExtensions(customHeaders, extensionQuery, accountToken, accountTokenHeader) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    accountToken: accountToken,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"X-Market-AccountToken\"] = \"accountTokenHeader\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"eb9d5ee1-6d43-456b-b80e-8a96fbc014b6\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.create(url, extensionQuery, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionQueryResult, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {NodeJS.ReadableStream} contentStream - Content to upload\r\n     * @param {string} extensionType\r\n     * @param {string} reCaptchaToken\r\n     */\r\n    createExtension(customHeaders, contentStream, extensionType, reCaptchaToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    extensionType: extensionType,\r\n                    reCaptchaToken: reCaptchaToken,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"gallery\", \"a41192c8-9525-4b58-bc86-179fa549d80d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"POST\", url, contentStream, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} extensionId\r\n     * @param {string} version\r\n     */\r\n    deleteExtensionById(extensionId, version) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    extensionId: extensionId\r\n                };\r\n                let queryValues = {\r\n                    version: version,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"gallery\", \"a41192c8-9525-4b58-bc86-179fa549d80d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} extensionId\r\n     * @param {string} version\r\n     * @param {GalleryInterfaces.ExtensionQueryFlags} flags\r\n     */\r\n    getExtensionById(extensionId, version, flags) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    extensionId: extensionId\r\n                };\r\n                let queryValues = {\r\n                    version: version,\r\n                    flags: flags,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"gallery\", \"a41192c8-9525-4b58-bc86-179fa549d80d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} extensionId\r\n     * @param {string} reCaptchaToken\r\n     */\r\n    updateExtensionById(extensionId, reCaptchaToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    extensionId: extensionId\r\n                };\r\n                let queryValues = {\r\n                    reCaptchaToken: reCaptchaToken,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"gallery\", \"a41192c8-9525-4b58-bc86-179fa549d80d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, null, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {NodeJS.ReadableStream} contentStream - Content to upload\r\n     * @param {string} publisherName\r\n     * @param {string} extensionType\r\n     * @param {string} reCaptchaToken\r\n     */\r\n    createExtensionWithPublisher(customHeaders, contentStream, publisherName, extensionType, reCaptchaToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName\r\n                };\r\n                let queryValues = {\r\n                    extensionType: extensionType,\r\n                    reCaptchaToken: reCaptchaToken,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"gallery\", \"e11ea35a-16fe-4b80-ab11-c4cab88a0966\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"POST\", url, contentStream, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} version\r\n     */\r\n    deleteExtension(publisherName, extensionName, version) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                let queryValues = {\r\n                    version: version,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"gallery\", \"e11ea35a-16fe-4b80-ab11-c4cab88a0966\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} version\r\n     * @param {GalleryInterfaces.ExtensionQueryFlags} flags\r\n     * @param {string} accountToken\r\n     * @param {String} accountTokenHeader - Header to pass the account token\r\n     */\r\n    getExtension(customHeaders, publisherName, extensionName, version, flags, accountToken, accountTokenHeader) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                let queryValues = {\r\n                    version: version,\r\n                    flags: flags,\r\n                    accountToken: accountToken,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"X-Market-AccountToken\"] = \"accountTokenHeader\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"gallery\", \"e11ea35a-16fe-4b80-ab11-c4cab88a0966\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * REST endpoint to update an extension.\r\n     *\r\n     * @param {NodeJS.ReadableStream} contentStream - Content to upload\r\n     * @param {string} publisherName - Name of the publisher\r\n     * @param {string} extensionName - Name of the extension\r\n     * @param {string} extensionType\r\n     * @param {string} reCaptchaToken\r\n     * @param {boolean} bypassScopeCheck - This parameter decides if the scope change check needs to be invoked or not\r\n     */\r\n    updateExtension(customHeaders, contentStream, publisherName, extensionName, extensionType, reCaptchaToken, bypassScopeCheck) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                let queryValues = {\r\n                    extensionType: extensionType,\r\n                    reCaptchaToken: reCaptchaToken,\r\n                    bypassScopeCheck: bypassScopeCheck,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"gallery\", \"e11ea35a-16fe-4b80-ab11-c4cab88a0966\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"PUT\", url, contentStream, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {GalleryInterfaces.PublishedExtensionFlags} flags\r\n     */\r\n    updateExtensionProperties(publisherName, extensionName, flags) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (flags == null) {\r\n                throw new TypeError('flags can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                let queryValues = {\r\n                    flags: flags,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"gallery\", \"e11ea35a-16fe-4b80-ab11-c4cab88a0966\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, null, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} hostType\r\n     * @param {string} hostName\r\n     */\r\n    shareExtensionWithHost(publisherName, extensionName, hostType, hostName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    hostType: hostType,\r\n                    hostName: hostName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"328a3af8-d124-46e9-9483-01690cd415b9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} hostType\r\n     * @param {string} hostName\r\n     */\r\n    unshareExtensionWithHost(publisherName, extensionName, hostType, hostName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    hostType: hostType,\r\n                    hostName: hostName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"328a3af8-d124-46e9-9483-01690cd415b9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Rest end point to validate if an Azure publisher owns an extension for 3rd party commerce scenario. Azure only supports POST operations and the above signature is not typical of the REST operations. http://sharepoint/sites/AzureUX/_layouts/15/WopiFrame2.aspx?sourcedoc={A793D31E-6DC6-4174-8FA3-DE3F82B51642}&file=Data%20Market%20Partner%20integration%20with%20Marketplace%20service.docx&action=default\r\n     *\r\n     * @param {GalleryInterfaces.AzureRestApiRequestModel} azureRestApiRequestModel - All the parameters are sent in the request body\r\n     */\r\n    extensionValidator(azureRestApiRequestModel) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"05e8a5e1-8c59-4c2c-8856-0ff087d1a844\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, azureRestApiRequestModel, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Send Notification\r\n     *\r\n     * @param {GalleryInterfaces.NotificationsData} notificationData - Denoting the data needed to send notification\r\n     */\r\n    sendNotifications(notificationData) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"eab39817-413c-4602-a49f-07ad00844980\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, notificationData, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * This endpoint gets hit when you download a VSTS extension from the Web UI\r\n     *\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} version\r\n     * @param {string} accountToken\r\n     * @param {boolean} acceptDefault\r\n     * @param {String} accountTokenHeader - Header to pass the account token\r\n     */\r\n    getPackage(customHeaders, publisherName, extensionName, version, accountToken, acceptDefault, accountTokenHeader) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    version: version\r\n                };\r\n                let queryValues = {\r\n                    accountToken: accountToken,\r\n                    acceptDefault: acceptDefault,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"X-Market-AccountToken\"] = \"accountTokenHeader\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"7cb576f8-1cae-4c4b-b7b1-e4af5759e965\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} version\r\n     * @param {string} assetType\r\n     * @param {string} assetToken\r\n     * @param {string} accountToken\r\n     * @param {boolean} acceptDefault\r\n     * @param {String} accountTokenHeader - Header to pass the account token\r\n     */\r\n    getAssetWithToken(customHeaders, publisherName, extensionName, version, assetType, assetToken, accountToken, acceptDefault, accountTokenHeader) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    version: version,\r\n                    assetType: assetType,\r\n                    assetToken: assetToken\r\n                };\r\n                let queryValues = {\r\n                    accountToken: accountToken,\r\n                    acceptDefault: acceptDefault,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"X-Market-AccountToken\"] = \"accountTokenHeader\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"364415a1-0077-4a41-a7a0-06edd4497492\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete publisher asset like logo\r\n     *\r\n     * @param {string} publisherName - Internal name of the publisher\r\n     * @param {string} assetType - Type of asset. Default value is 'logo'.\r\n     */\r\n    deletePublisherAsset(publisherName, assetType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName\r\n                };\r\n                let queryValues = {\r\n                    assetType: assetType,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"21143299-34f9-4c62-8ca8-53da691192f9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get publisher asset like logo as a stream\r\n     *\r\n     * @param {string} publisherName - Internal name of the publisher\r\n     * @param {string} assetType - Type of asset. Default value is 'logo'.\r\n     */\r\n    getPublisherAsset(publisherName, assetType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName\r\n                };\r\n                let queryValues = {\r\n                    assetType: assetType,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"21143299-34f9-4c62-8ca8-53da691192f9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update publisher asset like logo. It accepts asset file as an octet stream and file name is passed in header values.\r\n     *\r\n     * @param {NodeJS.ReadableStream} contentStream - Content to upload\r\n     * @param {string} publisherName - Internal name of the publisher\r\n     * @param {string} assetType - Type of asset. Default value is 'logo'.\r\n     * @param {String} fileName - Header to pass the filename of the uploaded data\r\n     */\r\n    updatePublisherAsset(customHeaders, contentStream, publisherName, assetType, fileName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName\r\n                };\r\n                let queryValues = {\r\n                    assetType: assetType,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                customHeaders[\"X-Market-UploadFileName\"] = \"fileName\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"21143299-34f9-4c62-8ca8-53da691192f9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"PUT\", url, contentStream, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     */\r\n    fetchDomainToken(publisherName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"67a609ef-fa74-4b52-8664-78d76f7b3634\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     */\r\n    verifyDomainToken(publisherName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"67a609ef-fa74-4b52-8664-78d76f7b3634\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {GalleryInterfaces.PublisherQuery} publisherQuery\r\n     */\r\n    queryPublishers(publisherQuery) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"2ad6ee0a-b53f-4034-9d1d-d009fda1212e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, publisherQuery, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublisherQueryResult, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {GalleryInterfaces.Publisher} publisher\r\n     */\r\n    createPublisher(publisher) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"4ddec66a-e4f6-4f5d-999e-9e77710d7ff4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, publisher, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Publisher, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     */\r\n    deletePublisher(publisherName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"4ddec66a-e4f6-4f5d-999e-9e77710d7ff4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {number} flags\r\n     */\r\n    getPublisher(publisherName, flags) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName\r\n                };\r\n                let queryValues = {\r\n                    flags: flags,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"4ddec66a-e4f6-4f5d-999e-9e77710d7ff4\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Publisher, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {GalleryInterfaces.Publisher} publisher\r\n     * @param {string} publisherName\r\n     */\r\n    updatePublisher(publisher, publisherName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"4ddec66a-e4f6-4f5d-999e-9e77710d7ff4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, publisher, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Publisher, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Endpoint to add/modify publisher membership. Currently Supports only addition/modification of 1 user at a time Works only for adding members of same tenant.\r\n     *\r\n     * @param {GalleryInterfaces.PublisherUserRoleAssignmentRef[]} roleAssignments - List of user identifiers(email address) and role to be added. Currently only one entry is supported.\r\n     * @param {string} publisherName - The name/id of publisher to which users have to be added\r\n     * @param {boolean} limitToCallerIdentityDomain - Should cross tenant addtions be allowed or not.\r\n     */\r\n    updatePublisherMembers(roleAssignments, publisherName, limitToCallerIdentityDomain) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName\r\n                };\r\n                let queryValues = {\r\n                    limitToCallerIdentityDomain: limitToCallerIdentityDomain,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"4ddec66a-e4f6-4f5d-999e-9e77710d7ff4\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, roleAssignments, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublisherRoleAssignment, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {NodeJS.ReadableStream} contentStream - Content to upload\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} extensionType\r\n     * @param {string} reCaptchaToken\r\n     * @param {boolean} bypassScopeCheck\r\n     */\r\n    publishExtensionWithPublisherSignature(customHeaders, contentStream, publisherName, extensionName, extensionType, reCaptchaToken, bypassScopeCheck) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                let queryValues = {\r\n                    extensionType: extensionType,\r\n                    reCaptchaToken: reCaptchaToken,\r\n                    bypassScopeCheck: bypassScopeCheck,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"multipart/related\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"e11ea35a-16fe-4b80-ab11-c4cab88a0969\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"PUT\", url, contentStream, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     */\r\n    getPublisherWithoutToken(publisherName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"215a2ed8-458a-4850-ad5a-45f1dabc3461\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Publisher, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a list of questions with their responses associated with an extension.\r\n     *\r\n     * @param {string} publisherName - Name of the publisher who published the extension.\r\n     * @param {string} extensionName - Name of the extension.\r\n     * @param {number} count - Number of questions to retrieve (defaults to 10).\r\n     * @param {number} page - Page number from which set of questions are to be retrieved.\r\n     * @param {Date} afterDate - If provided, results questions are returned which were posted after this date\r\n     */\r\n    getQuestions(publisherName, extensionName, count, page, afterDate) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                let queryValues = {\r\n                    count: count,\r\n                    page: page,\r\n                    afterDate: afterDate,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"c010d03d-812c-4ade-ae07-c1862475eda5\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.QuestionsResult, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Flags a concern with an existing question for an extension.\r\n     *\r\n     * @param {GalleryInterfaces.Concern} concern - User reported concern with a question for the extension.\r\n     * @param {string} pubName - Name of the publisher who published the extension.\r\n     * @param {string} extName - Name of the extension.\r\n     * @param {number} questionId - Identifier of the question to be updated for the extension.\r\n     */\r\n    reportQuestion(concern, pubName, extName, questionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    pubName: pubName,\r\n                    extName: extName,\r\n                    questionId: questionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"784910cd-254a-494d-898b-0728549b2f10\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, concern, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Concern, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a new question for an extension.\r\n     *\r\n     * @param {GalleryInterfaces.Question} question - Question to be created for the extension.\r\n     * @param {string} publisherName - Name of the publisher who published the extension.\r\n     * @param {string} extensionName - Name of the extension.\r\n     */\r\n    createQuestion(question, publisherName, extensionName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"6d1d9741-eca8-4701-a3a5-235afc82dfa4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, question, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Question, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes an existing question and all its associated responses for an extension. (soft delete)\r\n     *\r\n     * @param {string} publisherName - Name of the publisher who published the extension.\r\n     * @param {string} extensionName - Name of the extension.\r\n     * @param {number} questionId - Identifier of the question to be deleted for the extension.\r\n     */\r\n    deleteQuestion(publisherName, extensionName, questionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    questionId: questionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"6d1d9741-eca8-4701-a3a5-235afc82dfa4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates an existing question for an extension.\r\n     *\r\n     * @param {GalleryInterfaces.Question} question - Updated question to be set for the extension.\r\n     * @param {string} publisherName - Name of the publisher who published the extension.\r\n     * @param {string} extensionName - Name of the extension.\r\n     * @param {number} questionId - Identifier of the question to be updated for the extension.\r\n     */\r\n    updateQuestion(question, publisherName, extensionName, questionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    questionId: questionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"6d1d9741-eca8-4701-a3a5-235afc82dfa4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, question, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Question, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a new response for a given question for an extension.\r\n     *\r\n     * @param {GalleryInterfaces.Response} response - Response to be created for the extension.\r\n     * @param {string} publisherName - Name of the publisher who published the extension.\r\n     * @param {string} extensionName - Name of the extension.\r\n     * @param {number} questionId - Identifier of the question for which response is to be created for the extension.\r\n     */\r\n    createResponse(response, publisherName, extensionName, questionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    questionId: questionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"7f8ae5e0-46b0-438f-b2e8-13e8513517bd\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, response, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Response, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes a response for an extension. (soft delete)\r\n     *\r\n     * @param {string} publisherName - Name of the publisher who published the extension.\r\n     * @param {string} extensionName - Name of the extension.\r\n     * @param {number} questionId - Identifies the question whose response is to be deleted.\r\n     * @param {number} responseId - Identifies the response to be deleted.\r\n     */\r\n    deleteResponse(publisherName, extensionName, questionId, responseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    questionId: questionId,\r\n                    responseId: responseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"7f8ae5e0-46b0-438f-b2e8-13e8513517bd\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates an existing response for a given question for an extension.\r\n     *\r\n     * @param {GalleryInterfaces.Response} response - Updated response to be set for the extension.\r\n     * @param {string} publisherName - Name of the publisher who published the extension.\r\n     * @param {string} extensionName - Name of the extension.\r\n     * @param {number} questionId - Identifier of the question for which response is to be updated for the extension.\r\n     * @param {number} responseId - Identifier of the response which has to be updated.\r\n     */\r\n    updateResponse(response, publisherName, extensionName, questionId, responseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    questionId: questionId,\r\n                    responseId: responseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"7f8ae5e0-46b0-438f-b2e8-13e8513517bd\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, response, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Response, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns extension reports\r\n     *\r\n     * @param {string} publisherName - Name of the publisher who published the extension\r\n     * @param {string} extensionName - Name of the extension\r\n     * @param {number} days - Last n days report. If afterDate and days are specified, days will take priority\r\n     * @param {number} count - Number of events to be returned\r\n     * @param {Date} afterDate - Use if you want to fetch events newer than the specified date\r\n     */\r\n    getExtensionReports(publisherName, extensionName, days, count, afterDate) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                let queryValues = {\r\n                    days: days,\r\n                    count: count,\r\n                    afterDate: afterDate,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"79e0c74f-157f-437e-845f-74fbb4121d4c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a list of reviews associated with an extension\r\n     *\r\n     * @param {string} publisherName - Name of the publisher who published the extension\r\n     * @param {string} extensionName - Name of the extension\r\n     * @param {number} count - Number of reviews to retrieve (defaults to 5)\r\n     * @param {GalleryInterfaces.ReviewFilterOptions} filterOptions - FilterOptions to filter out empty reviews etcetera, defaults to none\r\n     * @param {Date} beforeDate - Use if you want to fetch reviews older than the specified date, defaults to null\r\n     * @param {Date} afterDate - Use if you want to fetch reviews newer than the specified date, defaults to null\r\n     */\r\n    getReviews(publisherName, extensionName, count, filterOptions, beforeDate, afterDate) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                let queryValues = {\r\n                    count: count,\r\n                    filterOptions: filterOptions,\r\n                    beforeDate: beforeDate,\r\n                    afterDate: afterDate,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"5b3f819f-f247-42ad-8c00-dd9ab9ab246d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ReviewsResult, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a summary of the reviews\r\n     *\r\n     * @param {string} pubName - Name of the publisher who published the extension\r\n     * @param {string} extName - Name of the extension\r\n     * @param {Date} beforeDate - Use if you want to fetch summary of reviews older than the specified date, defaults to null\r\n     * @param {Date} afterDate - Use if you want to fetch summary of reviews newer than the specified date, defaults to null\r\n     */\r\n    getReviewsSummary(pubName, extName, beforeDate, afterDate) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    pubName: pubName,\r\n                    extName: extName\r\n                };\r\n                let queryValues = {\r\n                    beforeDate: beforeDate,\r\n                    afterDate: afterDate,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"b7b44e21-209e-48f0-ae78-04727fc37d77\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a new review for an extension\r\n     *\r\n     * @param {GalleryInterfaces.Review} review - Review to be created for the extension\r\n     * @param {string} pubName - Name of the publisher who published the extension\r\n     * @param {string} extName - Name of the extension\r\n     */\r\n    createReview(review, pubName, extName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    pubName: pubName,\r\n                    extName: extName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"e6e85b9d-aa70-40e6-aa28-d0fbf40b91a3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, review, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.Review, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes a review\r\n     *\r\n     * @param {string} pubName - Name of the publisher who published the extension\r\n     * @param {string} extName - Name of the extension\r\n     * @param {number} reviewId - Id of the review which needs to be updated\r\n     */\r\n    deleteReview(pubName, extName, reviewId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    pubName: pubName,\r\n                    extName: extName,\r\n                    reviewId: reviewId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"e6e85b9d-aa70-40e6-aa28-d0fbf40b91a3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates or Flags a review\r\n     *\r\n     * @param {GalleryInterfaces.ReviewPatch} reviewPatch - ReviewPatch object which contains the changes to be applied to the review\r\n     * @param {string} pubName - Name of the publisher who published the extension\r\n     * @param {string} extName - Name of the extension\r\n     * @param {number} reviewId - Id of the review which needs to be updated\r\n     */\r\n    updateReview(reviewPatch, pubName, extName, reviewId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    pubName: pubName,\r\n                    extName: extName,\r\n                    reviewId: reviewId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"e6e85b9d-aa70-40e6-aa28-d0fbf40b91a3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, reviewPatch, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ReviewPatch, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {GalleryInterfaces.ExtensionCategory} category\r\n     */\r\n    createCategory(category) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"476531a3-7024-4516-a76a-ed64d3008ad6\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, category, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get all setting entries for the given user/all-users scope\r\n     *\r\n     * @param {string} userScope - User-Scope at which to get the value. Should be \"me\" for the current user or \"host\" for all users.\r\n     * @param {string} key - Optional key under which to filter all the entries\r\n     */\r\n    getGalleryUserSettings(userScope, key) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    userScope: userScope,\r\n                    key: key\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"9b75ece3-7960-401c-848b-148ac01ca350\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Set all setting entries for the given user/all-users scope\r\n     *\r\n     * @param {{ [key: string] : any; }} entries - A key-value pair of all settings that need to be set\r\n     * @param {string} userScope - User-Scope at which to get the value. Should be \"me\" for the current user or \"host\" for all users.\r\n     */\r\n    setGalleryUserSettings(entries, userScope) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    userScope: userScope\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"9b75ece3-7960-401c-848b-148ac01ca350\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, entries, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} keyType\r\n     * @param {number} expireCurrentSeconds\r\n     */\r\n    generateKey(keyType, expireCurrentSeconds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    keyType: keyType\r\n                };\r\n                let queryValues = {\r\n                    expireCurrentSeconds: expireCurrentSeconds,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"92ed5cf4-c38b-465a-9059-2f2fb7c624b5\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} keyType\r\n     */\r\n    getSigningKey(keyType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    keyType: keyType\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"92ed5cf4-c38b-465a-9059-2f2fb7c624b5\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {GalleryInterfaces.ExtensionStatisticUpdate} extensionStatisticsUpdate\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     */\r\n    updateExtensionStatistics(extensionStatisticsUpdate, publisherName, extensionName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"a0ea3204-11e9-422d-a9ca-45851cc41400\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, extensionStatisticsUpdate, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {number} days\r\n     * @param {GalleryInterfaces.ExtensionStatsAggregateType} aggregate\r\n     * @param {Date} afterDate\r\n     */\r\n    getExtensionDailyStats(publisherName, extensionName, days, aggregate, afterDate) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName\r\n                };\r\n                let queryValues = {\r\n                    days: days,\r\n                    aggregate: aggregate,\r\n                    afterDate: afterDate,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"ae06047e-51c5-4fb4-ab65-7be488544416\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionDailyStats, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * This route/location id only supports HTTP POST anonymously, so that the page view daily stat can be incremented from Marketplace client. Trying to call GET on this route should result in an exception. Without this explicit implementation, calling GET on this public route invokes the above GET implementation GetExtensionDailyStats.\r\n     *\r\n     * @param {string} publisherName - Name of the publisher\r\n     * @param {string} extensionName - Name of the extension\r\n     * @param {string} version - Version of the extension\r\n     */\r\n    getExtensionDailyStatsAnonymous(publisherName, extensionName, version) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    version: version\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"4fa7adb6-ca65-4075-a232-5f28323288ea\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.ExtensionDailyStats, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Increments a daily statistic associated with the extension\r\n     *\r\n     * @param {string} publisherName - Name of the publisher\r\n     * @param {string} extensionName - Name of the extension\r\n     * @param {string} version - Version of the extension\r\n     * @param {string} statType - Type of stat to increment\r\n     * @param {string} targetPlatform\r\n     */\r\n    incrementExtensionDailyStat(publisherName, extensionName, version, statType, targetPlatform) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (statType == null) {\r\n                throw new TypeError('statType can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    version: version\r\n                };\r\n                let queryValues = {\r\n                    statType: statType,\r\n                    targetPlatform: targetPlatform,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"4fa7adb6-ca65-4075-a232-5f28323288ea\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} publisherName\r\n     * @param {string} extensionName\r\n     * @param {string} version\r\n     * @param {string} targetPlatform\r\n     */\r\n    getVerificationLog(publisherName, extensionName, version, targetPlatform) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    publisherName: publisherName,\r\n                    extensionName: extensionName,\r\n                    version: version\r\n                };\r\n                let queryValues = {\r\n                    targetPlatform: targetPlatform,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"c5523abe-b843-437f-875b-5833064efe4d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} itemName\r\n     * @param {string} version\r\n     * @param {GalleryInterfaces.VSCodeWebExtensionStatisicsType} statType\r\n     */\r\n    updateVSCodeWebExtensionStatistics(itemName, version, statType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    itemName: itemName,\r\n                    version: version,\r\n                    statType: statType\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"gallery\", \"205c91a8-7841-4fd3-ae4f-5a745d5a8df5\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nGalleryApi.RESOURCE_AREA_ID = \"69d21c00-f135-441b-b5ce-3626378e0819\";\r\nexports.GalleryApi = GalleryApi;\r\n","\"use strict\";\r\n/*\r\n* ---------------------------------------------------------\r\n* Copyright(C) Microsoft Corporation. All rights reserved.\r\n* ---------------------------------------------------------\r\n*\r\n* ---------------------------------------------------------\r\n* Generated file, DO NOT EDIT\r\n* ---------------------------------------------------------\r\n*/\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst GalleryInterfaces = require(\"./interfaces/GalleryInterfaces\");\r\nclass GalleryCompatHttpClientBase extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, userAgent, options) {\r\n        super(baseUrl, handlers, userAgent, options);\r\n    }\r\n    /**\r\n    * @param {GalleryInterfaces.ExtensionPackage} extensionPackage\r\n    */\r\n    createExtensionJson(extensionPackage) {\r\n        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n            let routeValues = {};\r\n            try {\r\n                let verData = yield this.vsoClient.getVersioningData(\"3.1-preview.1\", \"gallery\", \"a41192c8-9525-4b58-bc86-179fa549d80d\", routeValues);\r\n                let url = verData.requestUrl;\r\n                let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                let res;\r\n                res = yield this.rest.create(url, extensionPackage, options);\r\n                let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);\r\n                resolve(ret);\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n    * @param {GalleryInterfaces.ExtensionPackage} extensionPackage\r\n    * @param {string} extensionId\r\n    */\r\n    updateExtensionByIdJson(extensionPackage, extensionId) {\r\n        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n            let routeValues = {\r\n                extensionId: extensionId\r\n            };\r\n            try {\r\n                let verData = yield this.vsoClient.getVersioningData(\"3.1-preview.1\", \"gallery\", \"a41192c8-9525-4b58-bc86-179fa549d80d\", routeValues);\r\n                let url = verData.requestUrl;\r\n                let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                let res;\r\n                res = yield this.rest.replace(url, extensionPackage, options);\r\n                let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);\r\n                resolve(ret);\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n    * @param {GalleryInterfaces.ExtensionPackage} extensionPackage\r\n    * @param {string} publisherName\r\n    */\r\n    createExtensionWithPublisherJson(extensionPackage, publisherName) {\r\n        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n            let routeValues = {\r\n                publisherName: publisherName\r\n            };\r\n            try {\r\n                let verData = yield this.vsoClient.getVersioningData(\"3.1-preview.1\", \"gallery\", \"e11ea35a-16fe-4b80-ab11-c4cab88a0966\", routeValues);\r\n                let url = verData.requestUrl;\r\n                let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                let res;\r\n                res = yield this.rest.create(url, extensionPackage, options);\r\n                let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);\r\n                resolve(ret);\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n    * @param {GalleryInterfaces.ExtensionPackage} extensionPackage\r\n    * @param {string} publisherName\r\n    * @param {string} extensionName\r\n    */\r\n    updateExtensionJson(extensionPackage, publisherName, extensionName) {\r\n        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n            let routeValues = {\r\n                publisherName: publisherName,\r\n                extensionName: extensionName\r\n            };\r\n            try {\r\n                let verData = yield this.vsoClient.getVersioningData(\"3.1-preview.1\", \"gallery\", \"e11ea35a-16fe-4b80-ab11-c4cab88a0966\", routeValues);\r\n                let url = verData.requestUrl;\r\n                let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                let res;\r\n                res = yield this.rest.replace(url, extensionPackage, options);\r\n                let ret = this.formatResponse(res.result, GalleryInterfaces.TypeInfo.PublishedExtension, false);\r\n                resolve(ret);\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        }));\r\n    }\r\n}\r\nexports.GalleryCompatHttpClientBase = GalleryCompatHttpClientBase;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst GitInterfaces = require(\"./interfaces/GitInterfaces\");\r\nclass GitApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-Git-api', options);\r\n    }\r\n    /**\r\n     * DELETE Deletes Enablement status and BillableCommitters data from DB. Deleting the enablement data will effectively disable it for the repositories affected.\r\n     *\r\n     * @param {boolean} allProjects\r\n     * @param {boolean} includeBillableCommitters\r\n     * @param {string[]} projectIds\r\n     */\r\n    deleteEnablementStatus(allProjects, includeBillableCommitters, projectIds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (allProjects == null) {\r\n                throw new TypeError('allProjects can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    '$allProjects': allProjects,\r\n                    '$includeBillableCommitters': includeBillableCommitters,\r\n                    projectIds: projectIds,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"b43dd56f-a1b4-47a5-a857-73fc1b6c700c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * GET Enablement status for project's repositories.\r\n     *\r\n     * @param {string[]} projectIds - Null defaults to all projects in the host, list of project's repos status to return\r\n     * @param {Date} billingDate - UTC expected, Null defaults to UtcNow(), can be provided for a point in time status\r\n     * @param {number} skip - Skip X rows of resultset to simulate paging.\r\n     * @param {number} take - Return Y rows of resultset to simulate paging.\r\n     */\r\n    getEnablementStatus(projectIds, billingDate, skip, take) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    projectIds: projectIds,\r\n                    '$billingDate': billingDate,\r\n                    '$skip': skip,\r\n                    '$take': take,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"b43dd56f-a1b4-47a5-a857-73fc1b6c700c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.AdvSecEnablementStatus, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {boolean} enableOnCreateHost\r\n     */\r\n    getEnableOnCreateHost(enableOnCreateHost) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (enableOnCreateHost == null) {\r\n                throw new TypeError('enableOnCreateHost can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    '$enableOnCreateHost': enableOnCreateHost,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"b43dd56f-a1b4-47a5-a857-73fc1b6c700c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} enableOnCreateProjectId\r\n     */\r\n    getEnableOnCreateProject(enableOnCreateProjectId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (enableOnCreateProjectId == null) {\r\n                throw new TypeError('enableOnCreateProjectId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    '$enableOnCreateProjectId': enableOnCreateProjectId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"b43dd56f-a1b4-47a5-a857-73fc1b6c700c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {boolean} enableOnCreateHost\r\n     */\r\n    setEnableOnCreateHost(enableOnCreateHost) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (enableOnCreateHost == null) {\r\n                throw new TypeError('enableOnCreateHost can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    '$enableOnCreateHost': enableOnCreateHost,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"b43dd56f-a1b4-47a5-a857-73fc1b6c700c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} enableOnCreateProjectId\r\n     * @param {boolean} enableOnStatus\r\n     */\r\n    setEnableOnCreateProject(enableOnCreateProjectId, enableOnStatus) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (enableOnCreateProjectId == null) {\r\n                throw new TypeError('enableOnCreateProjectId can not be null or undefined');\r\n            }\r\n            if (enableOnStatus == null) {\r\n                throw new TypeError('enableOnStatus can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    '$enableOnCreateProjectId': enableOnCreateProjectId,\r\n                    '$enableOnStatus': enableOnStatus,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"b43dd56f-a1b4-47a5-a857-73fc1b6c700c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * POST Enablement status for repositories.\r\n     *\r\n     * @param {GitInterfaces.AdvSecEnablementUpdate[]} enablementUpdates\r\n     */\r\n    updateEnablementStatus(enablementUpdates) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"b43dd56f-a1b4-47a5-a857-73fc1b6c700c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, enablementUpdates, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get estimated billable pushers for an Organization for last 90 days.\r\n     *\r\n     */\r\n    getEstimatedBillablePushersOrg() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"2277ffbe-28d4-40d6-9c26-40baf26d1408\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get estimated billable pushers for a project for last 90 days.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getEstimatedBillablePushersProject(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"1df7833e-1eed-447b-81a3-390c74923900\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get estimated billable committers for a repository for the last 90 days.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId\r\n     */\r\n    getEstimatedBillableCommittersRepo(project, repositoryId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"5dcec07b-a844-4efb-9fc1-968fd1f149db\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * GET Advanced Security Permission status.\r\n     *\r\n     * @param {string} projectName\r\n     * @param {string} repositoryId - Repository user is trying to access\r\n     * @param {string} permission - Permission being requestd, must be \"viewAlert\" \"dismissAlert\" \"manage\" \"viewEnablement\" or \"repoRead\"\r\n     */\r\n    getPermission(projectName, repositoryId, permission) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    '$projectName': projectName,\r\n                    '$repositoryId': repositoryId,\r\n                    '$permission': permission,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"61b21a05-a60f-4910-a733-ba5347c2142d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create an annotated tag.\r\n     *\r\n     * @param {GitInterfaces.GitAnnotatedTag} tagObject - Object containing details of tag to be created.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - ID or name of the repository.\r\n     */\r\n    createAnnotatedTag(tagObject, project, repositoryId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"5e8a8081-3851-4626-b677-9891cc04102e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, tagObject, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitAnnotatedTag, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get an annotated tag.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - ID or name of the repository.\r\n     * @param {string} objectId - ObjectId (Sha1Id) of tag to get.\r\n     */\r\n    getAnnotatedTag(project, repositoryId, objectId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    objectId: objectId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"5e8a8081-3851-4626-b677-9891cc04102e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitAnnotatedTag, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve actual billable committers for Advanced Security service for a given date.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {Date} billingDate - UTC expected.  If not specified defaults to the previous billing day.\r\n     * @param {number} skip - Skip X rows of resultset to simulate paging.\r\n     * @param {number} take - Return Y rows of resultset to simulate paging.\r\n     */\r\n    getBillableCommitters(project, billingDate, skip, take) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    '$billingDate': billingDate,\r\n                    '$skip': skip,\r\n                    '$take': take,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"5c5e3ebc-37b0-4547-a957-945912d44922\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve detailed actual billable committers for Advanced Security service for a given date. Detailed results intentionally does not filter out soft deleted projects and repositories to help diagnose billing issues.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} includeDetails - Return all the details on the billable committers.\r\n     * @param {Date} billingDate - UTC expected. If not specified defaults to the previous billing day.\r\n     */\r\n    getBillableCommittersDetail(project, includeDetails, billingDate) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (includeDetails == null) {\r\n                throw new TypeError('includeDetails can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    '$includeDetails': includeDetails,\r\n                    '$billingDate': billingDate,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"5c5e3ebc-37b0-4547-a957-945912d44922\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.BillableCommitterDetail, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a single blob.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} sha1 - SHA1 hash of the file. You can get the SHA1 of a file using the \"Git/Items/Get Item\" endpoint.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} download - If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip\r\n     * @param {string} fileName - Provide a fileName to use for a download.\r\n     * @param {boolean} resolveLfs - If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types\r\n     */\r\n    getBlob(repositoryId, sha1, project, download, fileName, resolveLfs) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    sha1: sha1\r\n                };\r\n                let queryValues = {\r\n                    download: download,\r\n                    fileName: fileName,\r\n                    resolveLfs: resolveLfs,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"7b28e929-2c99-405d-9c5c-6167a06e6816\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a single blob.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} sha1 - SHA1 hash of the file. You can get the SHA1 of a file using the \"Git/Items/Get Item\" endpoint.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} download - If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip\r\n     * @param {string} fileName - Provide a fileName to use for a download.\r\n     * @param {boolean} resolveLfs - If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types\r\n     */\r\n    getBlobContent(repositoryId, sha1, project, download, fileName, resolveLfs) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    sha1: sha1\r\n                };\r\n                let queryValues = {\r\n                    download: download,\r\n                    fileName: fileName,\r\n                    resolveLfs: resolveLfs,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"7b28e929-2c99-405d-9c5c-6167a06e6816\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets one or more blobs in a zip file download.\r\n     *\r\n     * @param {string[]} blobIds - Blob IDs (SHA1 hashes) to be returned in the zip file.\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} filename\r\n     */\r\n    getBlobsZip(blobIds, repositoryId, project, filename) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    filename: filename,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"7b28e929-2c99-405d-9c5c-6167a06e6816\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a single blob.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} sha1 - SHA1 hash of the file. You can get the SHA1 of a file using the \"Git/Items/Get Item\" endpoint.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} download - If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip\r\n     * @param {string} fileName - Provide a fileName to use for a download.\r\n     * @param {boolean} resolveLfs - If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types\r\n     */\r\n    getBlobZip(repositoryId, sha1, project, download, fileName, resolveLfs) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    sha1: sha1\r\n                };\r\n                let queryValues = {\r\n                    download: download,\r\n                    fileName: fileName,\r\n                    resolveLfs: resolveLfs,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"7b28e929-2c99-405d-9c5c-6167a06e6816\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve statistics about a single branch.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} name - Name of the branch.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {GitInterfaces.GitVersionDescriptor} baseVersionDescriptor - Identifies the commit or branch to use as the base.\r\n     */\r\n    getBranch(repositoryId, name, project, baseVersionDescriptor) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (name == null) {\r\n                throw new TypeError('name can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    name: name,\r\n                    baseVersionDescriptor: baseVersionDescriptor,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"d5b216de-d8d5-4d32-ae76-51df755b16d3\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitBranchStats, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve statistics about all branches within a repository.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {GitInterfaces.GitVersionDescriptor} baseVersionDescriptor - Identifies the commit or branch to use as the base.\r\n     */\r\n    getBranches(repositoryId, project, baseVersionDescriptor) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    baseVersionDescriptor: baseVersionDescriptor,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"d5b216de-d8d5-4d32-ae76-51df755b16d3\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitBranchStats, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve statistics for multiple commits\r\n     *\r\n     * @param {GitInterfaces.GitQueryBranchStatsCriteria} searchCriteria - Base Commit and List of Target Commits to compare.\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getBranchStatsBatch(searchCriteria, repositoryId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"d5b216de-d8d5-4d32-ae76-51df755b16d3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, searchCriteria, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitBranchStats, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve changes for a particular commit.\r\n     *\r\n     * @param {string} commitId - The id of the commit.\r\n     * @param {string} repositoryId - The id or friendly name of the repository. To use the friendly name, projectId must also be specified.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} top - The maximum number of changes to return.\r\n     * @param {number} skip - The number of changes to skip.\r\n     */\r\n    getChanges(commitId, repositoryId, project, top, skip) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    commitId: commitId,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    top: top,\r\n                    skip: skip,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"5bf884f5-3e07-42e9-afb8-1b872267bf16\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommitChanges, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve one conflict for a cherry pick by ID\r\n     *\r\n     * @param {string} repositoryId\r\n     * @param {number} cherryPickId\r\n     * @param {number} conflictId\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getCherryPickConflict(repositoryId, cherryPickId, conflictId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    cherryPickId: cherryPickId,\r\n                    conflictId: conflictId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"1fe5aab2-d4c0-4b2f-a030-f3831e7aca26\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflict, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve all conflicts for a cherry pick\r\n     *\r\n     * @param {string} repositoryId\r\n     * @param {number} cherryPickId\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} continuationToken\r\n     * @param {number} top\r\n     * @param {boolean} excludeResolved\r\n     * @param {boolean} onlyResolved\r\n     * @param {boolean} includeObsolete\r\n     */\r\n    getCherryPickConflicts(repositoryId, cherryPickId, project, continuationToken, top, excludeResolved, onlyResolved, includeObsolete) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    cherryPickId: cherryPickId\r\n                };\r\n                let queryValues = {\r\n                    continuationToken: continuationToken,\r\n                    '$top': top,\r\n                    excludeResolved: excludeResolved,\r\n                    onlyResolved: onlyResolved,\r\n                    includeObsolete: includeObsolete,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"1fe5aab2-d4c0-4b2f-a030-f3831e7aca26\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflict, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update merge conflict resolution\r\n     *\r\n     * @param {GitInterfaces.GitConflict} conflict\r\n     * @param {string} repositoryId\r\n     * @param {number} cherryPickId\r\n     * @param {number} conflictId\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateCherryPickConflict(conflict, repositoryId, cherryPickId, conflictId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    cherryPickId: cherryPickId,\r\n                    conflictId: conflictId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"1fe5aab2-d4c0-4b2f-a030-f3831e7aca26\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, conflict, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflict, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update multiple merge conflict resolutions\r\n     *\r\n     * @param {GitInterfaces.GitConflict[]} conflictUpdates\r\n     * @param {string} repositoryId\r\n     * @param {number} cherryPickId\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateCherryPickConflicts(conflictUpdates, repositoryId, cherryPickId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    cherryPickId: cherryPickId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"1fe5aab2-d4c0-4b2f-a030-f3831e7aca26\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, conflictUpdates, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflictUpdateResult, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Given a commitId, returns a list of commits that are in the same cherry-pick family.\r\n     *\r\n     * @param {string} repositoryNameOrId\r\n     * @param {string} commitId\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} includeLinks\r\n     */\r\n    getCherryPickRelationships(repositoryNameOrId, commitId, project, includeLinks) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryNameOrId: repositoryNameOrId,\r\n                    commitId: commitId\r\n                };\r\n                let queryValues = {\r\n                    includeLinks: includeLinks,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"8af142a4-27c2-4168-9e82-46b8629aaa0d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommitRef, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Cherry pick a specific commit or commits that are associated to a pull request into a new branch.\r\n     *\r\n     * @param {GitInterfaces.GitAsyncRefOperationParameters} cherryPickToCreate\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - ID of the repository.\r\n     */\r\n    createCherryPick(cherryPickToCreate, project, repositoryId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"033bad68-9a14-43d1-90e0-59cb8856fef6\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, cherryPickToCreate, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCherryPick, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve information about a cherry pick operation by cherry pick Id.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} cherryPickId - ID of the cherry pick.\r\n     * @param {string} repositoryId - ID of the repository.\r\n     */\r\n    getCherryPick(project, cherryPickId, repositoryId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    cherryPickId: cherryPickId,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"033bad68-9a14-43d1-90e0-59cb8856fef6\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCherryPick, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve information about a cherry pick operation for a specific branch. This operation is expensive due to the underlying object structure, so this API only looks at the 1000 most recent cherry pick operations.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - ID of the repository.\r\n     * @param {string} refName - The GitAsyncRefOperationParameters generatedRefName used for the cherry pick operation.\r\n     */\r\n    getCherryPickForRefName(project, repositoryId, refName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (refName == null) {\r\n                throw new TypeError('refName can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    refName: refName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"033bad68-9a14-43d1-90e0-59cb8856fef6\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCherryPick, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Find the closest common commit (the merge base) between base and target commits, and get the diff between either the base and target commits or common and target commits.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} diffCommonCommit - If true, diff between common and target commits. If false, diff between base and target commits.\r\n     * @param {number} top - Maximum number of changes to return. Defaults to 100.\r\n     * @param {number} skip - Number of changes to skip\r\n     * @param {GitInterfaces.GitBaseVersionDescriptor} baseVersionDescriptor - Descriptor for base commit.\r\n     * @param {GitInterfaces.GitTargetVersionDescriptor} targetVersionDescriptor - Descriptor for target commit.\r\n     */\r\n    getCommitDiffs(repositoryId, project, diffCommonCommit, top, skip, baseVersionDescriptor, targetVersionDescriptor) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    diffCommonCommit: diffCommonCommit,\r\n                    '$top': top,\r\n                    '$skip': skip,\r\n                };\r\n                if (baseVersionDescriptor) {\r\n                    queryValues.baseVersionType = baseVersionDescriptor.versionType;\r\n                    queryValues.baseVersion = baseVersionDescriptor.version;\r\n                    queryValues.baseVersionOptions = baseVersionDescriptor.versionOptions;\r\n                }\r\n                if (targetVersionDescriptor) {\r\n                    queryValues.targetVersionType = targetVersionDescriptor.versionType;\r\n                    queryValues.targetVersion = targetVersionDescriptor.version;\r\n                    queryValues.targetVersionOptions = targetVersionDescriptor.versionOptions;\r\n                }\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"615588d5-c0c7-4b88-88f8-e625306446e8\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommitDiffs, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a particular commit.\r\n     *\r\n     * @param {string} commitId - The id of the commit.\r\n     * @param {string} repositoryId - The id or friendly name of the repository. To use the friendly name, projectId must also be specified.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} changeCount - The number of changes to include in the result.\r\n     */\r\n    getCommit(commitId, repositoryId, project, changeCount) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    commitId: commitId,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    changeCount: changeCount,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"c2570c3b-5b3f-41b8-98bf-5407bfde8d58\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommit, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve git commits for a project\r\n     *\r\n     * @param {string} repositoryId - The id or friendly name of the repository. To use the friendly name, projectId must also be specified.\r\n     * @param {GitInterfaces.GitQueryCommitsCriteria} searchCriteria\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} skip\r\n     * @param {number} top\r\n     */\r\n    getCommits(repositoryId, searchCriteria, project, skip, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (searchCriteria == null) {\r\n                throw new TypeError('searchCriteria can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    searchCriteria: searchCriteria,\r\n                    '$skip': skip,\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"c2570c3b-5b3f-41b8-98bf-5407bfde8d58\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommitRef, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a list of commits associated with a particular push.\r\n     *\r\n     * @param {string} repositoryId - The id or friendly name of the repository. To use the friendly name, projectId must also be specified.\r\n     * @param {number} pushId - The id of the push.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} top - The maximum number of commits to return (\"get the top x commits\").\r\n     * @param {number} skip - The number of commits to skip.\r\n     * @param {boolean} includeLinks - Set to false to avoid including REST Url links for resources. Defaults to true.\r\n     */\r\n    getPushCommits(repositoryId, pushId, project, top, skip, includeLinks) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (pushId == null) {\r\n                throw new TypeError('pushId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    pushId: pushId,\r\n                    top: top,\r\n                    skip: skip,\r\n                    includeLinks: includeLinks,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"c2570c3b-5b3f-41b8-98bf-5407bfde8d58\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommitRef, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve git commits for a project matching the search criteria\r\n     *\r\n     * @param {GitInterfaces.GitQueryCommitsCriteria} searchCriteria - Search options\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} skip - Number of commits to skip. The value cannot exceed 3,000,000.\r\n     * @param {number} top - Maximum number of commits to return. The value cannot exceed 50,000.\r\n     * @param {boolean} includeStatuses - True to include additional commit status information.\r\n     */\r\n    getCommitsBatch(searchCriteria, repositoryId, project, skip, top, includeStatuses) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    '$skip': skip,\r\n                    '$top': top,\r\n                    includeStatuses: includeStatuses,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"6400dfb2-0bcb-462b-b992-5a57f8f1416c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, searchCriteria, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommitRef, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve deleted git repositories.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getDeletedRepositories(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"2b6869c4-cb25-42b5-b7a3-0d3e6be0a11a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitDeletedRepository, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the file diffs for each of the specified files\r\n     *\r\n     * @param {GitInterfaces.FileDiffsCriteria} fileDiffsCriteria - List of file parameters objects\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - The name or ID of the repository\r\n     */\r\n    getFileDiffs(fileDiffsCriteria, project, repositoryId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"c4c5a7e6-e9f3-4730-a92b-84baacff694b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, fileDiffsCriteria, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.FileDiff, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve all forks of a repository in the collection.\r\n     *\r\n     * @param {string} repositoryNameOrId - The name or ID of the repository.\r\n     * @param {string} collectionId - Team project collection ID.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} includeLinks - True to include links.\r\n     */\r\n    getForks(repositoryNameOrId, collectionId, project, includeLinks) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryNameOrId: repositoryNameOrId,\r\n                    collectionId: collectionId\r\n                };\r\n                let queryValues = {\r\n                    includeLinks: includeLinks,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"158c0340-bf6f-489c-9625-d572a1480d57\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRepositoryRef, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Request that another repository's refs be fetched into this one. It syncs two existing forks. To create a fork, please see the <a href=\"https://docs.microsoft.com/en-us/rest/api/vsts/git/repositories/create?view=azure-devops-rest-5.1\"> repositories endpoint</a>\r\n     *\r\n     * @param {GitInterfaces.GitForkSyncRequestParameters} syncParams - Source repository and ref mapping.\r\n     * @param {string} repositoryNameOrId - The name or ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} includeLinks - True to include links\r\n     */\r\n    createForkSyncRequest(syncParams, repositoryNameOrId, project, includeLinks) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryNameOrId: repositoryNameOrId\r\n                };\r\n                let queryValues = {\r\n                    includeLinks: includeLinks,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"1703f858-b9d1-46af-ab62-483e9e1055b5\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, syncParams, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitForkSyncRequest, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a specific fork sync operation's details.\r\n     *\r\n     * @param {string} repositoryNameOrId - The name or ID of the repository.\r\n     * @param {number} forkSyncOperationId - OperationId of the sync request.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} includeLinks - True to include links.\r\n     */\r\n    getForkSyncRequest(repositoryNameOrId, forkSyncOperationId, project, includeLinks) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryNameOrId: repositoryNameOrId,\r\n                    forkSyncOperationId: forkSyncOperationId\r\n                };\r\n                let queryValues = {\r\n                    includeLinks: includeLinks,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"1703f858-b9d1-46af-ab62-483e9e1055b5\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitForkSyncRequest, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve all requested fork sync operations on this repository.\r\n     *\r\n     * @param {string} repositoryNameOrId - The name or ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} includeAbandoned - True to include abandoned requests.\r\n     * @param {boolean} includeLinks - True to include links.\r\n     */\r\n    getForkSyncRequests(repositoryNameOrId, project, includeAbandoned, includeLinks) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryNameOrId: repositoryNameOrId\r\n                };\r\n                let queryValues = {\r\n                    includeAbandoned: includeAbandoned,\r\n                    includeLinks: includeLinks,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"1703f858-b9d1-46af-ab62-483e9e1055b5\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitForkSyncRequest, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create an import request.\r\n     *\r\n     * @param {GitInterfaces.GitImportRequest} importRequest - The import request to create.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     */\r\n    createImportRequest(importRequest, project, repositoryId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"01828ddc-3600-4a41-8633-99b3a73a0eb3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, importRequest, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitImportRequest, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a particular import request.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {number} importRequestId - The unique identifier for the import request.\r\n     */\r\n    getImportRequest(project, repositoryId, importRequestId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    importRequestId: importRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"01828ddc-3600-4a41-8633-99b3a73a0eb3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitImportRequest, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve import requests for a repository.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {boolean} includeAbandoned - True to include abandoned import requests in the results.\r\n     */\r\n    queryImportRequests(project, repositoryId, includeAbandoned) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    includeAbandoned: includeAbandoned,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"01828ddc-3600-4a41-8633-99b3a73a0eb3\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitImportRequest, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retry or abandon a failed import request.\r\n     *\r\n     * @param {GitInterfaces.GitImportRequest} importRequestToUpdate - The updated version of the import request. Currently, the only change allowed is setting the Status to Queued or Abandoned.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {number} importRequestId - The unique identifier for the import request to update.\r\n     */\r\n    updateImportRequest(importRequestToUpdate, project, repositoryId, importRequestId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    importRequestId: importRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"01828ddc-3600-4a41-8633-99b3a73a0eb3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, importRequestToUpdate, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitImportRequest, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} path - The item path.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} scopePath - The path scope.  The default is null.\r\n     * @param {GitInterfaces.VersionControlRecursionType} recursionLevel - The recursion level of this request. The default is 'none', no recursion.\r\n     * @param {boolean} includeContentMetadata - Set to true to include content metadata.  Default is false.\r\n     * @param {boolean} latestProcessedChange - Set to true to include the latest changes.  Default is false.\r\n     * @param {boolean} download - Set to true to download the response as a file.  Default is false.\r\n     * @param {GitInterfaces.GitVersionDescriptor} versionDescriptor - Version descriptor.  Default is the default branch for the repository.\r\n     * @param {boolean} includeContent - Set to true to include item content when requesting json.  Default is false.\r\n     * @param {boolean} resolveLfs - Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.\r\n     * @param {boolean} sanitize - Set to true to sanitize an svg file and return it as image. Useful only if requested for svg file. Default is false.\r\n     */\r\n    getItem(repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, sanitize) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (path == null) {\r\n                throw new TypeError('path can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    path: path,\r\n                    scopePath: scopePath,\r\n                    recursionLevel: recursionLevel,\r\n                    includeContentMetadata: includeContentMetadata,\r\n                    latestProcessedChange: latestProcessedChange,\r\n                    download: download,\r\n                    versionDescriptor: versionDescriptor,\r\n                    includeContent: includeContent,\r\n                    resolveLfs: resolveLfs,\r\n                    sanitize: sanitize,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"fb93c0db-47ed-4a31-8c20-47552878fb44\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitItem, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} path - The item path.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} scopePath - The path scope.  The default is null.\r\n     * @param {GitInterfaces.VersionControlRecursionType} recursionLevel - The recursion level of this request. The default is 'none', no recursion.\r\n     * @param {boolean} includeContentMetadata - Set to true to include content metadata.  Default is false.\r\n     * @param {boolean} latestProcessedChange - Set to true to include the latest changes.  Default is false.\r\n     * @param {boolean} download - Set to true to download the response as a file.  Default is false.\r\n     * @param {GitInterfaces.GitVersionDescriptor} versionDescriptor - Version descriptor.  Default is the default branch for the repository.\r\n     * @param {boolean} includeContent - Set to true to include item content when requesting json.  Default is false.\r\n     * @param {boolean} resolveLfs - Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.\r\n     * @param {boolean} sanitize - Set to true to sanitize an svg file and return it as image. Useful only if requested for svg file. Default is false.\r\n     */\r\n    getItemContent(repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, sanitize) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (path == null) {\r\n                throw new TypeError('path can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    path: path,\r\n                    scopePath: scopePath,\r\n                    recursionLevel: recursionLevel,\r\n                    includeContentMetadata: includeContentMetadata,\r\n                    latestProcessedChange: latestProcessedChange,\r\n                    download: download,\r\n                    versionDescriptor: versionDescriptor,\r\n                    includeContent: includeContent,\r\n                    resolveLfs: resolveLfs,\r\n                    sanitize: sanitize,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"fb93c0db-47ed-4a31-8c20-47552878fb44\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get Item Metadata and/or Content for a collection of items. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} scopePath - The path scope.  The default is null.\r\n     * @param {GitInterfaces.VersionControlRecursionType} recursionLevel - The recursion level of this request. The default is 'none', no recursion.\r\n     * @param {boolean} includeContentMetadata - Set to true to include content metadata.  Default is false.\r\n     * @param {boolean} latestProcessedChange - Set to true to include the latest changes.  Default is false.\r\n     * @param {boolean} download - Set to true to download the response as a file.  Default is false.\r\n     * @param {boolean} includeLinks - Set to true to include links to items.  Default is false.\r\n     * @param {GitInterfaces.GitVersionDescriptor} versionDescriptor - Version descriptor.  Default is the default branch for the repository.\r\n     * @param {boolean} zipForUnix - Set to true to keep the file permissions for unix (and POSIX) systems like executables and symlinks\r\n     */\r\n    getItems(repositoryId, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, includeLinks, versionDescriptor, zipForUnix) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    scopePath: scopePath,\r\n                    recursionLevel: recursionLevel,\r\n                    includeContentMetadata: includeContentMetadata,\r\n                    latestProcessedChange: latestProcessedChange,\r\n                    download: download,\r\n                    includeLinks: includeLinks,\r\n                    versionDescriptor: versionDescriptor,\r\n                    zipForUnix: zipForUnix,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"fb93c0db-47ed-4a31-8c20-47552878fb44\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitItem, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} path - The item path.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} scopePath - The path scope.  The default is null.\r\n     * @param {GitInterfaces.VersionControlRecursionType} recursionLevel - The recursion level of this request. The default is 'none', no recursion.\r\n     * @param {boolean} includeContentMetadata - Set to true to include content metadata.  Default is false.\r\n     * @param {boolean} latestProcessedChange - Set to true to include the latest changes.  Default is false.\r\n     * @param {boolean} download - Set to true to download the response as a file.  Default is false.\r\n     * @param {GitInterfaces.GitVersionDescriptor} versionDescriptor - Version descriptor.  Default is the default branch for the repository.\r\n     * @param {boolean} includeContent - Set to true to include item content when requesting json.  Default is false.\r\n     * @param {boolean} resolveLfs - Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.\r\n     * @param {boolean} sanitize - Set to true to sanitize an svg file and return it as image. Useful only if requested for svg file. Default is false.\r\n     */\r\n    getItemText(repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, sanitize) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (path == null) {\r\n                throw new TypeError('path can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    path: path,\r\n                    scopePath: scopePath,\r\n                    recursionLevel: recursionLevel,\r\n                    includeContentMetadata: includeContentMetadata,\r\n                    latestProcessedChange: latestProcessedChange,\r\n                    download: download,\r\n                    versionDescriptor: versionDescriptor,\r\n                    includeContent: includeContent,\r\n                    resolveLfs: resolveLfs,\r\n                    sanitize: sanitize,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"fb93c0db-47ed-4a31-8c20-47552878fb44\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/plain\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} path - The item path.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} scopePath - The path scope.  The default is null.\r\n     * @param {GitInterfaces.VersionControlRecursionType} recursionLevel - The recursion level of this request. The default is 'none', no recursion.\r\n     * @param {boolean} includeContentMetadata - Set to true to include content metadata.  Default is false.\r\n     * @param {boolean} latestProcessedChange - Set to true to include the latest changes.  Default is false.\r\n     * @param {boolean} download - Set to true to download the response as a file.  Default is false.\r\n     * @param {GitInterfaces.GitVersionDescriptor} versionDescriptor - Version descriptor.  Default is the default branch for the repository.\r\n     * @param {boolean} includeContent - Set to true to include item content when requesting json.  Default is false.\r\n     * @param {boolean} resolveLfs - Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.\r\n     * @param {boolean} sanitize - Set to true to sanitize an svg file and return it as image. Useful only if requested for svg file. Default is false.\r\n     */\r\n    getItemZip(repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, includeContent, resolveLfs, sanitize) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (path == null) {\r\n                throw new TypeError('path can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    path: path,\r\n                    scopePath: scopePath,\r\n                    recursionLevel: recursionLevel,\r\n                    includeContentMetadata: includeContentMetadata,\r\n                    latestProcessedChange: latestProcessedChange,\r\n                    download: download,\r\n                    versionDescriptor: versionDescriptor,\r\n                    includeContent: includeContent,\r\n                    resolveLfs: resolveLfs,\r\n                    sanitize: sanitize,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"fb93c0db-47ed-4a31-8c20-47552878fb44\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Post for retrieving a creating a batch out of a set of items in a repo / project given a list of paths or a long path\r\n     *\r\n     * @param {GitInterfaces.GitItemRequestData} requestData - Request data attributes: ItemDescriptors, IncludeContentMetadata, LatestProcessedChange, IncludeLinks. ItemDescriptors: Collection of items to fetch, including path, version, and recursion level. IncludeContentMetadata: Whether to include metadata for all items LatestProcessedChange: Whether to include shallow ref to commit that last changed each item. IncludeLinks: Whether to include the _links field on the shallow references.\r\n     * @param {string} repositoryId - The name or ID of the repository\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getItemsBatch(requestData, repositoryId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"630fd2e4-fb88-4f85-ad21-13f3fd1fbca9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, requestData, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitItem, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Find the merge bases of two commits, optionally across forks. If otherRepositoryId is not specified, the merge bases will only be calculated within the context of the local repositoryNameOrId.\r\n     *\r\n     * @param {string} repositoryNameOrId - ID or name of the local repository.\r\n     * @param {string} commitId - First commit, usually the tip of the target branch of the potential merge.\r\n     * @param {string} otherCommitId - Other commit, usually the tip of the source branch of the potential merge.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} otherCollectionId - The collection ID where otherCommitId lives.\r\n     * @param {string} otherRepositoryId - The repository ID where otherCommitId lives.\r\n     */\r\n    getMergeBases(repositoryNameOrId, commitId, otherCommitId, project, otherCollectionId, otherRepositoryId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (otherCommitId == null) {\r\n                throw new TypeError('otherCommitId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryNameOrId: repositoryNameOrId,\r\n                    commitId: commitId\r\n                };\r\n                let queryValues = {\r\n                    otherCommitId: otherCommitId,\r\n                    otherCollectionId: otherCollectionId,\r\n                    otherRepositoryId: otherRepositoryId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"7cf2abb6-c964-4f7e-9872-f78c66e72e9c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommitRef, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Request a git merge operation. Currently we support merging only 2 commits.\r\n     *\r\n     * @param {GitInterfaces.GitMergeParameters} mergeParameters - Parents commitIds and merge commit messsage.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryNameOrId - The name or ID of the repository.\r\n     * @param {boolean} includeLinks - True to include links\r\n     */\r\n    createMergeRequest(mergeParameters, project, repositoryNameOrId, includeLinks) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryNameOrId: repositoryNameOrId\r\n                };\r\n                let queryValues = {\r\n                    includeLinks: includeLinks,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"985f7ae9-844f-4906-9897-7ef41516c0e2\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, mergeParameters, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitMerge, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a specific merge operation's details.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryNameOrId - The name or ID of the repository.\r\n     * @param {number} mergeOperationId - OperationId of the merge request.\r\n     * @param {boolean} includeLinks - True to include links\r\n     */\r\n    getMergeRequest(project, repositoryNameOrId, mergeOperationId, includeLinks) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryNameOrId: repositoryNameOrId,\r\n                    mergeOperationId: mergeOperationId\r\n                };\r\n                let queryValues = {\r\n                    includeLinks: includeLinks,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"985f7ae9-844f-4906-9897-7ef41516c0e2\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitMerge, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Attach a new file to a pull request.\r\n     *\r\n     * @param {NodeJS.ReadableStream} contentStream - Content to upload\r\n     * @param {string} fileName - The name of the file.\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createAttachment(customHeaders, contentStream, fileName, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    fileName: fileName,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"965d9361-878b-413b-a494-45d5b5fd8ab7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"POST\", url, contentStream, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.Attachment, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a pull request attachment.\r\n     *\r\n     * @param {string} fileName - The name of the attachment to delete.\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    deleteAttachment(fileName, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    fileName: fileName,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"965d9361-878b-413b-a494-45d5b5fd8ab7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the file content of a pull request attachment.\r\n     *\r\n     * @param {string} fileName - The name of the attachment.\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getAttachmentContent(fileName, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    fileName: fileName,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"965d9361-878b-413b-a494-45d5b5fd8ab7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of files attached to a given pull request.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getAttachments(repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"965d9361-878b-413b-a494-45d5b5fd8ab7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.Attachment, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the file content of a pull request attachment.\r\n     *\r\n     * @param {string} fileName - The name of the attachment.\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getAttachmentZip(fileName, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    fileName: fileName,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"965d9361-878b-413b-a494-45d5b5fd8ab7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Add a like on a comment.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} threadId - The ID of the thread that contains the comment.\r\n     * @param {number} commentId - The ID of the comment.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createLike(repositoryId, pullRequestId, threadId, commentId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    threadId: threadId,\r\n                    commentId: commentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"5f2e2851-1389-425b-a00b-fb2adb3ef31b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a like on a comment.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} threadId - The ID of the thread that contains the comment.\r\n     * @param {number} commentId - The ID of the comment.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    deleteLike(repositoryId, pullRequestId, threadId, commentId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    threadId: threadId,\r\n                    commentId: commentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"5f2e2851-1389-425b-a00b-fb2adb3ef31b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get likes for a comment.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} threadId - The ID of the thread that contains the comment.\r\n     * @param {number} commentId - The ID of the comment.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getLikes(repositoryId, pullRequestId, threadId, commentId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    threadId: threadId,\r\n                    commentId: commentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"5f2e2851-1389-425b-a00b-fb2adb3ef31b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the commits for the specified iteration of a pull request.\r\n     *\r\n     * @param {string} repositoryId - ID or name of the repository.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} iterationId - ID of the iteration from which to get the commits.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} top - Maximum number of commits to return. The maximum number of commits that can be returned per batch is 500.\r\n     * @param {number} skip - Number of commits to skip.\r\n     */\r\n    getPullRequestIterationCommits(repositoryId, pullRequestId, iterationId, project, top, skip) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    iterationId: iterationId\r\n                };\r\n                let queryValues = {\r\n                    top: top,\r\n                    skip: skip,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"e7ea0883-095f-4926-b5fb-f24691c26fb9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommitRef, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the commits for the specified pull request.\r\n     *\r\n     * @param {string} repositoryId - ID or name of the repository.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPullRequestCommits(repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"52823034-34a8-4576-922c-8d8b77e9e4c4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitCommitRef, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve one conflict for a pull request by ID\r\n     *\r\n     * @param {string} repositoryId\r\n     * @param {number} pullRequestId\r\n     * @param {number} conflictId\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPullRequestConflict(repositoryId, pullRequestId, conflictId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    conflictId: conflictId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"d840fb74-bbef-42d3-b250-564604c054a4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflict, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve all conflicts for a pull request\r\n     *\r\n     * @param {string} repositoryId - The repository of the Pull Request.\r\n     * @param {number} pullRequestId - The pull request ID.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} skip - Conflicts to skip.\r\n     * @param {number} top - Conflicts to return after skip.\r\n     * @param {boolean} includeObsolete - Includes obsolete conflicts.\r\n     * @param {boolean} excludeResolved - Excludes conflicts already resolved.\r\n     * @param {boolean} onlyResolved - Returns only the conflicts that are resolved.\r\n     */\r\n    getPullRequestConflicts(repositoryId, pullRequestId, project, skip, top, includeObsolete, excludeResolved, onlyResolved) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                let queryValues = {\r\n                    '$skip': skip,\r\n                    '$top': top,\r\n                    includeObsolete: includeObsolete,\r\n                    excludeResolved: excludeResolved,\r\n                    onlyResolved: onlyResolved,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"d840fb74-bbef-42d3-b250-564604c054a4\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflict, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update merge conflict resolution\r\n     *\r\n     * @param {GitInterfaces.GitConflict} conflict\r\n     * @param {string} repositoryId\r\n     * @param {number} pullRequestId\r\n     * @param {number} conflictId\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updatePullRequestConflict(conflict, repositoryId, pullRequestId, conflictId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    conflictId: conflictId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"d840fb74-bbef-42d3-b250-564604c054a4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, conflict, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflict, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update multiple merge conflict resolutions\r\n     *\r\n     * @param {GitInterfaces.GitConflict[]} conflictUpdates\r\n     * @param {string} repositoryId\r\n     * @param {number} pullRequestId\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updatePullRequestConflicts(conflictUpdates, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"d840fb74-bbef-42d3-b250-564604c054a4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, conflictUpdates, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflictUpdateResult, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve the changes made in a pull request between two iterations.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} iterationId - ID of the pull request iteration. <br /> Iteration one is the head of the source branch at the time the pull request is created and subsequent iterations are created when there are pushes to the source branch. Allowed values are between 1 and the maximum iteration on this pull request.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} top - Optional. The number of changes to retrieve.  The default value is 100 and the maximum value is 2000.\r\n     * @param {number} skip - Optional. The number of changes to ignore.  For example, to retrieve changes 101-150, set top 50 and skip to 100.\r\n     * @param {number} compareTo - ID of the pull request iteration to compare against.  The default value is zero which indicates the comparison is made against the common commit between the source and target branches\r\n     */\r\n    getPullRequestIterationChanges(repositoryId, pullRequestId, iterationId, project, top, skip, compareTo) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    iterationId: iterationId\r\n                };\r\n                let queryValues = {\r\n                    '$top': top,\r\n                    '$skip': skip,\r\n                    '$compareTo': compareTo,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"4216bdcf-b6b1-4d59-8b82-c34cc183fc8b\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestIterationChanges, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the specified iteration for a pull request.\r\n     *\r\n     * @param {string} repositoryId - ID or name of the repository.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} iterationId - ID of the pull request iteration to return.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPullRequestIteration(repositoryId, pullRequestId, iterationId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    iterationId: iterationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"d43911ee-6958-46b0-a42b-8445b8a0d004\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestIteration, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the list of iterations for the specified pull request.\r\n     *\r\n     * @param {string} repositoryId - ID or name of the repository.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} includeCommits - If true, include the commits associated with each iteration in the response.\r\n     */\r\n    getPullRequestIterations(repositoryId, pullRequestId, project, includeCommits) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                let queryValues = {\r\n                    includeCommits: includeCommits,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"d43911ee-6958-46b0-a42b-8445b8a0d004\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestIteration, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a pull request status on the iteration. This operation will have the same result as Create status on pull request with specified iteration ID in the request body.\r\n     *\r\n     * @param {GitInterfaces.GitPullRequestStatus} status - Pull request status to create.\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} iterationId - ID of the pull request iteration.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createPullRequestIterationStatus(status, repositoryId, pullRequestId, iterationId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    iterationId: iterationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"75cf11c5-979f-4038-a76e-058a06adf2bf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, status, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestStatus, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete pull request iteration status.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} iterationId - ID of the pull request iteration.\r\n     * @param {number} statusId - ID of the pull request status.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    deletePullRequestIterationStatus(repositoryId, pullRequestId, iterationId, statusId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    iterationId: iterationId,\r\n                    statusId: statusId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"75cf11c5-979f-4038-a76e-058a06adf2bf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the specific pull request iteration status by ID. The status ID is unique within the pull request across all iterations.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} iterationId - ID of the pull request iteration.\r\n     * @param {number} statusId - ID of the pull request status.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPullRequestIterationStatus(repositoryId, pullRequestId, iterationId, statusId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    iterationId: iterationId,\r\n                    statusId: statusId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"75cf11c5-979f-4038-a76e-058a06adf2bf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestStatus, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get all the statuses associated with a pull request iteration.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} iterationId - ID of the pull request iteration.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPullRequestIterationStatuses(repositoryId, pullRequestId, iterationId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    iterationId: iterationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"75cf11c5-979f-4038-a76e-058a06adf2bf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestStatus, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update pull request iteration statuses collection. The only supported operation type is `remove`.\r\n     *\r\n     * @param {VSSInterfaces.JsonPatchDocument} patchDocument - Operations to apply to the pull request statuses in JSON Patch format.\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} iterationId - ID of the pull request iteration.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updatePullRequestIterationStatuses(customHeaders, patchDocument, repositoryId, pullRequestId, iterationId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    iterationId: iterationId\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/json-patch+json\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"75cf11c5-979f-4038-a76e-058a06adf2bf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.update(url, patchDocument, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a tag (if that does not exists yet) and add that as a label (tag) for a specified pull request. The only required field is the name of the new label (tag).\r\n     *\r\n     * @param {TfsCoreInterfaces.WebApiCreateTagRequestData} label - Label to assign to the pull request.\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} projectId - Project ID or project name.\r\n     */\r\n    createPullRequestLabel(label, repositoryId, pullRequestId, project, projectId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                let queryValues = {\r\n                    projectId: projectId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"f22387e3-984e-4c52-9c6d-fbb8f14c812d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, label, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a label (tag) from the set of those assigned to the pull request. The tag itself will not be deleted.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} labelIdOrName - The name or ID of the label requested.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} projectId - Project ID or project name.\r\n     */\r\n    deletePullRequestLabels(repositoryId, pullRequestId, labelIdOrName, project, projectId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    labelIdOrName: labelIdOrName\r\n                };\r\n                let queryValues = {\r\n                    projectId: projectId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"f22387e3-984e-4c52-9c6d-fbb8f14c812d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieves a single label (tag) that has been assigned to a pull request.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} labelIdOrName - The name or ID of the label requested.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} projectId - Project ID or project name.\r\n     */\r\n    getPullRequestLabel(repositoryId, pullRequestId, labelIdOrName, project, projectId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    labelIdOrName: labelIdOrName\r\n                };\r\n                let queryValues = {\r\n                    projectId: projectId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"f22387e3-984e-4c52-9c6d-fbb8f14c812d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get all the labels (tags) assigned to a pull request.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} projectId - Project ID or project name.\r\n     */\r\n    getPullRequestLabels(repositoryId, pullRequestId, project, projectId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                let queryValues = {\r\n                    projectId: projectId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"f22387e3-984e-4c52-9c6d-fbb8f14c812d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get external properties of the pull request.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPullRequestProperties(repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"48a52185-5b9e-4736-9dc1-bb1e2feac80b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create or update pull request external properties. The patch operation can be `add`, `replace` or `remove`. For `add` operation, the path can be empty. If the path is empty, the value must be a list of key value pairs. For `replace` operation, the path cannot be empty. If the path does not exist, the property will be added to the collection. For `remove` operation, the path cannot be empty. If the path does not exist, no action will be performed.\r\n     *\r\n     * @param {VSSInterfaces.JsonPatchDocument} patchDocument - Properties to add, replace or remove in JSON Patch format.\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updatePullRequestProperties(customHeaders, patchDocument, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/json-patch+json\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"48a52185-5b9e-4736-9dc1-bb1e2feac80b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.update(url, patchDocument, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * This API is used to find what pull requests are related to a given commit.  It can be used to either find the pull request that created a particular merge commit or it can be used to find all pull requests that have ever merged a particular commit.  The input is a list of queries which each contain a list of commits. For each commit that you search against, you will get back a dictionary of commit -> pull requests.\r\n     *\r\n     * @param {GitInterfaces.GitPullRequestQuery} queries - The list of queries to perform.\r\n     * @param {string} repositoryId - ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPullRequestQuery(queries, repositoryId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"b3a6eebe-9cf0-49ea-b6cb-1a4c5f5007b0\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, queries, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestQuery, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Add a reviewer to a pull request or cast a vote.\r\n     *\r\n     * @param {GitInterfaces.IdentityRefWithVote} reviewer - Reviewer's vote.<br />If the reviewer's ID is included here, it must match the reviewerID parameter.<br />Reviewers can set their own vote with this method.  When adding other reviewers, vote must be set to zero.\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} reviewerId - ID of the reviewer.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createPullRequestReviewer(reviewer, repositoryId, pullRequestId, reviewerId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    reviewerId: reviewerId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"4b6702c7-aa35-4b89-9c96-b9abf6d3e540\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, reviewer, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Add reviewers to a pull request.\r\n     *\r\n     * @param {VSSInterfaces.IdentityRef[]} reviewers - Reviewers to add to the pull request.\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createPullRequestReviewers(reviewers, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"4b6702c7-aa35-4b89-9c96-b9abf6d3e540\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, reviewers, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Add an unmaterialized identity to the reviewers of a pull request.\r\n     *\r\n     * @param {GitInterfaces.IdentityRefWithVote} reviewer - Reviewer to add to the pull request.\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createUnmaterializedPullRequestReviewer(reviewer, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"4b6702c7-aa35-4b89-9c96-b9abf6d3e540\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, reviewer, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Remove a reviewer from a pull request.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} reviewerId - ID of the reviewer to remove.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    deletePullRequestReviewer(repositoryId, pullRequestId, reviewerId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    reviewerId: reviewerId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"4b6702c7-aa35-4b89-9c96-b9abf6d3e540\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve information about a particular reviewer on a pull request\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} reviewerId - ID of the reviewer.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPullRequestReviewer(repositoryId, pullRequestId, reviewerId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    reviewerId: reviewerId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"4b6702c7-aa35-4b89-9c96-b9abf6d3e540\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve the reviewers for a pull request\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPullRequestReviewers(repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"4b6702c7-aa35-4b89-9c96-b9abf6d3e540\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Edit a reviewer entry. These fields are patchable: isFlagged, hasDeclined\r\n     *\r\n     * @param {GitInterfaces.IdentityRefWithVote} reviewer - Reviewer data.<br />If the reviewer's ID is included here, it must match the reviewerID parameter.\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} reviewerId - ID of the reviewer.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updatePullRequestReviewer(reviewer, repositoryId, pullRequestId, reviewerId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    reviewerId: reviewerId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"4b6702c7-aa35-4b89-9c96-b9abf6d3e540\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, reviewer, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Reset the votes of multiple reviewers on a pull request.  NOTE: This endpoint only supports updating votes, but does not support updating required reviewers (use policy) or display names.\r\n     *\r\n     * @param {GitInterfaces.IdentityRefWithVote[]} patchVotes - IDs of the reviewers whose votes will be reset to zero\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updatePullRequestReviewers(patchVotes, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"4b6702c7-aa35-4b89-9c96-b9abf6d3e540\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, patchVotes, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a pull request.\r\n     *\r\n     * @param {number} pullRequestId - The ID of the pull request to retrieve.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPullRequestById(pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"01a46dea-7d46-4d40-bc84-319e7c260d99\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequest, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve all pull requests matching a specified criteria.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {GitInterfaces.GitPullRequestSearchCriteria} searchCriteria - Pull requests will be returned that match this search criteria.\r\n     * @param {number} maxCommentLength - Not used.\r\n     * @param {number} skip - The number of pull requests to ignore. For example, to retrieve results 101-150, set top to 50 and skip to 100.\r\n     * @param {number} top - The number of pull requests to retrieve.\r\n     */\r\n    getPullRequestsByProject(project, searchCriteria, maxCommentLength, skip, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (searchCriteria == null) {\r\n                throw new TypeError('searchCriteria can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    searchCriteria: searchCriteria,\r\n                    maxCommentLength: maxCommentLength,\r\n                    '$skip': skip,\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"a5d28130-9cd2-40fa-9f08-902e7daa9efb\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequest, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a pull request.\r\n     *\r\n     * @param {GitInterfaces.GitPullRequest} gitPullRequestToCreate - The pull request to create.\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} supportsIterations - If true, subsequent pushes to the pull request will be individually reviewable. Set this to false for large pull requests for performance reasons if this functionality is not needed.\r\n     */\r\n    createPullRequest(gitPullRequestToCreate, repositoryId, project, supportsIterations) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    supportsIterations: supportsIterations,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"9946fd70-0d40-406e-b686-b4744cbbcc37\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, gitPullRequestToCreate, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequest, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a pull request.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - The ID of the pull request to retrieve.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} maxCommentLength - Not used.\r\n     * @param {number} skip - Not used.\r\n     * @param {number} top - Not used.\r\n     * @param {boolean} includeCommits - If true, the pull request will be returned with the associated commits.\r\n     * @param {boolean} includeWorkItemRefs - If true, the pull request will be returned with the associated work item references.\r\n     */\r\n    getPullRequest(repositoryId, pullRequestId, project, maxCommentLength, skip, top, includeCommits, includeWorkItemRefs) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                let queryValues = {\r\n                    maxCommentLength: maxCommentLength,\r\n                    '$skip': skip,\r\n                    '$top': top,\r\n                    includeCommits: includeCommits,\r\n                    includeWorkItemRefs: includeWorkItemRefs,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"9946fd70-0d40-406e-b686-b4744cbbcc37\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequest, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve all pull requests matching a specified criteria.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {GitInterfaces.GitPullRequestSearchCriteria} searchCriteria - Pull requests will be returned that match this search criteria.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} maxCommentLength - Not used.\r\n     * @param {number} skip - The number of pull requests to ignore. For example, to retrieve results 101-150, set top to 50 and skip to 100.\r\n     * @param {number} top - The number of pull requests to retrieve.\r\n     */\r\n    getPullRequests(repositoryId, searchCriteria, project, maxCommentLength, skip, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (searchCriteria == null) {\r\n                throw new TypeError('searchCriteria can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    searchCriteria: searchCriteria,\r\n                    maxCommentLength: maxCommentLength,\r\n                    '$skip': skip,\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"9946fd70-0d40-406e-b686-b4744cbbcc37\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequest, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a pull request\r\n     *\r\n     * @param {GitInterfaces.GitPullRequest} gitPullRequestToUpdate - The pull request content that should be updated.\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request to update.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updatePullRequest(gitPullRequestToUpdate, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"9946fd70-0d40-406e-b686-b4744cbbcc37\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, gitPullRequestToUpdate, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequest, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Sends an e-mail notification about a specific pull request to a set of recipients\r\n     *\r\n     * @param {GitInterfaces.ShareNotificationContext} userMessage\r\n     * @param {string} repositoryId - ID of the git repository.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    sharePullRequest(userMessage, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"696f3a82-47c9-487f-9117-b9d00972ca84\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, userMessage, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a pull request status.\r\n     *\r\n     * @param {GitInterfaces.GitPullRequestStatus} status - Pull request status to create.\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createPullRequestStatus(status, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"b5f6bb4f-8d1e-4d79-8d11-4c9172c99c35\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, status, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestStatus, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete pull request status.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} statusId - ID of the pull request status.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    deletePullRequestStatus(repositoryId, pullRequestId, statusId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    statusId: statusId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"b5f6bb4f-8d1e-4d79-8d11-4c9172c99c35\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the specific pull request status by ID. The status ID is unique within the pull request across all iterations.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} statusId - ID of the pull request status.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPullRequestStatus(repositoryId, pullRequestId, statusId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    statusId: statusId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"b5f6bb4f-8d1e-4d79-8d11-4c9172c99c35\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestStatus, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get all the statuses associated with a pull request.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPullRequestStatuses(repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"b5f6bb4f-8d1e-4d79-8d11-4c9172c99c35\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestStatus, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update pull request statuses collection. The only supported operation type is `remove`.\r\n     *\r\n     * @param {VSSInterfaces.JsonPatchDocument} patchDocument - Operations to apply to the pull request statuses in JSON Patch format.\r\n     * @param {string} repositoryId - The repository ID of the pull request’s target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updatePullRequestStatuses(customHeaders, patchDocument, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/json-patch+json\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"b5f6bb4f-8d1e-4d79-8d11-4c9172c99c35\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.update(url, patchDocument, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a comment on a specific thread in a pull request (up to 500 comments can be created per thread).\r\n     *\r\n     * @param {GitInterfaces.Comment} comment - The comment to create. Comments can be up to 150,000 characters.\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} threadId - ID of the thread that the desired comment is in.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createComment(comment, repositoryId, pullRequestId, threadId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    threadId: threadId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"965a3ec7-5ed8-455a-bdcb-835a5ea7fe7b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, comment, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.Comment, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a comment associated with a specific thread in a pull request.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} threadId - ID of the thread that the desired comment is in.\r\n     * @param {number} commentId - ID of the comment.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    deleteComment(repositoryId, pullRequestId, threadId, commentId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    threadId: threadId,\r\n                    commentId: commentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"965a3ec7-5ed8-455a-bdcb-835a5ea7fe7b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a comment associated with a specific thread in a pull request.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} threadId - ID of the thread that the desired comment is in.\r\n     * @param {number} commentId - ID of the comment.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getComment(repositoryId, pullRequestId, threadId, commentId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    threadId: threadId,\r\n                    commentId: commentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"965a3ec7-5ed8-455a-bdcb-835a5ea7fe7b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.Comment, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve all comments associated with a specific thread in a pull request.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} threadId - ID of the thread.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getComments(repositoryId, pullRequestId, threadId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    threadId: threadId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"965a3ec7-5ed8-455a-bdcb-835a5ea7fe7b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.Comment, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a comment associated with a specific thread in a pull request.\r\n     *\r\n     * @param {GitInterfaces.Comment} comment - The comment content that should be updated. Comments can be up to 150,000 characters.\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} threadId - ID of the thread that the desired comment is in.\r\n     * @param {number} commentId - ID of the comment to update.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateComment(comment, repositoryId, pullRequestId, threadId, commentId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    threadId: threadId,\r\n                    commentId: commentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"965a3ec7-5ed8-455a-bdcb-835a5ea7fe7b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, comment, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.Comment, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a thread in a pull request.\r\n     *\r\n     * @param {GitInterfaces.GitPullRequestCommentThread} commentThread - The thread to create. Thread must contain at least one comment.\r\n     * @param {string} repositoryId - Repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createThread(commentThread, repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"ab6e2e5d-a0b7-4153-b64a-a4efe0d49449\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, commentThread, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestCommentThread, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a thread in a pull request.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} threadId - ID of the thread.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} iteration - If specified, thread position will be tracked using this iteration as the right side of the diff.\r\n     * @param {number} baseIteration - If specified, thread position will be tracked using this iteration as the left side of the diff.\r\n     */\r\n    getPullRequestThread(repositoryId, pullRequestId, threadId, project, iteration, baseIteration) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    threadId: threadId\r\n                };\r\n                let queryValues = {\r\n                    '$iteration': iteration,\r\n                    '$baseIteration': baseIteration,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"ab6e2e5d-a0b7-4153-b64a-a4efe0d49449\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestCommentThread, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve all threads in a pull request.\r\n     *\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} iteration - If specified, thread positions will be tracked using this iteration as the right side of the diff.\r\n     * @param {number} baseIteration - If specified, thread positions will be tracked using this iteration as the left side of the diff.\r\n     */\r\n    getThreads(repositoryId, pullRequestId, project, iteration, baseIteration) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                let queryValues = {\r\n                    '$iteration': iteration,\r\n                    '$baseIteration': baseIteration,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"ab6e2e5d-a0b7-4153-b64a-a4efe0d49449\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestCommentThread, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a thread in a pull request.\r\n     *\r\n     * @param {GitInterfaces.GitPullRequestCommentThread} commentThread - The thread content that should be updated.\r\n     * @param {string} repositoryId - The repository ID of the pull request's target branch.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {number} threadId - ID of the thread to update.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateThread(commentThread, repositoryId, pullRequestId, threadId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId,\r\n                    threadId: threadId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"ab6e2e5d-a0b7-4153-b64a-a4efe0d49449\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, commentThread, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPullRequestCommentThread, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a list of work items associated with a pull request.\r\n     *\r\n     * @param {string} repositoryId - ID or name of the repository.\r\n     * @param {number} pullRequestId - ID of the pull request.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPullRequestWorkItemRefs(repositoryId, pullRequestId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pullRequestId: pullRequestId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"0a637fcc-5370-4ce8-b0e8-98091f5f9482\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Push changes to the repository.\r\n     *\r\n     * @param {GitInterfaces.GitPush} push\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createPush(push, repositoryId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"git\", \"ea98d07b-3c87-4971-8ede-a613694ffb55\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, push, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPush, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieves a particular push.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {number} pushId - ID of the push.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} includeCommits - The number of commits to include in the result.\r\n     * @param {boolean} includeRefUpdates - If true, include the list of refs that were updated by the push.\r\n     */\r\n    getPush(repositoryId, pushId, project, includeCommits, includeRefUpdates) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    pushId: pushId\r\n                };\r\n                let queryValues = {\r\n                    includeCommits: includeCommits,\r\n                    includeRefUpdates: includeRefUpdates,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"git\", \"ea98d07b-3c87-4971-8ede-a613694ffb55\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPush, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieves pushes associated with the specified repository.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} skip - Number of pushes to skip.\r\n     * @param {number} top - Number of pushes to return.\r\n     * @param {GitInterfaces.GitPushSearchCriteria} searchCriteria - Search criteria attributes: fromDate, toDate, pusherId, refName, includeRefUpdates or includeLinks. fromDate: Start date to search from. toDate: End date to search to. pusherId: Identity of the person who submitted the push. refName: Branch name to consider. includeRefUpdates: If true, include the list of refs that were updated by the push. includeLinks: Whether to include the _links field on the shallow references.\r\n     */\r\n    getPushes(repositoryId, project, skip, top, searchCriteria) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    '$skip': skip,\r\n                    '$top': top,\r\n                    searchCriteria: searchCriteria,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"git\", \"ea98d07b-3c87-4971-8ede-a613694ffb55\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitPush, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Destroy (hard delete) a soft-deleted Git repository.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - The ID of the repository.\r\n     */\r\n    deleteRepositoryFromRecycleBin(project, repositoryId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"a663da97-81db-4eb3-8b83-287670f63073\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve soft-deleted git repositories from the recycle bin.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getRecycleBinRepositories(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"a663da97-81db-4eb3-8b83-287670f63073\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitDeletedRepository, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Recover a soft-deleted Git repository. Recently deleted repositories go into a soft-delete state for a period of time before they are hard deleted and become unrecoverable.\r\n     *\r\n     * @param {GitInterfaces.GitRecycleBinRepositoryDetails} repositoryDetails\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - The ID of the repository.\r\n     */\r\n    restoreRepositoryFromRecycleBin(repositoryDetails, project, repositoryId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"a663da97-81db-4eb3-8b83-287670f63073\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, repositoryDetails, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRepository, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Queries the provided repository for its refs and returns them.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} filter - [optional] A filter to apply to the refs (starts with).\r\n     * @param {boolean} includeLinks - [optional] Specifies if referenceLinks should be included in the result. default is false.\r\n     * @param {boolean} includeStatuses - [optional] Includes up to the first 1000 commit statuses for each ref. The default value is false.\r\n     * @param {boolean} includeMyBranches - [optional] Includes only branches that the user owns, the branches the user favorites, and the default branch. The default value is false. Cannot be combined with the filter parameter.\r\n     * @param {boolean} latestStatusesOnly - [optional] True to include only the tip commit status for each ref. This option requires `includeStatuses` to be true. The default value is false.\r\n     * @param {boolean} peelTags - [optional] Annotated tags will populate the PeeledObjectId property. default is false.\r\n     * @param {string} filterContains - [optional] A filter to apply to the refs (contains).\r\n     */\r\n    getRefs(repositoryId, project, filter, includeLinks, includeStatuses, includeMyBranches, latestStatusesOnly, peelTags, filterContains) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    filter: filter,\r\n                    includeLinks: includeLinks,\r\n                    includeStatuses: includeStatuses,\r\n                    includeMyBranches: includeMyBranches,\r\n                    latestStatusesOnly: latestStatusesOnly,\r\n                    peelTags: peelTags,\r\n                    filterContains: filterContains,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"2d874a60-a811-4f62-9c9f-963a6ea0a55b\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRef, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Lock or Unlock a branch.\r\n     *\r\n     * @param {GitInterfaces.GitRefUpdate} newRefInfo - The ref update action (lock/unlock) to perform\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} filter - The name of the branch to lock/unlock\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} projectId - ID or name of the team project. Optional if specifying an ID for repository.\r\n     */\r\n    updateRef(newRefInfo, repositoryId, filter, project, projectId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (filter == null) {\r\n                throw new TypeError('filter can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    filter: filter,\r\n                    projectId: projectId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"2d874a60-a811-4f62-9c9f-963a6ea0a55b\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, newRefInfo, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRef, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creating, updating, or deleting refs(branches).\r\n     *\r\n     * @param {GitInterfaces.GitRefUpdate[]} refUpdates - List of ref updates to attempt to perform\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} projectId - ID or name of the team project. Optional if specifying an ID for repository.\r\n     */\r\n    updateRefs(refUpdates, repositoryId, project, projectId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    projectId: projectId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"2d874a60-a811-4f62-9c9f-963a6ea0a55b\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, refUpdates, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRefUpdateResult, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a ref favorite\r\n     *\r\n     * @param {GitInterfaces.GitRefFavorite} favorite - The ref favorite to create.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createFavorite(favorite, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"876f70af-5792-485a-a1c7-d0a7b2f42bbb\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, favorite, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRefFavorite, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes the refs favorite specified\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} favoriteId - The Id of the ref favorite to delete.\r\n     */\r\n    deleteRefFavorite(project, favoriteId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    favoriteId: favoriteId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"876f70af-5792-485a-a1c7-d0a7b2f42bbb\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the refs favorite for a favorite Id.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} favoriteId - The Id of the requested ref favorite.\r\n     */\r\n    getRefFavorite(project, favoriteId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    favoriteId: favoriteId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"876f70af-5792-485a-a1c7-d0a7b2f42bbb\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRefFavorite, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the refs favorites for a repo and an identity.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - The id of the repository.\r\n     * @param {string} identityId - The id of the identity whose favorites are to be retrieved. If null, the requesting identity is used.\r\n     */\r\n    getRefFavorites(project, repositoryId, identityId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    repositoryId: repositoryId,\r\n                    identityId: identityId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"876f70af-5792-485a-a1c7-d0a7b2f42bbb\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRefFavorite, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} identityId\r\n     */\r\n    getRefFavoritesForProject(project, identityId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    identityId: identityId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"4720896c-594c-4a6d-b94c-12eddd80b34a\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRefFavorite, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a git repository in a team project.\r\n     *\r\n     * @param {GitInterfaces.GitRepositoryCreateOptions} gitRepositoryToCreate - Specify the repo name, team project and/or parent repository. Team project information can be omitted from gitRepositoryToCreate if the request is project-scoped (i.e., includes project Id).\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} sourceRef - [optional] Specify the source refs to use while creating a fork repo\r\n     */\r\n    createRepository(gitRepositoryToCreate, project, sourceRef) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    sourceRef: sourceRef,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"225f7195-f9c7-4d14-ab28-a83f7ff77e1f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, gitRepositoryToCreate, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRepository, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a git repository\r\n     *\r\n     * @param {string} repositoryId - The ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    deleteRepository(repositoryId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"225f7195-f9c7-4d14-ab28-a83f7ff77e1f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve git repositories.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} includeLinks - [optional] True to include reference links. The default value is false.\r\n     * @param {boolean} includeAllUrls - [optional] True to include all remote URLs. The default value is false.\r\n     * @param {boolean} includeHidden - [optional] True to include hidden repositories. The default value is false.\r\n     */\r\n    getRepositories(project, includeLinks, includeAllUrls, includeHidden) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    includeLinks: includeLinks,\r\n                    includeAllUrls: includeAllUrls,\r\n                    includeHidden: includeHidden,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"225f7195-f9c7-4d14-ab28-a83f7ff77e1f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRepository, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a git repository.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getRepository(repositoryId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"225f7195-f9c7-4d14-ab28-a83f7ff77e1f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRepository, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a git repository.\r\n     *\r\n     * @param {string} repositoryId - The name or ID of the repository.\r\n     * @param {boolean} includeParent - True to include parent repository. Only available in authenticated calls.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getRepositoryWithParent(repositoryId, includeParent, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (includeParent == null) {\r\n                throw new TypeError('includeParent can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    includeParent: includeParent,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"225f7195-f9c7-4d14-ab28-a83f7ff77e1f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRepository, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates the Git repository with either a new repo name or a new default branch.\r\n     *\r\n     * @param {GitInterfaces.GitRepository} newRepositoryInfo - Specify a new repo name or a new default branch of the repository\r\n     * @param {string} repositoryId - The ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateRepository(newRepositoryInfo, repositoryId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"225f7195-f9c7-4d14-ab28-a83f7ff77e1f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, newRepositoryInfo, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRepository, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve one conflict for a revert by ID\r\n     *\r\n     * @param {string} repositoryId\r\n     * @param {number} revertId\r\n     * @param {number} conflictId\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getRevertConflict(repositoryId, revertId, conflictId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    revertId: revertId,\r\n                    conflictId: conflictId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"10d7ae6d-1050-446d-852a-bd5d99f834bf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflict, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve all conflicts for a revert\r\n     *\r\n     * @param {string} repositoryId\r\n     * @param {number} revertId\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} continuationToken\r\n     * @param {number} top\r\n     * @param {boolean} excludeResolved\r\n     * @param {boolean} onlyResolved\r\n     * @param {boolean} includeObsolete\r\n     */\r\n    getRevertConflicts(repositoryId, revertId, project, continuationToken, top, excludeResolved, onlyResolved, includeObsolete) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    revertId: revertId\r\n                };\r\n                let queryValues = {\r\n                    continuationToken: continuationToken,\r\n                    '$top': top,\r\n                    excludeResolved: excludeResolved,\r\n                    onlyResolved: onlyResolved,\r\n                    includeObsolete: includeObsolete,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"10d7ae6d-1050-446d-852a-bd5d99f834bf\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflict, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update merge conflict resolution\r\n     *\r\n     * @param {GitInterfaces.GitConflict} conflict\r\n     * @param {string} repositoryId\r\n     * @param {number} revertId\r\n     * @param {number} conflictId\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateRevertConflict(conflict, repositoryId, revertId, conflictId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    revertId: revertId,\r\n                    conflictId: conflictId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"10d7ae6d-1050-446d-852a-bd5d99f834bf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, conflict, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflict, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update multiple merge conflict resolutions\r\n     *\r\n     * @param {GitInterfaces.GitConflict[]} conflictUpdates\r\n     * @param {string} repositoryId\r\n     * @param {number} revertId\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateRevertConflicts(conflictUpdates, repositoryId, revertId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    revertId: revertId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"10d7ae6d-1050-446d-852a-bd5d99f834bf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, conflictUpdates, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitConflictUpdateResult, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Starts the operation to create a new branch which reverts changes introduced by either a specific commit or commits that are associated to a pull request.\r\n     *\r\n     * @param {GitInterfaces.GitAsyncRefOperationParameters} revertToCreate\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - ID of the repository.\r\n     */\r\n    createRevert(revertToCreate, project, repositoryId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"bc866058-5449-4715-9cf1-a510b6ff193c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, revertToCreate, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRevert, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve information about a revert operation by revert Id.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} revertId - ID of the revert operation.\r\n     * @param {string} repositoryId - ID of the repository.\r\n     */\r\n    getRevert(project, revertId, repositoryId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    revertId: revertId,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"bc866058-5449-4715-9cf1-a510b6ff193c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRevert, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve information about a revert operation for a specific branch.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId - ID of the repository.\r\n     * @param {string} refName - The GitAsyncRefOperationParameters generatedRefName used for the revert operation.\r\n     */\r\n    getRevertForRefName(project, repositoryId, refName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (refName == null) {\r\n                throw new TypeError('refName can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    refName: refName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"bc866058-5449-4715-9cf1-a510b6ff193c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitRevert, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create Git commit status.\r\n     *\r\n     * @param {GitInterfaces.GitStatus} gitCommitStatusToCreate - Git commit status object to create.\r\n     * @param {string} commitId - ID of the Git commit.\r\n     * @param {string} repositoryId - ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createCommitStatus(gitCommitStatusToCreate, commitId, repositoryId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    commitId: commitId,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"428dd4fb-fda5-4722-af02-9313b80305da\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, gitCommitStatusToCreate, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitStatus, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get statuses associated with the Git commit.\r\n     *\r\n     * @param {string} commitId - ID of the Git commit.\r\n     * @param {string} repositoryId - ID of the repository.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} top - Optional. The number of statuses to retrieve. Default is 1000.\r\n     * @param {number} skip - Optional. The number of statuses to ignore. Default is 0. For example, to retrieve results 101-150, set top to 50 and skip to 100.\r\n     * @param {boolean} latestOnly - The flag indicates whether to get only latest statuses grouped by `Context.Name` and `Context.Genre`.\r\n     */\r\n    getStatuses(commitId, repositoryId, project, top, skip, latestOnly) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    commitId: commitId,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    top: top,\r\n                    skip: skip,\r\n                    latestOnly: latestOnly,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"git\", \"428dd4fb-fda5-4722-af02-9313b80305da\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitStatus, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a pull request suggestion for a particular repository or team project.\r\n     *\r\n     * @param {string} repositoryId - ID of the git repository.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getSuggestions(repositoryId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"9393b4fb-4445-4919-972b-9ad16f442d83\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * The Tree endpoint returns the collection of objects underneath the specified tree. Trees are folders in a Git repository.\r\n     *\r\n     * @param {string} repositoryId - Repository Id.\r\n     * @param {string} sha1 - SHA1 hash of the tree object.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} projectId - Project Id.\r\n     * @param {boolean} recursive - Search recursively. Include trees underneath this tree. Default is false.\r\n     * @param {string} fileName - Name to use if a .zip file is returned. Default is the object ID.\r\n     */\r\n    getTree(repositoryId, sha1, project, projectId, recursive, fileName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    sha1: sha1\r\n                };\r\n                let queryValues = {\r\n                    projectId: projectId,\r\n                    recursive: recursive,\r\n                    fileName: fileName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"729f6437-6f92-44ec-8bee-273a7111063c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, GitInterfaces.TypeInfo.GitTreeRef, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * The Tree endpoint returns the collection of objects underneath the specified tree. Trees are folders in a Git repository.\r\n     *\r\n     * @param {string} repositoryId - Repository Id.\r\n     * @param {string} sha1 - SHA1 hash of the tree object.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} projectId - Project Id.\r\n     * @param {boolean} recursive - Search recursively. Include trees underneath this tree. Default is false.\r\n     * @param {string} fileName - Name to use if a .zip file is returned. Default is the object ID.\r\n     */\r\n    getTreeZip(repositoryId, sha1, project, projectId, recursive, fileName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId,\r\n                    sha1: sha1\r\n                };\r\n                let queryValues = {\r\n                    projectId: projectId,\r\n                    recursive: recursive,\r\n                    fileName: fileName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"git\", \"729f6437-6f92-44ec-8bee-273a7111063c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nGitApi.RESOURCE_AREA_ID = \"4e080c62-fa21-4fbc-8fef-2a10a2b38049\";\r\nexports.GitApi = GitApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst LocationsInterfaces = require(\"./interfaces/LocationsInterfaces\");\r\nclass LocationsApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-Locations-api', options);\r\n    }\r\n    /**\r\n     * This was copied and adapted from TeamFoundationConnectionService.Connect()\r\n     *\r\n     * @param {VSSInterfaces.ConnectOptions} connectOptions\r\n     * @param {number} lastChangeId - Obsolete 32-bit LastChangeId\r\n     * @param {number} lastChangeId64 - Non-truncated 64-bit LastChangeId\r\n     */\r\n    getConnectionData(connectOptions, lastChangeId, lastChangeId64) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    connectOptions: connectOptions,\r\n                    lastChangeId: lastChangeId,\r\n                    lastChangeId64: lastChangeId64,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Location\", \"00d9565f-ed9c-4a06-9a50-00e7896ccab4\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, LocationsInterfaces.TypeInfo.ConnectionData, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} areaId\r\n     * @param {string} enterpriseName\r\n     * @param {string} organizationName\r\n     */\r\n    getResourceArea(areaId, enterpriseName, organizationName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    areaId: areaId\r\n                };\r\n                let queryValues = {\r\n                    enterpriseName: enterpriseName,\r\n                    organizationName: organizationName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Location\", \"e81700f7-3be2-46de-8624-2eb35882fcaa\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} areaId\r\n     * @param {string} hostId\r\n     */\r\n    getResourceAreaByHost(areaId, hostId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (hostId == null) {\r\n                throw new TypeError('hostId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    areaId: areaId\r\n                };\r\n                let queryValues = {\r\n                    hostId: hostId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Location\", \"e81700f7-3be2-46de-8624-2eb35882fcaa\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} enterpriseName\r\n     * @param {string} organizationName\r\n     */\r\n    getResourceAreas(enterpriseName, organizationName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    enterpriseName: enterpriseName,\r\n                    organizationName: organizationName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Location\", \"e81700f7-3be2-46de-8624-2eb35882fcaa\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} hostId\r\n     */\r\n    getResourceAreasByHost(hostId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (hostId == null) {\r\n                throw new TypeError('hostId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    hostId: hostId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Location\", \"e81700f7-3be2-46de-8624-2eb35882fcaa\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} serviceType\r\n     * @param {string} identifier\r\n     */\r\n    deleteServiceDefinition(serviceType, identifier) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    serviceType: serviceType,\r\n                    identifier: identifier\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Location\", \"d810a47d-f4f4-4a62-a03f-fa1860585c4c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Finds a given service definition.\r\n     *\r\n     * @param {string} serviceType\r\n     * @param {string} identifier\r\n     * @param {boolean} allowFaultIn - If true, we will attempt to fault in a host instance mapping if in SPS.\r\n     * @param {boolean} previewFaultIn - If true, we will calculate and return a host instance mapping, but not persist it.\r\n     */\r\n    getServiceDefinition(serviceType, identifier, allowFaultIn, previewFaultIn) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    serviceType: serviceType,\r\n                    identifier: identifier\r\n                };\r\n                let queryValues = {\r\n                    allowFaultIn: allowFaultIn,\r\n                    previewFaultIn: previewFaultIn,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Location\", \"d810a47d-f4f4-4a62-a03f-fa1860585c4c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, LocationsInterfaces.TypeInfo.ServiceDefinition, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} serviceType\r\n     */\r\n    getServiceDefinitions(serviceType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    serviceType: serviceType\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Location\", \"d810a47d-f4f4-4a62-a03f-fa1860585c4c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, LocationsInterfaces.TypeInfo.ServiceDefinition, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {VSSInterfaces.VssJsonCollectionWrapperV<LocationsInterfaces.ServiceDefinition[]>} serviceDefinitions\r\n     */\r\n    updateServiceDefinitions(serviceDefinitions) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Location\", \"d810a47d-f4f4-4a62-a03f-fa1860585c4c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, serviceDefinitions, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nexports.LocationsApi = LocationsApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst ManagementInterfaces = require(\"./interfaces/ManagementInterfaces\");\r\nclass ManagementApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-Management-api', options);\r\n    }\r\n    /**\r\n     * Delete the billing info for an organization.\r\n     *\r\n     * @param {string} organizationId\r\n     */\r\n    deleteBillingInfo(organizationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    action: \"Default\",\r\n                    organizationId: organizationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Management\", \"de45fbc6-60fd-46e2-95ef-490ad08d656a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete the meter usage history from Primary SU for an organization.\r\n     *\r\n     * @param {string} organizationId\r\n     */\r\n    deleteMeterUsageHistory(organizationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    action: \"MeterUsageHistory\",\r\n                    organizationId: organizationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Management\", \"de45fbc6-60fd-46e2-95ef-490ad08d656a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the billing info for an organization.\r\n     *\r\n     * @param {string} organizationId - Organization ID to get billing info for.\r\n     */\r\n    getBillingInfo(organizationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    action: \"Default\",\r\n                    organizationId: organizationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Management\", \"de45fbc6-60fd-46e2-95ef-490ad08d656a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ManagementInterfaces.TypeInfo.BillingInfo, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Save the billing info for an organization.\r\n     *\r\n     * @param {ManagementInterfaces.BillingInfo} billingInfo\r\n     * @param {string} organizationId\r\n     */\r\n    saveBillingInfo(billingInfo, organizationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    action: \"Default\",\r\n                    organizationId: organizationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Management\", \"de45fbc6-60fd-46e2-95ef-490ad08d656a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, billingInfo, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get all billable committers details, including those not matched with a VSID.\r\n     *\r\n     * @param {Date} billingDate - The date to query, or if not provided, today\r\n     */\r\n    getBillableCommitterDetails(billingDate) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    action: \"Details\",\r\n                };\r\n                let queryValues = {\r\n                    billingDate: billingDate,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Management\", \"e58d8091-3d07-48b1-9527-7d6295fd4081\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ManagementInterfaces.TypeInfo.BillableCommitterDetails, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     */\r\n    getLastMeterUsage() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    action: \"Last\",\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Management\", \"e58d8091-3d07-48b1-9527-7d6295fd4081\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ManagementInterfaces.TypeInfo.MeterUsage, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get commiters used when calculating billing information.\r\n     *\r\n     * @param {Date} billingDate - The date to query, or if not provided, today\r\n     */\r\n    getMeterUsage(billingDate) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    action: \"Default\",\r\n                };\r\n                let queryValues = {\r\n                    billingDate: billingDate,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Management\", \"e58d8091-3d07-48b1-9527-7d6295fd4081\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ManagementInterfaces.TypeInfo.MeterUsage, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {ManagementInterfaces.MeterUsage} meterUsage\r\n     */\r\n    setBillingSnapshot(meterUsage) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    action: \"Default\",\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Management\", \"e58d8091-3d07-48b1-9527-7d6295fd4081\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, meterUsage, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the current status of Advanced Security for the organization\r\n     *\r\n     * @param {boolean} includeAllProperties - When true, also determine if pushes are blocked if they contain secrets\r\n     */\r\n    getOrgEnablementStatus(includeAllProperties) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    includeAllProperties: includeAllProperties,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Management\", \"d0c0450f-8882-46f4-a5a8-e48fea3095b0\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ManagementInterfaces.TypeInfo.AdvSecEnablementSettings, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update the status of Advanced Security for the organization\r\n     *\r\n     * @param {ManagementInterfaces.AdvSecEnablementSettingsUpdate} savedAdvSecEnablementStatus - The new status\r\n     */\r\n    updateOrgEnablementStatus(savedAdvSecEnablementStatus) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Management\", \"d0c0450f-8882-46f4-a5a8-e48fea3095b0\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, savedAdvSecEnablementStatus, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Estimate the committers that would be added to the customer's usage if Advanced Security was enabled for this organization.\r\n     *\r\n     */\r\n    getEstimatedOrgBillablePushers() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Management\", \"10a9e9c3-89bf-4312-92ed-139ddbcd2e28\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the current status of Advanced Security for a project\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} includeAllProperties - When true, also determine if pushes are blocked if they contain secrets\r\n     */\r\n    getProjectEnablementStatus(project, includeAllProperties) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    includeAllProperties: includeAllProperties,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Management\", \"6b9a4b47-5f2d-40f3-8286-b0152079074d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ManagementInterfaces.TypeInfo.AdvSecEnablementSettings, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update the status of Advanced Security for the project\r\n     *\r\n     * @param {ManagementInterfaces.AdvSecEnablementSettingsUpdate} savedAdvSecEnablementStatus - The new status\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateProjectEnablementStatus(savedAdvSecEnablementStatus, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Management\", \"6b9a4b47-5f2d-40f3-8286-b0152079074d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, savedAdvSecEnablementStatus, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Estimate the number of committers that would be added to the customer's usage if Advanced Security was enabled for this project.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getEstimatedProjectBillablePushers(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Management\", \"bf09cb40-ecf4-4496-8cf7-9ec60c64fd3e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Determine if Advanced Security is enabled for a repository\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repository - The name or ID of the repository\r\n     * @param {boolean} includeAllProperties - When true, will also determine if pushes are blocked when secrets are detected\r\n     */\r\n    getRepoEnablementStatus(project, repository, includeAllProperties) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repository: repository\r\n                };\r\n                let queryValues = {\r\n                    includeAllProperties: includeAllProperties,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Management\", \"d11a1c2b-b904-43dc-b970-bf42486262db\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ManagementInterfaces.TypeInfo.AdvSecEnablementStatus, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update the enablement of Advanced Security for a repository\r\n     *\r\n     * @param {ManagementInterfaces.AdvSecEnablementStatusUpdate} savedAdvSecEnablementStatus - new status\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repository - Name or ID of the repository\r\n     */\r\n    updateRepoAdvSecEnablementStatus(savedAdvSecEnablementStatus, project, repository) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repository: repository\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Management\", \"d11a1c2b-b904-43dc-b970-bf42486262db\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, savedAdvSecEnablementStatus, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Estimate the committers that would be added to the customer's usage if Advanced Security was enabled for this repository.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repository - The name or ID of the repository\r\n     */\r\n    getEstimatedRepoBillableCommitters(project, repository) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repository: repository\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Management\", \"b60f1ebf-ae77-4557-bd7f-ae3d5598dd1f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nexports.ManagementApi = ManagementApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst NotificationInterfaces = require(\"./interfaces/NotificationInterfaces\");\r\nconst VSSInterfaces = require(\"./interfaces/common/VSSInterfaces\");\r\nclass NotificationApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-Notification-api', options);\r\n    }\r\n    /**\r\n     * @param {NotificationInterfaces.BatchNotificationOperation} operation\r\n     */\r\n    performBatchNotificationOperations(operation) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"notification\", \"8f3c6ab2-5bae-4537-b16e-f84e0955599e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, operation, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of diagnostic logs for this service.\r\n     *\r\n     * @param {string} source - ID specifying which type of logs to check diagnostics for.\r\n     * @param {string} entryId - The ID of the specific log to query for.\r\n     * @param {Date} startTime - Start time for the time range to query in.\r\n     * @param {Date} endTime - End time for the time range to query in.\r\n     */\r\n    listLogs(source, entryId, startTime, endTime) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    source: source,\r\n                    entryId: entryId\r\n                };\r\n                let queryValues = {\r\n                    startTime: startTime,\r\n                    endTime: endTime,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"notification\", \"991842f3-eb16-4aea-ac81-81353ef2b75c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.INotificationDiagnosticLog, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the diagnostics settings for a subscription.\r\n     *\r\n     * @param {string} subscriptionId - The id of the notifications subscription.\r\n     */\r\n    getSubscriptionDiagnostics(subscriptionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    subscriptionId: subscriptionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"notification\", \"20f1929d-4be7-4c2e-a74e-d47640ff3418\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.SubscriptionDiagnostics, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update the diagnostics settings for a subscription.\r\n     *\r\n     * @param {NotificationInterfaces.UpdateSubscripitonDiagnosticsParameters} updateParameters\r\n     * @param {string} subscriptionId - The id of the notifications subscription.\r\n     */\r\n    updateSubscriptionDiagnostics(updateParameters, subscriptionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    subscriptionId: subscriptionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"notification\", \"20f1929d-4be7-4c2e-a74e-d47640ff3418\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, updateParameters, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.SubscriptionDiagnostics, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Publish an event. This request must be directed to the service \"extmgmt\".\r\n     *\r\n     * @param {VSSInterfaces.VssNotificationEvent} notificationEvent\r\n     */\r\n    publishEvent(notificationEvent) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"notification\", \"14c57b7a-c0e6-4555-9f51-e067188fdd8e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, notificationEvent, options);\r\n                    let ret = this.formatResponse(res.result, VSSInterfaces.TypeInfo.VssNotificationEvent, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Tranform a notification event.\r\n     *\r\n     * @param {NotificationInterfaces.EventTransformRequest} transformRequest - Object to be transformed.\r\n     */\r\n    transformEvent(transformRequest) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"notification\", \"9463a800-1b44-450e-9083-f948ea174b45\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, transformRequest, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {NotificationInterfaces.FieldValuesQuery} inputValuesQuery\r\n     * @param {string} eventType\r\n     */\r\n    queryEventTypes(inputValuesQuery, eventType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    eventType: eventType\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"notification\", \"b5bbdd21-c178-4398-b6db-0166d910028a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, inputValuesQuery, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationEventField, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a specific event type.\r\n     *\r\n     * @param {string} eventType - The ID of the event type.\r\n     */\r\n    getEventType(eventType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    eventType: eventType\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"notification\", \"cc84fb5f-6247-4c7a-aeae-e5a3c3fddb21\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationEventType, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * List available event types for this service. Optionally filter by only event types for the specified publisher.\r\n     *\r\n     * @param {string} publisherId - Limit to event types for this publisher\r\n     */\r\n    listEventTypes(publisherId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    publisherId: publisherId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"notification\", \"cc84fb5f-6247-4c7a-aeae-e5a3c3fddb21\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationEventType, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} notificationId\r\n     */\r\n    getNotificationReasons(notificationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    notificationId: notificationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"notification\", \"19824fa9-1c76-40e6-9cce-cf0b9ca1cb60\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationReason, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} notificationIds\r\n     */\r\n    listNotificationReasons(notificationIds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    notificationIds: notificationIds,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"notification\", \"19824fa9-1c76-40e6-9cce-cf0b9ca1cb60\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationReason, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     */\r\n    getSettings() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"notification\", \"cbe076d8-2803-45ff-8d8d-44653686ea2a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationAdminSettings, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {NotificationInterfaces.NotificationAdminSettingsUpdateParameters} updateParameters\r\n     */\r\n    updateSettings(updateParameters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"notification\", \"cbe076d8-2803-45ff-8d8d-44653686ea2a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, updateParameters, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationAdminSettings, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get delivery preferences of a notifications subscriber.\r\n     *\r\n     * @param {string} subscriberId - ID of the user or group.\r\n     */\r\n    getSubscriber(subscriberId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    subscriberId: subscriberId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"notification\", \"4d5caff1-25ba-430b-b808-7a1f352cc197\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationSubscriber, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update delivery preferences of a notifications subscriber.\r\n     *\r\n     * @param {NotificationInterfaces.NotificationSubscriberUpdateParameters} updateParameters\r\n     * @param {string} subscriberId - ID of the user or group.\r\n     */\r\n    updateSubscriber(updateParameters, subscriberId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    subscriberId: subscriberId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"notification\", \"4d5caff1-25ba-430b-b808-7a1f352cc197\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, updateParameters, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationSubscriber, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Query for subscriptions. A subscription is returned if it matches one or more of the specified conditions.\r\n     *\r\n     * @param {NotificationInterfaces.SubscriptionQuery} subscriptionQuery\r\n     */\r\n    querySubscriptions(subscriptionQuery) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"notification\", \"6864db85-08c0-4006-8e8e-cc1bebe31675\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, subscriptionQuery, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationSubscription, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a new subscription.\r\n     *\r\n     * @param {NotificationInterfaces.NotificationSubscriptionCreateParameters} createParameters\r\n     */\r\n    createSubscription(createParameters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"notification\", \"70f911d6-abac-488c-85b3-a206bf57e165\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, createParameters, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationSubscription, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a subscription.\r\n     *\r\n     * @param {string} subscriptionId\r\n     */\r\n    deleteSubscription(subscriptionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    subscriptionId: subscriptionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"notification\", \"70f911d6-abac-488c-85b3-a206bf57e165\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a notification subscription by its ID.\r\n     *\r\n     * @param {string} subscriptionId\r\n     * @param {NotificationInterfaces.SubscriptionQueryFlags} queryFlags\r\n     */\r\n    getSubscription(subscriptionId, queryFlags) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    subscriptionId: subscriptionId\r\n                };\r\n                let queryValues = {\r\n                    queryFlags: queryFlags,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"notification\", \"70f911d6-abac-488c-85b3-a206bf57e165\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationSubscription, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of notification subscriptions, either by subscription IDs or by all subscriptions for a given user or group.\r\n     *\r\n     * @param {string} targetId - User or Group ID\r\n     * @param {string[]} ids - List of subscription IDs\r\n     * @param {NotificationInterfaces.SubscriptionQueryFlags} queryFlags\r\n     */\r\n    listSubscriptions(targetId, ids, queryFlags) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    targetId: targetId,\r\n                    ids: ids && ids.join(\",\"),\r\n                    queryFlags: queryFlags,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"notification\", \"70f911d6-abac-488c-85b3-a206bf57e165\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationSubscription, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update an existing subscription. Depending on the type of subscription and permissions, the caller can update the description, filter settings, channel (delivery) settings and more.\r\n     *\r\n     * @param {NotificationInterfaces.NotificationSubscriptionUpdateParameters} updateParameters\r\n     * @param {string} subscriptionId\r\n     */\r\n    updateSubscription(updateParameters, subscriptionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    subscriptionId: subscriptionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"notification\", \"70f911d6-abac-488c-85b3-a206bf57e165\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, updateParameters, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationSubscription, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get available subscription templates.\r\n     *\r\n     */\r\n    getSubscriptionTemplates() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"notification\", \"fa5d24ba-7484-4f3d-888d-4ec6b1974082\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, NotificationInterfaces.TypeInfo.NotificationSubscriptionTemplate, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Publish an event. This request is only for the Token service since it's a deploy only service.\r\n     *\r\n     * @param {VSSInterfaces.VssNotificationEvent} notificationEvent\r\n     */\r\n    publishTokenEvent(notificationEvent) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"notification\", \"31dc86a2-67e8-4452-99a4-2b301ba28291\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, notificationEvent, options);\r\n                    let ret = this.formatResponse(res.result, VSSInterfaces.TypeInfo.VssNotificationEvent, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update the specified user's settings for the specified subscription. This API is typically used to opt in or out of a shared subscription. User settings can only be applied to shared subscriptions, like team subscriptions or default subscriptions.\r\n     *\r\n     * @param {NotificationInterfaces.SubscriptionUserSettings} userSettings\r\n     * @param {string} subscriptionId\r\n     * @param {string} userId - ID of the user\r\n     */\r\n    updateSubscriptionUserSettings(userSettings, subscriptionId, userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    subscriptionId: subscriptionId,\r\n                    userId: userId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"notification\", \"ed5a3dff-aeb5-41b1-b4f7-89e66e58b62e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, userSettings, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nexports.NotificationApi = NotificationApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst PolicyInterfaces = require(\"./interfaces/PolicyInterfaces\");\r\nclass PolicyApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-Policy-api', options);\r\n    }\r\n    /**\r\n     * Create a policy configuration of a given policy type.\r\n     *\r\n     * @param {PolicyInterfaces.PolicyConfiguration} configuration - The policy configuration to create.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createPolicyConfiguration(configuration, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"policy\", \"dad91cbe-d183-45f8-9c6e-9c1164472121\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, configuration, options);\r\n                    let ret = this.formatResponse(res.result, PolicyInterfaces.TypeInfo.PolicyConfiguration, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a policy configuration by its ID.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} configurationId - ID of the policy configuration to delete.\r\n     */\r\n    deletePolicyConfiguration(project, configurationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    configurationId: configurationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"policy\", \"dad91cbe-d183-45f8-9c6e-9c1164472121\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a policy configuration by its ID.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} configurationId - ID of the policy configuration\r\n     */\r\n    getPolicyConfiguration(project, configurationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    configurationId: configurationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"policy\", \"dad91cbe-d183-45f8-9c6e-9c1164472121\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, PolicyInterfaces.TypeInfo.PolicyConfiguration, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of policy configurations in a project.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} scope - [Provided for legacy reasons] The scope on which a subset of policies is defined.\r\n     * @param {string} policyType - Filter returned policies to only this type\r\n     */\r\n    getPolicyConfigurations(project, scope, policyType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    scope: scope,\r\n                    policyType: policyType,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"policy\", \"dad91cbe-d183-45f8-9c6e-9c1164472121\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, PolicyInterfaces.TypeInfo.PolicyConfiguration, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a policy configuration by its ID.\r\n     *\r\n     * @param {PolicyInterfaces.PolicyConfiguration} configuration - The policy configuration to update.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} configurationId - ID of the existing policy configuration to be updated.\r\n     */\r\n    updatePolicyConfiguration(configuration, project, configurationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    configurationId: configurationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"policy\", \"dad91cbe-d183-45f8-9c6e-9c1164472121\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, configuration, options);\r\n                    let ret = this.formatResponse(res.result, PolicyInterfaces.TypeInfo.PolicyConfiguration, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the present evaluation state of a policy.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} evaluationId - ID of the policy evaluation to be retrieved.\r\n     */\r\n    getPolicyEvaluation(project, evaluationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    evaluationId: evaluationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"policy\", \"46aecb7a-5d2c-4647-897b-0209505a9fe4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, PolicyInterfaces.TypeInfo.PolicyEvaluationRecord, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Requeue the policy evaluation.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} evaluationId - ID of the policy evaluation to be retrieved.\r\n     */\r\n    requeuePolicyEvaluation(project, evaluationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    evaluationId: evaluationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"policy\", \"46aecb7a-5d2c-4647-897b-0209505a9fe4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, null, options);\r\n                    let ret = this.formatResponse(res.result, PolicyInterfaces.TypeInfo.PolicyEvaluationRecord, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieves a list of all the policy evaluation statuses for a specific pull request.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} artifactId - A string which uniquely identifies the target of a policy evaluation.\r\n     * @param {boolean} includeNotApplicable - Some policies might determine that they do not apply to a specific pull request. Setting this parameter to true will return evaluation records even for policies which don't apply to this pull request.\r\n     * @param {number} top - The number of policy evaluation records to retrieve.\r\n     * @param {number} skip - The number of policy evaluation records to ignore. For example, to retrieve results 101-150, set top to 50 and skip to 100.\r\n     */\r\n    getPolicyEvaluations(project, artifactId, includeNotApplicable, top, skip) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (artifactId == null) {\r\n                throw new TypeError('artifactId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    artifactId: artifactId,\r\n                    includeNotApplicable: includeNotApplicable,\r\n                    '$top': top,\r\n                    '$skip': skip,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"policy\", \"c23ddff5-229c-4d04-a80b-0fdce9f360c8\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, PolicyInterfaces.TypeInfo.PolicyEvaluationRecord, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a specific revision of a given policy by ID.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} configurationId - The policy configuration ID.\r\n     * @param {number} revisionId - The revision ID.\r\n     */\r\n    getPolicyConfigurationRevision(project, configurationId, revisionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    configurationId: configurationId,\r\n                    revisionId: revisionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"policy\", \"fe1e68a2-60d3-43cb-855b-85e41ae97c95\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, PolicyInterfaces.TypeInfo.PolicyConfiguration, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve all revisions for a given policy.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} configurationId - The policy configuration ID.\r\n     * @param {number} top - The number of revisions to retrieve.\r\n     * @param {number} skip - The number of revisions to ignore. For example, to retrieve results 101-150, set top to 50 and skip to 100.\r\n     */\r\n    getPolicyConfigurationRevisions(project, configurationId, top, skip) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    configurationId: configurationId\r\n                };\r\n                let queryValues = {\r\n                    '$top': top,\r\n                    '$skip': skip,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"policy\", \"fe1e68a2-60d3-43cb-855b-85e41ae97c95\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, PolicyInterfaces.TypeInfo.PolicyConfiguration, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a specific policy type by ID.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} typeId - The policy ID.\r\n     */\r\n    getPolicyType(project, typeId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    typeId: typeId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"policy\", \"44096322-2d3d-466a-bb30-d1b7de69f61f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve all available policy types.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPolicyTypes(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"policy\", \"44096322-2d3d-466a-bb30-d1b7de69f61f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nPolicyApi.RESOURCE_AREA_ID = \"fb13a388-40dd-4a04-b530-013a739c72ef\";\r\nexports.PolicyApi = PolicyApi;\r\n","\"use strict\";\r\n/*\r\n* ---------------------------------------------------------\r\n* Copyright(C) Microsoft Corporation. All rights reserved.\r\n* ---------------------------------------------------------\r\n*\r\n* ---------------------------------------------------------\r\n* Generated file, DO NOT EDIT\r\n* ---------------------------------------------------------\r\n*/\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst ProfileInterfaces = require(\"./interfaces/ProfileInterfaces\");\r\nclass ProfileApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-Profile-api', options);\r\n    }\r\n    /**\r\n    * @param {string} id\r\n    * @param {string} descriptor\r\n    */\r\n    deleteProfileAttribute(id, descriptor) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    descriptor: descriptor,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.2\", \"Profile\", \"1392b6ac-d511-492e-af5b-2263e5545a5d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * @param {string} id\r\n    * @param {string} descriptor\r\n    */\r\n    getProfileAttribute(id, descriptor) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    descriptor: descriptor,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.2\", \"Profile\", \"1392b6ac-d511-492e-af5b-2263e5545a5d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ProfileInterfaces.TypeInfo.ProfileAttribute, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * @param {string} id\r\n    * @param {string} partition\r\n    * @param {string} modifiedSince\r\n    * @param {string} modifiedAfterRevision\r\n    * @param {boolean} withCoreAttributes\r\n    * @param {string} coreAttributes\r\n    */\r\n    getProfileAttributes(id, partition, modifiedSince, modifiedAfterRevision, withCoreAttributes, coreAttributes) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    partition: partition,\r\n                    modifiedSince: modifiedSince,\r\n                    modifiedAfterRevision: modifiedAfterRevision,\r\n                    withCoreAttributes: withCoreAttributes,\r\n                    coreAttributes: coreAttributes,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.2\", \"Profile\", \"1392b6ac-d511-492e-af5b-2263e5545a5d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ProfileInterfaces.TypeInfo.ProfileAttribute, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * @param {any} container\r\n    * @param {string} id\r\n    * @param {string} descriptor\r\n    */\r\n    setProfileAttribute(container, id, descriptor) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    descriptor: descriptor,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.2\", \"Profile\", \"1392b6ac-d511-492e-af5b-2263e5545a5d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, container, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * @param {VSSInterfaces.VssJsonCollectionWrapperV<ProfileInterfaces.ProfileAttributeBase<any>[]>} attributesCollection\r\n    * @param {string} id\r\n    */\r\n    setProfileAttributes(attributesCollection, id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    id: id\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.2\", \"Profile\", \"1392b6ac-d511-492e-af5b-2263e5545a5d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, attributesCollection, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * @param {string} id\r\n    * @param {string} size\r\n    * @param {string} format\r\n    */\r\n    getAvatar(id, size, format) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    size: size,\r\n                    format: format,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"Profile\", \"67436615-b382-462a-b659-5367a492fb3c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ProfileInterfaces.TypeInfo.Avatar, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * @param {any} container\r\n    * @param {string} id\r\n    * @param {string} size\r\n    * @param {string} format\r\n    * @param {string} displayName\r\n    */\r\n    getAvatarPreview(container, id, size, format, displayName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    size: size,\r\n                    format: format,\r\n                    displayName: displayName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"Profile\", \"67436615-b382-462a-b659-5367a492fb3c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, container, options);\r\n                    let ret = this.formatResponse(res.result, ProfileInterfaces.TypeInfo.Avatar, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * @param {string} id\r\n    */\r\n    resetAvatar(id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    id: id\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"Profile\", \"67436615-b382-462a-b659-5367a492fb3c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * @param {any} container\r\n    * @param {string} id\r\n    */\r\n    setAvatar(container, id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    id: id\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"Profile\", \"67436615-b382-462a-b659-5367a492fb3c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, container, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * Lookup up country/region based on provided IPv4, null if using the remote IPv4 address.\r\n    *\r\n    * @param {string} ipaddress - IPv4 address to be used for reverse lookup, null if using RemoteIPAddress in request context\r\n    */\r\n    getGeoRegion(ipaddress) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    ipaddress: ipaddress,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"Profile\", \"3bcda9c0-3078-48a5-a1e0-83bd05931ad0\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * Create profile\r\n    *\r\n    * @param {ProfileInterfaces.CreateProfileContext} createProfileContext - Context for profile creation\r\n    * @param {boolean} autoCreate - Create profile automatically\r\n    */\r\n    createProfile(createProfileContext, autoCreate) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    autoCreate: autoCreate,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.3\", \"Profile\", \"f83735dc-483f-4238-a291-d45f6080a9af\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, createProfileContext, options);\r\n                    let ret = this.formatResponse(res.result, ProfileInterfaces.TypeInfo.Profile, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * @param {string} id\r\n    * @param {boolean} details\r\n    * @param {boolean} withAttributes\r\n    * @param {string} partition\r\n    * @param {string} coreAttributes\r\n    * @param {boolean} forceRefresh\r\n    */\r\n    getProfile(id, details, withAttributes, partition, coreAttributes, forceRefresh) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    details: details,\r\n                    withAttributes: withAttributes,\r\n                    partition: partition,\r\n                    coreAttributes: coreAttributes,\r\n                    forceRefresh: forceRefresh,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.3\", \"Profile\", \"f83735dc-483f-4238-a291-d45f6080a9af\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ProfileInterfaces.TypeInfo.Profile, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * Update profile\r\n    *\r\n    * @param {ProfileInterfaces.Profile} profile - Update profile\r\n    * @param {string} id - Profile ID\r\n    */\r\n    updateProfile(profile, id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    id: id\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.3\", \"Profile\", \"f83735dc-483f-4238-a291-d45f6080a9af\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, profile, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    */\r\n    getRegions() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"Profile\", \"92d8d1c9-26b8-4774-a929-d640a73da524\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    */\r\n    getSupportedLcids() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"Profile\", \"d5bd1aa6-c269-4bcd-ad32-75fa17475584\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * @param {boolean} includeAvatar\r\n    */\r\n    getUserDefaults(includeAvatar) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    includeAvatar: includeAvatar,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"Profile\", \"b583a356-1da7-4237-9f4c-1deb2edbc7e8\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ProfileInterfaces.TypeInfo.Profile, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n    * @param {string} id\r\n    */\r\n    refreshUserDefaults(id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    id: id\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"Profile\", \"b583a356-1da7-4237-9f4c-1deb2edbc7e8\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, options);\r\n                    let ret = this.formatResponse(res.result, ProfileInterfaces.TypeInfo.Profile, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nexports.ProfileApi = ProfileApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst ProjectAnalysisInterfaces = require(\"./interfaces/ProjectAnalysisInterfaces\");\r\nclass ProjectAnalysisApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-ProjectAnalysis-api', options);\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getProjectLanguageAnalytics(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"projectanalysis\", \"5b02a779-1867-433f-90b7-d23ed5e33e57\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ProjectAnalysisInterfaces.TypeInfo.ProjectLanguageAnalytics, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {Date} fromDate\r\n     * @param {ProjectAnalysisInterfaces.AggregationType} aggregationType\r\n     */\r\n    getProjectActivityMetrics(project, fromDate, aggregationType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (fromDate == null) {\r\n                throw new TypeError('fromDate can not be null or undefined');\r\n            }\r\n            if (aggregationType == null) {\r\n                throw new TypeError('aggregationType can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    fromDate: fromDate,\r\n                    aggregationType: aggregationType,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"projectanalysis\", \"e40ae584-9ea6-4f06-a7c7-6284651b466b\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ProjectAnalysisInterfaces.TypeInfo.ProjectActivityMetrics, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieves git activity metrics for repositories matching a specified criteria.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {Date} fromDate - Date from which, the trends are to be fetched.\r\n     * @param {ProjectAnalysisInterfaces.AggregationType} aggregationType - Bucket size on which, trends are to be aggregated.\r\n     * @param {number} skip - The number of repositories to ignore.\r\n     * @param {number} top - The number of repositories for which activity metrics are to be retrieved.\r\n     */\r\n    getGitRepositoriesActivityMetrics(project, fromDate, aggregationType, skip, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (fromDate == null) {\r\n                throw new TypeError('fromDate can not be null or undefined');\r\n            }\r\n            if (aggregationType == null) {\r\n                throw new TypeError('aggregationType can not be null or undefined');\r\n            }\r\n            if (skip == null) {\r\n                throw new TypeError('skip can not be null or undefined');\r\n            }\r\n            if (top == null) {\r\n                throw new TypeError('top can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    fromDate: fromDate,\r\n                    aggregationType: aggregationType,\r\n                    '$skip': skip,\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"projectanalysis\", \"df7fbbca-630a-40e3-8aa3-7a3faf66947e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ProjectAnalysisInterfaces.TypeInfo.RepositoryActivityMetrics, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} repositoryId\r\n     * @param {Date} fromDate\r\n     * @param {ProjectAnalysisInterfaces.AggregationType} aggregationType\r\n     */\r\n    getRepositoryActivityMetrics(project, repositoryId, fromDate, aggregationType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (fromDate == null) {\r\n                throw new TypeError('fromDate can not be null or undefined');\r\n            }\r\n            if (aggregationType == null) {\r\n                throw new TypeError('aggregationType can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    repositoryId: repositoryId\r\n                };\r\n                let queryValues = {\r\n                    fromDate: fromDate,\r\n                    aggregationType: aggregationType,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"projectanalysis\", \"df7fbbca-630a-40e3-8aa3-7a3faf66947e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ProjectAnalysisInterfaces.TypeInfo.RepositoryActivityMetrics, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nProjectAnalysisApi.RESOURCE_AREA_ID = \"7658fa33-b1bf-4580-990f-fac5896773d3\";\r\nexports.ProjectAnalysisApi = ProjectAnalysisApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst ReleaseInterfaces = require(\"./interfaces/ReleaseInterfaces\");\r\nclass ReleaseApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-Release-api', options);\r\n    }\r\n    /**\r\n     * Returns the artifact details that automation agent requires\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     */\r\n    getAgentArtifactDefinitions(project, releaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"f2571c27-bf50-4938-b396-32d109ddef26\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.AgentArtifactDefinition, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of approvals\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} assignedToFilter - Approvals assigned to this user.\r\n     * @param {ReleaseInterfaces.ApprovalStatus} statusFilter - Approvals with this status. Default is 'pending'.\r\n     * @param {number[]} releaseIdsFilter - Approvals for release id(s) mentioned in the filter. Multiple releases can be mentioned by separating them with ',' e.g. releaseIdsFilter=1,2,3,4.\r\n     * @param {ReleaseInterfaces.ApprovalType} typeFilter - Approval with this type.\r\n     * @param {number} top - Number of approvals to get. Default is 50.\r\n     * @param {number} continuationToken - Gets the approvals after the continuation token provided.\r\n     * @param {ReleaseInterfaces.ReleaseQueryOrder} queryOrder - Gets the results in the defined order of created approvals. Default is 'descending'.\r\n     * @param {boolean} includeMyGroupApprovals - 'true' to include my group approvals. Default is 'false'.\r\n     */\r\n    getApprovals(project, assignedToFilter, statusFilter, releaseIdsFilter, typeFilter, top, continuationToken, queryOrder, includeMyGroupApprovals) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    assignedToFilter: assignedToFilter,\r\n                    statusFilter: statusFilter,\r\n                    releaseIdsFilter: releaseIdsFilter && releaseIdsFilter.join(\",\"),\r\n                    typeFilter: typeFilter,\r\n                    top: top,\r\n                    continuationToken: continuationToken,\r\n                    queryOrder: queryOrder,\r\n                    includeMyGroupApprovals: includeMyGroupApprovals,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Release\", \"b47c6458-e73b-47cb-a770-4df1e8813a91\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseApproval, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get approval history.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} approvalStepId - Id of the approval.\r\n     */\r\n    getApprovalHistory(project, approvalStepId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    approvalStepId: approvalStepId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Release\", \"250c7158-852e-4130-a00f-a0cce9b72d05\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseApproval, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get an approval.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} approvalId - Id of the approval.\r\n     * @param {boolean} includeHistory - 'true' to include history of the approval. Default is 'false'.\r\n     */\r\n    getApproval(project, approvalId, includeHistory) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    approvalId: approvalId\r\n                };\r\n                let queryValues = {\r\n                    includeHistory: includeHistory,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Release\", \"9328e074-59fb-465a-89d9-b09c82ee5109\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseApproval, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update status of an approval\r\n     *\r\n     * @param {ReleaseInterfaces.ReleaseApproval} approval - ReleaseApproval object having status, approver and comments.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} approvalId - Id of the approval.\r\n     */\r\n    updateReleaseApproval(approval, project, approvalId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    approvalId: approvalId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Release\", \"9328e074-59fb-465a-89d9-b09c82ee5109\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, approval, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseApproval, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {ReleaseInterfaces.ReleaseApproval[]} approvals\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateReleaseApprovals(approvals, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Release\", \"c957584a-82aa-4131-8222-6d47f78bfa7a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, approvals, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseApproval, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a task attachment.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {number} environmentId - Id of the release environment.\r\n     * @param {number} attemptId - Attempt number of deployment.\r\n     * @param {string} timelineId - Timeline Id of the task.\r\n     * @param {string} recordId - Record Id of attachment.\r\n     * @param {string} type - Type of the attachment.\r\n     * @param {string} name - Name of the attachment.\r\n     */\r\n    getTaskAttachmentContent(project, releaseId, environmentId, attemptId, timelineId, recordId, type, name) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    environmentId: environmentId,\r\n                    attemptId: attemptId,\r\n                    timelineId: timelineId,\r\n                    recordId: recordId,\r\n                    type: type,\r\n                    name: name\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"c4071f6d-3697-46ca-858e-8b10ff09e52f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a release task attachment.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {number} environmentId - Id of the release environment.\r\n     * @param {number} attemptId - Attempt number of deployment.\r\n     * @param {string} planId - Plan Id of the deploy phase.\r\n     * @param {string} timelineId - Timeline Id of the task.\r\n     * @param {string} recordId - Record Id of attachment.\r\n     * @param {string} type - Type of the attachment.\r\n     * @param {string} name - Name of the attachment.\r\n     */\r\n    getReleaseTaskAttachmentContent(project, releaseId, environmentId, attemptId, planId, timelineId, recordId, type, name) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    environmentId: environmentId,\r\n                    attemptId: attemptId,\r\n                    planId: planId,\r\n                    timelineId: timelineId,\r\n                    recordId: recordId,\r\n                    type: type,\r\n                    name: name\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"60b86efb-7b8c-4853-8f9f-aa142b77b479\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the task attachments.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {number} environmentId - Id of the release environment.\r\n     * @param {number} attemptId - Attempt number of deployment.\r\n     * @param {string} timelineId - Timeline Id of the task.\r\n     * @param {string} type - Type of the attachment.\r\n     */\r\n    getTaskAttachments(project, releaseId, environmentId, attemptId, timelineId, type) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    environmentId: environmentId,\r\n                    attemptId: attemptId,\r\n                    timelineId: timelineId,\r\n                    type: type\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"214111ee-2415-4df2-8ed2-74417f7d61f9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseTaskAttachment, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the release task attachments.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {number} environmentId - Id of the release environment.\r\n     * @param {number} attemptId - Attempt number of deployment.\r\n     * @param {string} planId - Plan Id of the deploy phase.\r\n     * @param {string} type - Type of the attachment.\r\n     */\r\n    getReleaseTaskAttachments(project, releaseId, environmentId, attemptId, planId, type) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    environmentId: environmentId,\r\n                    attemptId: attemptId,\r\n                    planId: planId,\r\n                    type: type\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"a4d06688-0dfa-4895-82a5-f43ec9452306\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseTaskAttachment, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} artifactType\r\n     * @param {string} sourceId\r\n     * @param {string} artifactVersionId\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getAutoTriggerIssues(artifactType, sourceId, artifactVersionId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (artifactType == null) {\r\n                throw new TypeError('artifactType can not be null or undefined');\r\n            }\r\n            if (sourceId == null) {\r\n                throw new TypeError('sourceId can not be null or undefined');\r\n            }\r\n            if (artifactVersionId == null) {\r\n                throw new TypeError('artifactVersionId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    artifactType: artifactType,\r\n                    sourceId: sourceId,\r\n                    artifactVersionId: artifactVersionId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"c1a68497-69da-40fb-9423-cab19cfeeca9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.AutoTriggerIssue, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a badge that indicates the status of the most recent deployment for an environment.\r\n     *\r\n     * @param {string} projectId - The ID of the Project.\r\n     * @param {number} releaseDefinitionId - The ID of the Release Definition.\r\n     * @param {number} environmentId - The ID of the Environment.\r\n     * @param {string} branchName - The name of the branch.\r\n     */\r\n    getDeploymentBadge(projectId, releaseDefinitionId, environmentId, branchName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    projectId: projectId,\r\n                    releaseDefinitionId: releaseDefinitionId,\r\n                    environmentId: environmentId,\r\n                    branchName: branchName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"1a60a35d-b8c9-45fb-bf67-da0829711147\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     * @param {number} baseReleaseId\r\n     * @param {number} top\r\n     * @param {string} artifactAlias\r\n     */\r\n    getReleaseChanges(project, releaseId, baseReleaseId, top, artifactAlias) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                let queryValues = {\r\n                    baseReleaseId: baseReleaseId,\r\n                    '$top': top,\r\n                    artifactAlias: artifactAlias,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"8dcf9fe9-ca37-4113-8ee1-37928e98407c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Change, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} taskGroupId\r\n     * @param {string[]} propertyFilters\r\n     */\r\n    getDefinitionEnvironments(project, taskGroupId, propertyFilters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    taskGroupId: taskGroupId,\r\n                    propertyFilters: propertyFilters && propertyFilters.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"12b5d21a-f54c-430e-a8c1-7515d196890e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a release definition\r\n     *\r\n     * @param {ReleaseInterfaces.ReleaseDefinition} releaseDefinition - release definition object to create.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createReleaseDefinition(releaseDefinition, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.4\", \"Release\", \"d8f96f24-8ea7-4cb6-baab-2df8fc515665\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, releaseDefinition, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinition, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a release definition.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - Id of the release definition.\r\n     * @param {string} comment - Comment for deleting a release definition.\r\n     * @param {boolean} forceDelete - 'true' to automatically cancel any in-progress release deployments and proceed with release definition deletion . Default is 'false'.\r\n     */\r\n    deleteReleaseDefinition(project, definitionId, comment, forceDelete) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                let queryValues = {\r\n                    comment: comment,\r\n                    forceDelete: forceDelete,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.4\", \"Release\", \"d8f96f24-8ea7-4cb6-baab-2df8fc515665\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a release definition.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - Id of the release definition.\r\n     * @param {string[]} propertyFilters - A comma-delimited list of extended properties to be retrieved. If set, the returned Release Definition will contain values for the specified property Ids (if they exist). If not set, properties will not be included.\r\n     */\r\n    getReleaseDefinition(project, definitionId, propertyFilters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                let queryValues = {\r\n                    propertyFilters: propertyFilters && propertyFilters.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.4\", \"Release\", \"d8f96f24-8ea7-4cb6-baab-2df8fc515665\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinition, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get release definition of a given revision.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - Id of the release definition.\r\n     * @param {number} revision - Revision number of the release definition.\r\n     */\r\n    getReleaseDefinitionRevision(project, definitionId, revision) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (revision == null) {\r\n                throw new TypeError('revision can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                let queryValues = {\r\n                    revision: revision,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.4\", \"Release\", \"d8f96f24-8ea7-4cb6-baab-2df8fc515665\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/plain\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of release definitions.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} searchText - Get release definitions with names containing searchText.\r\n     * @param {ReleaseInterfaces.ReleaseDefinitionExpands} expand - The properties that should be expanded in the list of Release definitions.\r\n     * @param {string} artifactType - Release definitions with given artifactType will be returned. Values can be Build, Jenkins, GitHub, Nuget, Team Build (external), ExternalTFSBuild, Git, TFVC, ExternalTfsXamlBuild.\r\n     * @param {string} artifactSourceId - Release definitions with given artifactSourceId will be returned. e.g. For build it would be {projectGuid}:{BuildDefinitionId}, for Jenkins it would be {JenkinsConnectionId}:{JenkinsDefinitionId}, for TfsOnPrem it would be {TfsOnPremConnectionId}:{ProjectName}:{TfsOnPremDefinitionId}. For third-party artifacts e.g. TeamCity, BitBucket you may refer 'uniqueSourceIdentifier' inside vss-extension.json at https://github.com/Microsoft/vsts-rm-extensions/blob/master/Extensions.\r\n     * @param {number} top - Number of release definitions to get.\r\n     * @param {string} continuationToken - Gets the release definitions after the continuation token provided.\r\n     * @param {ReleaseInterfaces.ReleaseDefinitionQueryOrder} queryOrder - Gets the results in the defined order. Default is 'IdAscending'.\r\n     * @param {string} path - Gets the release definitions under the specified path.\r\n     * @param {boolean} isExactNameMatch - 'true'to gets the release definitions with exact match as specified in searchText. Default is 'false'.\r\n     * @param {string[]} tagFilter - A comma-delimited list of tags. Only release definitions with these tags will be returned.\r\n     * @param {string[]} propertyFilters - A comma-delimited list of extended properties to be retrieved. If set, the returned Release Definitions will contain values for the specified property Ids (if they exist). If not set, properties will not be included. Note that this will not filter out any Release Definition from results irrespective of whether it has property set or not.\r\n     * @param {string[]} definitionIdFilter - A comma-delimited list of release definitions to retrieve.\r\n     * @param {boolean} isDeleted - 'true' to get release definitions that has been deleted. Default is 'false'\r\n     * @param {boolean} searchTextContainsFolderName - 'true' to get the release definitions under the folder with name as specified in searchText. Default is 'false'.\r\n     */\r\n    getReleaseDefinitions(project, searchText, expand, artifactType, artifactSourceId, top, continuationToken, queryOrder, path, isExactNameMatch, tagFilter, propertyFilters, definitionIdFilter, isDeleted, searchTextContainsFolderName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    searchText: searchText,\r\n                    '$expand': expand,\r\n                    artifactType: artifactType,\r\n                    artifactSourceId: artifactSourceId,\r\n                    '$top': top,\r\n                    continuationToken: continuationToken,\r\n                    queryOrder: queryOrder,\r\n                    path: path,\r\n                    isExactNameMatch: isExactNameMatch,\r\n                    tagFilter: tagFilter && tagFilter.join(\",\"),\r\n                    propertyFilters: propertyFilters && propertyFilters.join(\",\"),\r\n                    definitionIdFilter: definitionIdFilter && definitionIdFilter.join(\",\"),\r\n                    isDeleted: isDeleted,\r\n                    searchTextContainsFolderName: searchTextContainsFolderName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.4\", \"Release\", \"d8f96f24-8ea7-4cb6-baab-2df8fc515665\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinition, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Undelete a release definition.\r\n     *\r\n     * @param {ReleaseInterfaces.ReleaseDefinitionUndeleteParameter} releaseDefinitionUndeleteParameter - Object for undelete release definition.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - Id of the release definition to be undeleted\r\n     */\r\n    undeleteReleaseDefinition(releaseDefinitionUndeleteParameter, project, definitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.4\", \"Release\", \"d8f96f24-8ea7-4cb6-baab-2df8fc515665\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, releaseDefinitionUndeleteParameter, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinition, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a release definition.\r\n     *\r\n     * @param {ReleaseInterfaces.ReleaseDefinition} releaseDefinition - Release definition object to update.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateReleaseDefinition(releaseDefinition, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.4\", \"Release\", \"d8f96f24-8ea7-4cb6-baab-2df8fc515665\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, releaseDefinition, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinition, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of deployments\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - List the deployments for a given definition id.\r\n     * @param {number} definitionEnvironmentId - List the deployments for a given definition environment id.\r\n     * @param {string} createdBy - List the deployments for which deployments are created as identity specified.\r\n     * @param {Date} minModifiedTime - List the deployments with LastModified time >= minModifiedTime.\r\n     * @param {Date} maxModifiedTime - List the deployments with LastModified time <= maxModifiedTime.\r\n     * @param {ReleaseInterfaces.DeploymentStatus} deploymentStatus - List the deployments with given deployment status. Defult is 'All'.\r\n     * @param {ReleaseInterfaces.DeploymentOperationStatus} operationStatus - List the deployments with given operation status. Default is 'All'.\r\n     * @param {boolean} latestAttemptsOnly - 'true' to include deployments with latest attempt only. Default is 'false'.\r\n     * @param {ReleaseInterfaces.ReleaseQueryOrder} queryOrder - List the deployments with given query order. Default is 'Descending'.\r\n     * @param {number} top - List the deployments with given top. Default top is '50' and Max top is '100'.\r\n     * @param {number} continuationToken - List the deployments with deployment id >= continuationToken.\r\n     * @param {string} createdFor - List the deployments for which deployments are requested as identity specified.\r\n     * @param {Date} minStartedTime - List the deployments with StartedOn time >= minStartedTime.\r\n     * @param {Date} maxStartedTime - List the deployments with StartedOn time <= maxStartedTime.\r\n     * @param {string} sourceBranch - List the deployments that are deployed from given branch name.\r\n     */\r\n    getDeployments(project, definitionId, definitionEnvironmentId, createdBy, minModifiedTime, maxModifiedTime, deploymentStatus, operationStatus, latestAttemptsOnly, queryOrder, top, continuationToken, createdFor, minStartedTime, maxStartedTime, sourceBranch) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    definitionId: definitionId,\r\n                    definitionEnvironmentId: definitionEnvironmentId,\r\n                    createdBy: createdBy,\r\n                    minModifiedTime: minModifiedTime,\r\n                    maxModifiedTime: maxModifiedTime,\r\n                    deploymentStatus: deploymentStatus,\r\n                    operationStatus: operationStatus,\r\n                    latestAttemptsOnly: latestAttemptsOnly,\r\n                    queryOrder: queryOrder,\r\n                    '$top': top,\r\n                    continuationToken: continuationToken,\r\n                    createdFor: createdFor,\r\n                    minStartedTime: minStartedTime,\r\n                    maxStartedTime: maxStartedTime,\r\n                    sourceBranch: sourceBranch,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Release\", \"b005ef73-cddc-448e-9ba2-5193bf36b19f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Deployment, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {ReleaseInterfaces.DeploymentQueryParameters} queryParameters\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getDeploymentsForMultipleEnvironments(queryParameters, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Release\", \"b005ef73-cddc-448e-9ba2-5193bf36b19f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, queryParameters, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Deployment, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a release environment.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {number} environmentId - Id of the release environment.\r\n     * @param {ReleaseInterfaces.ReleaseEnvironmentExpands} expand - A property that should be expanded in the environment.\r\n     */\r\n    getReleaseEnvironment(project, releaseId, environmentId, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    environmentId: environmentId\r\n                };\r\n                let queryValues = {\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.7\", \"Release\", \"a7e426b1-03dc-48af-9dfe-c98bac612dcb\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseEnvironment, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update the status of a release environment\r\n     *\r\n     * @param {ReleaseInterfaces.ReleaseEnvironmentUpdateMetadata} environmentUpdateData - Environment update meta data.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {number} environmentId - Id of release environment.\r\n     */\r\n    updateReleaseEnvironment(environmentUpdateData, project, releaseId, environmentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    environmentId: environmentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.7\", \"Release\", \"a7e426b1-03dc-48af-9dfe-c98bac612dcb\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, environmentUpdateData, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseEnvironment, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a definition environment template\r\n     *\r\n     * @param {ReleaseInterfaces.ReleaseDefinitionEnvironmentTemplate} template - Definition environment template to create\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createDefinitionEnvironmentTemplate(template, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.4\", \"Release\", \"6b03b696-824e-4479-8eb2-6644a51aba89\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, template, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinitionEnvironmentTemplate, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a definition environment template\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} templateId - Id of the definition environment template\r\n     */\r\n    deleteDefinitionEnvironmentTemplate(project, templateId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (templateId == null) {\r\n                throw new TypeError('templateId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    templateId: templateId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.4\", \"Release\", \"6b03b696-824e-4479-8eb2-6644a51aba89\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a definition environment template\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} templateId - Id of the definition environment template\r\n     */\r\n    getDefinitionEnvironmentTemplate(project, templateId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (templateId == null) {\r\n                throw new TypeError('templateId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    templateId: templateId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.4\", \"Release\", \"6b03b696-824e-4479-8eb2-6644a51aba89\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinitionEnvironmentTemplate, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a list of definition environment templates\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} isDeleted - 'true' to get definition environment templates that have been deleted. Default is 'false'\r\n     */\r\n    listDefinitionEnvironmentTemplates(project, isDeleted) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    isDeleted: isDeleted,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.4\", \"Release\", \"6b03b696-824e-4479-8eb2-6644a51aba89\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinitionEnvironmentTemplate, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Undelete a release definition environment template.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} templateId - Id of the definition environment template to be undeleted\r\n     */\r\n    undeleteReleaseDefinitionEnvironmentTemplate(project, templateId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (templateId == null) {\r\n                throw new TypeError('templateId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    templateId: templateId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.4\", \"Release\", \"6b03b696-824e-4479-8eb2-6644a51aba89\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, null, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinitionEnvironmentTemplate, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {ReleaseInterfaces.FavoriteItem[]} favoriteItems\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} scope\r\n     * @param {string} identityId\r\n     */\r\n    createFavorites(favoriteItems, project, scope, identityId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    scope: scope\r\n                };\r\n                let queryValues = {\r\n                    identityId: identityId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"938f7222-9acb-48fe-b8a3-4eda04597171\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, favoriteItems, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} scope\r\n     * @param {string} identityId\r\n     * @param {string} favoriteItemIds\r\n     */\r\n    deleteFavorites(project, scope, identityId, favoriteItemIds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    scope: scope\r\n                };\r\n                let queryValues = {\r\n                    identityId: identityId,\r\n                    favoriteItemIds: favoriteItemIds,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"938f7222-9acb-48fe-b8a3-4eda04597171\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} scope\r\n     * @param {string} identityId\r\n     */\r\n    getFavorites(project, scope, identityId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    scope: scope\r\n                };\r\n                let queryValues = {\r\n                    identityId: identityId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"938f7222-9acb-48fe-b8a3-4eda04597171\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} flightName\r\n     */\r\n    getFlightAssignments(flightName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    flightName: flightName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"409d301f-3046-46f3-beb9-4357fbce0a8c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a new folder.\r\n     *\r\n     * @param {ReleaseInterfaces.Folder} folder - folder.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} path - Path of the folder.\r\n     */\r\n    createFolder(folder, project, path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    path: path\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Release\", \"f7ddf76d-ce0c-4d68-94ff-becaec5d9dea\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, folder, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Folder, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes a definition folder for given folder name and path and all it's existing definitions.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} path - Path of the folder to delete.\r\n     */\r\n    deleteFolder(project, path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    path: path\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Release\", \"f7ddf76d-ce0c-4d68-94ff-becaec5d9dea\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets folders.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} path - Path of the folder.\r\n     * @param {ReleaseInterfaces.FolderPathQueryOrder} queryOrder - Gets the results in the defined order. Default is 'None'.\r\n     */\r\n    getFolders(project, path, queryOrder) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    path: path\r\n                };\r\n                let queryValues = {\r\n                    queryOrder: queryOrder,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Release\", \"f7ddf76d-ce0c-4d68-94ff-becaec5d9dea\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Folder, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates an existing folder at given existing path.\r\n     *\r\n     * @param {ReleaseInterfaces.Folder} folder - folder.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} path - Path of the folder to update.\r\n     */\r\n    updateFolder(folder, project, path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    path: path\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Release\", \"f7ddf76d-ce0c-4d68-94ff-becaec5d9dea\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, folder, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Folder, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates the gate for a deployment.\r\n     *\r\n     * @param {ReleaseInterfaces.GateUpdateMetadata} gateUpdateMetadata - Metadata to patch the Release Gates.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} gateStepId - Gate step Id.\r\n     */\r\n    updateGates(gateUpdateMetadata, project, gateStepId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    gateStepId: gateStepId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"2666a539-2001-4f80-bcc7-0379956749d4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, gateUpdateMetadata, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseGates, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     */\r\n    getReleaseHistory(project, releaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"23f461c8-629a-4144-a076-3054fa5f268a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseRevision, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {FormInputInterfaces.InputValuesQuery} query\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getInputValues(query, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"71dd499b-317d-45ea-9134-140ea1932b5e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, query, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId\r\n     * @param {string} sourceId\r\n     */\r\n    getIssues(project, buildId, sourceId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                let queryValues = {\r\n                    sourceId: sourceId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"cd42261a-f5c6-41c8-9259-f078989b9f25\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.AutoTriggerIssue, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets gate logs\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {number} environmentId - Id of release environment.\r\n     * @param {number} gateId - Id of the gate.\r\n     * @param {number} taskId - ReleaseTask Id for the log.\r\n     */\r\n    getGateLog(project, releaseId, environmentId, gateId, taskId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    environmentId: environmentId,\r\n                    gateId: gateId,\r\n                    taskId: taskId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Release\", \"dec7ca5a-7f7f-4797-8bf1-8efc0dc93b28\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/plain\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get logs for a release Id.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     */\r\n    getLogs(project, releaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Release\", \"c37fbab5-214b-48e4-a55b-cb6b4f6e4038\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets logs\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {number} environmentId - Id of release environment.\r\n     * @param {number} taskId - ReleaseTask Id for the log.\r\n     * @param {number} attemptId - Id of the attempt.\r\n     */\r\n    getLog(project, releaseId, environmentId, taskId, attemptId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    environmentId: environmentId,\r\n                    taskId: taskId\r\n                };\r\n                let queryValues = {\r\n                    attemptId: attemptId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Release\", \"e71ba1ed-c0a4-4a28-a61f-2dd5f68cf3fd\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/plain\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the task log of a release as a plain text file.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {number} environmentId - Id of release environment.\r\n     * @param {number} attemptId\r\n     * @param {string} timelineId\r\n     * @param {number} taskId - ReleaseTask Id for the log.\r\n     * @param {number} startLine - Starting line number for logs\r\n     * @param {number} endLine - Ending line number for logs\r\n     */\r\n    getTaskLog2(project, releaseId, environmentId, attemptId, timelineId, taskId, startLine, endLine) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    environmentId: environmentId,\r\n                    attemptId: attemptId,\r\n                    timelineId: timelineId,\r\n                    taskId: taskId\r\n                };\r\n                let queryValues = {\r\n                    startLine: startLine,\r\n                    endLine: endLine,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Release\", \"2577e6c3-6999-4400-bc69-fe1d837755fe\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/plain\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the task log of a release as a plain text file.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {number} environmentId - Id of release environment.\r\n     * @param {number} releaseDeployPhaseId - Release deploy phase Id.\r\n     * @param {number} taskId - ReleaseTask Id for the log.\r\n     * @param {number} startLine - Starting line number for logs\r\n     * @param {number} endLine - Ending line number for logs\r\n     */\r\n    getTaskLog(project, releaseId, environmentId, releaseDeployPhaseId, taskId, startLine, endLine) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    environmentId: environmentId,\r\n                    releaseDeployPhaseId: releaseDeployPhaseId,\r\n                    taskId: taskId\r\n                };\r\n                let queryValues = {\r\n                    startLine: startLine,\r\n                    endLine: endLine,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Release\", \"17c91af7-09fd-4256-bff1-c24ee4f73bc0\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/plain\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get manual intervention for a given release and manual intervention id.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {number} manualInterventionId - Id of the manual intervention.\r\n     */\r\n    getManualIntervention(project, releaseId, manualInterventionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    manualInterventionId: manualInterventionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"616c46e4-f370-4456-adaa-fbaf79c7b79e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ManualIntervention, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * List all manual interventions for a given release.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     */\r\n    getManualInterventions(project, releaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"616c46e4-f370-4456-adaa-fbaf79c7b79e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ManualIntervention, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update manual intervention.\r\n     *\r\n     * @param {ReleaseInterfaces.ManualInterventionUpdateMetadata} manualInterventionUpdateMetadata - Meta data to update manual intervention.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {number} manualInterventionId - Id of the manual intervention.\r\n     */\r\n    updateManualIntervention(manualInterventionUpdateMetadata, project, releaseId, manualInterventionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    manualInterventionId: manualInterventionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"616c46e4-f370-4456-adaa-fbaf79c7b79e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, manualInterventionUpdateMetadata, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ManualIntervention, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {Date} minMetricsTime\r\n     */\r\n    getMetrics(project, minMetricsTime) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    minMetricsTime: minMetricsTime,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"cd1502bb-3c73-4e11-80a6-d11308dceae5\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets Org pipeline release settings\r\n     *\r\n     */\r\n    getOrgPipelineReleaseSettings() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"d156c759-ca4e-492b-90d4-db03971796ea\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates Org pipeline release settings\r\n     *\r\n     * @param {ReleaseInterfaces.OrgPipelineReleaseSettingsUpdateParameters} newSettings\r\n     */\r\n    updateOrgPipelineReleaseSettings(newSettings) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"d156c759-ca4e-492b-90d4-db03971796ea\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, newSettings, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets pipeline release settings\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPipelineReleaseSettings(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"e816b9f4-f9fe-46ba-bdcc-a9af6abf3144\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates pipeline release settings\r\n     *\r\n     * @param {ReleaseInterfaces.ProjectPipelineReleaseSettingsUpdateParameters} newSettings\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updatePipelineReleaseSettings(newSettings, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"e816b9f4-f9fe-46ba-bdcc-a9af6abf3144\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, newSettings, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} artifactType\r\n     * @param {string} artifactSourceId\r\n     */\r\n    getReleaseProjects(artifactType, artifactSourceId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (artifactType == null) {\r\n                throw new TypeError('artifactType can not be null or undefined');\r\n            }\r\n            if (artifactSourceId == null) {\r\n                throw new TypeError('artifactSourceId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    artifactType: artifactType,\r\n                    artifactSourceId: artifactSourceId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"917ace4a-79d1-45a7-987c-7be4db4268fa\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of releases\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - Releases from this release definition Id.\r\n     * @param {number} definitionEnvironmentId\r\n     * @param {string} searchText - Releases with names containing searchText.\r\n     * @param {string} createdBy - Releases created by this user.\r\n     * @param {ReleaseInterfaces.ReleaseStatus} statusFilter - Releases that have this status.\r\n     * @param {number} environmentStatusFilter\r\n     * @param {Date} minCreatedTime - Releases that were created after this time.\r\n     * @param {Date} maxCreatedTime - Releases that were created before this time.\r\n     * @param {ReleaseInterfaces.ReleaseQueryOrder} queryOrder - Gets the results in the defined order of created date for releases. Default is descending.\r\n     * @param {number} top - Number of releases to get. Default is 50.\r\n     * @param {number} continuationToken - Gets the releases after the continuation token provided.\r\n     * @param {ReleaseInterfaces.ReleaseExpands} expand - The property that should be expanded in the list of releases.\r\n     * @param {string} artifactTypeId - Releases with given artifactTypeId will be returned. Values can be Build, Jenkins, GitHub, Nuget, Team Build (external), ExternalTFSBuild, Git, TFVC, ExternalTfsXamlBuild.\r\n     * @param {string} sourceId - Unique identifier of the artifact used. e.g. For build it would be {projectGuid}:{BuildDefinitionId}, for Jenkins it would be {JenkinsConnectionId}:{JenkinsDefinitionId}, for TfsOnPrem it would be {TfsOnPremConnectionId}:{ProjectName}:{TfsOnPremDefinitionId}. For third-party artifacts e.g. TeamCity, BitBucket you may refer 'uniqueSourceIdentifier' inside vss-extension.json https://github.com/Microsoft/vsts-rm-extensions/blob/master/Extensions.\r\n     * @param {string} artifactVersionId - Releases with given artifactVersionId will be returned. E.g. in case of Build artifactType, it is buildId.\r\n     * @param {string} sourceBranchFilter - Releases with given sourceBranchFilter will be returned.\r\n     * @param {boolean} isDeleted - Gets the soft deleted releases, if true.\r\n     * @param {string[]} tagFilter - A comma-delimited list of tags. Only releases with these tags will be returned.\r\n     * @param {string[]} propertyFilters - A comma-delimited list of extended properties to be retrieved. If set, the returned Releases will contain values for the specified property Ids (if they exist). If not set, properties will not be included. Note that this will not filter out any Release from results irrespective of whether it has property set or not.\r\n     * @param {number[]} releaseIdFilter - A comma-delimited list of releases Ids. Only releases with these Ids will be returned.\r\n     * @param {string} path - Releases under this folder path will be returned\r\n     */\r\n    getReleases(project, definitionId, definitionEnvironmentId, searchText, createdBy, statusFilter, environmentStatusFilter, minCreatedTime, maxCreatedTime, queryOrder, top, continuationToken, expand, artifactTypeId, sourceId, artifactVersionId, sourceBranchFilter, isDeleted, tagFilter, propertyFilters, releaseIdFilter, path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    definitionId: definitionId,\r\n                    definitionEnvironmentId: definitionEnvironmentId,\r\n                    searchText: searchText,\r\n                    createdBy: createdBy,\r\n                    statusFilter: statusFilter,\r\n                    environmentStatusFilter: environmentStatusFilter,\r\n                    minCreatedTime: minCreatedTime,\r\n                    maxCreatedTime: maxCreatedTime,\r\n                    queryOrder: queryOrder,\r\n                    '$top': top,\r\n                    continuationToken: continuationToken,\r\n                    '$expand': expand,\r\n                    artifactTypeId: artifactTypeId,\r\n                    sourceId: sourceId,\r\n                    artifactVersionId: artifactVersionId,\r\n                    sourceBranchFilter: sourceBranchFilter,\r\n                    isDeleted: isDeleted,\r\n                    tagFilter: tagFilter && tagFilter.join(\",\"),\r\n                    propertyFilters: propertyFilters && propertyFilters.join(\",\"),\r\n                    releaseIdFilter: releaseIdFilter && releaseIdFilter.join(\",\"),\r\n                    path: path,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.8\", \"Release\", \"a166fde7-27ad-408e-ba75-703c2cc9d500\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Release, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a release.\r\n     *\r\n     * @param {ReleaseInterfaces.ReleaseStartMetadata} releaseStartMetadata - Metadata to create a release.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createRelease(releaseStartMetadata, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.8\", \"Release\", \"a166fde7-27ad-408e-ba75-703c2cc9d500\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, releaseStartMetadata, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Release, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Soft delete a release\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {string} comment - Comment for deleting a release.\r\n     */\r\n    deleteRelease(project, releaseId, comment) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                let queryValues = {\r\n                    comment: comment,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.8\", \"Release\", \"a166fde7-27ad-408e-ba75-703c2cc9d500\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a Release\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {ReleaseInterfaces.ApprovalFilters} approvalFilters - A filter which would allow fetching approval steps selectively based on whether it is automated, or manual. This would also decide whether we should fetch pre and post approval snapshots. Assumes All by default\r\n     * @param {string[]} propertyFilters - A comma-delimited list of extended properties to be retrieved. If set, the returned Release will contain values for the specified property Ids (if they exist). If not set, properties will not be included.\r\n     * @param {ReleaseInterfaces.SingleReleaseExpands} expand - A property that should be expanded in the release.\r\n     * @param {number} topGateRecords - Number of release gate records to get. Default is 5.\r\n     */\r\n    getRelease(project, releaseId, approvalFilters, propertyFilters, expand, topGateRecords) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                let queryValues = {\r\n                    approvalFilters: approvalFilters,\r\n                    propertyFilters: propertyFilters && propertyFilters.join(\",\"),\r\n                    '$expand': expand,\r\n                    '$topGateRecords': topGateRecords,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.8\", \"Release\", \"a166fde7-27ad-408e-ba75-703c2cc9d500\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Release, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get release summary of a given definition Id.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - Id of the definition to get release summary.\r\n     * @param {number} releaseCount - Count of releases to be included in summary.\r\n     * @param {boolean} includeArtifact - Include artifact details.Default is 'false'.\r\n     * @param {number[]} definitionEnvironmentIdsFilter\r\n     */\r\n    getReleaseDefinitionSummary(project, definitionId, releaseCount, includeArtifact, definitionEnvironmentIdsFilter) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (definitionId == null) {\r\n                throw new TypeError('definitionId can not be null or undefined');\r\n            }\r\n            if (releaseCount == null) {\r\n                throw new TypeError('releaseCount can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    definitionId: definitionId,\r\n                    releaseCount: releaseCount,\r\n                    includeArtifact: includeArtifact,\r\n                    definitionEnvironmentIdsFilter: definitionEnvironmentIdsFilter && definitionEnvironmentIdsFilter.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.8\", \"Release\", \"a166fde7-27ad-408e-ba75-703c2cc9d500\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinitionSummary, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get release for a given revision number.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release.\r\n     * @param {number} definitionSnapshotRevision - Definition snapshot revision number.\r\n     */\r\n    getReleaseRevision(project, releaseId, definitionSnapshotRevision) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (definitionSnapshotRevision == null) {\r\n                throw new TypeError('definitionSnapshotRevision can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                let queryValues = {\r\n                    definitionSnapshotRevision: definitionSnapshotRevision,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.8\", \"Release\", \"a166fde7-27ad-408e-ba75-703c2cc9d500\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/plain\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Undelete a soft deleted release.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of release to be undeleted.\r\n     * @param {string} comment - Any comment for undeleting.\r\n     */\r\n    undeleteRelease(project, releaseId, comment) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (comment == null) {\r\n                throw new TypeError('comment can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                let queryValues = {\r\n                    comment: comment,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.8\", \"Release\", \"a166fde7-27ad-408e-ba75-703c2cc9d500\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a complete release object.\r\n     *\r\n     * @param {ReleaseInterfaces.Release} release - Release object for update.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release to update.\r\n     */\r\n    updateRelease(release, project, releaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.8\", \"Release\", \"a166fde7-27ad-408e-ba75-703c2cc9d500\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, release, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Release, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update few properties of a release.\r\n     *\r\n     * @param {ReleaseInterfaces.ReleaseUpdateMetadata} releaseUpdateMetadata - Properties of release to update.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Id of the release to update.\r\n     */\r\n    updateReleaseResource(releaseUpdateMetadata, project, releaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.8\", \"Release\", \"a166fde7-27ad-408e-ba75-703c2cc9d500\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, releaseUpdateMetadata, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.Release, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the release settings\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getReleaseSettings(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"c63c3718-7cfd-41e0-b89b-81c1ca143437\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates the release settings\r\n     *\r\n     * @param {ReleaseInterfaces.ReleaseSettings} releaseSettings\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateReleaseSettings(releaseSettings, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"c63c3718-7cfd-41e0-b89b-81c1ca143437\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, releaseSettings, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get release definition for a given definitionId and revision\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - Id of the definition.\r\n     * @param {number} revision - Id of the revision.\r\n     */\r\n    getDefinitionRevision(project, definitionId, revision) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId,\r\n                    revision: revision\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"258b82e0-9d41-43f3-86d6-fef14ddd44bc\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/plain\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get revision history for a release definition\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId - Id of the definition.\r\n     */\r\n    getReleaseDefinitionHistory(project, definitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"258b82e0-9d41-43f3-86d6-fef14ddd44bc\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseDefinitionRevision, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     */\r\n    getSummaryMailSections(project, releaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"224e92b2-8d13-4c14-b120-13d877c516f8\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.SummaryMailSection, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {ReleaseInterfaces.MailMessage} mailMessage\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     */\r\n    sendSummaryMail(mailMessage, project, releaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"224e92b2-8d13-4c14-b120-13d877c516f8\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, mailMessage, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} definitionId\r\n     */\r\n    getSourceBranches(project, definitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definitionId: definitionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"0e5def23-78b3-461f-8198-1558f25041c8\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds a tag to a definition\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseDefinitionId\r\n     * @param {string} tag\r\n     */\r\n    addDefinitionTag(project, releaseDefinitionId, tag) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseDefinitionId: releaseDefinitionId,\r\n                    tag: tag\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"3d21b4c8-c32e-45b2-a7cb-770a369012f4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds multiple tags to a definition\r\n     *\r\n     * @param {string[]} tags\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseDefinitionId\r\n     */\r\n    addDefinitionTags(tags, project, releaseDefinitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseDefinitionId: releaseDefinitionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"3d21b4c8-c32e-45b2-a7cb-770a369012f4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, tags, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes a tag from a definition\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseDefinitionId\r\n     * @param {string} tag\r\n     */\r\n    deleteDefinitionTag(project, releaseDefinitionId, tag) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseDefinitionId: releaseDefinitionId,\r\n                    tag: tag\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"3d21b4c8-c32e-45b2-a7cb-770a369012f4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the tags for a definition\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseDefinitionId\r\n     */\r\n    getDefinitionTags(project, releaseDefinitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseDefinitionId: releaseDefinitionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"3d21b4c8-c32e-45b2-a7cb-770a369012f4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds a tag to a releaseId\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     * @param {string} tag\r\n     */\r\n    addReleaseTag(project, releaseId, tag) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    tag: tag\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"c5b602b6-d1b3-4363-8a51-94384f78068f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds tag to a release\r\n     *\r\n     * @param {string[]} tags\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     */\r\n    addReleaseTags(tags, project, releaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"c5b602b6-d1b3-4363-8a51-94384f78068f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, tags, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes a tag from a release\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     * @param {string} tag\r\n     */\r\n    deleteReleaseTag(project, releaseId, tag) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    tag: tag\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"c5b602b6-d1b3-4363-8a51-94384f78068f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the tags for a release\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     */\r\n    getReleaseTags(project, releaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"c5b602b6-d1b3-4363-8a51-94384f78068f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getTags(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"86cee25a-68ba-4ba3-9171-8ad6ffc6df93\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     * @param {number} environmentId\r\n     * @param {number} releaseDeployPhaseId\r\n     */\r\n    getTasksForTaskGroup(project, releaseId, environmentId, releaseDeployPhaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    environmentId: environmentId,\r\n                    releaseDeployPhaseId: releaseDeployPhaseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Release\", \"4259191d-4b0a-4409-9fb3-09f22ab9bc47\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseTask, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     * @param {number} environmentId\r\n     * @param {number} attemptId\r\n     * @param {string} timelineId\r\n     */\r\n    getTasks2(project, releaseId, environmentId, attemptId, timelineId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    environmentId: environmentId,\r\n                    attemptId: attemptId,\r\n                    timelineId: timelineId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Release\", \"4259291d-4b0a-4409-9fb3-04f22ab9bc47\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseTask, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     * @param {number} environmentId\r\n     * @param {number} attemptId\r\n     */\r\n    getTasks(project, releaseId, environmentId, attemptId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId,\r\n                    environmentId: environmentId\r\n                };\r\n                let queryValues = {\r\n                    attemptId: attemptId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Release\", \"36b276e0-3c70-4320-a63c-1a2e1466a0d1\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ReleaseTask, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getArtifactTypeDefinitions(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"8efc2a3c-1fc8-4f6d-9822-75e98cecb48f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ArtifactTypeDefinition, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseDefinitionId\r\n     */\r\n    getArtifactVersions(project, releaseDefinitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (releaseDefinitionId == null) {\r\n                throw new TypeError('releaseDefinitionId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    releaseDefinitionId: releaseDefinitionId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"30fc787e-a9e0-4a07-9fbc-3e903aa051d2\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ArtifactVersionQueryResult, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {ReleaseInterfaces.Artifact[]} artifacts\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getArtifactVersionsForSources(artifacts, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"30fc787e-a9e0-4a07-9fbc-3e903aa051d2\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, artifacts, options);\r\n                    let ret = this.formatResponse(res.result, ReleaseInterfaces.TypeInfo.ArtifactVersionQueryResult, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     * @param {number} baseReleaseId\r\n     * @param {number} top\r\n     * @param {string} artifactAlias\r\n     */\r\n    getReleaseWorkItemsRefs(project, releaseId, baseReleaseId, top, artifactAlias) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    releaseId: releaseId\r\n                };\r\n                let queryValues = {\r\n                    baseReleaseId: baseReleaseId,\r\n                    '$top': top,\r\n                    artifactAlias: artifactAlias,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Release\", \"4f165cc0-875c-4768-b148-f12f78769fab\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nReleaseApi.RESOURCE_AREA_ID = \"efc2f575-36ef-48e9-b672-0c6fb4a48ac5\";\r\nexports.ReleaseApi = ReleaseApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst SecurityRolesInterfaces = require(\"./interfaces/SecurityRolesInterfaces\");\r\nclass SecurityRolesApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-SecurityRoles-api', options);\r\n    }\r\n    /**\r\n     * @param {string} scopeId\r\n     * @param {string} resourceId\r\n     */\r\n    getRoleAssignments(scopeId, resourceId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeId: scopeId,\r\n                    resourceId: resourceId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"securityroles\", \"9461c234-c84c-4ed2-b918-2f0f92ad0a35\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, SecurityRolesInterfaces.TypeInfo.RoleAssignment, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} scopeId\r\n     * @param {string} resourceId\r\n     * @param {string} identityId\r\n     */\r\n    removeRoleAssignment(scopeId, resourceId, identityId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeId: scopeId,\r\n                    resourceId: resourceId,\r\n                    identityId: identityId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"securityroles\", \"9461c234-c84c-4ed2-b918-2f0f92ad0a35\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string[]} identityIds\r\n     * @param {string} scopeId\r\n     * @param {string} resourceId\r\n     */\r\n    removeRoleAssignments(identityIds, scopeId, resourceId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeId: scopeId,\r\n                    resourceId: resourceId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"securityroles\", \"9461c234-c84c-4ed2-b918-2f0f92ad0a35\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, identityIds, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {SecurityRolesInterfaces.UserRoleAssignmentRef} roleAssignment\r\n     * @param {string} scopeId\r\n     * @param {string} resourceId\r\n     * @param {string} identityId\r\n     */\r\n    setRoleAssignment(roleAssignment, scopeId, resourceId, identityId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeId: scopeId,\r\n                    resourceId: resourceId,\r\n                    identityId: identityId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"securityroles\", \"9461c234-c84c-4ed2-b918-2f0f92ad0a35\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, roleAssignment, options);\r\n                    let ret = this.formatResponse(res.result, SecurityRolesInterfaces.TypeInfo.RoleAssignment, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {SecurityRolesInterfaces.UserRoleAssignmentRef[]} roleAssignments\r\n     * @param {string} scopeId\r\n     * @param {string} resourceId\r\n     */\r\n    setRoleAssignments(roleAssignments, scopeId, resourceId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeId: scopeId,\r\n                    resourceId: resourceId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"securityroles\", \"9461c234-c84c-4ed2-b918-2f0f92ad0a35\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, roleAssignments, options);\r\n                    let ret = this.formatResponse(res.result, SecurityRolesInterfaces.TypeInfo.RoleAssignment, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} scopeId\r\n     */\r\n    getRoleDefinitions(scopeId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeId: scopeId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.2-preview.1\", \"securityroles\", \"f4cc9a86-453c-48d2-b44d-d3bd5c105f4f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nexports.SecurityRolesApi = SecurityRolesApi;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* Module for handling serialization and deserialization of data contracts\r\n* (contracts sent from the server using the VSO default REST api serialization settings)\r\n*/\r\nvar ContractSerializer;\r\n(function (ContractSerializer) {\r\n    var _legacyDateRegExp;\r\n    /**\r\n     * Process a contract in its raw form (e.g. date fields are Dates, and Enums are numbers) and\r\n     * return a pure JSON object that can be posted to REST endpoint.\r\n     *\r\n     * @param data The object to serialize\r\n     * @param contractMetadata The type info/metadata for the contract type being serialized\r\n     * @param preserveOriginal If true, don't modify the original object. False modifies the original object (the return value points to the data argument).\r\n     */\r\n    function serialize(data, contractMetadata, preserveOriginal) {\r\n        if (data && contractMetadata) {\r\n            if (Array.isArray(data)) {\r\n                return _getTranslatedArray(data, contractMetadata, true, preserveOriginal);\r\n            }\r\n            else {\r\n                return _getTranslatedObject(data, contractMetadata, true, preserveOriginal);\r\n            }\r\n        }\r\n        else {\r\n            return data;\r\n        }\r\n    }\r\n    ContractSerializer.serialize = serialize;\r\n    /**\r\n     * Process a pure JSON object (e.g. that came from a REST call) and transform it into a JS object\r\n     * where date strings are converted to Date objects and enum values are converted from strings into\r\n     * their numerical value.\r\n     *\r\n     * @param data The object to deserialize\r\n     * @param contractMetadata The type info/metadata for the contract type being deserialize\r\n     * @param preserveOriginal If true, don't modify the original object. False modifies the original object (the return value points to the data argument).\r\n     * @param unwrapWrappedCollections If true check for wrapped arrays (REST apis will not return arrays directly as the root result but will instead wrap them in a { values: [], count: 0 } object.\r\n     */\r\n    function deserialize(data, contractMetadata, preserveOriginal, unwrapWrappedCollections) {\r\n        if (data) {\r\n            if (unwrapWrappedCollections && Array.isArray(data.value)) {\r\n                // Wrapped json array - unwrap it and send the array as the result\r\n                data = data.value;\r\n            }\r\n            if (contractMetadata) {\r\n                if (Array.isArray(data)) {\r\n                    data = _getTranslatedArray(data, contractMetadata, false, preserveOriginal);\r\n                }\r\n                else {\r\n                    data = _getTranslatedObject(data, contractMetadata, false, preserveOriginal);\r\n                }\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n    ContractSerializer.deserialize = deserialize;\r\n    function _getTranslatedArray(array, typeMetadata, serialize, preserveOriginal) {\r\n        var resultArray = array;\r\n        var arrayCopy = [];\r\n        var i;\r\n        for (i = 0; i < array.length; i++) {\r\n            var item = array[i];\r\n            var processedItem;\r\n            // handle arrays of arrays\r\n            if (Array.isArray(item)) {\r\n                processedItem = _getTranslatedArray(item, typeMetadata, serialize, preserveOriginal);\r\n            }\r\n            else {\r\n                processedItem = _getTranslatedObject(item, typeMetadata, serialize, preserveOriginal);\r\n            }\r\n            if (preserveOriginal) {\r\n                arrayCopy.push(processedItem);\r\n                if (processedItem !== item) {\r\n                    resultArray = arrayCopy;\r\n                }\r\n            }\r\n            else {\r\n                array[i] = processedItem;\r\n            }\r\n        }\r\n        return resultArray;\r\n    }\r\n    function _getTranslatedObject(typeObject, typeMetadata, serialize, preserveOriginal) {\r\n        var processedItem = typeObject, copiedItem = false;\r\n        if (typeObject && typeMetadata.fields) {\r\n            for (var fieldName in typeMetadata.fields) {\r\n                var fieldMetadata = typeMetadata.fields[fieldName];\r\n                var fieldValue = typeObject[fieldName];\r\n                var translatedValue = _getTranslatedField(fieldValue, fieldMetadata, serialize, preserveOriginal);\r\n                if (fieldValue !== translatedValue) {\r\n                    if (preserveOriginal && !copiedItem) {\r\n                        processedItem = this._extend({}, typeObject);\r\n                        copiedItem = true;\r\n                    }\r\n                    processedItem[fieldName] = translatedValue;\r\n                }\r\n            }\r\n        }\r\n        return processedItem;\r\n    }\r\n    function _getTranslatedField(fieldValue, fieldMetadata, serialize, preserveOriginal) {\r\n        if (!fieldValue) {\r\n            return fieldValue;\r\n        }\r\n        if (fieldMetadata.isArray) {\r\n            if (Array.isArray(fieldValue)) {\r\n                var newArray = [], processedArray = fieldValue;\r\n                for (var index = 0; index < fieldValue.length; index++) {\r\n                    var arrayValue = fieldValue[index];\r\n                    var processedValue = arrayValue;\r\n                    if (fieldMetadata.isDate) {\r\n                        processedValue = _getTranslatedDateValue(arrayValue, serialize);\r\n                    }\r\n                    else if (fieldMetadata.enumType) {\r\n                        processedValue = _getTranslatedEnumValue(fieldMetadata.enumType, arrayValue, serialize);\r\n                    }\r\n                    else if (fieldMetadata.typeInfo) {\r\n                        if (Array.isArray(arrayValue)) {\r\n                            processedValue = _getTranslatedArray(arrayValue, fieldMetadata.typeInfo, serialize, preserveOriginal);\r\n                        }\r\n                        else {\r\n                            processedValue = _getTranslatedObject(arrayValue, fieldMetadata.typeInfo, serialize, preserveOriginal);\r\n                        }\r\n                    }\r\n                    if (preserveOriginal) {\r\n                        newArray.push(processedValue);\r\n                        if (processedValue !== arrayValue) {\r\n                            processedArray = newArray;\r\n                        }\r\n                    }\r\n                    else {\r\n                        fieldValue[index] = processedValue;\r\n                    }\r\n                }\r\n                return processedArray;\r\n            }\r\n            else {\r\n                return fieldValue;\r\n            }\r\n        }\r\n        else if (fieldMetadata.isDictionary) {\r\n            var dictionaryModified = false;\r\n            var newDictionary = {};\r\n            for (var key in fieldValue) {\r\n                var dictionaryValue = fieldValue[key];\r\n                var newKey = key, newValue = dictionaryValue;\r\n                if (fieldMetadata.dictionaryKeyIsDate) {\r\n                    newKey = _getTranslatedDateValue(key, serialize);\r\n                }\r\n                else if (fieldMetadata.dictionaryKeyEnumType) {\r\n                    newKey = _getTranslatedEnumValue(fieldMetadata.dictionaryKeyEnumType, key, serialize);\r\n                }\r\n                if (fieldMetadata.dictionaryValueIsDate) {\r\n                    newValue = _getTranslatedDateValue(dictionaryValue, serialize);\r\n                }\r\n                else if (fieldMetadata.dictionaryValueEnumType) {\r\n                    newValue = _getTranslatedEnumValue(fieldMetadata.dictionaryValueEnumType, dictionaryValue, serialize);\r\n                }\r\n                else if (fieldMetadata.dictionaryValueTypeInfo) {\r\n                    newValue = _getTranslatedObject(newValue, fieldMetadata.dictionaryValueTypeInfo, serialize, preserveOriginal);\r\n                }\r\n                else if (fieldMetadata.dictionaryValueFieldInfo) {\r\n                    newValue = _getTranslatedField(dictionaryValue, fieldMetadata.dictionaryValueFieldInfo, serialize, preserveOriginal);\r\n                }\r\n                newDictionary[newKey] = newValue;\r\n                if (key !== newKey || dictionaryValue !== newValue) {\r\n                    dictionaryModified = true;\r\n                }\r\n            }\r\n            return dictionaryModified ? newDictionary : fieldValue;\r\n        }\r\n        else {\r\n            if (fieldMetadata.isDate) {\r\n                return _getTranslatedDateValue(fieldValue, serialize);\r\n            }\r\n            else if (fieldMetadata.enumType) {\r\n                return _getTranslatedEnumValue(fieldMetadata.enumType, fieldValue, serialize);\r\n            }\r\n            else if (fieldMetadata.typeInfo) {\r\n                return _getTranslatedObject(fieldValue, fieldMetadata.typeInfo, serialize, preserveOriginal);\r\n            }\r\n            else {\r\n                return fieldValue;\r\n            }\r\n        }\r\n    }\r\n    function _getTranslatedEnumValue(enumType, valueToConvert, serialize) {\r\n        if (serialize && typeof valueToConvert === \"number\") {\r\n            // Serialize: number --> String\r\n            // Because webapi handles the numerical value for enums, there is no need to convert to string.\r\n            // Let this fall through to return the numerical value.\r\n        }\r\n        else if (!serialize && typeof valueToConvert === \"string\") {\r\n            // Deserialize: String --> number\r\n            var result = 0;\r\n            if (valueToConvert) {\r\n                var splitValue = valueToConvert.split(\",\");\r\n                for (var i = 0; i < splitValue.length; i++) {\r\n                    var valuePart = splitValue[i];\r\n                    //equivalent to jquery trim\r\n                    //copied from https://github.com/HubSpot/youmightnotneedjquery/blob/ef987223c20e480fcbfb5924d96c11cd928e1226/comparisons/utils/trim/ie8.js\r\n                    var enumName = valuePart.replace(/^\\s+|\\s+$/g, '') || \"\";\r\n                    if (enumName) {\r\n                        var resultPart = enumType.enumValues[enumName];\r\n                        if (!resultPart) {\r\n                            // No matching enum value. Try again but case insensitive\r\n                            var lowerCaseEnumName = enumName.toLowerCase();\r\n                            if (lowerCaseEnumName !== enumName) {\r\n                                for (var name in enumType.enumValues) {\r\n                                    var value = enumType.enumValues[name];\r\n                                    if (name.toLowerCase() === lowerCaseEnumName) {\r\n                                        resultPart = value;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if (resultPart) {\r\n                            result |= resultPart;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n        return valueToConvert;\r\n    }\r\n    function _getTranslatedDateValue(valueToConvert, serialize) {\r\n        if (!serialize && typeof valueToConvert === \"string\") {\r\n            // Deserialize: String --> Date\r\n            var dateValue = new Date(valueToConvert);\r\n            if (isNaN(dateValue) && navigator.userAgent && /msie/i.test(navigator.userAgent)) {\r\n                dateValue = _convertLegacyIEDate(valueToConvert);\r\n            }\r\n            return dateValue;\r\n        }\r\n        return valueToConvert;\r\n    }\r\n    function _convertLegacyIEDate(dateStringValue) {\r\n        // IE 8/9 does not handle parsing dates in ISO form like:\r\n        // 2013-05-13T14:26:54.397Z\r\n        var match;\r\n        if (!_legacyDateRegExp) {\r\n            _legacyDateRegExp = new RegExp(\"(\\\\d+)-(\\\\d+)-(\\\\d+)T(\\\\d+):(\\\\d+):(\\\\d+).(\\\\d+)Z\");\r\n        }\r\n        match = _legacyDateRegExp.exec(dateStringValue);\r\n        if (match) {\r\n            return new Date(Date.UTC(parseInt(match[1]), parseInt(match[2]) - 1, parseInt(match[3]), parseInt(match[4]), parseInt(match[5]), parseInt(match[6]), parseInt(match[7])));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    // jquery extend method in native javascript (used to clone objects)\r\n    // copied from https://github.com/HubSpot/youmightnotneedjquery/blob/ef987223c20e480fcbfb5924d96c11cd928e1226/comparisons/utils/extend/ie8.js\r\n    var _extend = function (out) {\r\n        out = out || {};\r\n        for (var i = 1; i < arguments.length; i++) {\r\n            if (!arguments[i])\r\n                continue;\r\n            for (var key in arguments[i]) {\r\n                if (arguments[i].hasOwnProperty(key))\r\n                    out[key] = arguments[i][key];\r\n            }\r\n        }\r\n        return out;\r\n    };\r\n})(ContractSerializer = exports.ContractSerializer || (exports.ContractSerializer = {}));\r\n","\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst taskagentbasem = require(\"./TaskAgentApiBase\");\r\nconst url = require(\"url\");\r\nclass TaskAgentApi extends taskagentbasem.TaskAgentApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, options);\r\n        // hang on to the handlers in case we need to fall back to an account-level client\r\n        this._handlers = handlers;\r\n        this._options = options;\r\n    }\r\n    /**\r\n     * @param {string} taskId\r\n     * @param onResult callback function\r\n     */\r\n    deleteTaskDefinition(taskId) {\r\n        let promise = this.vsoClient.beginGetLocation(\"distributedtask\", \"60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd\")\r\n            .then((location) => {\r\n            if (location) {\r\n                // the resource exists at the url we were given. go!\r\n                return super.deleteTaskDefinition(taskId);\r\n            }\r\n            else {\r\n                // this is the case when the server doesn't support collection-level task definitions\r\n                var fallbackClient = this._getFallbackClient(this.baseUrl);\r\n                if (!fallbackClient) {\r\n                    // couldn't convert\r\n                    throw new Error(\"Failed to find api location for area: distributedtask id: 60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd\");\r\n                }\r\n                else {\r\n                    // use the fallback client \r\n                    return fallbackClient.deleteTaskDefinition(taskId);\r\n                }\r\n            }\r\n        });\r\n        return promise;\r\n    }\r\n    /**\r\n     * @param {string} taskId\r\n     * @param {string} versionString\r\n     * @param {string[]} visibility\r\n     * @param {boolean} scopeLocal\r\n     * @param onResult callback function with the resulting ArrayBuffer\r\n     */\r\n    getTaskContentZip(taskId, versionString, visibility, scopeLocal) {\r\n        let promise = this.vsoClient.beginGetLocation(\"distributedtask\", \"60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd\")\r\n            .then((location) => {\r\n            if (location) {\r\n                // the resource exists at the url we were given. go!\r\n                return super.getTaskContentZip(taskId, versionString, visibility, scopeLocal);\r\n            }\r\n            else {\r\n                // this is the case when the server doesn't support collection-level task definitions\r\n                var fallbackClient = this._getFallbackClient(this.baseUrl);\r\n                if (!fallbackClient) {\r\n                    // couldn't convert\r\n                    throw new Error(\"Failed to find api location for area: distributedtask id: 60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd\");\r\n                }\r\n                else {\r\n                    // use the fallback client \r\n                    return fallbackClient.getTaskContentZip(taskId, versionString, visibility, scopeLocal);\r\n                }\r\n            }\r\n        });\r\n        return promise;\r\n    }\r\n    /**\r\n     * @param {string} taskId\r\n     * @param {string} versionString\r\n     * @param {string[]} visibility\r\n     * @param {boolean} scopeLocal\r\n     * @param onResult callback function with the resulting TaskAgentInterfaces.TaskDefinition\r\n     */\r\n    getTaskDefinition(taskId, versionString, visibility, scopeLocal) {\r\n        let promise = this.vsoClient.beginGetLocation(\"distributedtask\", \"60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd\")\r\n            .then((location) => {\r\n            if (location) {\r\n                // the resource exists at the url we were given. go!\r\n                return super.getTaskDefinition(taskId, versionString, visibility, scopeLocal);\r\n            }\r\n            else {\r\n                // this is the case when the server doesn't support collection-level task definitions\r\n                var fallbackClient = this._getFallbackClient(this.baseUrl);\r\n                if (!fallbackClient) {\r\n                    // couldn't convert\r\n                    throw new Error(\"Failed to find api location for area: distributedtask id: 60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd\");\r\n                }\r\n                else {\r\n                    // use the fallback client \r\n                    return fallbackClient.getTaskDefinition(taskId, versionString, visibility, scopeLocal);\r\n                }\r\n            }\r\n        });\r\n        return promise;\r\n    }\r\n    /**\r\n     * @param {string} taskId\r\n     * @param {string[]} visibility\r\n     * @param {boolean} scopeLocal\r\n     * @param onResult callback function with the resulting TaskAgentInterfaces.TaskDefinition[]\r\n     */\r\n    getTaskDefinitions(taskId, visibility, scopeLocal) {\r\n        let promise = this.vsoClient.beginGetLocation(\"distributedtask\", \"60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd\")\r\n            .then((location) => {\r\n            if (location) {\r\n                // the resource exists at the url we were given. go!\r\n                return super.getTaskDefinitions(taskId, visibility, scopeLocal);\r\n            }\r\n            else {\r\n                // this is the case when the server doesn't support collection-level task definitions\r\n                var fallbackClient = this._getFallbackClient(this.baseUrl);\r\n                if (!fallbackClient) {\r\n                    // couldn't convert\r\n                    throw new Error(\"Failed to find api location for area: distributedtask id: 60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd\");\r\n                }\r\n                else {\r\n                    // use the fallback client \r\n                    return fallbackClient.getTaskDefinitions(taskId, visibility, scopeLocal);\r\n                }\r\n            }\r\n        });\r\n        return promise;\r\n    }\r\n    /**\r\n     * @param {NodeJS.ReadableStream} contentStream\r\n     * @param {string} taskId\r\n     * @param {boolean} overwrite\r\n     * @param onResult callback function\r\n     */\r\n    uploadTaskDefinition(customHeaders, contentStream, taskId, overwrite) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let routeValues = {\r\n                taskId: taskId\r\n            };\r\n            let queryValues = {\r\n                overwrite: overwrite,\r\n            };\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"3.0-preview.1\", \"distributedtask\", \"60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"PUT\", url, contentStream, options);\r\n                    resolve(res.result);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    _getFallbackClient(baseUrl) {\r\n        if (!this._fallbackClient) {\r\n            var accountUrl = this._getAccountUrl(baseUrl);\r\n            if (accountUrl) {\r\n                this._fallbackClient = new TaskAgentApi(accountUrl, this._handlers, this._options);\r\n            }\r\n        }\r\n        return this._fallbackClient;\r\n    }\r\n    _getAccountUrl(collectionUrl) {\r\n        // converts a collection URL to an account URL\r\n        // returns null if the conversion can't be made\r\n        var purl = url.parse(collectionUrl);\r\n        if (!purl.protocol || !purl.host) {\r\n            return null;\r\n        }\r\n        var accountUrl = purl.protocol + '//' + purl.host;\r\n        // purl.path is something like /DefaultCollection or /tfs/DefaultCollection or /DefaultCollection/\r\n        var splitPath = purl.path.split('/').slice(1);\r\n        if (splitPath.length === 0 || (splitPath.length === 1 && splitPath[0] === '')) {\r\n            return null;\r\n        }\r\n        // if the first segment of the path is tfs, the second is the collection. if the url ends in / there will be a third, empty entry\r\n        if (splitPath[0] === 'tfs' && (splitPath.length === 2 || (splitPath.length === 3 && splitPath[2].length === 0))) {\r\n            //on prem\r\n            accountUrl += '/' + 'tfs';\r\n        }\r\n        else if (splitPath.length === 2 && splitPath[0] === '') {\r\n            // /DefaultCollection/\r\n            return accountUrl;\r\n        }\r\n        else if (splitPath.length > 1) {\r\n            return null;\r\n        }\r\n        return accountUrl;\r\n    }\r\n}\r\nexports.TaskAgentApi = TaskAgentApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst TaskAgentInterfaces = require(\"./interfaces/TaskAgentInterfaces\");\r\nclass TaskAgentApiBase extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-TaskAgent-api', options);\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.TaskAgentCloud} agentCloud\r\n     */\r\n    addAgentCloud(agentCloud) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"bfa72b3d-0fc6-43fb-932b-a7f6559f93b9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, agentCloud, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} agentCloudId\r\n     */\r\n    deleteAgentCloud(agentCloudId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    agentCloudId: agentCloudId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"bfa72b3d-0fc6-43fb-932b-a7f6559f93b9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} agentCloudId\r\n     */\r\n    getAgentCloud(agentCloudId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    agentCloudId: agentCloudId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"bfa72b3d-0fc6-43fb-932b-a7f6559f93b9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     */\r\n    getAgentClouds() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"bfa72b3d-0fc6-43fb-932b-a7f6559f93b9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.TaskAgentCloud} updatedCloud\r\n     * @param {number} agentCloudId\r\n     */\r\n    updateAgentCloud(updatedCloud, agentCloudId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    agentCloudId: agentCloudId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"bfa72b3d-0fc6-43fb-932b-a7f6559f93b9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, updatedCloud, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get agent cloud types.\r\n     *\r\n     */\r\n    getAgentCloudTypes() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"5932e193-f376-469d-9c3e-e5588ce12cb5\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentCloudType, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} queueId\r\n     * @param {number} top\r\n     * @param {string} continuationToken\r\n     */\r\n    getAgentRequestsForQueue(project, queueId, top, continuationToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (top == null) {\r\n                throw new TypeError('top can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    queueId: queueId\r\n                };\r\n                let queryValues = {\r\n                    '$top': top,\r\n                    continuationToken: continuationToken,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"f5f81ffb-f396-498d-85b1-5ada145e648a\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.TaskAgentJobRequest} request\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} queueId\r\n     */\r\n    queueAgentRequest(request, project, queueId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    queueId: queueId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"f5f81ffb-f396-498d-85b1-5ada145e648a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, request, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds an agent to a pool.  You probably don't want to call this endpoint directly. Instead, [configure an agent](https://docs.microsoft.com/azure/devops/pipelines/agents/agents) using the agent download package.\r\n     *\r\n     * @param {TaskAgentInterfaces.TaskAgent} agent - Details about the agent being added\r\n     * @param {number} poolId - The agent pool in which to add the agent\r\n     */\r\n    addAgent(agent, poolId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"e298ef32-5878-4cab-993c-043836571f42\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, agent, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgent, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete an agent.  You probably don't want to call this endpoint directly. Instead, [use the agent configuration script](https://docs.microsoft.com/azure/devops/pipelines/agents/agents) to remove an agent from your organization.\r\n     *\r\n     * @param {number} poolId - The pool ID to remove the agent from\r\n     * @param {number} agentId - The agent ID to remove\r\n     */\r\n    deleteAgent(poolId, agentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId,\r\n                    agentId: agentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"e298ef32-5878-4cab-993c-043836571f42\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get information about an agent.\r\n     *\r\n     * @param {number} poolId - The agent pool containing the agent\r\n     * @param {number} agentId - The agent ID to get information about\r\n     * @param {boolean} includeCapabilities - Whether to include the agent's capabilities in the response\r\n     * @param {boolean} includeAssignedRequest - Whether to include details about the agent's current work\r\n     * @param {boolean} includeLastCompletedRequest - Whether to include details about the agents' most recent completed work\r\n     * @param {string[]} propertyFilters - Filter which custom properties will be returned\r\n     */\r\n    getAgent(poolId, agentId, includeCapabilities, includeAssignedRequest, includeLastCompletedRequest, propertyFilters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId,\r\n                    agentId: agentId\r\n                };\r\n                let queryValues = {\r\n                    includeCapabilities: includeCapabilities,\r\n                    includeAssignedRequest: includeAssignedRequest,\r\n                    includeLastCompletedRequest: includeLastCompletedRequest,\r\n                    propertyFilters: propertyFilters && propertyFilters.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"e298ef32-5878-4cab-993c-043836571f42\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgent, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of agents.\r\n     *\r\n     * @param {number} poolId - The agent pool containing the agents\r\n     * @param {string} agentName - Filter on agent name\r\n     * @param {boolean} includeCapabilities - Whether to include the agents' capabilities in the response\r\n     * @param {boolean} includeAssignedRequest - Whether to include details about the agents' current work\r\n     * @param {boolean} includeLastCompletedRequest - Whether to include details about the agents' most recent completed work\r\n     * @param {string[]} propertyFilters - Filter which custom properties will be returned\r\n     * @param {string[]} demands - Filter by demands the agents can satisfy\r\n     */\r\n    getAgents(poolId, agentName, includeCapabilities, includeAssignedRequest, includeLastCompletedRequest, propertyFilters, demands) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId\r\n                };\r\n                let queryValues = {\r\n                    agentName: agentName,\r\n                    includeCapabilities: includeCapabilities,\r\n                    includeAssignedRequest: includeAssignedRequest,\r\n                    includeLastCompletedRequest: includeLastCompletedRequest,\r\n                    propertyFilters: propertyFilters && propertyFilters.join(\",\"),\r\n                    demands: demands && demands.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"e298ef32-5878-4cab-993c-043836571f42\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgent, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Replace an agent.  You probably don't want to call this endpoint directly. Instead, [use the agent configuration script](https://docs.microsoft.com/azure/devops/pipelines/agents/agents) to remove and reconfigure an agent from your organization.\r\n     *\r\n     * @param {TaskAgentInterfaces.TaskAgent} agent - Updated details about the replacing agent\r\n     * @param {number} poolId - The agent pool to use\r\n     * @param {number} agentId - The agent to replace\r\n     */\r\n    replaceAgent(agent, poolId, agentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId,\r\n                    agentId: agentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"e298ef32-5878-4cab-993c-043836571f42\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, agent, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgent, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update agent details.\r\n     *\r\n     * @param {TaskAgentInterfaces.TaskAgent} agent - Updated details about the agent\r\n     * @param {number} poolId - The agent pool to use\r\n     * @param {number} agentId - The agent to update\r\n     */\r\n    updateAgent(agent, poolId, agentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId,\r\n                    agentId: agentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"e298ef32-5878-4cab-993c-043836571f42\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, agent, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgent, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns list of azure subscriptions\r\n     *\r\n     */\r\n    getAzureManagementGroups() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"39fe3bf2-7ee0-4198-a469-4a29929afa9c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns list of azure subscriptions\r\n     *\r\n     */\r\n    getAzureSubscriptions() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"bcd6189c-0303-471f-a8e1-acb22b74d700\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * GET a PAT token for managing (configuring, removing, tagging) deployment targets in a deployment group.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId - ID of the deployment group in which deployment targets are managed.\r\n     */\r\n    generateDeploymentGroupAccessToken(project, deploymentGroupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"3d197ba2-c3e9-4253-882f-0ee2440f8174\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a deployment group.\r\n     *\r\n     * @param {TaskAgentInterfaces.DeploymentGroupCreateParameter} deploymentGroup - Deployment group to create.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    addDeploymentGroup(deploymentGroup, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"083c4d89-ab35-45af-aa11-7cf66895c53e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, deploymentGroup, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentGroup, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a deployment group.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId - ID of the deployment group to be deleted.\r\n     */\r\n    deleteDeploymentGroup(project, deploymentGroupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"083c4d89-ab35-45af-aa11-7cf66895c53e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a deployment group by its ID.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId - ID of the deployment group.\r\n     * @param {TaskAgentInterfaces.DeploymentGroupActionFilter} actionFilter - Get the deployment group only if this action can be performed on it.\r\n     * @param {TaskAgentInterfaces.DeploymentGroupExpands} expand - Include these additional details in the returned object.\r\n     */\r\n    getDeploymentGroup(project, deploymentGroupId, actionFilter, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId\r\n                };\r\n                let queryValues = {\r\n                    actionFilter: actionFilter,\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"083c4d89-ab35-45af-aa11-7cf66895c53e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentGroup, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of deployment groups by name or IDs.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} name - Name of the deployment group.\r\n     * @param {TaskAgentInterfaces.DeploymentGroupActionFilter} actionFilter - Get only deployment groups on which this action can be performed.\r\n     * @param {TaskAgentInterfaces.DeploymentGroupExpands} expand - Include these additional details in the returned objects.\r\n     * @param {string} continuationToken - Get deployment groups with names greater than this continuationToken lexicographically.\r\n     * @param {number} top - Maximum number of deployment groups to return. Default is **1000**.\r\n     * @param {number[]} ids - Comma separated list of IDs of the deployment groups.\r\n     */\r\n    getDeploymentGroups(project, name, actionFilter, expand, continuationToken, top, ids) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    name: name,\r\n                    actionFilter: actionFilter,\r\n                    '$expand': expand,\r\n                    continuationToken: continuationToken,\r\n                    '$top': top,\r\n                    ids: ids && ids.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"083c4d89-ab35-45af-aa11-7cf66895c53e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentGroup, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a deployment group.\r\n     *\r\n     * @param {TaskAgentInterfaces.DeploymentGroupUpdateParameter} deploymentGroup - Deployment group to update.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId - ID of the deployment group.\r\n     */\r\n    updateDeploymentGroup(deploymentGroup, project, deploymentGroupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"083c4d89-ab35-45af-aa11-7cf66895c53e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, deploymentGroup, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentGroup, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of deployment group metrics.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} deploymentGroupName - Name of the deployment group.\r\n     * @param {string} continuationToken - Get metrics for deployment groups with names greater than this continuationToken lexicographically.\r\n     * @param {number} top - Maximum number of deployment group metrics to return. Default is **50**.\r\n     */\r\n    getDeploymentGroupsMetrics(project, deploymentGroupName, continuationToken, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    deploymentGroupName: deploymentGroupName,\r\n                    continuationToken: continuationToken,\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"281c6308-427a-49e1-b83a-dac0f4862189\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentGroupMetrics, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId\r\n     * @param {number} machineId\r\n     * @param {number} completedRequestCount\r\n     */\r\n    getAgentRequestsForDeploymentMachine(project, deploymentGroupId, machineId, completedRequestCount) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (machineId == null) {\r\n                throw new TypeError('machineId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId\r\n                };\r\n                let queryValues = {\r\n                    machineId: machineId,\r\n                    completedRequestCount: completedRequestCount,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"a3540e5b-f0dc-4668-963b-b752459be545\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId\r\n     * @param {number[]} machineIds\r\n     * @param {number} completedRequestCount\r\n     */\r\n    getAgentRequestsForDeploymentMachines(project, deploymentGroupId, machineIds, completedRequestCount) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId\r\n                };\r\n                let queryValues = {\r\n                    machineIds: machineIds && machineIds.join(\",\"),\r\n                    completedRequestCount: completedRequestCount,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"a3540e5b-f0dc-4668-963b-b752459be545\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId\r\n     */\r\n    refreshDeploymentMachines(project, deploymentGroupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"91006ac4-0f68-4d82-a2bc-540676bd73ce\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * GET a PAT token for managing (configuring, removing, tagging) deployment agents in a deployment pool.\r\n     *\r\n     * @param {number} poolId - ID of the deployment pool in which deployment agents are managed.\r\n     */\r\n    generateDeploymentPoolAccessToken(poolId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"e077ee4a-399b-420b-841f-c43fbc058e0b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of deployment pool summaries.\r\n     *\r\n     * @param {string} poolName - Name of the deployment pool.\r\n     * @param {TaskAgentInterfaces.DeploymentPoolSummaryExpands} expands - Include these additional details in the returned objects.\r\n     * @param {number[]} poolIds - List of deployment pool ids.\r\n     */\r\n    getDeploymentPoolsSummary(poolName, expands, poolIds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    poolName: poolName,\r\n                    expands: expands,\r\n                    poolIds: poolIds && poolIds.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"6525d6c6-258f-40e0-a1a9-8a24a3957625\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentPoolSummary, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get agent requests for a deployment target.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId - ID of the deployment group to which the target belongs.\r\n     * @param {number} targetId - ID of the deployment target.\r\n     * @param {number} completedRequestCount - Maximum number of completed requests to return. Default is **50**\r\n     */\r\n    getAgentRequestsForDeploymentTarget(project, deploymentGroupId, targetId, completedRequestCount) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (targetId == null) {\r\n                throw new TypeError('targetId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId\r\n                };\r\n                let queryValues = {\r\n                    targetId: targetId,\r\n                    completedRequestCount: completedRequestCount,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"2fac0be3-8c8f-4473-ab93-c1389b08a2c9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get agent requests for a list deployment targets.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId - ID of the deployment group to which the targets belong.\r\n     * @param {number[]} targetIds - Comma separated list of IDs of the deployment targets.\r\n     * @param {number} ownerId - Id of owner of agent job request.\r\n     * @param {Date} completedOn - Datetime to return request after this time.\r\n     * @param {number} completedRequestCount - Maximum number of completed requests to return for each target. Default is **50**\r\n     */\r\n    getAgentRequestsForDeploymentTargets(project, deploymentGroupId, targetIds, ownerId, completedOn, completedRequestCount) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId\r\n                };\r\n                let queryValues = {\r\n                    targetIds: targetIds && targetIds.join(\",\"),\r\n                    ownerId: ownerId,\r\n                    completedOn: completedOn,\r\n                    completedRequestCount: completedRequestCount,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"2fac0be3-8c8f-4473-ab93-c1389b08a2c9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Upgrade the deployment targets in a deployment group.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId - ID of the deployment group.\r\n     */\r\n    refreshDeploymentTargets(project, deploymentGroupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"1c1a817f-f23d-41c6-bf8d-14b638f64152\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Proxy for a GET request defined by an 'endpoint'. The request is authorized using a service connection. The response is filtered using an XPath/Json based selector.\r\n     *\r\n     * @param {TaskAgentInterfaces.TaskDefinitionEndpoint} endpoint - Describes the URL to fetch.\r\n     */\r\n    queryEndpoint(endpoint) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"f223b809-8c33-4b7d-b53f-07232569b5d6\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, endpoint, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get environment deployment execution history\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} environmentId\r\n     * @param {string} continuationToken\r\n     * @param {number} top\r\n     */\r\n    getEnvironmentDeploymentExecutionRecords(project, environmentId, continuationToken, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    environmentId: environmentId\r\n                };\r\n                let queryValues = {\r\n                    continuationToken: continuationToken,\r\n                    top: top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"51bb5d21-4305-4ea6-9dbb-b7488af73334\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.EnvironmentDeploymentExecutionRecord, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create an environment.\r\n     *\r\n     * @param {TaskAgentInterfaces.EnvironmentCreateParameter} environmentCreateParameter - Environment to create.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    addEnvironment(environmentCreateParameter, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"8572b1fc-2482-47fa-8f74-7e3ed53ee54b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, environmentCreateParameter, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.EnvironmentInstance, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete the specified environment.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} environmentId - ID of the environment.\r\n     */\r\n    deleteEnvironment(project, environmentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    environmentId: environmentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"8572b1fc-2482-47fa-8f74-7e3ed53ee54b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get an environment by its ID.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} environmentId - ID of the environment.\r\n     * @param {TaskAgentInterfaces.EnvironmentExpands} expands - Include these additional details in the returned objects.\r\n     */\r\n    getEnvironmentById(project, environmentId, expands) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    environmentId: environmentId\r\n                };\r\n                let queryValues = {\r\n                    expands: expands,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"8572b1fc-2482-47fa-8f74-7e3ed53ee54b\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.EnvironmentInstance, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get all environments.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} name\r\n     * @param {string} continuationToken\r\n     * @param {number} top\r\n     */\r\n    getEnvironments(project, name, continuationToken, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    name: name,\r\n                    continuationToken: continuationToken,\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"8572b1fc-2482-47fa-8f74-7e3ed53ee54b\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.EnvironmentInstance, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update the specified environment.\r\n     *\r\n     * @param {TaskAgentInterfaces.EnvironmentUpdateParameter} environmentUpdateParameter - Environment data to update.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} environmentId - ID of the environment.\r\n     */\r\n    updateEnvironment(environmentUpdateParameter, project, environmentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    environmentId: environmentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"8572b1fc-2482-47fa-8f74-7e3ed53ee54b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, environmentUpdateParameter, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.EnvironmentInstance, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} hubName\r\n     * @param {boolean} includeEnterpriseUsersCount\r\n     * @param {boolean} includeHostedAgentMinutesCount\r\n     */\r\n    getTaskHubLicenseDetails(hubName, includeEnterpriseUsersCount, includeHostedAgentMinutesCount) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    hubName: hubName\r\n                };\r\n                let queryValues = {\r\n                    includeEnterpriseUsersCount: includeEnterpriseUsersCount,\r\n                    includeHostedAgentMinutesCount: includeHostedAgentMinutesCount,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"distributedtask\", \"f9f0f436-b8a1-4475-9041-1ccdbf8f0128\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.TaskHubLicenseDetails} taskHubLicenseDetails\r\n     * @param {string} hubName\r\n     */\r\n    updateTaskHubLicenseDetails(taskHubLicenseDetails, hubName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    hubName: hubName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"distributedtask\", \"f9f0f436-b8a1-4475-9041-1ccdbf8f0128\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, taskHubLicenseDetails, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.InputValidationRequest} inputValidationRequest\r\n     */\r\n    validateInputs(inputValidationRequest) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"58475b1e-adaf-4155-9bc1-e04bf1fff4c2\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, inputValidationRequest, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} poolId\r\n     * @param {number} requestId\r\n     * @param {string} lockToken\r\n     * @param {TaskAgentInterfaces.TaskResult} result\r\n     * @param {boolean} agentShuttingDown\r\n     */\r\n    deleteAgentRequest(poolId, requestId, lockToken, result, agentShuttingDown) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (lockToken == null) {\r\n                throw new TypeError('lockToken can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId,\r\n                    requestId: requestId\r\n                };\r\n                let queryValues = {\r\n                    lockToken: lockToken,\r\n                    result: result,\r\n                    agentShuttingDown: agentShuttingDown,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"fc825784-c92a-4299-9221-998a02d1b54f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} poolId\r\n     * @param {number} requestId\r\n     * @param {boolean} includeStatus\r\n     */\r\n    getAgentRequest(poolId, requestId, includeStatus) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId,\r\n                    requestId: requestId\r\n                };\r\n                let queryValues = {\r\n                    includeStatus: includeStatus,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"fc825784-c92a-4299-9221-998a02d1b54f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} poolId\r\n     * @param {number} top\r\n     * @param {string} continuationToken\r\n     */\r\n    getAgentRequests(poolId, top, continuationToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (top == null) {\r\n                throw new TypeError('top can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId\r\n                };\r\n                let queryValues = {\r\n                    '$top': top,\r\n                    continuationToken: continuationToken,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"fc825784-c92a-4299-9221-998a02d1b54f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} poolId\r\n     * @param {number} agentId\r\n     * @param {number} completedRequestCount\r\n     */\r\n    getAgentRequestsForAgent(poolId, agentId, completedRequestCount) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (agentId == null) {\r\n                throw new TypeError('agentId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId\r\n                };\r\n                let queryValues = {\r\n                    agentId: agentId,\r\n                    completedRequestCount: completedRequestCount,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"fc825784-c92a-4299-9221-998a02d1b54f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} poolId\r\n     * @param {number[]} agentIds\r\n     * @param {number} completedRequestCount\r\n     */\r\n    getAgentRequestsForAgents(poolId, agentIds, completedRequestCount) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId\r\n                };\r\n                let queryValues = {\r\n                    agentIds: agentIds && agentIds.join(\",\"),\r\n                    completedRequestCount: completedRequestCount,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"fc825784-c92a-4299-9221-998a02d1b54f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} poolId\r\n     * @param {string} planId\r\n     * @param {string} jobId\r\n     */\r\n    getAgentRequestsForPlan(poolId, planId, jobId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (planId == null) {\r\n                throw new TypeError('planId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId\r\n                };\r\n                let queryValues = {\r\n                    planId: planId,\r\n                    jobId: jobId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"fc825784-c92a-4299-9221-998a02d1b54f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.TaskAgentJobRequest} request\r\n     * @param {number} poolId\r\n     */\r\n    queueAgentRequestByPool(request, poolId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"fc825784-c92a-4299-9221-998a02d1b54f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, request, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.TaskAgentJobRequest} request\r\n     * @param {number} poolId\r\n     * @param {number} requestId\r\n     * @param {string} lockToken\r\n     * @param {TaskAgentInterfaces.TaskAgentRequestUpdateOptions} updateOptions\r\n     */\r\n    updateAgentRequest(request, poolId, requestId, lockToken, updateOptions) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (lockToken == null) {\r\n                throw new TypeError('lockToken can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId,\r\n                    requestId: requestId\r\n                };\r\n                let queryValues = {\r\n                    lockToken: lockToken,\r\n                    updateOptions: updateOptions,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"fc825784-c92a-4299-9221-998a02d1b54f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, request, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.KubernetesResourceCreateParameters} createParameters\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} environmentId\r\n     */\r\n    addKubernetesResource(createParameters, project, environmentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    environmentId: environmentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"73fba52f-15ab-42b3-a538-ce67a9223a04\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, createParameters, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.KubernetesResource, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} environmentId\r\n     * @param {number} resourceId\r\n     */\r\n    deleteKubernetesResource(project, environmentId, resourceId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    environmentId: environmentId,\r\n                    resourceId: resourceId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"73fba52f-15ab-42b3-a538-ce67a9223a04\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} environmentId\r\n     * @param {number} resourceId\r\n     */\r\n    getKubernetesResource(project, environmentId, resourceId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    environmentId: environmentId,\r\n                    resourceId: resourceId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"73fba52f-15ab-42b3-a538-ce67a9223a04\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.KubernetesResource, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} machineGroupId\r\n     */\r\n    generateDeploymentMachineGroupAccessToken(project, machineGroupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    machineGroupId: machineGroupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"f8c7c0de-ac0d-469b-9cb1-c21f72d67693\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.DeploymentMachineGroup} machineGroup\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    addDeploymentMachineGroup(machineGroup, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"d4adf50f-80c6-4ac8-9ca1-6e4e544286e9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, machineGroup, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachineGroup, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} machineGroupId\r\n     */\r\n    deleteDeploymentMachineGroup(project, machineGroupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    machineGroupId: machineGroupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"d4adf50f-80c6-4ac8-9ca1-6e4e544286e9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} machineGroupId\r\n     * @param {TaskAgentInterfaces.MachineGroupActionFilter} actionFilter\r\n     */\r\n    getDeploymentMachineGroup(project, machineGroupId, actionFilter) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    machineGroupId: machineGroupId\r\n                };\r\n                let queryValues = {\r\n                    actionFilter: actionFilter,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"d4adf50f-80c6-4ac8-9ca1-6e4e544286e9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachineGroup, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} machineGroupName\r\n     * @param {TaskAgentInterfaces.MachineGroupActionFilter} actionFilter\r\n     */\r\n    getDeploymentMachineGroups(project, machineGroupName, actionFilter) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    machineGroupName: machineGroupName,\r\n                    actionFilter: actionFilter,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"d4adf50f-80c6-4ac8-9ca1-6e4e544286e9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachineGroup, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.DeploymentMachineGroup} machineGroup\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} machineGroupId\r\n     */\r\n    updateDeploymentMachineGroup(machineGroup, project, machineGroupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    machineGroupId: machineGroupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"d4adf50f-80c6-4ac8-9ca1-6e4e544286e9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, machineGroup, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachineGroup, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} machineGroupId\r\n     * @param {string[]} tagFilters\r\n     */\r\n    getDeploymentMachineGroupMachines(project, machineGroupId, tagFilters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    machineGroupId: machineGroupId\r\n                };\r\n                let queryValues = {\r\n                    tagFilters: tagFilters && tagFilters.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"966c3874-c347-4b18-a90c-d509116717fd\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.DeploymentMachine[]} deploymentMachines\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} machineGroupId\r\n     */\r\n    updateDeploymentMachineGroupMachines(deploymentMachines, project, machineGroupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    machineGroupId: machineGroupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"966c3874-c347-4b18-a90c-d509116717fd\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, deploymentMachines, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.DeploymentMachine} machine\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId\r\n     */\r\n    addDeploymentMachine(machine, project, deploymentGroupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"6f6d406f-cfe6-409c-9327-7009928077e7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, machine, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId\r\n     * @param {number} machineId\r\n     */\r\n    deleteDeploymentMachine(project, deploymentGroupId, machineId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId,\r\n                    machineId: machineId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"6f6d406f-cfe6-409c-9327-7009928077e7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId\r\n     * @param {number} machineId\r\n     * @param {TaskAgentInterfaces.DeploymentMachineExpands} expand\r\n     */\r\n    getDeploymentMachine(project, deploymentGroupId, machineId, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId,\r\n                    machineId: machineId\r\n                };\r\n                let queryValues = {\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"6f6d406f-cfe6-409c-9327-7009928077e7\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId\r\n     * @param {string[]} tags\r\n     * @param {string} name\r\n     * @param {TaskAgentInterfaces.DeploymentMachineExpands} expand\r\n     */\r\n    getDeploymentMachines(project, deploymentGroupId, tags, name, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId\r\n                };\r\n                let queryValues = {\r\n                    tags: tags && tags.join(\",\"),\r\n                    name: name,\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"6f6d406f-cfe6-409c-9327-7009928077e7\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.DeploymentMachine} machine\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId\r\n     * @param {number} machineId\r\n     */\r\n    replaceDeploymentMachine(machine, project, deploymentGroupId, machineId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId,\r\n                    machineId: machineId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"6f6d406f-cfe6-409c-9327-7009928077e7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, machine, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.DeploymentMachine} machine\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId\r\n     * @param {number} machineId\r\n     */\r\n    updateDeploymentMachine(machine, project, deploymentGroupId, machineId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId,\r\n                    machineId: machineId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"6f6d406f-cfe6-409c-9327-7009928077e7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, machine, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.DeploymentMachine[]} machines\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId\r\n     */\r\n    updateDeploymentMachines(machines, project, deploymentGroupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"6f6d406f-cfe6-409c-9327-7009928077e7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, machines, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.TaskAgentPoolMaintenanceDefinition} definition\r\n     * @param {number} poolId\r\n     */\r\n    createAgentPoolMaintenanceDefinition(definition, poolId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"80572e16-58f0-4419-ac07-d19fde32195c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, definition, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentPoolMaintenanceDefinition, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} poolId\r\n     * @param {number} definitionId\r\n     */\r\n    deleteAgentPoolMaintenanceDefinition(poolId, definitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId,\r\n                    definitionId: definitionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"80572e16-58f0-4419-ac07-d19fde32195c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} poolId\r\n     * @param {number} definitionId\r\n     */\r\n    getAgentPoolMaintenanceDefinition(poolId, definitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId,\r\n                    definitionId: definitionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"80572e16-58f0-4419-ac07-d19fde32195c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentPoolMaintenanceDefinition, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} poolId\r\n     */\r\n    getAgentPoolMaintenanceDefinitions(poolId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"80572e16-58f0-4419-ac07-d19fde32195c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentPoolMaintenanceDefinition, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.TaskAgentPoolMaintenanceDefinition} definition\r\n     * @param {number} poolId\r\n     * @param {number} definitionId\r\n     */\r\n    updateAgentPoolMaintenanceDefinition(definition, poolId, definitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId,\r\n                    definitionId: definitionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"80572e16-58f0-4419-ac07-d19fde32195c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, definition, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentPoolMaintenanceDefinition, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} poolId\r\n     * @param {number} jobId\r\n     */\r\n    deleteAgentPoolMaintenanceJob(poolId, jobId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId,\r\n                    jobId: jobId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"15e7ab6e-abce-4601-a6d8-e111fe148f46\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} poolId\r\n     * @param {number} jobId\r\n     */\r\n    getAgentPoolMaintenanceJob(poolId, jobId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId,\r\n                    jobId: jobId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"15e7ab6e-abce-4601-a6d8-e111fe148f46\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentPoolMaintenanceJob, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} poolId\r\n     * @param {number} jobId\r\n     */\r\n    getAgentPoolMaintenanceJobLogs(poolId, jobId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId,\r\n                    jobId: jobId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"15e7ab6e-abce-4601-a6d8-e111fe148f46\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} poolId\r\n     * @param {number} definitionId\r\n     */\r\n    getAgentPoolMaintenanceJobs(poolId, definitionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId\r\n                };\r\n                let queryValues = {\r\n                    definitionId: definitionId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"15e7ab6e-abce-4601-a6d8-e111fe148f46\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentPoolMaintenanceJob, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.TaskAgentPoolMaintenanceJob} job\r\n     * @param {number} poolId\r\n     */\r\n    queueAgentPoolMaintenanceJob(job, poolId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"15e7ab6e-abce-4601-a6d8-e111fe148f46\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, job, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentPoolMaintenanceJob, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.TaskAgentPoolMaintenanceJob} job\r\n     * @param {number} poolId\r\n     * @param {number} jobId\r\n     */\r\n    updateAgentPoolMaintenanceJob(job, poolId, jobId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId,\r\n                    jobId: jobId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"15e7ab6e-abce-4601-a6d8-e111fe148f46\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, job, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentPoolMaintenanceJob, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} poolId\r\n     * @param {number} messageId\r\n     * @param {string} sessionId\r\n     */\r\n    deleteMessage(poolId, messageId, sessionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (sessionId == null) {\r\n                throw new TypeError('sessionId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId,\r\n                    messageId: messageId\r\n                };\r\n                let queryValues = {\r\n                    sessionId: sessionId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"c3a054f6-7a8a-49c0-944e-3a8e5d7adfd7\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} poolId\r\n     * @param {string} sessionId\r\n     * @param {number} lastMessageId\r\n     */\r\n    getMessage(poolId, sessionId, lastMessageId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (sessionId == null) {\r\n                throw new TypeError('sessionId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId\r\n                };\r\n                let queryValues = {\r\n                    sessionId: sessionId,\r\n                    lastMessageId: lastMessageId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"c3a054f6-7a8a-49c0-944e-3a8e5d7adfd7\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} poolId\r\n     * @param {number} agentId\r\n     */\r\n    refreshAgent(poolId, agentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (agentId == null) {\r\n                throw new TypeError('agentId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId\r\n                };\r\n                let queryValues = {\r\n                    agentId: agentId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"c3a054f6-7a8a-49c0-944e-3a8e5d7adfd7\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} poolId\r\n     */\r\n    refreshAgents(poolId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"c3a054f6-7a8a-49c0-944e-3a8e5d7adfd7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.TaskAgentMessage} message\r\n     * @param {number} poolId\r\n     * @param {number} requestId\r\n     */\r\n    sendMessage(message, poolId, requestId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (requestId == null) {\r\n                throw new TypeError('requestId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId\r\n                };\r\n                let queryValues = {\r\n                    requestId: requestId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"c3a054f6-7a8a-49c0-944e-3a8e5d7adfd7\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, message, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} packageType\r\n     * @param {string} platform\r\n     * @param {string} version\r\n     */\r\n    getPackage(packageType, platform, version) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    packageType: packageType,\r\n                    platform: platform,\r\n                    version: version\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"distributedtask\", \"8ffcd551-079c-493a-9c02-54346299d144\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.PackageMetadata, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} packageType\r\n     * @param {string} platform\r\n     * @param {number} top\r\n     */\r\n    getPackages(packageType, platform, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    packageType: packageType,\r\n                    platform: platform\r\n                };\r\n                let queryValues = {\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"distributedtask\", \"8ffcd551-079c-493a-9c02-54346299d144\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.PackageMetadata, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} poolId\r\n     */\r\n    getAgentPoolMetadata(poolId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"0d62f887-9f53-48b9-9161-4c35d5735b0f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/plain\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {any} agentPoolMetadata\r\n     * @param {number} poolId\r\n     */\r\n    setAgentPoolMetadata(customHeaders, agentPoolMetadata, poolId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"0d62f887-9f53-48b9-9161-4c35d5735b0f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.replace(url, agentPoolMetadata, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Checks if current identity has passed permissions on a pool.\r\n     *\r\n     * @param {number} poolId - Id of the pool to check\r\n     * @param {number} permissions - Permissions to check. Multiple permissions might be merged into single value using bitwise OR operator (e.g. AgentPoolPermissions.Manage | AgentPoolPermissions.View)\r\n     */\r\n    hasPoolPermissions(poolId, permissions) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId,\r\n                    permissions: permissions\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"162778f3-4b48-48f3-9d58-436fb9c407bc\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create an agent pool.\r\n     *\r\n     * @param {TaskAgentInterfaces.TaskAgentPool} pool - Details about the new agent pool\r\n     */\r\n    addAgentPool(pool) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"a8c47e17-4d56-4a56-92bb-de7ea7dc65be\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, pool, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentPool, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete an agent pool.\r\n     *\r\n     * @param {number} poolId - ID of the agent pool to delete\r\n     */\r\n    deleteAgentPool(poolId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"a8c47e17-4d56-4a56-92bb-de7ea7dc65be\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get information about an agent pool.\r\n     *\r\n     * @param {number} poolId - An agent pool ID\r\n     * @param {string[]} properties - Agent pool properties (comma-separated)\r\n     * @param {TaskAgentInterfaces.TaskAgentPoolActionFilter} actionFilter - Filter by whether the calling user has use or manage permissions\r\n     */\r\n    getAgentPool(poolId, properties, actionFilter) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId\r\n                };\r\n                let queryValues = {\r\n                    properties: properties && properties.join(\",\"),\r\n                    actionFilter: actionFilter,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"a8c47e17-4d56-4a56-92bb-de7ea7dc65be\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentPool, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of agent pools.\r\n     *\r\n     * @param {string} poolName - Filter by name\r\n     * @param {string[]} properties - Filter by agent pool properties (comma-separated)\r\n     * @param {TaskAgentInterfaces.TaskAgentPoolType} poolType - Filter by pool type\r\n     * @param {TaskAgentInterfaces.TaskAgentPoolActionFilter} actionFilter - Filter by whether the calling user has use or manage permissions\r\n     */\r\n    getAgentPools(poolName, properties, poolType, actionFilter) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    poolName: poolName,\r\n                    properties: properties && properties.join(\",\"),\r\n                    poolType: poolType,\r\n                    actionFilter: actionFilter,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"a8c47e17-4d56-4a56-92bb-de7ea7dc65be\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentPool, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of agent pools.\r\n     *\r\n     * @param {number[]} poolIds - pool Ids to fetch\r\n     * @param {TaskAgentInterfaces.TaskAgentPoolActionFilter} actionFilter - Filter by whether the calling user has use or manage permissions\r\n     */\r\n    getAgentPoolsByIds(poolIds, actionFilter) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (poolIds == null) {\r\n                throw new TypeError('poolIds can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    poolIds: poolIds && poolIds.join(\",\"),\r\n                    actionFilter: actionFilter,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"a8c47e17-4d56-4a56-92bb-de7ea7dc65be\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentPool, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update properties on an agent pool\r\n     *\r\n     * @param {TaskAgentInterfaces.TaskAgentPool} pool - Updated agent pool details\r\n     * @param {number} poolId - The agent pool to update\r\n     */\r\n    updateAgentPool(pool, poolId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"a8c47e17-4d56-4a56-92bb-de7ea7dc65be\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, pool, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentPool, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a new agent queue to connect a project to an agent pool.\r\n     *\r\n     * @param {TaskAgentInterfaces.TaskAgentQueue} queue - Details about the queue to create\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} authorizePipelines - Automatically authorize this queue when using YAML\r\n     */\r\n    addAgentQueue(queue, project, authorizePipelines) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    authorizePipelines: authorizePipelines,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"900fa995-c559-4923-aae7-f8424fe4fbea\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, queue, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentQueue, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a new team project.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createTeamProject(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"900fa995-c559-4923-aae7-f8424fe4fbea\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes an agent queue from a project.\r\n     *\r\n     * @param {number} queueId - The agent queue to remove\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    deleteAgentQueue(queueId, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    queueId: queueId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"900fa995-c559-4923-aae7-f8424fe4fbea\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get information about an agent queue.\r\n     *\r\n     * @param {number} queueId - The agent queue to get information about\r\n     * @param {string} project - Project ID or project name\r\n     * @param {TaskAgentInterfaces.TaskAgentQueueActionFilter} actionFilter - Filter by whether the calling user has use or manage permissions\r\n     */\r\n    getAgentQueue(queueId, project, actionFilter) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    queueId: queueId\r\n                };\r\n                let queryValues = {\r\n                    actionFilter: actionFilter,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"900fa995-c559-4923-aae7-f8424fe4fbea\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentQueue, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of agent queues.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} queueName - Filter on the agent queue name\r\n     * @param {TaskAgentInterfaces.TaskAgentQueueActionFilter} actionFilter - Filter by whether the calling user has use or manage permissions\r\n     */\r\n    getAgentQueues(project, queueName, actionFilter) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    queueName: queueName,\r\n                    actionFilter: actionFilter,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"900fa995-c559-4923-aae7-f8424fe4fbea\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentQueue, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of agent queues by their IDs\r\n     *\r\n     * @param {number[]} queueIds - A comma-separated list of agent queue IDs to retrieve\r\n     * @param {string} project - Project ID or project name\r\n     * @param {TaskAgentInterfaces.TaskAgentQueueActionFilter} actionFilter - Filter by whether the calling user has use or manage permissions\r\n     */\r\n    getAgentQueuesByIds(queueIds, project, actionFilter) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (queueIds == null) {\r\n                throw new TypeError('queueIds can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    queueIds: queueIds && queueIds.join(\",\"),\r\n                    actionFilter: actionFilter,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"900fa995-c559-4923-aae7-f8424fe4fbea\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentQueue, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of agent queues by their names\r\n     *\r\n     * @param {string[]} queueNames - A comma-separated list of agent names to retrieve\r\n     * @param {string} project - Project ID or project name\r\n     * @param {TaskAgentInterfaces.TaskAgentQueueActionFilter} actionFilter - Filter by whether the calling user has use or manage permissions\r\n     */\r\n    getAgentQueuesByNames(queueNames, project, actionFilter) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (queueNames == null) {\r\n                throw new TypeError('queueNames can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    queueNames: queueNames && queueNames.join(\",\"),\r\n                    actionFilter: actionFilter,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"900fa995-c559-4923-aae7-f8424fe4fbea\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentQueue, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of agent queues by pool ids\r\n     *\r\n     * @param {number[]} poolIds - A comma-separated list of pool ids to get the corresponding queues for\r\n     * @param {string} project - Project ID or project name\r\n     * @param {TaskAgentInterfaces.TaskAgentQueueActionFilter} actionFilter - Filter by whether the calling user has use or manage permissions\r\n     */\r\n    getAgentQueuesForPools(poolIds, project, actionFilter) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (poolIds == null) {\r\n                throw new TypeError('poolIds can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    poolIds: poolIds && poolIds.join(\",\"),\r\n                    actionFilter: actionFilter,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"900fa995-c559-4923-aae7-f8424fe4fbea\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentQueue, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} agentCloudId\r\n     */\r\n    getAgentCloudRequests(agentCloudId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    agentCloudId: agentCloudId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"20189bd7-5134-49c2-b8e9-f9e856eea2b2\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentCloudRequest, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     */\r\n    getResourceLimits() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"1f1f0557-c445-42a6-b4a0-0df605a3a0f8\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} parallelismTag\r\n     * @param {boolean} poolIsHosted\r\n     * @param {boolean} includeRunningRequests\r\n     */\r\n    getResourceUsage(parallelismTag, poolIsHosted, includeRunningRequests) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    parallelismTag: parallelismTag,\r\n                    poolIsHosted: poolIsHosted,\r\n                    includeRunningRequests: includeRunningRequests,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"distributedtask\", \"eae1d376-a8b1-4475-9041-1dfdbe8f0143\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.ResourceUsage, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} taskGroupId\r\n     */\r\n    getTaskGroupHistory(project, taskGroupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    taskGroupId: taskGroupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"100cc92a-b255-47fa-9ab3-e44a2985a3ac\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskGroupRevision, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a secure file\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} secureFileId - The unique secure file Id\r\n     */\r\n    deleteSecureFile(project, secureFileId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    secureFileId: secureFileId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"adcfd8bc-b184-43ba-bd84-7c8c6a2ff421\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Download a secure file by Id\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} secureFileId - The unique secure file Id\r\n     * @param {string} ticket - A valid download ticket\r\n     * @param {boolean} download - If download is true, the file is sent as attachement in the response body. If download is false, the response body contains the file stream.\r\n     */\r\n    downloadSecureFile(project, secureFileId, ticket, download) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (ticket == null) {\r\n                throw new TypeError('ticket can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    secureFileId: secureFileId\r\n                };\r\n                let queryValues = {\r\n                    ticket: ticket,\r\n                    download: download,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"adcfd8bc-b184-43ba-bd84-7c8c6a2ff421\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a secure file\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} secureFileId - The unique secure file Id\r\n     * @param {boolean} includeDownloadTicket - If includeDownloadTicket is true and the caller has permissions, a download ticket is included in the response.\r\n     * @param {TaskAgentInterfaces.SecureFileActionFilter} actionFilter\r\n     */\r\n    getSecureFile(project, secureFileId, includeDownloadTicket, actionFilter) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    secureFileId: secureFileId\r\n                };\r\n                let queryValues = {\r\n                    includeDownloadTicket: includeDownloadTicket,\r\n                    actionFilter: actionFilter,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"adcfd8bc-b184-43ba-bd84-7c8c6a2ff421\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.SecureFile, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get secure files\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} namePattern - Name of the secure file to match. Can include wildcards to match multiple files.\r\n     * @param {boolean} includeDownloadTickets - If includeDownloadTickets is true and the caller has permissions, a download ticket for each secure file is included in the response.\r\n     * @param {TaskAgentInterfaces.SecureFileActionFilter} actionFilter - Filter by secure file permissions for View, Manage or Use action. Defaults to View.\r\n     */\r\n    getSecureFiles(project, namePattern, includeDownloadTickets, actionFilter) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    namePattern: namePattern,\r\n                    includeDownloadTickets: includeDownloadTickets,\r\n                    actionFilter: actionFilter,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"adcfd8bc-b184-43ba-bd84-7c8c6a2ff421\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.SecureFile, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get secure files\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string[]} secureFileIds - A list of secure file Ids\r\n     * @param {boolean} includeDownloadTickets - If includeDownloadTickets is true and the caller has permissions, a download ticket for each secure file is included in the response.\r\n     * @param {TaskAgentInterfaces.SecureFileActionFilter} actionFilter\r\n     */\r\n    getSecureFilesByIds(project, secureFileIds, includeDownloadTickets, actionFilter) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (secureFileIds == null) {\r\n                throw new TypeError('secureFileIds can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    secureFileIds: secureFileIds && secureFileIds.join(\",\"),\r\n                    includeDownloadTickets: includeDownloadTickets,\r\n                    actionFilter: actionFilter,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"adcfd8bc-b184-43ba-bd84-7c8c6a2ff421\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.SecureFile, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get secure files\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string[]} secureFileNames - A list of secure file Ids\r\n     * @param {boolean} includeDownloadTickets - If includeDownloadTickets is true and the caller has permissions, a download ticket for each secure file is included in the response.\r\n     * @param {TaskAgentInterfaces.SecureFileActionFilter} actionFilter\r\n     */\r\n    getSecureFilesByNames(project, secureFileNames, includeDownloadTickets, actionFilter) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (secureFileNames == null) {\r\n                throw new TypeError('secureFileNames can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    secureFileNames: secureFileNames && secureFileNames.join(\",\"),\r\n                    includeDownloadTickets: includeDownloadTickets,\r\n                    actionFilter: actionFilter,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"adcfd8bc-b184-43ba-bd84-7c8c6a2ff421\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.SecureFile, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Query secure files using a name pattern and a condition on file properties.\r\n     *\r\n     * @param {string} condition - The main condition syntax is described [here](https://go.microsoft.com/fwlink/?linkid=842996). Use the *property('property-name')* function to access the value of the specified property of a secure file. It returns null if the property is not set. E.g. ``` and( eq( property('devices'), '2' ), in( property('provisioning profile type'), 'ad hoc', 'development' ) ) ```\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} namePattern - Name of the secure file to match. Can include wildcards to match multiple files.\r\n     */\r\n    querySecureFilesByProperties(condition, project, namePattern) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    namePattern: namePattern,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"adcfd8bc-b184-43ba-bd84-7c8c6a2ff421\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, condition, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.SecureFile, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update the name or properties of an existing secure file\r\n     *\r\n     * @param {TaskAgentInterfaces.SecureFile} secureFile - The secure file with updated name and/or properties\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} secureFileId - The unique secure file Id\r\n     */\r\n    updateSecureFile(secureFile, project, secureFileId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    secureFileId: secureFileId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"adcfd8bc-b184-43ba-bd84-7c8c6a2ff421\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, secureFile, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.SecureFile, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update properties and/or names of a set of secure files. Files are identified by their IDs. Properties provided override the existing one entirely, i.e. do not merge.\r\n     *\r\n     * @param {TaskAgentInterfaces.SecureFile[]} secureFiles - A list of secure file objects. Only three field must be populated Id, Name, and Properties. The rest of fields in the object are ignored.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateSecureFiles(secureFiles, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"adcfd8bc-b184-43ba-bd84-7c8c6a2ff421\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, secureFiles, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.SecureFile, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Upload a secure file, include the file stream in the request body\r\n     *\r\n     * @param {NodeJS.ReadableStream} contentStream - Content to upload\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} name - Name of the file to upload\r\n     * @param {boolean} authorizePipelines - If authorizePipelines is true, then the secure file is authorized for use by all pipelines in the project.\r\n     */\r\n    uploadSecureFile(customHeaders, contentStream, project, name, authorizePipelines) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (name == null) {\r\n                throw new TypeError('name can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    name: name,\r\n                    authorizePipelines: authorizePipelines,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"adcfd8bc-b184-43ba-bd84-7c8c6a2ff421\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"POST\", url, contentStream, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.SecureFile, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.TaskAgentSession} session\r\n     * @param {number} poolId\r\n     */\r\n    createAgentSession(session, poolId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"134e239e-2df3-4794-a6f6-24f1f19ec8dc\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, session, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentSession, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} poolId\r\n     * @param {string} sessionId\r\n     */\r\n    deleteAgentSession(poolId, sessionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId,\r\n                    sessionId: sessionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"134e239e-2df3-4794-a6f6-24f1f19ec8dc\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Register a deployment target to a deployment group. Generally this is called by agent configuration tool.\r\n     *\r\n     * @param {TaskAgentInterfaces.DeploymentMachine} machine - Deployment target to register.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId - ID of the deployment group to which the deployment target is registered.\r\n     */\r\n    addDeploymentTarget(machine, project, deploymentGroupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"2f0aa599-c121-4256-a5fd-ba370e0ae7b6\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, machine, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a deployment target in a deployment group. This deletes the agent from associated deployment pool too.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId - ID of the deployment group in which deployment target is deleted.\r\n     * @param {number} targetId - ID of the deployment target to delete.\r\n     */\r\n    deleteDeploymentTarget(project, deploymentGroupId, targetId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId,\r\n                    targetId: targetId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"2f0aa599-c121-4256-a5fd-ba370e0ae7b6\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a deployment target by its ID in a deployment group\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId - ID of the deployment group to which deployment target belongs.\r\n     * @param {number} targetId - ID of the deployment target to return.\r\n     * @param {TaskAgentInterfaces.DeploymentTargetExpands} expand - Include these additional details in the returned objects.\r\n     */\r\n    getDeploymentTarget(project, deploymentGroupId, targetId, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId,\r\n                    targetId: targetId\r\n                };\r\n                let queryValues = {\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"2f0aa599-c121-4256-a5fd-ba370e0ae7b6\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of deployment targets in a deployment group.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId - ID of the deployment group.\r\n     * @param {string[]} tags - Get only the deployment targets that contain all these comma separted list of tags.\r\n     * @param {string} name - Name pattern of the deployment targets to return.\r\n     * @param {boolean} partialNameMatch - When set to true, treats **name** as pattern. Else treats it as absolute match. Default is **false**.\r\n     * @param {TaskAgentInterfaces.DeploymentTargetExpands} expand - Include these additional details in the returned objects.\r\n     * @param {TaskAgentInterfaces.TaskAgentStatusFilter} agentStatus - Get only deployment targets that have this status.\r\n     * @param {TaskAgentInterfaces.TaskAgentJobResultFilter} agentJobResult - Get only deployment targets that have this last job result.\r\n     * @param {string} continuationToken - Get deployment targets with names greater than this continuationToken lexicographically.\r\n     * @param {number} top - Maximum number of deployment targets to return. Default is **1000**.\r\n     * @param {boolean} enabled - Get only deployment targets that are enabled or disabled. Default is 'null' which returns all the targets.\r\n     * @param {string[]} propertyFilters\r\n     */\r\n    getDeploymentTargets(project, deploymentGroupId, tags, name, partialNameMatch, expand, agentStatus, agentJobResult, continuationToken, top, enabled, propertyFilters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId\r\n                };\r\n                let queryValues = {\r\n                    tags: tags && tags.join(\",\"),\r\n                    name: name,\r\n                    partialNameMatch: partialNameMatch,\r\n                    '$expand': expand,\r\n                    agentStatus: agentStatus,\r\n                    agentJobResult: agentJobResult,\r\n                    continuationToken: continuationToken,\r\n                    '$top': top,\r\n                    enabled: enabled,\r\n                    propertyFilters: propertyFilters && propertyFilters.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"2f0aa599-c121-4256-a5fd-ba370e0ae7b6\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Replace a deployment target in a deployment group. Generally this is called by agent configuration tool.\r\n     *\r\n     * @param {TaskAgentInterfaces.DeploymentMachine} machine - New deployment target.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId - ID of the deployment group in which deployment target is replaced.\r\n     * @param {number} targetId - ID of the deployment target to replace.\r\n     */\r\n    replaceDeploymentTarget(machine, project, deploymentGroupId, targetId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId,\r\n                    targetId: targetId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"2f0aa599-c121-4256-a5fd-ba370e0ae7b6\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, machine, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a deployment target and its agent properties in a deployment group. Generally this is called by agent configuration tool.\r\n     *\r\n     * @param {TaskAgentInterfaces.DeploymentMachine} machine - Deployment target to update.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId - ID of the deployment group in which deployment target is updated.\r\n     * @param {number} targetId - ID of the deployment target to update.\r\n     */\r\n    updateDeploymentTarget(machine, project, deploymentGroupId, targetId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId,\r\n                    targetId: targetId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"2f0aa599-c121-4256-a5fd-ba370e0ae7b6\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, machine, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update tags of a list of deployment targets in a deployment group.\r\n     *\r\n     * @param {TaskAgentInterfaces.DeploymentTargetUpdateParameter[]} machines - Deployment targets with tags to udpdate.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} deploymentGroupId - ID of the deployment group in which deployment targets are updated.\r\n     */\r\n    updateDeploymentTargets(machines, project, deploymentGroupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    deploymentGroupId: deploymentGroupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"2f0aa599-c121-4256-a5fd-ba370e0ae7b6\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, machines, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.DeploymentMachine, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a task group.\r\n     *\r\n     * @param {TaskAgentInterfaces.TaskGroupCreateParameter} taskGroup - Task group object to create.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    addTaskGroup(taskGroup, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"6c08ffbf-dbf1-4f9a-94e5-a1cbd47005e7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, taskGroup, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskGroup, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a task group.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} taskGroupId - Id of the task group to be deleted.\r\n     * @param {string} comment - Comments to delete.\r\n     */\r\n    deleteTaskGroup(project, taskGroupId, comment) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    taskGroupId: taskGroupId\r\n                };\r\n                let queryValues = {\r\n                    comment: comment,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"6c08ffbf-dbf1-4f9a-94e5-a1cbd47005e7\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get task group.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} taskGroupId - Id of the task group.\r\n     * @param {string} versionSpec - version specification of the task group. examples: 1, 1.0.\r\n     * @param {TaskAgentInterfaces.TaskGroupExpands} expand - The properties that should be expanded. example $expand=Tasks will expand nested task groups.\r\n     */\r\n    getTaskGroup(project, taskGroupId, versionSpec, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (versionSpec == null) {\r\n                throw new TypeError('versionSpec can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    taskGroupId: taskGroupId\r\n                };\r\n                let queryValues = {\r\n                    versionSpec: versionSpec,\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"6c08ffbf-dbf1-4f9a-94e5-a1cbd47005e7\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskGroup, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} taskGroupId\r\n     * @param {number} revision\r\n     */\r\n    getTaskGroupRevision(project, taskGroupId, revision) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (revision == null) {\r\n                throw new TypeError('revision can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    taskGroupId: taskGroupId\r\n                };\r\n                let queryValues = {\r\n                    revision: revision,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"6c08ffbf-dbf1-4f9a-94e5-a1cbd47005e7\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/plain\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * List task groups.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} taskGroupId - Id of the task group.\r\n     * @param {boolean} expanded - 'true' to recursively expand task groups. Default is 'false'.\r\n     * @param {string} taskIdFilter - Guid of the taskId to filter.\r\n     * @param {boolean} deleted - 'true'to include deleted task groups. Default is 'false'.\r\n     * @param {number} top - Number of task groups to get.\r\n     * @param {Date} continuationToken - Gets the task groups after the continuation token provided.\r\n     * @param {TaskAgentInterfaces.TaskGroupQueryOrder} queryOrder - Gets the results in the defined order. Default is 'CreatedOnDescending'.\r\n     */\r\n    getTaskGroups(project, taskGroupId, expanded, taskIdFilter, deleted, top, continuationToken, queryOrder) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    taskGroupId: taskGroupId\r\n                };\r\n                let queryValues = {\r\n                    expanded: expanded,\r\n                    taskIdFilter: taskIdFilter,\r\n                    deleted: deleted,\r\n                    '$top': top,\r\n                    continuationToken: continuationToken,\r\n                    queryOrder: queryOrder,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"6c08ffbf-dbf1-4f9a-94e5-a1cbd47005e7\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskGroup, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.PublishTaskGroupMetadata} taskGroupMetadata\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} parentTaskGroupId\r\n     */\r\n    publishTaskGroup(taskGroupMetadata, project, parentTaskGroupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (parentTaskGroupId == null) {\r\n                throw new TypeError('parentTaskGroupId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    parentTaskGroupId: parentTaskGroupId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"6c08ffbf-dbf1-4f9a-94e5-a1cbd47005e7\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, taskGroupMetadata, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskGroup, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.TaskGroup} taskGroup\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    undeleteTaskGroup(taskGroup, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"6c08ffbf-dbf1-4f9a-94e5-a1cbd47005e7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, taskGroup, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskGroup, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a task group.\r\n     *\r\n     * @param {TaskAgentInterfaces.TaskGroupUpdateParameter} taskGroup - Task group to update.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} taskGroupId - Id of the task group to update.\r\n     */\r\n    updateTaskGroup(taskGroup, project, taskGroupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    taskGroupId: taskGroupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"6c08ffbf-dbf1-4f9a-94e5-a1cbd47005e7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, taskGroup, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskGroup, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.TaskGroupUpdatePropertiesBase} taskGroupUpdateProperties\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} taskGroupId\r\n     * @param {boolean} disablePriorVersions\r\n     */\r\n    updateTaskGroupProperties(taskGroupUpdateProperties, project, taskGroupId, disablePriorVersions) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    taskGroupId: taskGroupId\r\n                };\r\n                let queryValues = {\r\n                    disablePriorVersions: disablePriorVersions,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"6c08ffbf-dbf1-4f9a-94e5-a1cbd47005e7\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, taskGroupUpdateProperties, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskGroup, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} taskId\r\n     */\r\n    deleteTaskDefinition(taskId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    taskId: taskId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} taskId\r\n     * @param {string} versionString\r\n     * @param {string[]} visibility\r\n     * @param {boolean} scopeLocal\r\n     */\r\n    getTaskContentZip(taskId, versionString, visibility, scopeLocal) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    taskId: taskId,\r\n                    versionString: versionString\r\n                };\r\n                let queryValues = {\r\n                    visibility: visibility,\r\n                    scopeLocal: scopeLocal,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} taskId\r\n     * @param {string} versionString\r\n     * @param {string[]} visibility\r\n     * @param {boolean} scopeLocal\r\n     */\r\n    getTaskDefinition(taskId, versionString, visibility, scopeLocal) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    taskId: taskId,\r\n                    versionString: versionString\r\n                };\r\n                let queryValues = {\r\n                    visibility: visibility,\r\n                    scopeLocal: scopeLocal,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskDefinition, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} taskId\r\n     * @param {string[]} visibility\r\n     * @param {boolean} scopeLocal\r\n     * @param {boolean} allVersions\r\n     */\r\n    getTaskDefinitions(taskId, visibility, scopeLocal, allVersions) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    taskId: taskId\r\n                };\r\n                let queryValues = {\r\n                    visibility: visibility,\r\n                    scopeLocal: scopeLocal,\r\n                    allVersions: allVersions,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskDefinition, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {number} poolId\r\n     * @param {number} agentId\r\n     * @param {string} currentState\r\n     */\r\n    updateAgentUpdateState(poolId, agentId, currentState) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (currentState == null) {\r\n                throw new TypeError('currentState can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId,\r\n                    agentId: agentId\r\n                };\r\n                let queryValues = {\r\n                    currentState: currentState,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"8cc1b02b-ae49-4516-b5ad-4f9b29967c30\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, null, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgent, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {{ [key: string] : string; }} userCapabilities\r\n     * @param {number} poolId\r\n     * @param {number} agentId\r\n     */\r\n    updateAgentUserCapabilities(userCapabilities, poolId, agentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    poolId: poolId,\r\n                    agentId: agentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"30ba3ada-fedf-4da8-bbb5-dacf2f82e176\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, userCapabilities, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgent, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Add a variable group.\r\n     *\r\n     * @param {TaskAgentInterfaces.VariableGroupParameters} variableGroupParameters\r\n     */\r\n    addVariableGroup(variableGroupParameters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"distributedtask\", \"ef5b7057-ffc3-4c77-bbad-c10b4a4abcc7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, variableGroupParameters, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.VariableGroup, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a variable group\r\n     *\r\n     * @param {number} groupId - Id of the variable group.\r\n     * @param {string[]} projectIds\r\n     */\r\n    deleteVariableGroup(groupId, projectIds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (projectIds == null) {\r\n                throw new TypeError('projectIds can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    groupId: groupId\r\n                };\r\n                let queryValues = {\r\n                    projectIds: projectIds && projectIds.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"distributedtask\", \"ef5b7057-ffc3-4c77-bbad-c10b4a4abcc7\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Add a variable group.\r\n     *\r\n     * @param {TaskAgentInterfaces.VariableGroupProjectReference[]} variableGroupProjectReferences\r\n     * @param {number} variableGroupId\r\n     */\r\n    shareVariableGroup(variableGroupProjectReferences, variableGroupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (variableGroupId == null) {\r\n                throw new TypeError('variableGroupId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    variableGroupId: variableGroupId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"distributedtask\", \"ef5b7057-ffc3-4c77-bbad-c10b4a4abcc7\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, variableGroupProjectReferences, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a variable group.\r\n     *\r\n     * @param {TaskAgentInterfaces.VariableGroupParameters} variableGroupParameters\r\n     * @param {number} groupId - Id of the variable group to update.\r\n     */\r\n    updateVariableGroup(variableGroupParameters, groupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    groupId: groupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"distributedtask\", \"ef5b7057-ffc3-4c77-bbad-c10b4a4abcc7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, variableGroupParameters, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.VariableGroup, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a variable group.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} groupId - Id of the variable group.\r\n     */\r\n    getVariableGroup(project, groupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    groupId: groupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"distributedtask\", \"f5b09dd5-9d54-45a1-8b5a-1c8287d634cc\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.VariableGroup, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get variable groups.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} groupName - Name of variable group.\r\n     * @param {TaskAgentInterfaces.VariableGroupActionFilter} actionFilter - Action filter for the variable group. It specifies the action which can be performed on the variable groups.\r\n     * @param {number} top - Number of variable groups to get.\r\n     * @param {number} continuationToken - Gets the variable groups after the continuation token provided.\r\n     * @param {TaskAgentInterfaces.VariableGroupQueryOrder} queryOrder - Gets the results in the defined order. Default is 'IdDescending'.\r\n     */\r\n    getVariableGroups(project, groupName, actionFilter, top, continuationToken, queryOrder) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    groupName: groupName,\r\n                    actionFilter: actionFilter,\r\n                    '$top': top,\r\n                    continuationToken: continuationToken,\r\n                    queryOrder: queryOrder,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"distributedtask\", \"f5b09dd5-9d54-45a1-8b5a-1c8287d634cc\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.VariableGroup, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get variable groups by ids.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number[]} groupIds - Comma separated list of Ids of variable groups.\r\n     */\r\n    getVariableGroupsById(project, groupIds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (groupIds == null) {\r\n                throw new TypeError('groupIds can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    groupIds: groupIds && groupIds.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"distributedtask\", \"f5b09dd5-9d54-45a1-8b5a-1c8287d634cc\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.VariableGroup, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.VirtualMachineGroupCreateParameters} createParameters\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} environmentId\r\n     */\r\n    addVirtualMachineGroup(createParameters, project, environmentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    environmentId: environmentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"9e597901-4af7-4cc3-8d92-47d54db8ebfb\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, createParameters, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.VirtualMachineGroup, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} environmentId\r\n     * @param {number} resourceId\r\n     */\r\n    deleteVirtualMachineGroup(project, environmentId, resourceId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    environmentId: environmentId,\r\n                    resourceId: resourceId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"9e597901-4af7-4cc3-8d92-47d54db8ebfb\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} environmentId\r\n     * @param {number} resourceId\r\n     */\r\n    getVirtualMachineGroup(project, environmentId, resourceId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    environmentId: environmentId,\r\n                    resourceId: resourceId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"9e597901-4af7-4cc3-8d92-47d54db8ebfb\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.VirtualMachineGroup, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.VirtualMachineGroup} resource\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} environmentId\r\n     */\r\n    updateVirtualMachineGroup(resource, project, environmentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    environmentId: environmentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"9e597901-4af7-4cc3-8d92-47d54db8ebfb\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, resource, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.VirtualMachineGroup, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} environmentId\r\n     * @param {number} resourceId\r\n     * @param {string} continuationToken\r\n     * @param {string} name\r\n     * @param {boolean} partialNameMatch\r\n     * @param {string[]} tags\r\n     * @param {number} top\r\n     */\r\n    getVirtualMachines(project, environmentId, resourceId, continuationToken, name, partialNameMatch, tags, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    environmentId: environmentId,\r\n                    resourceId: resourceId\r\n                };\r\n                let queryValues = {\r\n                    continuationToken: continuationToken,\r\n                    name: name,\r\n                    partialNameMatch: partialNameMatch,\r\n                    tags: tags && tags.join(\",\"),\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"48700676-2ba5-4282-8ec8-083280d169c7\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.VirtualMachine, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.VirtualMachine[]} machines\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} environmentId\r\n     * @param {number} resourceId\r\n     */\r\n    updateVirtualMachines(machines, project, environmentId, resourceId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    environmentId: environmentId,\r\n                    resourceId: resourceId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"48700676-2ba5-4282-8ec8-083280d169c7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, machines, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.VirtualMachine, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} tenantId\r\n     * @param {string} redirectUri\r\n     * @param {TaskAgentInterfaces.AadLoginPromptOption} promptOption\r\n     * @param {string} completeCallbackPayload\r\n     * @param {boolean} completeCallbackByAuthCode\r\n     */\r\n    createAadOAuthRequest(tenantId, redirectUri, promptOption, completeCallbackPayload, completeCallbackByAuthCode) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (tenantId == null) {\r\n                throw new TypeError('tenantId can not be null or undefined');\r\n            }\r\n            if (redirectUri == null) {\r\n                throw new TypeError('redirectUri can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    tenantId: tenantId,\r\n                    redirectUri: redirectUri,\r\n                    promptOption: promptOption,\r\n                    completeCallbackPayload: completeCallbackPayload,\r\n                    completeCallbackByAuthCode: completeCallbackByAuthCode,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"9c63205e-3a0f-42a0-ad88-095200f13607\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     */\r\n    getVstsAadTenantId() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"9c63205e-3a0f-42a0-ad88-095200f13607\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * GET the Yaml schema used for Yaml file validation.\r\n     *\r\n     * @param {boolean} validateTaskNames - Whether the schema should validate that tasks are actually installed (useful for offline tools where you don't want validation).\r\n     */\r\n    getYamlSchema(validateTaskNames) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    validateTaskNames: validateTaskNames,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"1f9990b9-1dba-441f-9c2e-6485888c42b6\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nTaskAgentApiBase.RESOURCE_AREA_ID = \"a85b8835-c1a1-4aac-ae97-1c3d0ba72dbd\";\r\nexports.TaskAgentApiBase = TaskAgentApiBase;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst TaskAgentInterfaces = require(\"./interfaces/TaskAgentInterfaces\");\r\nclass TaskApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-Task-api', options);\r\n    }\r\n    /**\r\n     * @param {string} scopeIdentifier - The project GUID to scope the request\r\n     * @param {string} hubName - The name of the server hub. Common examples: \"build\", \"rm\", \"checks\"\r\n     * @param {string} planId\r\n     * @param {string} type\r\n     */\r\n    getPlanAttachments(scopeIdentifier, hubName, planId, type) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeIdentifier: scopeIdentifier,\r\n                    hubName: hubName,\r\n                    planId: planId,\r\n                    type: type\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"eb55e5d6-2f30-4295-b5ed-38da50b1fc52\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAttachment, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {NodeJS.ReadableStream} contentStream - Content to upload\r\n     * @param {string} scopeIdentifier - The project GUID to scope the request\r\n     * @param {string} hubName - The name of the server hub. Common examples: \"build\", \"rm\", \"checks\"\r\n     * @param {string} planId\r\n     * @param {string} timelineId\r\n     * @param {string} recordId\r\n     * @param {string} type\r\n     * @param {string} name\r\n     */\r\n    createAttachment(customHeaders, contentStream, scopeIdentifier, hubName, planId, timelineId, recordId, type, name) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeIdentifier: scopeIdentifier,\r\n                    hubName: hubName,\r\n                    planId: planId,\r\n                    timelineId: timelineId,\r\n                    recordId: recordId,\r\n                    type: type,\r\n                    name: name\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"7898f959-9cdf-4096-b29e-7f293031629e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"PUT\", url, contentStream, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAttachment, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} scopeIdentifier - The project GUID to scope the request\r\n     * @param {string} hubName - The name of the server hub. Common examples: \"build\", \"rm\", \"checks\"\r\n     * @param {string} planId\r\n     * @param {string} timelineId\r\n     * @param {string} recordId\r\n     * @param {string} type\r\n     * @param {string} name\r\n     * @param {string} artifactHash\r\n     * @param {number} length\r\n     */\r\n    createAttachmentFromArtifact(scopeIdentifier, hubName, planId, timelineId, recordId, type, name, artifactHash, length) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (artifactHash == null) {\r\n                throw new TypeError('artifactHash can not be null or undefined');\r\n            }\r\n            if (length == null) {\r\n                throw new TypeError('length can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeIdentifier: scopeIdentifier,\r\n                    hubName: hubName,\r\n                    planId: planId,\r\n                    timelineId: timelineId,\r\n                    recordId: recordId,\r\n                    type: type,\r\n                    name: name\r\n                };\r\n                let queryValues = {\r\n                    artifactHash: artifactHash,\r\n                    length: length,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"7898f959-9cdf-4096-b29e-7f293031629e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, null, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAttachment, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} scopeIdentifier - The project GUID to scope the request\r\n     * @param {string} hubName - The name of the server hub. Common examples: \"build\", \"rm\", \"checks\"\r\n     * @param {string} planId\r\n     * @param {string} timelineId\r\n     * @param {string} recordId\r\n     * @param {string} type\r\n     * @param {string} name\r\n     */\r\n    getAttachment(scopeIdentifier, hubName, planId, timelineId, recordId, type, name) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeIdentifier: scopeIdentifier,\r\n                    hubName: hubName,\r\n                    planId: planId,\r\n                    timelineId: timelineId,\r\n                    recordId: recordId,\r\n                    type: type,\r\n                    name: name\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"7898f959-9cdf-4096-b29e-7f293031629e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAttachment, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} scopeIdentifier - The project GUID to scope the request\r\n     * @param {string} hubName - The name of the server hub. Common examples: \"build\", \"rm\", \"checks\"\r\n     * @param {string} planId\r\n     * @param {string} timelineId\r\n     * @param {string} recordId\r\n     * @param {string} type\r\n     * @param {string} name\r\n     */\r\n    getAttachmentContent(scopeIdentifier, hubName, planId, timelineId, recordId, type, name) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeIdentifier: scopeIdentifier,\r\n                    hubName: hubName,\r\n                    planId: planId,\r\n                    timelineId: timelineId,\r\n                    recordId: recordId,\r\n                    type: type,\r\n                    name: name\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"7898f959-9cdf-4096-b29e-7f293031629e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} scopeIdentifier - The project GUID to scope the request\r\n     * @param {string} hubName - The name of the server hub. Common examples: \"build\", \"rm\", \"checks\"\r\n     * @param {string} planId\r\n     * @param {string} timelineId\r\n     * @param {string} recordId\r\n     * @param {string} type\r\n     */\r\n    getAttachments(scopeIdentifier, hubName, planId, timelineId, recordId, type) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeIdentifier: scopeIdentifier,\r\n                    hubName: hubName,\r\n                    planId: planId,\r\n                    timelineId: timelineId,\r\n                    recordId: recordId,\r\n                    type: type\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"7898f959-9cdf-4096-b29e-7f293031629e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAttachment, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Append content to timeline record feed.\r\n     *\r\n     * @param {TaskAgentInterfaces.TimelineRecordFeedLinesWrapper} lines - Content to be appended to the timeline record feed.\r\n     * @param {string} scopeIdentifier - The project GUID to scope the request\r\n     * @param {string} hubName - The name of the server hub. Common examples: \"build\", \"rm\", \"checks\"\r\n     * @param {string} planId - ID of the plan.\r\n     * @param {string} timelineId - ID of the task's timeline.\r\n     * @param {string} recordId - ID of the timeline record.\r\n     */\r\n    appendTimelineRecordFeed(lines, scopeIdentifier, hubName, planId, timelineId, recordId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeIdentifier: scopeIdentifier,\r\n                    hubName: hubName,\r\n                    planId: planId,\r\n                    timelineId: timelineId,\r\n                    recordId: recordId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"858983e4-19bd-4c5e-864c-507b59b58b12\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, lines, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} scopeIdentifier - The project GUID to scope the request\r\n     * @param {string} hubName - The name of the server hub. Common examples: \"build\", \"rm\", \"checks\"\r\n     * @param {string} planId\r\n     * @param {string} timelineId\r\n     * @param {string} recordId\r\n     * @param {string} stepId\r\n     * @param {number} endLine\r\n     * @param {number} takeCount\r\n     * @param {string} continuationToken\r\n     */\r\n    getLines(scopeIdentifier, hubName, planId, timelineId, recordId, stepId, endLine, takeCount, continuationToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (stepId == null) {\r\n                throw new TypeError('stepId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeIdentifier: scopeIdentifier,\r\n                    hubName: hubName,\r\n                    planId: planId,\r\n                    timelineId: timelineId,\r\n                    recordId: recordId\r\n                };\r\n                let queryValues = {\r\n                    stepId: stepId,\r\n                    endLine: endLine,\r\n                    takeCount: takeCount,\r\n                    continuationToken: continuationToken,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"858983e4-19bd-4c5e-864c-507b59b58b12\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} scopeIdentifier - The project GUID to scope the request\r\n     * @param {string} hubName - The name of the server hub. Common examples: \"build\", \"rm\", \"checks\"\r\n     * @param {string} orchestrationId\r\n     */\r\n    getJobInstance(scopeIdentifier, hubName, orchestrationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeIdentifier: scopeIdentifier,\r\n                    hubName: hubName,\r\n                    orchestrationId: orchestrationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"0a1efd25-abda-43bd-9629-6c7bdd2e0d60\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskAgentJob, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Append a log to a task's log. The log should be sent in the body of the request as a TaskLog object stream.\r\n     *\r\n     * @param {NodeJS.ReadableStream} contentStream - Content to upload\r\n     * @param {string} scopeIdentifier - The project GUID to scope the request\r\n     * @param {string} hubName - The name of the server hub. Common examples: \"build\", \"rm\", \"checks\"\r\n     * @param {string} planId - The ID of the plan.\r\n     * @param {number} logId - The ID of the log.\r\n     */\r\n    appendLogContent(customHeaders, contentStream, scopeIdentifier, hubName, planId, logId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeIdentifier: scopeIdentifier,\r\n                    hubName: hubName,\r\n                    planId: planId,\r\n                    logId: logId\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"46f5667d-263a-4684-91b1-dff7fdcf64e2\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"POST\", url, contentStream, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskLog, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} scopeIdentifier - The project GUID to scope the request\r\n     * @param {string} hubName - The name of the server hub. Common examples: \"build\", \"rm\", \"checks\"\r\n     * @param {string} planId\r\n     * @param {number} logId\r\n     * @param {string} serializedBlobId\r\n     * @param {number} lineCount\r\n     */\r\n    associateLog(scopeIdentifier, hubName, planId, logId, serializedBlobId, lineCount) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (serializedBlobId == null) {\r\n                throw new TypeError('serializedBlobId can not be null or undefined');\r\n            }\r\n            if (lineCount == null) {\r\n                throw new TypeError('lineCount can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeIdentifier: scopeIdentifier,\r\n                    hubName: hubName,\r\n                    planId: planId,\r\n                    logId: logId\r\n                };\r\n                let queryValues = {\r\n                    serializedBlobId: serializedBlobId,\r\n                    lineCount: lineCount,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"46f5667d-263a-4684-91b1-dff7fdcf64e2\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskLog, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a log and connect it to a pipeline run's execution plan.\r\n     *\r\n     * @param {TaskAgentInterfaces.TaskLog} log - An object that contains information about log's path.\r\n     * @param {string} scopeIdentifier - The project GUID to scope the request\r\n     * @param {string} hubName - The name of the server hub. Common examples: \"build\", \"rm\", \"checks\"\r\n     * @param {string} planId - The ID of the plan.\r\n     */\r\n    createLog(log, scopeIdentifier, hubName, planId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeIdentifier: scopeIdentifier,\r\n                    hubName: hubName,\r\n                    planId: planId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"46f5667d-263a-4684-91b1-dff7fdcf64e2\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, log, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskLog, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} scopeIdentifier - The project GUID to scope the request\r\n     * @param {string} hubName - The name of the server hub. Common examples: \"build\", \"rm\", \"checks\"\r\n     * @param {string} planId\r\n     * @param {number} logId\r\n     * @param {number} startLine\r\n     * @param {number} endLine\r\n     */\r\n    getLog(scopeIdentifier, hubName, planId, logId, startLine, endLine) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeIdentifier: scopeIdentifier,\r\n                    hubName: hubName,\r\n                    planId: planId,\r\n                    logId: logId\r\n                };\r\n                let queryValues = {\r\n                    startLine: startLine,\r\n                    endLine: endLine,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"46f5667d-263a-4684-91b1-dff7fdcf64e2\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} scopeIdentifier - The project GUID to scope the request\r\n     * @param {string} hubName - The name of the server hub. Common examples: \"build\", \"rm\", \"checks\"\r\n     * @param {string} planId\r\n     */\r\n    getLogs(scopeIdentifier, hubName, planId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeIdentifier: scopeIdentifier,\r\n                    hubName: hubName,\r\n                    planId: planId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"46f5667d-263a-4684-91b1-dff7fdcf64e2\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskLog, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} scopeIdentifier - The project GUID to scope the request\r\n     * @param {string} hubName - The name of the server hub. Common examples: \"build\", \"rm\", \"checks\"\r\n     */\r\n    getPlanGroupsQueueMetrics(scopeIdentifier, hubName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeIdentifier: scopeIdentifier,\r\n                    hubName: hubName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"038fd4d5-cda7-44ca-92c0-935843fee1a7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskOrchestrationPlanGroupsQueueMetrics, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {{ [key: string] : string; }} claims\r\n     * @param {string} scopeIdentifier - The project GUID to scope the request\r\n     * @param {string} hubName - The name of the server hub. Common examples: \"build\", \"rm\", \"checks\"\r\n     * @param {string} planId\r\n     * @param {string} jobId\r\n     * @param {string} serviceConnectionId\r\n     */\r\n    createOidcToken(claims, scopeIdentifier, hubName, planId, jobId, serviceConnectionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeIdentifier: scopeIdentifier,\r\n                    hubName: hubName,\r\n                    planId: planId,\r\n                    jobId: jobId\r\n                };\r\n                let queryValues = {\r\n                    serviceConnectionId: serviceConnectionId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"69a319f4-28c1-4bfd-93e6-ea0ff5c6f1a2\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, claims, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} scopeIdentifier - The project GUID to scope the request\r\n     * @param {string} hubName - The name of the server hub. Common examples: \"build\", \"rm\", \"checks\"\r\n     * @param {TaskAgentInterfaces.PlanGroupStatus} statusFilter\r\n     * @param {number} count\r\n     */\r\n    getQueuedPlanGroups(scopeIdentifier, hubName, statusFilter, count) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeIdentifier: scopeIdentifier,\r\n                    hubName: hubName\r\n                };\r\n                let queryValues = {\r\n                    statusFilter: statusFilter,\r\n                    count: count,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"0dd73091-3e36-4f43-b443-1b76dd426d84\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskOrchestrationQueuedPlanGroup, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} scopeIdentifier - The project GUID to scope the request\r\n     * @param {string} hubName - The name of the server hub. Common examples: \"build\", \"rm\", \"checks\"\r\n     * @param {string} planGroup\r\n     */\r\n    getQueuedPlanGroup(scopeIdentifier, hubName, planGroup) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeIdentifier: scopeIdentifier,\r\n                    hubName: hubName,\r\n                    planGroup: planGroup\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"65fd0708-bc1e-447b-a731-0587c5464e5b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskOrchestrationQueuedPlanGroup, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} scopeIdentifier - The project GUID to scope the request\r\n     * @param {string} hubName - The name of the server hub. Common examples: \"build\", \"rm\", \"checks\"\r\n     * @param {string} planId\r\n     */\r\n    getPlan(scopeIdentifier, hubName, planId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeIdentifier: scopeIdentifier,\r\n                    hubName: hubName,\r\n                    planId: planId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"distributedtask\", \"5cecd946-d704-471e-a45f-3b4064fcfaba\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TaskOrchestrationPlan, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} scopeIdentifier - The project GUID to scope the request\r\n     * @param {string} hubName - The name of the server hub. Common examples: \"build\", \"rm\", \"checks\"\r\n     * @param {string} planId\r\n     * @param {string} timelineId\r\n     * @param {number} changeId\r\n     */\r\n    getRecords(scopeIdentifier, hubName, planId, timelineId, changeId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeIdentifier: scopeIdentifier,\r\n                    hubName: hubName,\r\n                    planId: planId,\r\n                    timelineId: timelineId\r\n                };\r\n                let queryValues = {\r\n                    changeId: changeId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"8893bc5b-35b2-4be7-83cb-99e683551db4\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TimelineRecord, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update timeline records if they already exist, otherwise create new ones for the same timeline.\r\n     *\r\n     * @param {VSSInterfaces.VssJsonCollectionWrapperV<TaskAgentInterfaces.TimelineRecord[]>} records - The array of timeline records to be updated.\r\n     * @param {string} scopeIdentifier - The project GUID to scope the request\r\n     * @param {string} hubName - The name of the server hub. Common examples: \"build\", \"rm\", \"checks\"\r\n     * @param {string} planId - The ID of the plan.\r\n     * @param {string} timelineId - The ID of the timeline.\r\n     */\r\n    updateRecords(records, scopeIdentifier, hubName, planId, timelineId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeIdentifier: scopeIdentifier,\r\n                    hubName: hubName,\r\n                    planId: planId,\r\n                    timelineId: timelineId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"8893bc5b-35b2-4be7-83cb-99e683551db4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, records, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.TimelineRecord, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TaskAgentInterfaces.Timeline} timeline\r\n     * @param {string} scopeIdentifier - The project GUID to scope the request\r\n     * @param {string} hubName - The name of the server hub. Common examples: \"build\", \"rm\", \"checks\"\r\n     * @param {string} planId\r\n     */\r\n    createTimeline(timeline, scopeIdentifier, hubName, planId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeIdentifier: scopeIdentifier,\r\n                    hubName: hubName,\r\n                    planId: planId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"83597576-cc2c-453c-bea6-2882ae6a1653\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, timeline, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.Timeline, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} scopeIdentifier - The project GUID to scope the request\r\n     * @param {string} hubName - The name of the server hub. Common examples: \"build\", \"rm\", \"checks\"\r\n     * @param {string} planId\r\n     * @param {string} timelineId\r\n     */\r\n    deleteTimeline(scopeIdentifier, hubName, planId, timelineId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeIdentifier: scopeIdentifier,\r\n                    hubName: hubName,\r\n                    planId: planId,\r\n                    timelineId: timelineId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"83597576-cc2c-453c-bea6-2882ae6a1653\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} scopeIdentifier - The project GUID to scope the request\r\n     * @param {string} hubName - The name of the server hub. Common examples: \"build\", \"rm\", \"checks\"\r\n     * @param {string} planId\r\n     * @param {string} timelineId\r\n     * @param {number} changeId\r\n     * @param {boolean} includeRecords\r\n     */\r\n    getTimeline(scopeIdentifier, hubName, planId, timelineId, changeId, includeRecords) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeIdentifier: scopeIdentifier,\r\n                    hubName: hubName,\r\n                    planId: planId,\r\n                    timelineId: timelineId\r\n                };\r\n                let queryValues = {\r\n                    changeId: changeId,\r\n                    includeRecords: includeRecords,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"83597576-cc2c-453c-bea6-2882ae6a1653\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.Timeline, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} scopeIdentifier - The project GUID to scope the request\r\n     * @param {string} hubName - The name of the server hub. Common examples: \"build\", \"rm\", \"checks\"\r\n     * @param {string} planId\r\n     */\r\n    getTimelines(scopeIdentifier, hubName, planId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    scopeIdentifier: scopeIdentifier,\r\n                    hubName: hubName,\r\n                    planId: planId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"distributedtask\", \"83597576-cc2c-453c-bea6-2882ae6a1653\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TaskAgentInterfaces.TypeInfo.Timeline, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nexports.TaskApi = TaskApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst TestInterfaces = require(\"./interfaces/TestInterfaces\");\r\nclass TestApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-Test-api', options);\r\n    }\r\n    /**\r\n     * Attach a file to test step result\r\n     *\r\n     * @param {TestInterfaces.TestAttachmentRequestModel} attachmentRequestModel - Attachment details TestAttachmentRequestModel\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - ID of the test run that contains the result.\r\n     * @param {number} testCaseResultId - ID of the test result that contains the iteration\r\n     * @param {number} iterationId - ID of the test result iteration.\r\n     * @param {string} actionPath - Hex value of test result action path.\r\n     */\r\n    createTestIterationResultAttachment(attachmentRequestModel, project, runId, testCaseResultId, iterationId, actionPath) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (iterationId == null) {\r\n                throw new TypeError('iterationId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testCaseResultId: testCaseResultId\r\n                };\r\n                let queryValues = {\r\n                    iterationId: iterationId,\r\n                    actionPath: actionPath,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"2bffebe9-2f0f-4639-9af8-56129e9fed2d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, attachmentRequestModel, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Attach a file to a test result.\r\n     *\r\n     * @param {TestInterfaces.TestAttachmentRequestModel} attachmentRequestModel - Attachment details TestAttachmentRequestModel\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - ID of the test run that contains the result.\r\n     * @param {number} testCaseResultId - ID of the test result against which attachment has to be uploaded.\r\n     */\r\n    createTestResultAttachment(attachmentRequestModel, project, runId, testCaseResultId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testCaseResultId: testCaseResultId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"2bffebe9-2f0f-4639-9af8-56129e9fed2d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, attachmentRequestModel, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Attach a file to a test result\r\n     *\r\n     * @param {TestInterfaces.TestAttachmentRequestModel} attachmentRequestModel - Attachment Request Model.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - ID of the test run that contains the result.\r\n     * @param {number} testCaseResultId - ID of the test results that contains sub result.\r\n     * @param {number} testSubResultId - ID of the test sub results against which attachment has to be uploaded.\r\n     */\r\n    createTestSubResultAttachment(attachmentRequestModel, project, runId, testCaseResultId, testSubResultId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (testSubResultId == null) {\r\n                throw new TypeError('testSubResultId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testCaseResultId: testCaseResultId\r\n                };\r\n                let queryValues = {\r\n                    testSubResultId: testSubResultId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"2bffebe9-2f0f-4639-9af8-56129e9fed2d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, attachmentRequestModel, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Download a test result attachment by its ID.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - ID of the test run that contains the testCaseResultId.\r\n     * @param {number} testCaseResultId - ID of the test result whose attachment has to be downloaded.\r\n     * @param {number} attachmentId - ID of the test result attachment to be downloaded.\r\n     */\r\n    getTestResultAttachmentContent(project, runId, testCaseResultId, attachmentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testCaseResultId: testCaseResultId,\r\n                    attachmentId: attachmentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"2bffebe9-2f0f-4639-9af8-56129e9fed2d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get list of test result attachments reference.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - ID of the test run that contains the result.\r\n     * @param {number} testCaseResultId - ID of the test result.\r\n     */\r\n    getTestResultAttachments(project, runId, testCaseResultId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testCaseResultId: testCaseResultId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"2bffebe9-2f0f-4639-9af8-56129e9fed2d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestAttachment, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Download a test result attachment by its ID.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - ID of the test run that contains the testCaseResultId.\r\n     * @param {number} testCaseResultId - ID of the test result whose attachment has to be downloaded.\r\n     * @param {number} attachmentId - ID of the test result attachment to be downloaded.\r\n     */\r\n    getTestResultAttachmentZip(project, runId, testCaseResultId, attachmentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testCaseResultId: testCaseResultId,\r\n                    attachmentId: attachmentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"2bffebe9-2f0f-4639-9af8-56129e9fed2d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Download a test sub result attachment\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - ID of the test run that contains the result.\r\n     * @param {number} testCaseResultId - ID of the test results that contains sub result.\r\n     * @param {number} attachmentId - ID of the test result attachment to be downloaded\r\n     * @param {number} testSubResultId - ID of the test sub result whose attachment has to be downloaded\r\n     */\r\n    getTestSubResultAttachmentContent(project, runId, testCaseResultId, attachmentId, testSubResultId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (testSubResultId == null) {\r\n                throw new TypeError('testSubResultId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testCaseResultId: testCaseResultId,\r\n                    attachmentId: attachmentId\r\n                };\r\n                let queryValues = {\r\n                    testSubResultId: testSubResultId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"2bffebe9-2f0f-4639-9af8-56129e9fed2d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get list of test sub result attachments\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - ID of the test run that contains the result.\r\n     * @param {number} testCaseResultId - ID of the test results that contains sub result.\r\n     * @param {number} testSubResultId - ID of the test sub result whose attachment has to be downloaded\r\n     */\r\n    getTestSubResultAttachments(project, runId, testCaseResultId, testSubResultId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (testSubResultId == null) {\r\n                throw new TypeError('testSubResultId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testCaseResultId: testCaseResultId\r\n                };\r\n                let queryValues = {\r\n                    testSubResultId: testSubResultId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"2bffebe9-2f0f-4639-9af8-56129e9fed2d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestAttachment, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Download a test sub result attachment\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - ID of the test run that contains the result.\r\n     * @param {number} testCaseResultId - ID of the test results that contains sub result.\r\n     * @param {number} attachmentId - ID of the test result attachment to be downloaded\r\n     * @param {number} testSubResultId - ID of the test sub result whose attachment has to be downloaded\r\n     */\r\n    getTestSubResultAttachmentZip(project, runId, testCaseResultId, attachmentId, testSubResultId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (testSubResultId == null) {\r\n                throw new TypeError('testSubResultId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testCaseResultId: testCaseResultId,\r\n                    attachmentId: attachmentId\r\n                };\r\n                let queryValues = {\r\n                    testSubResultId: testSubResultId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"2bffebe9-2f0f-4639-9af8-56129e9fed2d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Attach a file to a test run.\r\n     *\r\n     * @param {TestInterfaces.TestAttachmentRequestModel} attachmentRequestModel - Attachment details TestAttachmentRequestModel\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - ID of the test run against which attachment has to be uploaded.\r\n     */\r\n    createTestRunAttachment(attachmentRequestModel, project, runId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"4f004af4-a507-489c-9b13-cb62060beb11\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, attachmentRequestModel, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Download a test run attachment by its ID.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - ID of the test run whose attachment has to be downloaded.\r\n     * @param {number} attachmentId - ID of the test run attachment to be downloaded.\r\n     */\r\n    getTestRunAttachmentContent(project, runId, attachmentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    attachmentId: attachmentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"4f004af4-a507-489c-9b13-cb62060beb11\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get list of test run attachments reference.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - ID of the test run.\r\n     */\r\n    getTestRunAttachments(project, runId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"4f004af4-a507-489c-9b13-cb62060beb11\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestAttachment, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Download a test run attachment by its ID.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - ID of the test run whose attachment has to be downloaded.\r\n     * @param {number} attachmentId - ID of the test run attachment to be downloaded.\r\n     */\r\n    getTestRunAttachmentZip(project, runId, attachmentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    attachmentId: attachmentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"4f004af4-a507-489c-9b13-cb62060beb11\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     * @param {number} testCaseResultId\r\n     */\r\n    getBugsLinkedToTestResult(project, runId, testCaseResultId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testCaseResultId: testCaseResultId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"6de20ca2-67de-4faf-97fa-38c5d585eb00\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get code coverage data for a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - ID of the build for which code coverage data needs to be fetched.\r\n     * @param {number} flags - Value of flags determine the level of code coverage details to be fetched. Flags are additive. Expected Values are 1 for Modules, 2 for Functions, 4 for BlockData.\r\n     */\r\n    getBuildCodeCoverage(project, buildId, flags) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (buildId == null) {\r\n                throw new TypeError('buildId can not be null or undefined');\r\n            }\r\n            if (flags == null) {\r\n                throw new TypeError('flags can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    buildId: buildId,\r\n                    flags: flags,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"77560e8a-4e8c-4d59-894e-a5f264c24444\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.BuildCoverage, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get Code Coverage Summary for Build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - ID of the build for which code coverage data needs to be fetched.\r\n     * @param {number} deltaBuildId - Delta Build id (optional)\r\n     */\r\n    getCodeCoverageSummary(project, buildId, deltaBuildId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (buildId == null) {\r\n                throw new TypeError('buildId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    buildId: buildId,\r\n                    deltaBuildId: deltaBuildId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"77560e8a-4e8c-4d59-894e-a5f264c24444\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.CodeCoverageSummary, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * http://(tfsserver):8080/tfs/DefaultCollection/_apis/test/CodeCoverage?buildId=10 Request: Json of code coverage summary\r\n     *\r\n     * @param {TestInterfaces.CodeCoverageData} coverageData\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId\r\n     */\r\n    updateCodeCoverageSummary(coverageData, project, buildId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (buildId == null) {\r\n                throw new TypeError('buildId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    buildId: buildId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"77560e8a-4e8c-4d59-894e-a5f264c24444\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, coverageData, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get code coverage data for a test run\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - ID of the test run for which code coverage data needs to be fetched.\r\n     * @param {number} flags - Value of flags determine the level of code coverage details to be fetched. Flags are additive. Expected Values are 1 for Modules, 2 for Functions, 4 for BlockData.\r\n     */\r\n    getTestRunCodeCoverage(project, runId, flags) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (flags == null) {\r\n                throw new TypeError('flags can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                let queryValues = {\r\n                    flags: flags,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"9629116f-3b89-4ed8-b358-d4694efda160\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TestInterfaces.CustomTestFieldDefinition[]} newFields\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    addCustomFields(newFields, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"8ce1923b-f4c7-4e22-b93b-f6284e525ec2\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, newFields, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.CustomTestFieldDefinition, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {TestInterfaces.CustomTestFieldScope} scopeFilter\r\n     */\r\n    queryCustomFields(project, scopeFilter) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (scopeFilter == null) {\r\n                throw new TypeError('scopeFilter can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    scopeFilter: scopeFilter,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"8ce1923b-f4c7-4e22-b93b-f6284e525ec2\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.CustomTestFieldDefinition, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TestInterfaces.ResultsFilter} filter\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    queryTestResultHistory(filter, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"234616f5-429c-4e7b-9192-affd76731dfd\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, filter, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestResultHistory, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get iteration for a result\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - ID of the test run that contains the result.\r\n     * @param {number} testCaseResultId - ID of the test result that contains the iterations.\r\n     * @param {number} iterationId - Id of the test results Iteration.\r\n     * @param {boolean} includeActionResults - Include result details for each action performed in the test iteration. ActionResults refer to outcome (pass/fail) of test steps that are executed as part of a running a manual test. Including the ActionResults flag gets the outcome of test steps in the actionResults section and test parameters in the parameters section for each test iteration.\r\n     */\r\n    getTestIteration(project, runId, testCaseResultId, iterationId, includeActionResults) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testCaseResultId: testCaseResultId,\r\n                    iterationId: iterationId\r\n                };\r\n                let queryValues = {\r\n                    includeActionResults: includeActionResults,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Test\", \"73eb9074-3446-4c44-8296-2f811950ff8d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestIterationDetailsModel, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get iterations for a result\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - ID of the test run that contains the result.\r\n     * @param {number} testCaseResultId - ID of the test result that contains the iterations.\r\n     * @param {boolean} includeActionResults - Include result details for each action performed in the test iteration. ActionResults refer to outcome (pass/fail) of test steps that are executed as part of a running a manual test. Including the ActionResults flag gets the outcome of test steps in the actionResults section and test parameters in the parameters section for each test iteration.\r\n     */\r\n    getTestIterations(project, runId, testCaseResultId, includeActionResults) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testCaseResultId: testCaseResultId\r\n                };\r\n                let queryValues = {\r\n                    includeActionResults: includeActionResults,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Test\", \"73eb9074-3446-4c44-8296-2f811950ff8d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestIterationDetailsModel, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TestInterfaces.LinkedWorkItemsQuery} workItemQuery\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getLinkedWorkItemsByQuery(workItemQuery, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"a4dcb25b-9878-49ea-abfd-e440bd9b1dcd\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, workItemQuery, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get test run message logs\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - ID of the run to get.\r\n     */\r\n    getTestRunLogs(project, runId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"a1e55200-637e-42e9-a7c0-7e5bfdedb1b3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestMessageLogDetails, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a test point.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} planId - ID of the test plan.\r\n     * @param {number} suiteId - ID of the suite that contains the point.\r\n     * @param {number} pointIds - ID of the test point to get.\r\n     * @param {string} witFields - Comma-separated list of work item field names.\r\n     */\r\n    getPoint(project, planId, suiteId, pointIds, witFields) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    planId: planId,\r\n                    suiteId: suiteId,\r\n                    pointIds: pointIds\r\n                };\r\n                let queryValues = {\r\n                    witFields: witFields,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Test\", \"3bcfd5c8-be62-488e-b1da-b8289ce9299c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestPoint, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of test points.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} planId - ID of the test plan.\r\n     * @param {number} suiteId - ID of the suite that contains the points.\r\n     * @param {string} witFields - Comma-separated list of work item field names.\r\n     * @param {string} configurationId - Get test points for specific configuration.\r\n     * @param {string} testCaseId - Get test points for a specific test case, valid when configurationId is not set.\r\n     * @param {string} testPointIds - Get test points for comma-separated list of test point IDs, valid only when configurationId and testCaseId are not set.\r\n     * @param {boolean} includePointDetails - Include all properties for the test point.\r\n     * @param {number} skip - Number of test points to skip..\r\n     * @param {number} top - Number of test points to return.\r\n     */\r\n    getPoints(project, planId, suiteId, witFields, configurationId, testCaseId, testPointIds, includePointDetails, skip, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    planId: planId,\r\n                    suiteId: suiteId\r\n                };\r\n                let queryValues = {\r\n                    witFields: witFields,\r\n                    configurationId: configurationId,\r\n                    testCaseId: testCaseId,\r\n                    testPointIds: testPointIds,\r\n                    includePointDetails: includePointDetails,\r\n                    '$skip': skip,\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Test\", \"3bcfd5c8-be62-488e-b1da-b8289ce9299c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestPoint, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update test points.\r\n     *\r\n     * @param {TestInterfaces.PointUpdateModel} pointUpdateModel - Data to update.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} planId - ID of the test plan.\r\n     * @param {number} suiteId - ID of the suite that contains the points.\r\n     * @param {string} pointIds - ID of the test point to get. Use a comma-separated list of IDs to update multiple test points.\r\n     */\r\n    updateTestPoints(pointUpdateModel, project, planId, suiteId, pointIds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    planId: planId,\r\n                    suiteId: suiteId,\r\n                    pointIds: pointIds\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Test\", \"3bcfd5c8-be62-488e-b1da-b8289ce9299c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, pointUpdateModel, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestPoint, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get test points using query.\r\n     *\r\n     * @param {TestInterfaces.TestPointsQuery} query - TestPointsQuery to get test points.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} skip - Number of test points to skip..\r\n     * @param {number} top - Number of test points to return.\r\n     */\r\n    getPointsByQuery(query, project, skip, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    '$skip': skip,\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Test\", \"b4264fd0-a5d1-43e2-82a5-b9c46b7da9ce\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, query, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestPointsQuery, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId\r\n     * @param {string} publishContext\r\n     * @param {string} groupBy\r\n     * @param {string} filter\r\n     * @param {string} orderby\r\n     * @param {boolean} shouldIncludeResults\r\n     * @param {boolean} queryRunSummaryForInProgress\r\n     */\r\n    getTestResultDetailsForBuild(project, buildId, publishContext, groupBy, filter, orderby, shouldIncludeResults, queryRunSummaryForInProgress) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (buildId == null) {\r\n                throw new TypeError('buildId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    buildId: buildId,\r\n                    publishContext: publishContext,\r\n                    groupBy: groupBy,\r\n                    '$filter': filter,\r\n                    '$orderby': orderby,\r\n                    shouldIncludeResults: shouldIncludeResults,\r\n                    queryRunSummaryForInProgress: queryRunSummaryForInProgress,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Test\", \"efb387b0-10d5-42e7-be40-95e06ee9430f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestResultsDetails, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     * @param {number} releaseEnvId\r\n     * @param {string} publishContext\r\n     * @param {string} groupBy\r\n     * @param {string} filter\r\n     * @param {string} orderby\r\n     * @param {boolean} shouldIncludeResults\r\n     * @param {boolean} queryRunSummaryForInProgress\r\n     */\r\n    getTestResultDetailsForRelease(project, releaseId, releaseEnvId, publishContext, groupBy, filter, orderby, shouldIncludeResults, queryRunSummaryForInProgress) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (releaseId == null) {\r\n                throw new TypeError('releaseId can not be null or undefined');\r\n            }\r\n            if (releaseEnvId == null) {\r\n                throw new TypeError('releaseEnvId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    releaseId: releaseId,\r\n                    releaseEnvId: releaseEnvId,\r\n                    publishContext: publishContext,\r\n                    groupBy: groupBy,\r\n                    '$filter': filter,\r\n                    '$orderby': orderby,\r\n                    shouldIncludeResults: shouldIncludeResults,\r\n                    queryRunSummaryForInProgress: queryRunSummaryForInProgress,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Test\", \"b834ec7e-35bb-450f-a3c8-802e70ca40dd\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestResultsDetails, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TestInterfaces.TestResultDocument} document\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     */\r\n    publishTestResultDocument(document, project, runId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"370ca04b-8eec-4ca8-8ba3-d24dca228791\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, document, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId\r\n     * @param {string} publishContext\r\n     * @param {string[]} fields\r\n     * @param {string} continuationToken\r\n     */\r\n    getResultGroupsByBuild(project, buildId, publishContext, fields, continuationToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (buildId == null) {\r\n                throw new TypeError('buildId can not be null or undefined');\r\n            }\r\n            if (publishContext == null) {\r\n                throw new TypeError('publishContext can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    buildId: buildId,\r\n                    publishContext: publishContext,\r\n                    fields: fields && fields.join(\",\"),\r\n                    continuationToken: continuationToken,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Test\", \"d279d052-c55a-4204-b913-42f733b52958\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     * @param {string} publishContext\r\n     * @param {number} releaseEnvId\r\n     * @param {string[]} fields\r\n     * @param {string} continuationToken\r\n     */\r\n    getResultGroupsByRelease(project, releaseId, publishContext, releaseEnvId, fields, continuationToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (releaseId == null) {\r\n                throw new TypeError('releaseId can not be null or undefined');\r\n            }\r\n            if (publishContext == null) {\r\n                throw new TypeError('publishContext can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    releaseId: releaseId,\r\n                    publishContext: publishContext,\r\n                    releaseEnvId: releaseEnvId,\r\n                    fields: fields && fields.join(\",\"),\r\n                    continuationToken: continuationToken,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Test\", \"ef5ce5d4-a4e5-47ee-804c-354518f8d03f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get list of test Result meta data details for corresponding testcasereferenceId\r\n     *\r\n     * @param {string[]} testReferenceIds - TestCaseReference Ids of the test Result to be queried, comma separated list of valid ids (limit no. of ids 200).\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    queryTestResultsMetaData(testReferenceIds, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Test\", \"afa7830e-67a7-4336-8090-2b448ca80295\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, testReferenceIds, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get test result retention settings\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getResultRetentionSettings(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"a3206d9e-fa8d-42d3-88cb-f75c51e69cde\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.ResultRetentionSettings, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update test result retention settings\r\n     *\r\n     * @param {TestInterfaces.ResultRetentionSettings} retentionSettings - Test result retention settings details to be updated\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateResultRetentionSettings(retentionSettings, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"a3206d9e-fa8d-42d3-88cb-f75c51e69cde\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, retentionSettings, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.ResultRetentionSettings, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Add test results to a test run.\r\n     *\r\n     * @param {TestInterfaces.TestCaseResult[]} results - List of test results to add.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - Test run ID into which test results to add.\r\n     */\r\n    addTestResultsToTestRun(results, project, runId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.6\", \"Test\", \"4637d869-3a76-4468-8057-0bb02aa385cf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, results, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestCaseResult, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a test result for a test run.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - Test run ID of a test result to fetch.\r\n     * @param {number} testCaseResultId - Test result ID.\r\n     * @param {TestInterfaces.ResultDetails} detailsToInclude - Details to include with test results. Default is None. Other values are Iterations, WorkItems and SubResults.\r\n     */\r\n    getTestResultById(project, runId, testCaseResultId, detailsToInclude) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testCaseResultId: testCaseResultId\r\n                };\r\n                let queryValues = {\r\n                    detailsToInclude: detailsToInclude,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.6\", \"Test\", \"4637d869-3a76-4468-8057-0bb02aa385cf\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestCaseResult, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get test results for a test run.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - Test run ID of test results to fetch.\r\n     * @param {TestInterfaces.ResultDetails} detailsToInclude - Details to include with test results. Default is None. Other values are Iterations and WorkItems.\r\n     * @param {number} skip - Number of test results to skip from beginning.\r\n     * @param {number} top - Number of test results to return. Maximum is 1000 when detailsToInclude is None and 200 otherwise.\r\n     * @param {TestInterfaces.TestOutcome[]} outcomes - Comma separated list of test outcomes to filter test results.\r\n     */\r\n    getTestResults(project, runId, detailsToInclude, skip, top, outcomes) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                let queryValues = {\r\n                    detailsToInclude: detailsToInclude,\r\n                    '$skip': skip,\r\n                    '$top': top,\r\n                    outcomes: outcomes && outcomes.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.6\", \"Test\", \"4637d869-3a76-4468-8057-0bb02aa385cf\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestCaseResult, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update test results in a test run.\r\n     *\r\n     * @param {TestInterfaces.TestCaseResult[]} results - List of test results to update.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - Test run ID whose test results to update.\r\n     */\r\n    updateTestResults(results, project, runId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.6\", \"Test\", \"4637d869-3a76-4468-8057-0bb02aa385cf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, results, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestCaseResult, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * This API will return results by Ids with fields specified/trend for particular automated test method. We are still improving this API and have not finalized proper signature and contract.\r\n     *\r\n     * @param {TestInterfaces.TestResultsQuery} query\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getTestResultsByQuery(query, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.6\", \"Test\", \"6711da49-8e6f-4d35-9f73-cef7a3c81a5b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, query, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestResultsQuery, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId\r\n     * @param {string} publishContext\r\n     * @param {TestInterfaces.TestOutcome[]} outcomes\r\n     * @param {number} top\r\n     * @param {string} continuationToken\r\n     */\r\n    getTestResultsByBuild(project, buildId, publishContext, outcomes, top, continuationToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (buildId == null) {\r\n                throw new TypeError('buildId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    buildId: buildId,\r\n                    publishContext: publishContext,\r\n                    outcomes: outcomes && outcomes.join(\",\"),\r\n                    '$top': top,\r\n                    continuationToken: continuationToken,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"3c191b88-615b-4be2-b7d9-5ff9141e91d4\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     * @param {number} releaseEnvid\r\n     * @param {string} publishContext\r\n     * @param {TestInterfaces.TestOutcome[]} outcomes\r\n     * @param {number} top\r\n     * @param {string} continuationToken\r\n     */\r\n    getTestResultsByRelease(project, releaseId, releaseEnvid, publishContext, outcomes, top, continuationToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (releaseId == null) {\r\n                throw new TypeError('releaseId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    releaseId: releaseId,\r\n                    releaseEnvid: releaseEnvid,\r\n                    publishContext: publishContext,\r\n                    outcomes: outcomes && outcomes.join(\",\"),\r\n                    '$top': top,\r\n                    continuationToken: continuationToken,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"ce01820b-83f3-4c15-a583-697a43292c4e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId\r\n     * @param {string} publishContext\r\n     * @param {boolean} includeFailureDetails\r\n     * @param {TestInterfaces.BuildReference} buildToCompare\r\n     */\r\n    queryTestResultsReportForBuild(project, buildId, publishContext, includeFailureDetails, buildToCompare) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (buildId == null) {\r\n                throw new TypeError('buildId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    buildId: buildId,\r\n                    publishContext: publishContext,\r\n                    includeFailureDetails: includeFailureDetails,\r\n                    buildToCompare: buildToCompare,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Test\", \"000ef77b-fea2-498d-a10d-ad1a037f559f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestResultSummary, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     * @param {number} releaseEnvId\r\n     * @param {string} publishContext\r\n     * @param {boolean} includeFailureDetails\r\n     * @param {TestInterfaces.ReleaseReference} releaseToCompare\r\n     */\r\n    queryTestResultsReportForRelease(project, releaseId, releaseEnvId, publishContext, includeFailureDetails, releaseToCompare) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (releaseId == null) {\r\n                throw new TypeError('releaseId can not be null or undefined');\r\n            }\r\n            if (releaseEnvId == null) {\r\n                throw new TypeError('releaseEnvId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    releaseId: releaseId,\r\n                    releaseEnvId: releaseEnvId,\r\n                    publishContext: publishContext,\r\n                    includeFailureDetails: includeFailureDetails,\r\n                    releaseToCompare: releaseToCompare,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Test\", \"85765790-ac68-494e-b268-af36c3929744\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestResultSummary, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TestInterfaces.ReleaseReference[]} releases\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    queryTestResultsSummaryForReleases(releases, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Test\", \"85765790-ac68-494e-b268-af36c3929744\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, releases, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestResultSummary, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TestInterfaces.TestResultsContext} resultsContext\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number[]} workItemIds\r\n     */\r\n    queryTestSummaryByRequirement(resultsContext, project, workItemIds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    workItemIds: workItemIds && workItemIds.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"cd08294e-308d-4460-a46e-4cfdefba0b4b\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, resultsContext, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestSummaryForWorkItem, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TestInterfaces.TestResultTrendFilter} filter\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    queryResultTrendForBuild(filter, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"fbc82a85-0786-4442-88bb-eb0fda6b01b0\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, filter, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.AggregatedDataForResultTrend, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TestInterfaces.TestResultTrendFilter} filter\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    queryResultTrendForRelease(filter, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"dd178e93-d8dd-4887-9635-d6b9560b7b6e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, filter, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.AggregatedDataForResultTrend, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get test run statistics , used when we want to get summary of a run by outcome.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - ID of the run to get.\r\n     */\r\n    getTestRunStatistics(project, runId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Test\", \"0a42c424-d764-4a16-a2d5-5c85f87d0ae8\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestRunStatistic, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create new test run.\r\n     *\r\n     * @param {TestInterfaces.RunCreateModel} testRun - Run details RunCreateModel\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createTestRun(testRun, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Test\", \"cadb3810-d47d-4a3c-a234-fe5f3be50138\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, testRun, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestRun, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a test run by its ID.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - ID of the run to delete.\r\n     */\r\n    deleteTestRun(project, runId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Test\", \"cadb3810-d47d-4a3c-a234-fe5f3be50138\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a test run by its ID.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - ID of the run to get.\r\n     * @param {boolean} includeDetails - Default value is true. It includes details like run statistics, release, build, test environment, post process state, and more.\r\n     */\r\n    getTestRunById(project, runId, includeDetails) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                let queryValues = {\r\n                    includeDetails: includeDetails,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Test\", \"cadb3810-d47d-4a3c-a234-fe5f3be50138\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestRun, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of test runs.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} buildUri - URI of the build that the runs used.\r\n     * @param {string} owner - Team foundation ID of the owner of the runs.\r\n     * @param {string} tmiRunId\r\n     * @param {number} planId - ID of the test plan that the runs are a part of.\r\n     * @param {boolean} includeRunDetails - If true, include all the properties of the runs.\r\n     * @param {boolean} automated - If true, only returns automated runs.\r\n     * @param {number} skip - Number of test runs to skip.\r\n     * @param {number} top - Number of test runs to return.\r\n     */\r\n    getTestRuns(project, buildUri, owner, tmiRunId, planId, includeRunDetails, automated, skip, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    buildUri: buildUri,\r\n                    owner: owner,\r\n                    tmiRunId: tmiRunId,\r\n                    planId: planId,\r\n                    includeRunDetails: includeRunDetails,\r\n                    automated: automated,\r\n                    '$skip': skip,\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Test\", \"cadb3810-d47d-4a3c-a234-fe5f3be50138\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestRun, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Query Test Runs based on filters. Mandatory fields are minLastUpdatedDate and maxLastUpdatedDate.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {Date} minLastUpdatedDate - Minimum Last Modified Date of run to be queried (Mandatory).\r\n     * @param {Date} maxLastUpdatedDate - Maximum Last Modified Date of run to be queried (Mandatory, difference between min and max date can be atmost 7 days).\r\n     * @param {TestInterfaces.TestRunState} state - Current state of the Runs to be queried.\r\n     * @param {number[]} planIds - Plan Ids of the Runs to be queried, comma separated list of valid ids (limit no. of ids 10).\r\n     * @param {boolean} isAutomated - Automation type of the Runs to be queried.\r\n     * @param {TestInterfaces.TestRunPublishContext} publishContext - PublishContext of the Runs to be queried.\r\n     * @param {number[]} buildIds - Build Ids of the Runs to be queried, comma separated list of valid ids (limit no. of ids 10).\r\n     * @param {number[]} buildDefIds - Build Definition Ids of the Runs to be queried, comma separated list of valid ids (limit no. of ids 10).\r\n     * @param {string} branchName - Source Branch name of the Runs to be queried.\r\n     * @param {number[]} releaseIds - Release Ids of the Runs to be queried, comma separated list of valid ids (limit no. of ids 10).\r\n     * @param {number[]} releaseDefIds - Release Definition Ids of the Runs to be queried, comma separated list of valid ids (limit no. of ids 10).\r\n     * @param {number[]} releaseEnvIds - Release Environment Ids of the Runs to be queried, comma separated list of valid ids (limit no. of ids 10).\r\n     * @param {number[]} releaseEnvDefIds - Release Environment Definition Ids of the Runs to be queried, comma separated list of valid ids (limit no. of ids 10).\r\n     * @param {string} runTitle - Run Title of the Runs to be queried.\r\n     * @param {number} top - Number of runs to be queried. Limit is 100\r\n     * @param {string} continuationToken - continuationToken received from previous batch or null for first batch. It is not supposed to be created (or altered, if received from last batch) by user.\r\n     */\r\n    queryTestRuns(project, minLastUpdatedDate, maxLastUpdatedDate, state, planIds, isAutomated, publishContext, buildIds, buildDefIds, branchName, releaseIds, releaseDefIds, releaseEnvIds, releaseEnvDefIds, runTitle, top, continuationToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (minLastUpdatedDate == null) {\r\n                throw new TypeError('minLastUpdatedDate can not be null or undefined');\r\n            }\r\n            if (maxLastUpdatedDate == null) {\r\n                throw new TypeError('maxLastUpdatedDate can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    minLastUpdatedDate: minLastUpdatedDate,\r\n                    maxLastUpdatedDate: maxLastUpdatedDate,\r\n                    state: state,\r\n                    planIds: planIds && planIds.join(\",\"),\r\n                    isAutomated: isAutomated,\r\n                    publishContext: publishContext,\r\n                    buildIds: buildIds && buildIds.join(\",\"),\r\n                    buildDefIds: buildDefIds && buildDefIds.join(\",\"),\r\n                    branchName: branchName,\r\n                    releaseIds: releaseIds && releaseIds.join(\",\"),\r\n                    releaseDefIds: releaseDefIds && releaseDefIds.join(\",\"),\r\n                    releaseEnvIds: releaseEnvIds && releaseEnvIds.join(\",\"),\r\n                    releaseEnvDefIds: releaseEnvDefIds && releaseEnvDefIds.join(\",\"),\r\n                    runTitle: runTitle,\r\n                    '$top': top,\r\n                    continuationToken: continuationToken,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Test\", \"cadb3810-d47d-4a3c-a234-fe5f3be50138\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestRun, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update test run by its ID.\r\n     *\r\n     * @param {TestInterfaces.RunUpdateModel} runUpdateModel - Run details RunUpdateModel\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - ID of the run to update.\r\n     */\r\n    updateTestRun(runUpdateModel, project, runId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Test\", \"cadb3810-d47d-4a3c-a234-fe5f3be50138\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, runUpdateModel, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestRun, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a test session\r\n     *\r\n     * @param {TestInterfaces.TestSession} testSession - Test session details for creation\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     */\r\n    createTestSession(testSession, teamContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"1500b4b4-6c69-4ca6-9b18-35e9e97fe2ac\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, testSession, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestSession, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of test sessions\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {number} period - Period in days from now, for which test sessions are fetched.\r\n     * @param {boolean} allSessions - If false, returns test sessions for current user. Otherwise, it returns test sessions for all users\r\n     * @param {boolean} includeAllProperties - If true, it returns all properties of the test sessions. Otherwise, it returns the skinny version.\r\n     * @param {TestInterfaces.TestSessionSource} source - Source of the test session.\r\n     * @param {boolean} includeOnlyCompletedSessions - If true, it returns test sessions in completed state. Otherwise, it returns test sessions for all states\r\n     */\r\n    getTestSessions(teamContext, period, allSessions, includeAllProperties, source, includeOnlyCompletedSessions) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                let queryValues = {\r\n                    period: period,\r\n                    allSessions: allSessions,\r\n                    includeAllProperties: includeAllProperties,\r\n                    source: source,\r\n                    includeOnlyCompletedSessions: includeOnlyCompletedSessions,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"1500b4b4-6c69-4ca6-9b18-35e9e97fe2ac\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestSession, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a test session\r\n     *\r\n     * @param {TestInterfaces.TestSession} testSession - Test session details for update\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     */\r\n    updateTestSession(testSession, teamContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"1500b4b4-6c69-4ca6-9b18-35e9e97fe2ac\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, testSession, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestSession, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} sharedParameterId\r\n     */\r\n    deleteSharedParameter(project, sharedParameterId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    sharedParameterId: sharedParameterId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"8300eeca-0f8c-4eff-a089-d2dda409c41f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} sharedStepId\r\n     */\r\n    deleteSharedStep(project, sharedStepId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    sharedStepId: sharedStepId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"fabb3cc9-e3f8-40b7-8b62-24cc4b73fccf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Add test cases to suite.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} planId - ID of the test plan that contains the suite.\r\n     * @param {number} suiteId - ID of the test suite to which the test cases must be added.\r\n     * @param {string} testCaseIds - IDs of the test cases to add to the suite. Ids are specified in comma separated format.\r\n     */\r\n    addTestCasesToSuite(project, planId, suiteId, testCaseIds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    action: \"TestCases\",\r\n                    project: project,\r\n                    planId: planId,\r\n                    suiteId: suiteId,\r\n                    testCaseIds: testCaseIds\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Test\", \"a4a1ec1c-b03f-41ca-8857-704594ecf58e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a specific test case in a test suite with test case id.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} planId - ID of the test plan that contains the suites.\r\n     * @param {number} suiteId - ID of the suite that contains the test case.\r\n     * @param {number} testCaseIds - ID of the test case to get.\r\n     */\r\n    getTestCaseById(project, planId, suiteId, testCaseIds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    action: \"TestCases\",\r\n                    project: project,\r\n                    planId: planId,\r\n                    suiteId: suiteId,\r\n                    testCaseIds: testCaseIds\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Test\", \"a4a1ec1c-b03f-41ca-8857-704594ecf58e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get all test cases in a suite.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} planId - ID of the test plan that contains the suites.\r\n     * @param {number} suiteId - ID of the suite to get.\r\n     */\r\n    getTestCases(project, planId, suiteId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    action: \"TestCases\",\r\n                    project: project,\r\n                    planId: planId,\r\n                    suiteId: suiteId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Test\", \"a4a1ec1c-b03f-41ca-8857-704594ecf58e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * The test points associated with the test cases are removed from the test suite. The test case work item is not deleted from the system. See test cases resource to delete a test case permanently.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} planId - ID of the test plan that contains the suite.\r\n     * @param {number} suiteId - ID of the suite to get.\r\n     * @param {string} testCaseIds - IDs of the test cases to remove from the suite.\r\n     */\r\n    removeTestCasesFromSuiteUrl(project, planId, suiteId, testCaseIds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    action: \"TestCases\",\r\n                    project: project,\r\n                    planId: planId,\r\n                    suiteId: suiteId,\r\n                    testCaseIds: testCaseIds\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Test\", \"a4a1ec1c-b03f-41ca-8857-704594ecf58e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates the properties of the test case association in a suite.\r\n     *\r\n     * @param {TestInterfaces.SuiteTestCaseUpdateModel} suiteTestCaseUpdateModel - Model for updation of the properties of test case suite association.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} planId - ID of the test plan that contains the suite.\r\n     * @param {number} suiteId - ID of the test suite to which the test cases must be added.\r\n     * @param {string} testCaseIds - IDs of the test cases to add to the suite. Ids are specified in comma separated format.\r\n     */\r\n    updateSuiteTestCases(suiteTestCaseUpdateModel, project, planId, suiteId, testCaseIds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    action: \"TestCases\",\r\n                    project: project,\r\n                    planId: planId,\r\n                    suiteId: suiteId,\r\n                    testCaseIds: testCaseIds\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"Test\", \"a4a1ec1c-b03f-41ca-8857-704594ecf58e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, suiteTestCaseUpdateModel, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a test case.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} testCaseId - Id of test case to delete.\r\n     */\r\n    deleteTestCase(project, testCaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    testCaseId: testCaseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"4d472e0f-e32c-4ef8-adf4-a4078772889c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get history of a test method using TestHistoryQuery\r\n     *\r\n     * @param {TestInterfaces.TestHistoryQuery} filter - TestHistoryQuery to get history\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    queryTestHistory(filter, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"Test\", \"929fd86c-3e38-4d8c-b4b6-90df256e5971\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, filter, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.TestHistoryQuery, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TestInterfaces.TestSettings} testSettings\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createTestSettings(testSettings, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"8133ce14-962f-42af-a5f9-6aa9defcb9c8\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, testSettings, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} testSettingsId\r\n     */\r\n    deleteTestSettings(project, testSettingsId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    testSettingsId: testSettingsId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"8133ce14-962f-42af-a5f9-6aa9defcb9c8\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} testSettingsId\r\n     */\r\n    getTestSettingsById(project, testSettingsId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    testSettingsId: testSettingsId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"8133ce14-962f-42af-a5f9-6aa9defcb9c8\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TestInterfaces.WorkItemToTestLinks} workItemToTestLinks\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    addWorkItemToTestLinks(workItemToTestLinks, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"371b1655-ce05-412e-a113-64cc77bb78d2\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, workItemToTestLinks, options);\r\n                    let ret = this.formatResponse(res.result, TestInterfaces.TypeInfo.WorkItemToTestLinks, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} testName\r\n     * @param {number} workItemId\r\n     */\r\n    deleteTestMethodToWorkItemLink(project, testName, workItemId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (testName == null) {\r\n                throw new TypeError('testName can not be null or undefined');\r\n            }\r\n            if (workItemId == null) {\r\n                throw new TypeError('workItemId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    testName: testName,\r\n                    workItemId: workItemId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"7b0bdee3-a354-47f9-a42c-89018d7808d5\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} testName\r\n     */\r\n    queryTestMethodLinkedWorkItems(project, testName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (testName == null) {\r\n                throw new TypeError('testName can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    testName: testName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"7b0bdee3-a354-47f9-a42c-89018d7808d5\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} workItemCategory\r\n     * @param {string} automatedTestName\r\n     * @param {number} testCaseId\r\n     * @param {Date} maxCompleteDate\r\n     * @param {number} days\r\n     * @param {number} workItemCount\r\n     */\r\n    queryTestResultWorkItems(project, workItemCategory, automatedTestName, testCaseId, maxCompleteDate, days, workItemCount) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (workItemCategory == null) {\r\n                throw new TypeError('workItemCategory can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    workItemCategory: workItemCategory,\r\n                    automatedTestName: automatedTestName,\r\n                    testCaseId: testCaseId,\r\n                    maxCompleteDate: maxCompleteDate,\r\n                    days: days,\r\n                    '$workItemCount': workItemCount,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"Test\", \"926ff5dc-137f-45f0-bd51-9412fa9810ce\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nTestApi.RESOURCE_AREA_ID = \"c2aa639c-3ccc-4740-b3b6-ce2a1e1d984e\";\r\nexports.TestApi = TestApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst TestPlanInterfaces = require(\"./interfaces/TestPlanInterfaces\");\r\nclass TestPlanApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-TestPlan-api', options);\r\n    }\r\n    /**\r\n     * Create a test configuration.\r\n     *\r\n     * @param {TestPlanInterfaces.TestConfigurationCreateUpdateParameters} testConfigurationCreateUpdateParameters - TestConfigurationCreateUpdateParameters\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createTestConfiguration(testConfigurationCreateUpdateParameters, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testplan\", \"8369318e-38fa-4e84-9043-4b2a75d2c256\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, testConfigurationCreateUpdateParameters, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.TestConfiguration, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a test configuration by its ID.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} testConfiguartionId - ID of the test configuration to delete.\r\n     */\r\n    deleteTestConfguration(project, testConfiguartionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (testConfiguartionId == null) {\r\n                throw new TypeError('testConfiguartionId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    testConfiguartionId: testConfiguartionId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testplan\", \"8369318e-38fa-4e84-9043-4b2a75d2c256\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a test configuration\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} testConfigurationId - ID of the test configuration to get.\r\n     */\r\n    getTestConfigurationById(project, testConfigurationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    testConfigurationId: testConfigurationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testplan\", \"8369318e-38fa-4e84-9043-4b2a75d2c256\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.TestConfiguration, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of test configurations.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} continuationToken - If the list of configurations returned is not complete, a continuation token to query next batch of configurations is included in the response header as \"x-ms-continuationtoken\". Omit this parameter to get the first batch of test configurations.\r\n     */\r\n    getTestConfigurations(project, continuationToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    continuationToken: continuationToken,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testplan\", \"8369318e-38fa-4e84-9043-4b2a75d2c256\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.TestConfiguration, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a test configuration by its ID.\r\n     *\r\n     * @param {TestPlanInterfaces.TestConfigurationCreateUpdateParameters} testConfigurationCreateUpdateParameters - TestConfigurationCreateUpdateParameters\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} testConfiguartionId - ID of the test configuration to update.\r\n     */\r\n    updateTestConfiguration(testConfigurationCreateUpdateParameters, project, testConfiguartionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (testConfiguartionId == null) {\r\n                throw new TypeError('testConfiguartionId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    testConfiguartionId: testConfiguartionId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testplan\", \"8369318e-38fa-4e84-9043-4b2a75d2c256\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, testConfigurationCreateUpdateParameters, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.TestConfiguration, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} planId\r\n     * @param {string} states\r\n     * @param {TestPlanInterfaces.UserFriendlyTestOutcome} outcome\r\n     * @param {string} configurations\r\n     * @param {string} testers\r\n     * @param {string} assignedTo\r\n     * @param {TestPlanInterfaces.TestEntityTypes} entity\r\n     */\r\n    getTestEntityCountByPlanId(project, planId, states, outcome, configurations, testers, assignedTo, entity) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    planId: planId\r\n                };\r\n                let queryValues = {\r\n                    states: states,\r\n                    outcome: outcome,\r\n                    configurations: configurations,\r\n                    testers: testers,\r\n                    assignedTo: assignedTo,\r\n                    entity: entity,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testplan\", \"300578da-7b40-4c1e-9542-7aed6029e504\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a test plan.\r\n     *\r\n     * @param {TestPlanInterfaces.TestPlanCreateParams} testPlanCreateParams - A testPlanCreateParams object.TestPlanCreateParams\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createTestPlan(testPlanCreateParams, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testplan\", \"0e292477-a0c2-47f3-a9b6-34f153d627f4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, testPlanCreateParams, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.TestPlan, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a test plan.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} planId - ID of the test plan to be deleted.\r\n     */\r\n    deleteTestPlan(project, planId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    planId: planId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testplan\", \"0e292477-a0c2-47f3-a9b6-34f153d627f4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a test plan by Id.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} planId - ID of the test plan to get.\r\n     */\r\n    getTestPlanById(project, planId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    planId: planId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testplan\", \"0e292477-a0c2-47f3-a9b6-34f153d627f4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.TestPlan, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of test plans\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} owner - Filter for test plan by owner ID or name\r\n     * @param {string} continuationToken - If the list of plans returned is not complete, a continuation token to query next batch of plans is included in the response header as \"x-ms-continuationtoken\". Omit this parameter to get the first batch of test plans.\r\n     * @param {boolean} includePlanDetails - Get all properties of the test plan\r\n     * @param {boolean} filterActivePlans - Get just the active plans\r\n     */\r\n    getTestPlans(project, owner, continuationToken, includePlanDetails, filterActivePlans) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    owner: owner,\r\n                    continuationToken: continuationToken,\r\n                    includePlanDetails: includePlanDetails,\r\n                    filterActivePlans: filterActivePlans,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testplan\", \"0e292477-a0c2-47f3-a9b6-34f153d627f4\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.TestPlan, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a test plan.\r\n     *\r\n     * @param {TestPlanInterfaces.TestPlanUpdateParams} testPlanUpdateParams - A testPlanUpdateParams object.TestPlanUpdateParams\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} planId - ID of the test plan to be updated.\r\n     */\r\n    updateTestPlan(testPlanUpdateParams, project, planId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    planId: planId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testplan\", \"0e292477-a0c2-47f3-a9b6-34f153d627f4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, testPlanUpdateParams, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.TestPlan, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of test suite entries in the test suite.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} suiteId - Id of the parent suite.\r\n     * @param {TestPlanInterfaces.SuiteEntryTypes} suiteEntryType\r\n     */\r\n    getSuiteEntries(project, suiteId, suiteEntryType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    suiteId: suiteId\r\n                };\r\n                let queryValues = {\r\n                    suiteEntryType: suiteEntryType,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testplan\", \"d6733edf-72f1-4252-925b-c560dfe9b75a\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.SuiteEntry, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Reorder test suite entries in the test suite.\r\n     *\r\n     * @param {TestPlanInterfaces.SuiteEntryUpdateParams[]} suiteEntries - List of SuiteEntry to reorder.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} suiteId - Id of the parent test suite.\r\n     */\r\n    reorderSuiteEntries(suiteEntries, project, suiteId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    suiteId: suiteId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testplan\", \"d6733edf-72f1-4252-925b-c560dfe9b75a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, suiteEntries, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.SuiteEntry, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create bulk requirement based test suites.\r\n     *\r\n     * @param {TestPlanInterfaces.TestSuiteCreateParams[]} testSuiteCreateParams - Parameters for suite creation\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} planId - ID of the test plan where requirement based suites need to be created.\r\n     * @param {number} parentSuiteId - ID of the parent suite under which requirement based suites will be created\r\n     */\r\n    createBulkTestSuites(testSuiteCreateParams, project, planId, parentSuiteId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    planId: planId,\r\n                    parentSuiteId: parentSuiteId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testplan\", \"1e58fbe6-1761-43ce-97f6-5492ec9d438e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, testSuiteCreateParams, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.TestSuite, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create test suite.\r\n     *\r\n     * @param {TestPlanInterfaces.TestSuiteCreateParams} testSuiteCreateParams - Parameters for suite creation\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} planId - ID of the test plan that contains the suites.\r\n     */\r\n    createTestSuite(testSuiteCreateParams, project, planId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    planId: planId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testplan\", \"1046d5d3-ab61-4ca7-a65a-36118a978256\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, testSuiteCreateParams, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.TestSuite, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete test suite.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} planId - ID of the test plan that contains the suite.\r\n     * @param {number} suiteId - ID of the test suite to delete.\r\n     */\r\n    deleteTestSuite(project, planId, suiteId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    planId: planId,\r\n                    suiteId: suiteId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testplan\", \"1046d5d3-ab61-4ca7-a65a-36118a978256\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get test suite by suite id.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} planId - ID of the test plan that contains the suites.\r\n     * @param {number} suiteId - ID of the suite to get.\r\n     * @param {TestPlanInterfaces.SuiteExpand} expand - Include the children suites and testers details\r\n     */\r\n    getTestSuiteById(project, planId, suiteId, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    planId: planId,\r\n                    suiteId: suiteId\r\n                };\r\n                let queryValues = {\r\n                    expand: expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testplan\", \"1046d5d3-ab61-4ca7-a65a-36118a978256\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.TestSuite, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get test suites for plan.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} planId - ID of the test plan for which suites are requested.\r\n     * @param {TestPlanInterfaces.SuiteExpand} expand - Include the children suites and testers details.\r\n     * @param {string} continuationToken - If the list of suites returned is not complete, a continuation token to query next batch of suites is included in the response header as \"x-ms-continuationtoken\". Omit this parameter to get the first batch of test suites.\r\n     * @param {boolean} asTreeView - If the suites returned should be in a tree structure.\r\n     */\r\n    getTestSuitesForPlan(project, planId, expand, continuationToken, asTreeView) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    planId: planId\r\n                };\r\n                let queryValues = {\r\n                    expand: expand,\r\n                    continuationToken: continuationToken,\r\n                    asTreeView: asTreeView,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testplan\", \"1046d5d3-ab61-4ca7-a65a-36118a978256\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.TestSuite, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update test suite.\r\n     *\r\n     * @param {TestPlanInterfaces.TestSuiteUpdateParams} testSuiteUpdateParams - Parameters for suite updation\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} planId - ID of the test plan that contains the suites.\r\n     * @param {number} suiteId - ID of the parent suite.\r\n     */\r\n    updateTestSuite(testSuiteUpdateParams, project, planId, suiteId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    planId: planId,\r\n                    suiteId: suiteId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testplan\", \"1046d5d3-ab61-4ca7-a65a-36118a978256\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, testSuiteUpdateParams, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.TestSuite, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Find the list of all test suites in which a given test case is present. This is helpful if you need to find out which test suites are using a test case, when you need to make changes to a test case.\r\n     *\r\n     * @param {number} testCaseId - ID of the test case for which suites need to be fetched.\r\n     */\r\n    getSuitesByTestCaseId(testCaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (testCaseId == null) {\r\n                throw new TypeError('testCaseId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    testCaseId: testCaseId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testplan\", \"a4080e84-f17b-4fad-84f1-7960b6525bf2\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.TestSuite, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Add test cases to a suite with specified configurations\r\n     *\r\n     * @param {TestPlanInterfaces.SuiteTestCaseCreateUpdateParameters[]} suiteTestCaseCreateUpdateParameters - SuiteTestCaseCreateUpdateParameters object.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} planId - ID of the test plan to which test cases are to be added.\r\n     * @param {number} suiteId - ID of the test suite to which test cases are to be added.\r\n     */\r\n    addTestCasesToSuite(suiteTestCaseCreateUpdateParameters, project, planId, suiteId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    planId: planId,\r\n                    suiteId: suiteId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"testplan\", \"a9bd61ac-45cf-4d13-9441-43dcd01edf8d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, suiteTestCaseCreateUpdateParameters, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.TestCase, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a particular Test Case from a Suite.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} planId - ID of the test plan for which test cases are requested.\r\n     * @param {number} suiteId - ID of the test suite for which test cases are requested.\r\n     * @param {string} testCaseId - Test Case Id to be fetched.\r\n     * @param {string} witFields - Get the list of witFields.\r\n     * @param {boolean} returnIdentityRef - If set to true, returns all identity fields, like AssignedTo, ActivatedBy etc., as IdentityRef objects. If set to false, these fields are returned as unique names in string format. This is false by default.\r\n     */\r\n    getTestCase(project, planId, suiteId, testCaseId, witFields, returnIdentityRef) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    planId: planId,\r\n                    suiteId: suiteId,\r\n                    testCaseId: testCaseId\r\n                };\r\n                let queryValues = {\r\n                    witFields: witFields,\r\n                    returnIdentityRef: returnIdentityRef,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"testplan\", \"a9bd61ac-45cf-4d13-9441-43dcd01edf8d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.TestCase, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get Test Case List return those test cases which have all the configuration Ids as mentioned in the optional parameter. If configuration Ids is null, it return all the test cases\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} planId - ID of the test plan for which test cases are requested.\r\n     * @param {number} suiteId - ID of the test suite for which test cases are requested.\r\n     * @param {string} testIds - Test Case Ids to be fetched.\r\n     * @param {string} configurationIds - Fetch Test Cases which contains all the configuration Ids specified.\r\n     * @param {string} witFields - Get the list of witFields.\r\n     * @param {string} continuationToken - If the list of test cases returned is not complete, a continuation token to query next batch of test cases is included in the response header as \"x-ms-continuationtoken\". Omit this parameter to get the first batch of test cases.\r\n     * @param {boolean} returnIdentityRef - If set to true, returns all identity fields, like AssignedTo, ActivatedBy etc., as IdentityRef objects. If set to false, these fields are returned as unique names in string format. This is false by default.\r\n     * @param {boolean} expand - If set to false, will get a smaller payload containing only basic details about the suite test case object\r\n     * @param {TestPlanInterfaces.ExcludeFlags} excludeFlags - Flag to exclude various values from payload. For example to remove point assignments pass exclude = 1. To remove extra information (links, test plan , test suite) pass exclude = 2. To remove both extra information and point assignments pass exclude = 3 (1 + 2).\r\n     * @param {boolean} isRecursive\r\n     */\r\n    getTestCaseList(project, planId, suiteId, testIds, configurationIds, witFields, continuationToken, returnIdentityRef, expand, excludeFlags, isRecursive) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    planId: planId,\r\n                    suiteId: suiteId\r\n                };\r\n                let queryValues = {\r\n                    testIds: testIds,\r\n                    configurationIds: configurationIds,\r\n                    witFields: witFields,\r\n                    continuationToken: continuationToken,\r\n                    returnIdentityRef: returnIdentityRef,\r\n                    expand: expand,\r\n                    excludeFlags: excludeFlags,\r\n                    isRecursive: isRecursive,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"testplan\", \"a9bd61ac-45cf-4d13-9441-43dcd01edf8d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.TestCase, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes test cases from a suite based on the list of test case Ids provided.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} planId - ID of the test plan from which test cases are to be removed.\r\n     * @param {number} suiteId - ID of the test suite from which test cases are to be removed.\r\n     * @param {string} testCaseIds - Test Case Ids to be removed.\r\n     */\r\n    removeTestCasesFromSuite(project, planId, suiteId, testCaseIds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (testCaseIds == null) {\r\n                throw new TypeError('testCaseIds can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    planId: planId,\r\n                    suiteId: suiteId\r\n                };\r\n                let queryValues = {\r\n                    testCaseIds: testCaseIds,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"testplan\", \"a9bd61ac-45cf-4d13-9441-43dcd01edf8d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes test cases from a suite based on the list of test case Ids provided. This API can be used to remove a larger number of test cases.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} planId - ID of the test plan from which test cases are to be removed.\r\n     * @param {number} suiteId - ID of the test suite from which test cases are to be removed.\r\n     * @param {string} testIds - Comma separated string of Test Case Ids to be removed.\r\n     */\r\n    removeTestCasesListFromSuite(project, planId, suiteId, testIds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (testIds == null) {\r\n                throw new TypeError('testIds can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    planId: planId,\r\n                    suiteId: suiteId\r\n                };\r\n                let queryValues = {\r\n                    testIds: testIds,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"testplan\", \"a9bd61ac-45cf-4d13-9441-43dcd01edf8d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update the configurations for test cases\r\n     *\r\n     * @param {TestPlanInterfaces.SuiteTestCaseCreateUpdateParameters[]} suiteTestCaseCreateUpdateParameters - A SuiteTestCaseCreateUpdateParameters object.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} planId - ID of the test plan to which test cases are to be updated.\r\n     * @param {number} suiteId - ID of the test suite to which test cases are to be updated.\r\n     */\r\n    updateSuiteTestCases(suiteTestCaseCreateUpdateParameters, project, planId, suiteId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    planId: planId,\r\n                    suiteId: suiteId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"testplan\", \"a9bd61ac-45cf-4d13-9441-43dcd01edf8d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, suiteTestCaseCreateUpdateParameters, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.TestCase, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TestPlanInterfaces.CloneTestCaseParams} cloneRequestBody\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    cloneTestCase(cloneRequestBody, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"testplan\", \"529b2b8d-82f4-4893-b1e4-1e74ea534673\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, cloneRequestBody, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.CloneTestCaseOperationInformation, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get clone information.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} cloneOperationId - Operation ID returned when we queue a clone operation\r\n     */\r\n    getTestCaseCloneInformation(project, cloneOperationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    cloneOperationId: cloneOperationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"testplan\", \"529b2b8d-82f4-4893-b1e4-1e74ea534673\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.CloneTestCaseOperationInformation, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Exports a set of test cases from a suite to a file. Currently supported  formats: xlsx\r\n     *\r\n     * @param {TestPlanInterfaces.ExportTestCaseParams} exportTestCaseRequestBody - A ExportTestCaseParams object.ExportTestCaseParams\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    exportTestCases(exportTestCaseRequestBody, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testplan\", \"3b9d1c87-6b1a-4e7d-9e7d-1a8e543112bb\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a test case.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} testCaseId - Id of test case to be deleted.\r\n     */\r\n    deleteTestCase(project, testCaseId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    testCaseId: testCaseId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testplan\", \"29006fb5-816b-4ff7-a329-599943569229\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Clone test plan\r\n     *\r\n     * @param {TestPlanInterfaces.CloneTestPlanParams} cloneRequestBody - Plan Clone Request Body detail TestPlanCloneRequest\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} deepClone - Clones all the associated test cases as well\r\n     */\r\n    cloneTestPlan(cloneRequestBody, project, deepClone) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    deepClone: deepClone,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"testplan\", \"e65df662-d8a3-46c7-ae1c-14e2d4df57e1\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, cloneRequestBody, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.CloneTestPlanOperationInformation, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get clone information.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} cloneOperationId - Operation ID returned when we queue a clone operation\r\n     */\r\n    getCloneInformation(project, cloneOperationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    cloneOperationId: cloneOperationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"testplan\", \"e65df662-d8a3-46c7-ae1c-14e2d4df57e1\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.CloneTestPlanOperationInformation, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a particular Test Point from a suite.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} planId - ID of the test plan for which test points are requested.\r\n     * @param {number} suiteId - ID of the test suite for which test points are requested.\r\n     * @param {string} pointId - ID of test point to be fetched.\r\n     * @param {boolean} returnIdentityRef - If set to true, returns the AssignedTo field in TestCaseReference as IdentityRef object.\r\n     * @param {boolean} includePointDetails - If set to false, will get a smaller payload containing only basic details about the test point object\r\n     */\r\n    getPoints(project, planId, suiteId, pointId, returnIdentityRef, includePointDetails) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (pointId == null) {\r\n                throw new TypeError('pointId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    planId: planId,\r\n                    suiteId: suiteId\r\n                };\r\n                let queryValues = {\r\n                    pointId: pointId,\r\n                    returnIdentityRef: returnIdentityRef,\r\n                    includePointDetails: includePointDetails,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"testplan\", \"52df686e-bae4-4334-b0ee-b6cf4e6f6b73\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.TestPoint, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get all the points inside a suite based on some filters\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} planId - ID of the test plan for which test points are requested.\r\n     * @param {number} suiteId - ID of the test suite for which test points are requested\r\n     * @param {string} testPointIds - ID of test points to fetch.\r\n     * @param {string} testCaseId - Get Test Points for specific test case Ids.\r\n     * @param {string} continuationToken - If the list of test point returned is not complete, a continuation token to query next batch of test points is included in the response header as \"x-ms-continuationtoken\". Omit this parameter to get the first batch of test points.\r\n     * @param {boolean} returnIdentityRef - If set to true, returns the AssignedTo field in TestCaseReference as IdentityRef object.\r\n     * @param {boolean} includePointDetails - If set to false, will get a smaller payload containing only basic details about the test point object\r\n     * @param {boolean} isRecursive - If set to true, will also fetch test points belonging to child suites recursively.\r\n     */\r\n    getPointsList(project, planId, suiteId, testPointIds, testCaseId, continuationToken, returnIdentityRef, includePointDetails, isRecursive) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    planId: planId,\r\n                    suiteId: suiteId\r\n                };\r\n                let queryValues = {\r\n                    testPointIds: testPointIds,\r\n                    testCaseId: testCaseId,\r\n                    continuationToken: continuationToken,\r\n                    returnIdentityRef: returnIdentityRef,\r\n                    includePointDetails: includePointDetails,\r\n                    isRecursive: isRecursive,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"testplan\", \"52df686e-bae4-4334-b0ee-b6cf4e6f6b73\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.TestPoint, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update Test Points. This is used to Reset test point to active, update the outcome of a test point or update the tester of a test point\r\n     *\r\n     * @param {TestPlanInterfaces.TestPointUpdateParams[]} testPointUpdateParams - A TestPointUpdateParams Object.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} planId - ID of the test plan for which test points are requested.\r\n     * @param {number} suiteId - ID of the test suite for which test points are requested.\r\n     * @param {boolean} includePointDetails - If set to false, will get a smaller payload containing only basic details about the test point object\r\n     * @param {boolean} returnIdentityRef - If set to true, returns the AssignedTo field in TestCaseReference as IdentityRef object.\r\n     */\r\n    updateTestPoints(testPointUpdateParams, project, planId, suiteId, includePointDetails, returnIdentityRef) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    planId: planId,\r\n                    suiteId: suiteId\r\n                };\r\n                let queryValues = {\r\n                    includePointDetails: includePointDetails,\r\n                    returnIdentityRef: returnIdentityRef,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"testplan\", \"52df686e-bae4-4334-b0ee-b6cf4e6f6b73\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, testPointUpdateParams, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.TestPoint, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Clone test suite\r\n     *\r\n     * @param {TestPlanInterfaces.CloneTestSuiteParams} cloneRequestBody - Suite Clone Request Body detail TestSuiteCloneRequest\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} deepClone - Clones all the associated test cases as well\r\n     */\r\n    cloneTestSuite(cloneRequestBody, project, deepClone) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    deepClone: deepClone,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"testplan\", \"181d4c97-0e98-4ee2-ad6a-4cada675e555\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, cloneRequestBody, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.CloneTestSuiteOperationInformation, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get clone information.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} cloneOperationId - Operation ID returned when we queue a clone operation\r\n     */\r\n    getSuiteCloneInformation(project, cloneOperationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    cloneOperationId: cloneOperationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"testplan\", \"181d4c97-0e98-4ee2-ad6a-4cada675e555\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.CloneTestSuiteOperationInformation, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a test variable.\r\n     *\r\n     * @param {TestPlanInterfaces.TestVariableCreateUpdateParameters} testVariableCreateUpdateParameters - TestVariableCreateUpdateParameters\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createTestVariable(testVariableCreateUpdateParameters, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testplan\", \"2c61fac6-ac4e-45a5-8c38-1c2b8fd8ea6c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, testVariableCreateUpdateParameters, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.TestVariable, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a test variable by its ID.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} testVariableId - ID of the test variable to delete.\r\n     */\r\n    deleteTestVariable(project, testVariableId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    testVariableId: testVariableId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testplan\", \"2c61fac6-ac4e-45a5-8c38-1c2b8fd8ea6c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a test variable by its ID.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} testVariableId - ID of the test variable to get.\r\n     */\r\n    getTestVariableById(project, testVariableId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    testVariableId: testVariableId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testplan\", \"2c61fac6-ac4e-45a5-8c38-1c2b8fd8ea6c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.TestVariable, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of test variables.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} continuationToken - If the list of variables returned is not complete, a continuation token to query next batch of variables is included in the response header as \"x-ms-continuationtoken\". Omit this parameter to get the first batch of test variables.\r\n     */\r\n    getTestVariables(project, continuationToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    continuationToken: continuationToken,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testplan\", \"2c61fac6-ac4e-45a5-8c38-1c2b8fd8ea6c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.TestVariable, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a test variable by its ID.\r\n     *\r\n     * @param {TestPlanInterfaces.TestVariableCreateUpdateParameters} testVariableCreateUpdateParameters - TestVariableCreateUpdateParameters\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} testVariableId - ID of the test variable to update.\r\n     */\r\n    updateTestVariable(testVariableCreateUpdateParameters, project, testVariableId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    testVariableId: testVariableId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testplan\", \"2c61fac6-ac4e-45a5-8c38-1c2b8fd8ea6c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, testVariableCreateUpdateParameters, options);\r\n                    let ret = this.formatResponse(res.result, TestPlanInterfaces.TypeInfo.TestVariable, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nexports.TestPlanApi = TestPlanApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst Contracts = require(\"./interfaces/TestInterfaces\");\r\nclass TestResultsApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-testResults-api', options);\r\n    }\r\n    /**\r\n     * @param {Contracts.TestAttachmentRequestModel} attachmentRequestModel\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     * @param {number} testCaseResultId\r\n     * @param {number} iterationId\r\n     * @param {string} actionPath\r\n     */\r\n    createTestIterationResultAttachment(attachmentRequestModel, project, runId, testCaseResultId, iterationId, actionPath) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (iterationId == null) {\r\n                throw new TypeError('iterationId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testCaseResultId: testCaseResultId\r\n                };\r\n                let queryValues = {\r\n                    iterationId: iterationId,\r\n                    actionPath: actionPath,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"2a632e97-e014-4275-978f-8e5c4906d4b3\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, attachmentRequestModel, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {Contracts.TestAttachmentRequestModel} attachmentRequestModel\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     * @param {number} testCaseResultId\r\n     */\r\n    createTestResultAttachment(attachmentRequestModel, project, runId, testCaseResultId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testCaseResultId: testCaseResultId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"2a632e97-e014-4275-978f-8e5c4906d4b3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, attachmentRequestModel, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {Contracts.TestAttachmentRequestModel} attachmentRequestModel\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     * @param {number} testCaseResultId\r\n     * @param {number} testSubResultId\r\n     */\r\n    createTestSubResultAttachment(attachmentRequestModel, project, runId, testCaseResultId, testSubResultId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (testSubResultId == null) {\r\n                throw new TypeError('testSubResultId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testCaseResultId: testCaseResultId\r\n                };\r\n                let queryValues = {\r\n                    testSubResultId: testSubResultId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"2a632e97-e014-4275-978f-8e5c4906d4b3\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, attachmentRequestModel, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     * @param {number} testCaseResultId\r\n     * @param {number} attachmentId\r\n     */\r\n    deleteTestResultAttachment(project, runId, testCaseResultId, attachmentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testCaseResultId: testCaseResultId,\r\n                    attachmentId: attachmentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"2a632e97-e014-4275-978f-8e5c4906d4b3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a test iteration attachment\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     * @param {number} testCaseResultId\r\n     * @param {number} attachmentId\r\n     * @param {number} iterationId\r\n     */\r\n    getTestIterationAttachmentContent(project, runId, testCaseResultId, attachmentId, iterationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (iterationId == null) {\r\n                throw new TypeError('iterationId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testCaseResultId: testCaseResultId,\r\n                    attachmentId: attachmentId\r\n                };\r\n                let queryValues = {\r\n                    iterationId: iterationId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"2a632e97-e014-4275-978f-8e5c4906d4b3\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a test iteration attachment\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     * @param {number} testCaseResultId\r\n     * @param {number} attachmentId\r\n     * @param {number} iterationId\r\n     */\r\n    getTestIterationAttachmentZip(project, runId, testCaseResultId, attachmentId, iterationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (iterationId == null) {\r\n                throw new TypeError('iterationId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testCaseResultId: testCaseResultId,\r\n                    attachmentId: attachmentId\r\n                };\r\n                let queryValues = {\r\n                    iterationId: iterationId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"2a632e97-e014-4275-978f-8e5c4906d4b3\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a test result attachment\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     * @param {number} testCaseResultId\r\n     * @param {number} attachmentId\r\n     */\r\n    getTestResultAttachmentContent(project, runId, testCaseResultId, attachmentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testCaseResultId: testCaseResultId,\r\n                    attachmentId: attachmentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"2a632e97-e014-4275-978f-8e5c4906d4b3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     * @param {number} testCaseResultId\r\n     */\r\n    getTestResultAttachments(project, runId, testCaseResultId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testCaseResultId: testCaseResultId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"2a632e97-e014-4275-978f-8e5c4906d4b3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestAttachment, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a test result attachment\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     * @param {number} testCaseResultId\r\n     * @param {number} attachmentId\r\n     */\r\n    getTestResultAttachmentZip(project, runId, testCaseResultId, attachmentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testCaseResultId: testCaseResultId,\r\n                    attachmentId: attachmentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"2a632e97-e014-4275-978f-8e5c4906d4b3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a test sub result attachment\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     * @param {number} testCaseResultId\r\n     * @param {number} attachmentId\r\n     * @param {number} testSubResultId\r\n     */\r\n    getTestSubResultAttachmentContent(project, runId, testCaseResultId, attachmentId, testSubResultId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (testSubResultId == null) {\r\n                throw new TypeError('testSubResultId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testCaseResultId: testCaseResultId,\r\n                    attachmentId: attachmentId\r\n                };\r\n                let queryValues = {\r\n                    testSubResultId: testSubResultId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"2a632e97-e014-4275-978f-8e5c4906d4b3\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns attachment references for test sub result.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     * @param {number} testCaseResultId\r\n     * @param {number} testSubResultId\r\n     */\r\n    getTestSubResultAttachments(project, runId, testCaseResultId, testSubResultId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (testSubResultId == null) {\r\n                throw new TypeError('testSubResultId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testCaseResultId: testCaseResultId\r\n                };\r\n                let queryValues = {\r\n                    testSubResultId: testSubResultId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"2a632e97-e014-4275-978f-8e5c4906d4b3\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestAttachment, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a test sub result attachment\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     * @param {number} testCaseResultId\r\n     * @param {number} attachmentId\r\n     * @param {number} testSubResultId\r\n     */\r\n    getTestSubResultAttachmentZip(project, runId, testCaseResultId, attachmentId, testSubResultId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (testSubResultId == null) {\r\n                throw new TypeError('testSubResultId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testCaseResultId: testCaseResultId,\r\n                    attachmentId: attachmentId\r\n                };\r\n                let queryValues = {\r\n                    testSubResultId: testSubResultId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"2a632e97-e014-4275-978f-8e5c4906d4b3\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {Contracts.TestAttachmentRequestModel} attachmentRequestModel\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     */\r\n    createTestRunAttachment(attachmentRequestModel, project, runId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"b5731898-8206-477a-a51d-3fdf116fc6bf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, attachmentRequestModel, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     * @param {number} attachmentId\r\n     */\r\n    deleteTestRunAttachment(project, runId, attachmentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    attachmentId: attachmentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"b5731898-8206-477a-a51d-3fdf116fc6bf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a test run attachment\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     * @param {number} attachmentId\r\n     */\r\n    getTestRunAttachmentContent(project, runId, attachmentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    attachmentId: attachmentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"b5731898-8206-477a-a51d-3fdf116fc6bf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     */\r\n    getTestRunAttachments(project, runId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"b5731898-8206-477a-a51d-3fdf116fc6bf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestAttachment, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a test run attachment\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     * @param {number} attachmentId\r\n     */\r\n    getTestRunAttachmentZip(project, runId, attachmentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    attachmentId: attachmentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"b5731898-8206-477a-a51d-3fdf116fc6bf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     * @param {number} testCaseResultId\r\n     */\r\n    getBugsLinkedToTestResult(project, runId, testCaseResultId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testCaseResultId: testCaseResultId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"d8dbf98f-eb34-4f8d-8365-47972af34f29\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId\r\n     */\r\n    fetchSourceCodeCoverageReport(project, buildId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (buildId == null) {\r\n                throw new TypeError('buildId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    buildId: buildId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"a459e10b-d703-4193-b3c1-60f2287918b3\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.SourceViewBuildCoverage, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId\r\n     * @param {number} flags\r\n     */\r\n    getBuildCodeCoverage(project, buildId, flags) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (buildId == null) {\r\n                throw new TypeError('buildId can not be null or undefined');\r\n            }\r\n            if (flags == null) {\r\n                throw new TypeError('flags can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    buildId: buildId,\r\n                    flags: flags,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"9b3e1ece-c6ab-4fbb-8167-8a32a0c92216\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.BuildCoverage, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * http://(tfsserver):8080/tfs/DefaultCollection/_apis/test/CodeCoverage?buildId=10&deltaBuildId=9 Request: build id and delta build id (optional)\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId\r\n     * @param {number} deltaBuildId\r\n     */\r\n    getCodeCoverageSummary(project, buildId, deltaBuildId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (buildId == null) {\r\n                throw new TypeError('buildId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    buildId: buildId,\r\n                    deltaBuildId: deltaBuildId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"9b3e1ece-c6ab-4fbb-8167-8a32a0c92216\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.CodeCoverageSummary, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * http://(tfsserver):8080/tfs/DefaultCollection/_apis/test/CodeCoverage?buildId=10 Request: Json of code coverage summary\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId\r\n     * @param {Contracts.CodeCoverageData} coverageData\r\n     */\r\n    updateCodeCoverageSummary(project, buildId, coverageData) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (buildId == null) {\r\n                throw new TypeError('buildId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    buildId: buildId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"9b3e1ece-c6ab-4fbb-8167-8a32a0c92216\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, coverageData, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     * @param {number} flags\r\n     */\r\n    getTestRunCodeCoverage(project, runId, flags) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (flags == null) {\r\n                throw new TypeError('flags can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                let queryValues = {\r\n                    flags: flags,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"5641efbc-6f9b-401a-baeb-d3da22489e5e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get file coverage for the specified file\r\n     *\r\n     * @param {Contracts.FileCoverageRequest} fileCoverageRequest - File details with pull request iteration context\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getFileLevelCodeCoverage(fileCoverageRequest, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"4a6d0c46-51ca-45aa-9163-249cee3289b7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/plain\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {Contracts.ResultsFilter} filter\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    queryTestResultHistory(filter, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"bdf7a97b-0395-4da8-9d5d-f957619327d1\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, filter, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestResultHistory, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get test run message logs\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - ID of the run to get.\r\n     */\r\n    getTestRunMessageLogs(project, runId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"e9ab0c6a-1984-418b-87c0-ee4202318ba3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestMessageLogDetails, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get summary of test results.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} pipelineId - Pipeline Id. This is same as build Id.\r\n     * @param {string} stageName - Name of the stage. Maximum supported length for name is 256 character.\r\n     * @param {string} phaseName - Name of the phase. Maximum supported length for name is 256 character.\r\n     * @param {string} jobName - Matrixing in YAML generates copies of a job with different inputs in matrix. JobName is the name of those input. Maximum supported length for name is 256 character.\r\n     * @param {Contracts.Metrics[]} metricNames\r\n     * @param {boolean} groupByNode - Group summary for each node of the pipleine heirarchy\r\n     */\r\n    getTestPipelineMetrics(project, pipelineId, stageName, phaseName, jobName, metricNames, groupByNode) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (pipelineId == null) {\r\n                throw new TypeError('pipelineId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    pipelineId: pipelineId,\r\n                    stageName: stageName,\r\n                    phaseName: phaseName,\r\n                    jobName: jobName,\r\n                    metricNames: metricNames && metricNames.join(\",\"),\r\n                    groupByNode: groupByNode,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"65f35817-86a1-4131-b38b-3ec2d4744e53\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.PipelineTestMetrics, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId\r\n     * @param {string} publishContext\r\n     * @param {string} groupBy\r\n     * @param {string} filter\r\n     * @param {string} orderby\r\n     * @param {boolean} shouldIncludeResults\r\n     * @param {boolean} queryRunSummaryForInProgress\r\n     */\r\n    getTestResultDetailsForBuild(project, buildId, publishContext, groupBy, filter, orderby, shouldIncludeResults, queryRunSummaryForInProgress) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (buildId == null) {\r\n                throw new TypeError('buildId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    buildId: buildId,\r\n                    publishContext: publishContext,\r\n                    groupBy: groupBy,\r\n                    '$filter': filter,\r\n                    '$orderby': orderby,\r\n                    shouldIncludeResults: shouldIncludeResults,\r\n                    queryRunSummaryForInProgress: queryRunSummaryForInProgress,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"a518c749-4524-45b2-a7ef-1ac009b312cd\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestResultsDetails, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     * @param {number} releaseEnvId\r\n     * @param {string} publishContext\r\n     * @param {string} groupBy\r\n     * @param {string} filter\r\n     * @param {string} orderby\r\n     * @param {boolean} shouldIncludeResults\r\n     * @param {boolean} queryRunSummaryForInProgress\r\n     */\r\n    getTestResultDetailsForRelease(project, releaseId, releaseEnvId, publishContext, groupBy, filter, orderby, shouldIncludeResults, queryRunSummaryForInProgress) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (releaseId == null) {\r\n                throw new TypeError('releaseId can not be null or undefined');\r\n            }\r\n            if (releaseEnvId == null) {\r\n                throw new TypeError('releaseEnvId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    releaseId: releaseId,\r\n                    releaseEnvId: releaseEnvId,\r\n                    publishContext: publishContext,\r\n                    groupBy: groupBy,\r\n                    '$filter': filter,\r\n                    '$orderby': orderby,\r\n                    shouldIncludeResults: shouldIncludeResults,\r\n                    queryRunSummaryForInProgress: queryRunSummaryForInProgress,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"19a8183a-69fb-47d7-bfbf-1b6b0d921294\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestResultsDetails, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {Contracts.TestResultDocument} document\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     */\r\n    publishTestResultDocument(document, project, runId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"74838649-b038-42f1-a0e7-6deb3973bf14\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, document, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId\r\n     * @param {string} publishContext\r\n     * @param {string[]} fields\r\n     * @param {string} continuationToken\r\n     */\r\n    getResultGroupsByBuild(project, buildId, publishContext, fields, continuationToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (buildId == null) {\r\n                throw new TypeError('buildId can not be null or undefined');\r\n            }\r\n            if (publishContext == null) {\r\n                throw new TypeError('publishContext can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    buildId: buildId,\r\n                    publishContext: publishContext,\r\n                    fields: fields && fields.join(\",\"),\r\n                    continuationToken: continuationToken,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"e49244d1-c49f-49ad-a717-3bbaefe6a201\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     * @param {string} publishContext\r\n     * @param {number} releaseEnvId\r\n     * @param {string[]} fields\r\n     * @param {string} continuationToken\r\n     */\r\n    getResultGroupsByRelease(project, releaseId, publishContext, releaseEnvId, fields, continuationToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (releaseId == null) {\r\n                throw new TypeError('releaseId can not be null or undefined');\r\n            }\r\n            if (publishContext == null) {\r\n                throw new TypeError('publishContext can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    releaseId: releaseId,\r\n                    publishContext: publishContext,\r\n                    releaseEnvId: releaseEnvId,\r\n                    fields: fields && fields.join(\",\"),\r\n                    continuationToken: continuationToken,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"3c2b6bb0-0620-434a-a5c3-26aa0fcfda15\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get list of test Result meta data details for corresponding testcasereferenceId\r\n     *\r\n     * @param {string[]} testCaseReferenceIds - TestCaseReference Ids of the test Result to be queried, comma separated list of valid ids (limit no. of ids 200).\r\n     * @param {string} project - Project ID or project name\r\n     * @param {Contracts.ResultMetaDataDetails} detailsToInclude - Details to include with test results metadata. Default is None. Other values are FlakyIdentifiers.\r\n     */\r\n    queryTestResultsMetaData(testCaseReferenceIds, project, detailsToInclude) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    detailsToInclude: detailsToInclude,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.4\", \"testresults\", \"b72ff4c0-4341-4213-ba27-f517cf341c95\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, testCaseReferenceIds, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update properties of test result meta data\r\n     *\r\n     * @param {Contracts.TestResultMetaDataUpdateInput} testResultMetaDataUpdateInput - TestResultMetaData update input TestResultMetaDataUpdateInput\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} testCaseReferenceId - TestCaseReference Id of Test Result to be updated.\r\n     */\r\n    updateTestResultsMetaData(testResultMetaDataUpdateInput, project, testCaseReferenceId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    testCaseReferenceId: testCaseReferenceId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.4\", \"testresults\", \"b72ff4c0-4341-4213-ba27-f517cf341c95\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, testResultMetaDataUpdateInput, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {Contracts.TestResultsQuery} query\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getTestResultsByQuery(query, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"testresults\", \"14033a2c-af25-4af1-9e39-8ef6900482e3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, query, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestResultsQuery, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {Contracts.QueryModel} queryModel\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} includeResultDetails\r\n     * @param {boolean} includeIterationDetails\r\n     * @param {number} skip\r\n     * @param {number} top\r\n     */\r\n    getTestResultsByQueryWiql(queryModel, project, includeResultDetails, includeIterationDetails, skip, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    includeResultDetails: includeResultDetails,\r\n                    includeIterationDetails: includeIterationDetails,\r\n                    '$skip': skip,\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"testresults\", \"5ea78be3-2f5a-4110-8034-c27f24c62db1\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, queryModel, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestCaseResult, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {Contracts.TestCaseResult[]} results\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     */\r\n    addTestResultsToTestRun(results, project, runId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"testresults\", \"02afa165-e79a-4d70-8f0c-2af0f35b4e07\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, results, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestCaseResult, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     * @param {number} testResultId\r\n     * @param {Contracts.ResultDetails} detailsToInclude\r\n     */\r\n    getTestResultById(project, runId, testResultId, detailsToInclude) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testResultId: testResultId\r\n                };\r\n                let queryValues = {\r\n                    detailsToInclude: detailsToInclude,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"testresults\", \"02afa165-e79a-4d70-8f0c-2af0f35b4e07\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestCaseResult, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     * @param {Contracts.ResultDetails} detailsToInclude\r\n     * @param {number} skip\r\n     * @param {number} top\r\n     * @param {Contracts.TestOutcome[]} outcomes\r\n     * @param {boolean} newTestsOnly\r\n     */\r\n    getTestResults(project, runId, detailsToInclude, skip, top, outcomes, newTestsOnly) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                let queryValues = {\r\n                    detailsToInclude: detailsToInclude,\r\n                    '$skip': skip,\r\n                    '$top': top,\r\n                    outcomes: outcomes && outcomes.join(\",\"),\r\n                    '$newTestsOnly': newTestsOnly,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"testresults\", \"02afa165-e79a-4d70-8f0c-2af0f35b4e07\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestCaseResult, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {Contracts.TestCaseResult[]} results\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     */\r\n    updateTestResults(results, project, runId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"testresults\", \"02afa165-e79a-4d70-8f0c-2af0f35b4e07\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, results, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestCaseResult, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId\r\n     * @param {string} publishContext\r\n     * @param {Contracts.TestOutcome[]} outcomes\r\n     * @param {number} top\r\n     * @param {string} continuationToken\r\n     */\r\n    getTestResultsByBuild(project, buildId, publishContext, outcomes, top, continuationToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (buildId == null) {\r\n                throw new TypeError('buildId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    buildId: buildId,\r\n                    publishContext: publishContext,\r\n                    outcomes: outcomes && outcomes.join(\",\"),\r\n                    '$top': top,\r\n                    continuationToken: continuationToken,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"f48cc885-dbc4-4efc-ab19-ae8c19d1e02a\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of results.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} pipelineId - Pipeline Id. This is same as build Id.\r\n     * @param {string} stageName - Name of the stage. Maximum supported length for name is 256 character.\r\n     * @param {string} phaseName - Name of the phase. Maximum supported length for name is 256 character.\r\n     * @param {string} jobName - Matrixing in YAML generates copies of a job with different inputs in matrix. JobName is the name of those input. Maximum supported length for name is 256 character.\r\n     * @param {Contracts.TestOutcome[]} outcomes - List of outcome of results\r\n     * @param {number} top - Maximum number of results to return\r\n     * @param {String} continuationToken - Header to pass the continuationToken\r\n     */\r\n    getTestResultsByPipeline(customHeaders, project, pipelineId, stageName, phaseName, jobName, outcomes, top, continuationToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (pipelineId == null) {\r\n                throw new TypeError('pipelineId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    pipelineId: pipelineId,\r\n                    stageName: stageName,\r\n                    phaseName: phaseName,\r\n                    jobName: jobName,\r\n                    outcomes: outcomes && outcomes.join(\",\"),\r\n                    '$top': top,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"x-ms-continuationtoken\"] = \"continuationToken\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"80169dc2-30c3-4c25-84b2-dd67d7ff1f52\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     * @param {number} releaseEnvid\r\n     * @param {string} publishContext\r\n     * @param {Contracts.TestOutcome[]} outcomes\r\n     * @param {number} top\r\n     * @param {string} continuationToken\r\n     */\r\n    getTestResultsByRelease(project, releaseId, releaseEnvid, publishContext, outcomes, top, continuationToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (releaseId == null) {\r\n                throw new TypeError('releaseId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    releaseId: releaseId,\r\n                    releaseEnvid: releaseEnvid,\r\n                    publishContext: publishContext,\r\n                    outcomes: outcomes && outcomes.join(\",\"),\r\n                    '$top': top,\r\n                    continuationToken: continuationToken,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"3994b949-77e5-495d-8034-edf80d95b84e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get all the available groups details and for these groups get failed and aborted results.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} pipelineId - Pipeline Id. This is same as build Id.\r\n     * @param {string} stageName - Name of the stage. Maximum supported length for name is 256 character.\r\n     * @param {string} phaseName - Name of the phase. Maximum supported length for name is 256 character.\r\n     * @param {string} jobName - Matrixing in YAML generates copies of a job with different inputs in matrix. JobName is the name of those input. Maximum supported length for name is 256 character.\r\n     * @param {boolean} shouldIncludeFailedAndAbortedResults - If true, it will return Ids of failed and aborted results for each test group\r\n     * @param {boolean} queryGroupSummaryForInProgress - If true, it will calculate summary for InProgress runs as well.\r\n     */\r\n    testResultsGroupDetails(project, pipelineId, stageName, phaseName, jobName, shouldIncludeFailedAndAbortedResults, queryGroupSummaryForInProgress) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (pipelineId == null) {\r\n                throw new TypeError('pipelineId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    pipelineId: pipelineId,\r\n                    stageName: stageName,\r\n                    phaseName: phaseName,\r\n                    jobName: jobName,\r\n                    shouldIncludeFailedAndAbortedResults: shouldIncludeFailedAndAbortedResults,\r\n                    queryGroupSummaryForInProgress: queryGroupSummaryForInProgress,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"f903b850-06af-4b50-a344-d7bbfb19e93b\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestResultsDetails, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId\r\n     * @param {string} publishContext\r\n     * @param {boolean} includeFailureDetails\r\n     * @param {Contracts.BuildReference} buildToCompare\r\n     */\r\n    queryTestResultsReportForBuild(project, buildId, publishContext, includeFailureDetails, buildToCompare) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (buildId == null) {\r\n                throw new TypeError('buildId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    buildId: buildId,\r\n                    publishContext: publishContext,\r\n                    includeFailureDetails: includeFailureDetails,\r\n                    buildToCompare: buildToCompare,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"e009fa95-95a5-4ad4-9681-590043ce2423\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestResultSummary, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get summary of test results.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} pipelineId - Pipeline Id. This is same as build Id.\r\n     * @param {string} stageName - Name of the stage. Maximum supported length for name is 256 character.\r\n     * @param {string} phaseName - Name of the phase. Maximum supported length for name is 256 character.\r\n     * @param {string} jobName - Matrixing in YAML generates copies of a job with different inputs in matrix. JobName is the name of those input. Maximum supported length for name is 256 character.\r\n     * @param {boolean} includeFailureDetails - If true returns failure insights\r\n     */\r\n    queryTestResultsReportForPipeline(project, pipelineId, stageName, phaseName, jobName, includeFailureDetails) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (pipelineId == null) {\r\n                throw new TypeError('pipelineId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    pipelineId: pipelineId,\r\n                    stageName: stageName,\r\n                    phaseName: phaseName,\r\n                    jobName: jobName,\r\n                    includeFailureDetails: includeFailureDetails,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"71f746a1-7d68-40fe-b705-9d821a73dff2\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestResultSummary, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId\r\n     * @param {number} releaseEnvId\r\n     * @param {string} publishContext\r\n     * @param {boolean} includeFailureDetails\r\n     * @param {Contracts.ReleaseReference} releaseToCompare\r\n     */\r\n    queryTestResultsReportForRelease(project, releaseId, releaseEnvId, publishContext, includeFailureDetails, releaseToCompare) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (releaseId == null) {\r\n                throw new TypeError('releaseId can not be null or undefined');\r\n            }\r\n            if (releaseEnvId == null) {\r\n                throw new TypeError('releaseEnvId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    releaseId: releaseId,\r\n                    releaseEnvId: releaseEnvId,\r\n                    publishContext: publishContext,\r\n                    includeFailureDetails: includeFailureDetails,\r\n                    releaseToCompare: releaseToCompare,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"f10f9577-2c04-45ab-8c99-b26567a7cd55\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestResultSummary, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {Contracts.ReleaseReference[]} releases\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    queryTestResultsSummaryForReleases(releases, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"f10f9577-2c04-45ab-8c99-b26567a7cd55\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, releases, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestResultSummary, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {Contracts.TestResultsContext} resultsContext\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number[]} workItemIds\r\n     */\r\n    queryTestSummaryByRequirement(resultsContext, project, workItemIds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    workItemIds: workItemIds && workItemIds.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"3b7fd26f-c335-4e55-afc1-a588f5e2af3c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, resultsContext, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestSummaryForWorkItem, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {Contracts.TestResultTrendFilter} filter\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    queryResultTrendForBuild(filter, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"0886a7ae-315a-4dba-9122-bcce93301f3a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, filter, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.AggregatedDataForResultTrend, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {Contracts.TestResultTrendFilter} filter\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    queryResultTrendForRelease(filter, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"107f23c3-359a-460a-a70c-63ee739f9f9a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, filter, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.AggregatedDataForResultTrend, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {Contracts.RunCreateModel} testRun\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createTestRun(testRun, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"364538f9-8062-4ce0-b024-75a0fb463f0d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, testRun, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestRun, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     */\r\n    deleteTestRun(project, runId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"364538f9-8062-4ce0-b024-75a0fb463f0d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     * @param {boolean} includeDetails\r\n     * @param {boolean} includeTags\r\n     */\r\n    getTestRunById(project, runId, includeDetails, includeTags) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                let queryValues = {\r\n                    includeDetails: includeDetails,\r\n                    includeTags: includeTags,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"364538f9-8062-4ce0-b024-75a0fb463f0d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestRun, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} buildUri\r\n     * @param {string} owner\r\n     * @param {string} tmiRunId\r\n     * @param {number} planId\r\n     * @param {boolean} includeRunDetails\r\n     * @param {boolean} automated\r\n     * @param {number} skip\r\n     * @param {number} top\r\n     */\r\n    getTestRuns(project, buildUri, owner, tmiRunId, planId, includeRunDetails, automated, skip, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    buildUri: buildUri,\r\n                    owner: owner,\r\n                    tmiRunId: tmiRunId,\r\n                    planId: planId,\r\n                    includeRunDetails: includeRunDetails,\r\n                    automated: automated,\r\n                    '$skip': skip,\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"364538f9-8062-4ce0-b024-75a0fb463f0d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestRun, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Query Test Runs based on filters. Mandatory fields are minLastUpdatedDate and maxLastUpdatedDate.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {Date} minLastUpdatedDate - Minimum Last Modified Date of run to be queried (Mandatory).\r\n     * @param {Date} maxLastUpdatedDate - Maximum Last Modified Date of run to be queried (Mandatory, difference between min and max date can be atmost 7 days).\r\n     * @param {Contracts.TestRunState} state - Current state of the Runs to be queried.\r\n     * @param {number[]} planIds - Plan Ids of the Runs to be queried, comma separated list of valid ids.\r\n     * @param {boolean} isAutomated - Automation type of the Runs to be queried.\r\n     * @param {Contracts.TestRunPublishContext} publishContext - PublishContext of the Runs to be queried.\r\n     * @param {number[]} buildIds - Build Ids of the Runs to be queried, comma separated list of valid ids.\r\n     * @param {number[]} buildDefIds - Build Definition Ids of the Runs to be queried, comma separated list of valid ids.\r\n     * @param {string} branchName - Source Branch name of the Runs to be queried.\r\n     * @param {number[]} releaseIds - Release Ids of the Runs to be queried, comma separated list of valid ids.\r\n     * @param {number[]} releaseDefIds - Release Definition Ids of the Runs to be queried, comma separated list of valid ids.\r\n     * @param {number[]} releaseEnvIds - Release Environment Ids of the Runs to be queried, comma separated list of valid ids.\r\n     * @param {number[]} releaseEnvDefIds - Release Environment Definition Ids of the Runs to be queried, comma separated list of valid ids.\r\n     * @param {string} runTitle - Run Title of the Runs to be queried.\r\n     * @param {number} top - Number of runs to be queried. Limit is 100\r\n     * @param {string} continuationToken - continuationToken received from previous batch or null for first batch. It is not supposed to be created (or altered, if received from last batch) by user.\r\n     */\r\n    queryTestRuns(project, minLastUpdatedDate, maxLastUpdatedDate, state, planIds, isAutomated, publishContext, buildIds, buildDefIds, branchName, releaseIds, releaseDefIds, releaseEnvIds, releaseEnvDefIds, runTitle, top, continuationToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (minLastUpdatedDate == null) {\r\n                throw new TypeError('minLastUpdatedDate can not be null or undefined');\r\n            }\r\n            if (maxLastUpdatedDate == null) {\r\n                throw new TypeError('maxLastUpdatedDate can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    minLastUpdatedDate: minLastUpdatedDate,\r\n                    maxLastUpdatedDate: maxLastUpdatedDate,\r\n                    state: state,\r\n                    planIds: planIds && planIds.join(\",\"),\r\n                    isAutomated: isAutomated,\r\n                    publishContext: publishContext,\r\n                    buildIds: buildIds && buildIds.join(\",\"),\r\n                    buildDefIds: buildDefIds && buildDefIds.join(\",\"),\r\n                    branchName: branchName,\r\n                    releaseIds: releaseIds && releaseIds.join(\",\"),\r\n                    releaseDefIds: releaseDefIds && releaseDefIds.join(\",\"),\r\n                    releaseEnvIds: releaseEnvIds && releaseEnvIds.join(\",\"),\r\n                    releaseEnvDefIds: releaseEnvDefIds && releaseEnvDefIds.join(\",\"),\r\n                    runTitle: runTitle,\r\n                    '$top': top,\r\n                    continuationToken: continuationToken,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"364538f9-8062-4ce0-b024-75a0fb463f0d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestRun, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {Contracts.RunUpdateModel} runUpdateModel\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     */\r\n    updateTestRun(runUpdateModel, project, runId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"364538f9-8062-4ce0-b024-75a0fb463f0d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, runUpdateModel, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestRun, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get test run summary, used when we want to get summary of a run by outcome. Test run should be in completed state.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - ID of the run to get.\r\n     */\r\n    getTestRunSummaryByOutcome(project, runId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"5c6a250c-53b7-4851-990c-42a7a00c8b39\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestRunStatistic, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get TestResultsSettings data\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {Contracts.TestResultsSettingsType} settingsType\r\n     */\r\n    getTestResultsSettings(project, settingsType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    settingsType: settingsType,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"testresults\", \"7319952e-e5a9-4e19-a006-84f3be8b7c68\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestResultsSettings, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update project settings of test results\r\n     *\r\n     * @param {Contracts.TestResultsUpdateSettings} testResultsUpdateSettings\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updatePipelinesTestSettings(testResultsUpdateSettings, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"testresults\", \"7319952e-e5a9-4e19-a006-84f3be8b7c68\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, testResultsUpdateSettings, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestResultsSettings, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the list of results whose failure matches with the provided one.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - id of test run\r\n     * @param {number} testResultId - id of test result inside a test run\r\n     * @param {number} testSubResultId - id of subresult inside a test result\r\n     * @param {number} top - Maximum number of results to return\r\n     * @param {String} continuationToken - Header to pass the continuationToken\r\n     */\r\n    getSimilarTestResults(customHeaders, project, runId, testResultId, testSubResultId, top, continuationToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (testSubResultId == null) {\r\n                throw new TypeError('testSubResultId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testResultId: testResultId\r\n                };\r\n                let queryValues = {\r\n                    testSubResultId: testSubResultId,\r\n                    '$top': top,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"x-ms-continuationtoken\"] = \"continuationToken\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"67d0a074-b255-4902-a639-e3e6de7a3de6\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestCaseResult, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get test run statistics , used when we want to get summary of a run by outcome.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - ID of the run to get.\r\n     */\r\n    getTestRunStatistics(project, runId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"testresults\", \"82b986e8-ca9e-4a89-b39e-f65c69bc104a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestRunStatistic, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * <p>Gets the coverage status for the last successful build of a definition, optionally scoped to a specific branch</p>\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} definition - The ID or name of the definition.\r\n     * @param {string} branchName - The branch name.\r\n     * @param {string} label - The String to replace the default text on the left side of the badge.\r\n     */\r\n    getCoverageStatusBadge(project, definition, branchName, label) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    definition: definition\r\n                };\r\n                let queryValues = {\r\n                    branchName: branchName,\r\n                    label: label,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"73b7c9d8-defb-4b60-b3d6-2162d60d6b13\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get all the tags in a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - Build ID\r\n     */\r\n    getTestTagsForBuild(project, buildId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (buildId == null) {\r\n                throw new TypeError('buildId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    buildId: buildId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"52ee2057-4b54-41a6-a18c-ed4375a00f8d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get all the tags in a release.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Release ID\r\n     * @param {number} releaseEnvId - Release environment ID\r\n     */\r\n    getTestTagsForRelease(project, releaseId, releaseEnvId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (releaseId == null) {\r\n                throw new TypeError('releaseId can not be null or undefined');\r\n            }\r\n            if (releaseEnvId == null) {\r\n                throw new TypeError('releaseEnvId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    releaseId: releaseId,\r\n                    releaseEnvId: releaseEnvId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"52ee2057-4b54-41a6-a18c-ed4375a00f8d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update tags of a run, Tags can be Added and Deleted\r\n     *\r\n     * @param {Contracts.TestTagsUpdateModel} testTagsUpdateModel - TestTagsUpdateModel\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - RunId of the run\r\n     */\r\n    updateTestRunTags(testTagsUpdateModel, project, runId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"a5e2f411-2b43-45f3-989c-05b71339f5b8\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, testTagsUpdateModel, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get all the tags in a build.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - Build ID\r\n     */\r\n    getTestTagSummaryForBuild(project, buildId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (buildId == null) {\r\n                throw new TypeError('buildId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    buildId: buildId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"655a8f6b-fec7-4b46-b672-68b44141b498\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get all the tags in a release.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} releaseId - Release ID\r\n     * @param {number} releaseEnvId - Release environment ID\r\n     */\r\n    getTestTagSummaryForRelease(project, releaseId, releaseEnvId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (releaseId == null) {\r\n                throw new TypeError('releaseId can not be null or undefined');\r\n            }\r\n            if (releaseEnvId == null) {\r\n                throw new TypeError('releaseEnvId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    releaseId: releaseId,\r\n                    releaseEnvId: releaseEnvId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"655a8f6b-fec7-4b46-b672-68b44141b498\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates an attachment in the LogStore for the specified buildId.\r\n     *\r\n     * @param {Contracts.TestAttachmentRequestModel} attachmentRequestModel - Contains attachment info like stream, filename, comment, attachmentType\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - BuildId\r\n     */\r\n    createBuildAttachmentInLogStore(attachmentRequestModel, project, buildId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    buildId: buildId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"6f747e16-18c2-435a-b4fb-fa05d6845fee\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, attachmentRequestModel, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates an attachment in the LogStore for the specified runId.\r\n     *\r\n     * @param {Contracts.TestAttachmentRequestModel} attachmentRequestModel - Contains attachment info like stream, filename, comment, attachmentType\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - Test RunId\r\n     */\r\n    createTestRunLogStoreAttachment(attachmentRequestModel, project, runId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"1026d5de-4b0b-46ae-a31f-7c59b6af51ef\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, attachmentRequestModel, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes the attachment with the specified filename for the specified runId from the LogStore.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - Test RunId\r\n     * @param {string} filename - Attachment FileName\r\n     */\r\n    deleteTestRunLogStoreAttachment(project, runId, filename) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (filename == null) {\r\n                throw new TypeError('filename can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                let queryValues = {\r\n                    filename: filename,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"1026d5de-4b0b-46ae-a31f-7c59b6af51ef\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns the attachment with the specified filename for the specified runId from the LogStore.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - Test RunId\r\n     * @param {string} filename - Attachment FileName\r\n     */\r\n    getTestRunLogStoreAttachmentContent(project, runId, filename) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (filename == null) {\r\n                throw new TypeError('filename can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                let queryValues = {\r\n                    filename: filename,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"1026d5de-4b0b-46ae-a31f-7c59b6af51ef\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a list of attachments for the specified runId from the LogStore.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - Test RunId\r\n     */\r\n    getTestRunLogStoreAttachments(project, runId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"1026d5de-4b0b-46ae-a31f-7c59b6af51ef\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestLogStoreAttachment, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns the attachment with the specified filename for the specified runId from the LogStore.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - Test RunId\r\n     * @param {string} filename - Attachment FileName\r\n     */\r\n    getTestRunLogStoreAttachmentZip(project, runId, filename) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (filename == null) {\r\n                throw new TypeError('filename can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                let queryValues = {\r\n                    filename: filename,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"1026d5de-4b0b-46ae-a31f-7c59b6af51ef\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a new test failure type\r\n     *\r\n     * @param {Contracts.TestResultFailureTypeRequestModel} testResultFailureType\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createFailureType(testResultFailureType, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"c4ac0486-830c-4a2a-9ef9-e8a1791a70fd\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, testResultFailureType, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes a test failure type with specified failureTypeId\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} failureTypeId\r\n     */\r\n    deleteFailureType(project, failureTypeId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    failureTypeId: failureTypeId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"c4ac0486-830c-4a2a-9ef9-e8a1791a70fd\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns the list of test failure types.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getFailureTypes(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"c4ac0486-830c-4a2a-9ef9-e8a1791a70fd\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get history of a test method using TestHistoryQuery\r\n     *\r\n     * @param {Contracts.TestHistoryQuery} filter - TestHistoryQuery to get history\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    queryTestHistory(filter, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"testresults\", \"2a41bd6a-8118-4403-b74e-5ba7492aed9d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, filter, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestHistoryQuery, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get list of build attachments reference\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - Id of the build to get\r\n     * @param {Contracts.TestLogType} type - type of the attachment to get\r\n     * @param {string} directoryPath - directory path for which attachments are needed\r\n     * @param {string} fileNamePrefix - file name prefix to filter the list of attachment\r\n     * @param {boolean} fetchMetaData - Default is false, set if metadata is needed\r\n     * @param {number} top - Number of test attachments reference to return\r\n     * @param {String} continuationToken - Header to pass the continuationToken\r\n     */\r\n    getTestLogsForBuild(customHeaders, project, buildId, type, directoryPath, fileNamePrefix, fetchMetaData, top, continuationToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (buildId == null) {\r\n                throw new TypeError('buildId can not be null or undefined');\r\n            }\r\n            if (type == null) {\r\n                throw new TypeError('type can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    buildId: buildId,\r\n                    type: type,\r\n                    directoryPath: directoryPath,\r\n                    fileNamePrefix: fileNamePrefix,\r\n                    fetchMetaData: fetchMetaData,\r\n                    top: top,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"x-ms-continuationtoken\"] = \"continuationToken\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"dff8ce3a-e539-4817-a405-d968491a88f1\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestLog, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get list of test result attachments reference\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - Id of the test run that contains the result\r\n     * @param {number} resultId - Id of the test result\r\n     * @param {Contracts.TestLogType} type - type of attachments to get\r\n     * @param {string} directoryPath - directory path of attachments to get\r\n     * @param {string} fileNamePrefix - file name prefix to filter the list of attachment\r\n     * @param {boolean} fetchMetaData - Default is false, set if metadata is needed\r\n     * @param {number} top - Numbe of attachments reference to return\r\n     * @param {String} continuationToken - Header to pass the continuationToken\r\n     */\r\n    getTestResultLogs(customHeaders, project, runId, resultId, type, directoryPath, fileNamePrefix, fetchMetaData, top, continuationToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (type == null) {\r\n                throw new TypeError('type can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    resultId: resultId\r\n                };\r\n                let queryValues = {\r\n                    type: type,\r\n                    directoryPath: directoryPath,\r\n                    fileNamePrefix: fileNamePrefix,\r\n                    fetchMetaData: fetchMetaData,\r\n                    top: top,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"x-ms-continuationtoken\"] = \"continuationToken\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"714caaac-ae1e-4869-8323-9bc0f5120dbf\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestLog, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get list of test subresult attachments reference\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - Id of the test run that contains the results\r\n     * @param {number} resultId - Id of the test result that contains subresult\r\n     * @param {number} subResultId - Id of the test subresult\r\n     * @param {Contracts.TestLogType} type - type of the attachments to get\r\n     * @param {string} directoryPath - directory path of the attachment to get\r\n     * @param {string} fileNamePrefix - file name prefix to filter the list of attachments\r\n     * @param {boolean} fetchMetaData - Default is false, set if metadata is needed\r\n     * @param {number} top - Number of attachments reference to return\r\n     * @param {String} continuationToken - Header to pass the continuationToken\r\n     */\r\n    getTestSubResultLogs(customHeaders, project, runId, resultId, subResultId, type, directoryPath, fileNamePrefix, fetchMetaData, top, continuationToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (subResultId == null) {\r\n                throw new TypeError('subResultId can not be null or undefined');\r\n            }\r\n            if (type == null) {\r\n                throw new TypeError('type can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    resultId: resultId\r\n                };\r\n                let queryValues = {\r\n                    subResultId: subResultId,\r\n                    type: type,\r\n                    directoryPath: directoryPath,\r\n                    fileNamePrefix: fileNamePrefix,\r\n                    fetchMetaData: fetchMetaData,\r\n                    top: top,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"x-ms-continuationtoken\"] = \"continuationToken\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"714caaac-ae1e-4869-8323-9bc0f5120dbf\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestLog, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get list of test run attachments reference\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - Id of the test run\r\n     * @param {Contracts.TestLogType} type - type of the attachments to get\r\n     * @param {string} directoryPath - directory path for which attachments are needed\r\n     * @param {string} fileNamePrefix - file name prefix to filter the list of attachment\r\n     * @param {boolean} fetchMetaData - Default is false, set if metadata is needed\r\n     * @param {number} top - Number of attachments reference to return\r\n     * @param {String} continuationToken - Header to pass the continuationToken\r\n     */\r\n    getTestRunLogs(customHeaders, project, runId, type, directoryPath, fileNamePrefix, fetchMetaData, top, continuationToken) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (type == null) {\r\n                throw new TypeError('type can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                let queryValues = {\r\n                    type: type,\r\n                    directoryPath: directoryPath,\r\n                    fileNamePrefix: fileNamePrefix,\r\n                    fetchMetaData: fetchMetaData,\r\n                    top: top,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"x-ms-continuationtoken\"] = \"continuationToken\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"5b47b946-e875-4c9a-acdc-2a20996caebe\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestLog, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get SAS Uri of a build attachment\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} build - Id of the build to get\r\n     * @param {Contracts.TestLogType} type - type of the file\r\n     * @param {string} filePath - filePath for which sas uri is needed\r\n     */\r\n    getTestLogStoreEndpointDetailsForBuildLog(project, build, type, filePath) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (build == null) {\r\n                throw new TypeError('build can not be null or undefined');\r\n            }\r\n            if (type == null) {\r\n                throw new TypeError('type can not be null or undefined');\r\n            }\r\n            if (filePath == null) {\r\n                throw new TypeError('filePath can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    build: build,\r\n                    type: type,\r\n                    filePath: filePath,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"39b09be7-f0c9-4a83-a513-9ae31b45c56f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestLogStoreEndpointDetails, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create and Get sas uri of the build container\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId - Id of the build to get\r\n     * @param {Contracts.TestLogStoreOperationType} testLogStoreOperationType - Type of operation to perform using sas uri\r\n     */\r\n    testLogStoreEndpointDetailsForBuild(project, buildId, testLogStoreOperationType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (buildId == null) {\r\n                throw new TypeError('buildId can not be null or undefined');\r\n            }\r\n            if (testLogStoreOperationType == null) {\r\n                throw new TypeError('testLogStoreOperationType can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    buildId: buildId,\r\n                    testLogStoreOperationType: testLogStoreOperationType,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"39b09be7-f0c9-4a83-a513-9ae31b45c56f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestLogStoreEndpointDetails, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get SAS Uri of a test results attachment\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - Id of the test run that contains result\r\n     * @param {number} resultId - Id of the test result whose files need to be downloaded\r\n     * @param {Contracts.TestLogType} type - type of the file\r\n     * @param {string} filePath - filePath for which sas uri is needed\r\n     */\r\n    getTestLogStoreEndpointDetailsForResultLog(project, runId, resultId, type, filePath) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (type == null) {\r\n                throw new TypeError('type can not be null or undefined');\r\n            }\r\n            if (filePath == null) {\r\n                throw new TypeError('filePath can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    resultId: resultId\r\n                };\r\n                let queryValues = {\r\n                    type: type,\r\n                    filePath: filePath,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"da630b37-1236-45b5-945e-1d7bdb673850\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestLogStoreEndpointDetails, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get SAS Uri of a test subresults attachment\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - Id of the test run that contains result\r\n     * @param {number} resultId - Id of the test result that contains subresult\r\n     * @param {number} subResultId - Id of the test subresult whose file sas uri is needed\r\n     * @param {Contracts.TestLogType} type - type of the file\r\n     * @param {string} filePath - filePath for which sas uri is needed\r\n     */\r\n    getTestLogStoreEndpointDetailsForSubResultLog(project, runId, resultId, subResultId, type, filePath) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (subResultId == null) {\r\n                throw new TypeError('subResultId can not be null or undefined');\r\n            }\r\n            if (type == null) {\r\n                throw new TypeError('type can not be null or undefined');\r\n            }\r\n            if (filePath == null) {\r\n                throw new TypeError('filePath can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    resultId: resultId\r\n                };\r\n                let queryValues = {\r\n                    subResultId: subResultId,\r\n                    type: type,\r\n                    filePath: filePath,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"da630b37-1236-45b5-945e-1d7bdb673850\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestLogStoreEndpointDetails, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create empty file for a result and Get Sas uri for the file\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - Id of the test run that contains the result\r\n     * @param {number} resultId - Id of the test results that contains sub result\r\n     * @param {number} subResultId - Id of the test sub result whose file sas uri is needed\r\n     * @param {string} filePath - file path inside the sub result for which sas uri is needed\r\n     * @param {Contracts.TestLogType} type - Type of the file for download\r\n     */\r\n    testLogStoreEndpointDetailsForResult(project, runId, resultId, subResultId, filePath, type) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (subResultId == null) {\r\n                throw new TypeError('subResultId can not be null or undefined');\r\n            }\r\n            if (filePath == null) {\r\n                throw new TypeError('filePath can not be null or undefined');\r\n            }\r\n            if (type == null) {\r\n                throw new TypeError('type can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    resultId: resultId\r\n                };\r\n                let queryValues = {\r\n                    subResultId: subResultId,\r\n                    filePath: filePath,\r\n                    type: type,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"da630b37-1236-45b5-945e-1d7bdb673850\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestLogStoreEndpointDetails, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get SAS Uri of a test run attachment\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - Id of the test run whose file has to be downloaded\r\n     * @param {Contracts.TestLogType} type - type of the file\r\n     * @param {string} filePath - filePath for which sas uri is needed\r\n     */\r\n    getTestLogStoreEndpointDetailsForRunLog(project, runId, type, filePath) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (type == null) {\r\n                throw new TypeError('type can not be null or undefined');\r\n            }\r\n            if (filePath == null) {\r\n                throw new TypeError('filePath can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                let queryValues = {\r\n                    type: type,\r\n                    filePath: filePath,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"67eb3f92-6c97-4fd9-8b63-6cbdc7e526ea\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestLogStoreEndpointDetails, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create empty file for a run and Get Sas uri for the file\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId - Id of the run to get endpoint details\r\n     * @param {Contracts.TestLogStoreOperationType} testLogStoreOperationType - Type of operation to perform using sas uri\r\n     * @param {string} filePath - file path to create an empty file\r\n     * @param {Contracts.TestLogType} type - Default is GeneralAttachment, type of empty file to be created\r\n     */\r\n    testLogStoreEndpointDetailsForRun(project, runId, testLogStoreOperationType, filePath, type) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (testLogStoreOperationType == null) {\r\n                throw new TypeError('testLogStoreOperationType can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId\r\n                };\r\n                let queryValues = {\r\n                    testLogStoreOperationType: testLogStoreOperationType,\r\n                    filePath: filePath,\r\n                    type: type,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"67eb3f92-6c97-4fd9-8b63-6cbdc7e526ea\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestLogStoreEndpointDetails, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates TestResultsSession object in TCM data store\r\n     *\r\n     * @param {Contracts.TestResultsSession} session - Received session object.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createTestSession(session, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"531e61ce-580d-4962-8591-0b2942b6bf78\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, session, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieves TestResultsSession metadata object in TCM data store\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} buildId\r\n     */\r\n    getTestSession(project, buildId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (buildId == null) {\r\n                throw new TypeError('buildId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    buildId: buildId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"531e61ce-580d-4962-8591-0b2942b6bf78\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.TestResultsSession, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieves TestResultsSession Layout object in TCM data store\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} sessionId\r\n     */\r\n    getTestSessionLayout(project, sessionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (sessionId == null) {\r\n                throw new TypeError('sessionId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    sessionId: sessionId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"531e61ce-580d-4962-8591-0b2942b6bf78\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates Environment object in TCM data store\r\n     *\r\n     * @param {Contracts.TestSessionEnvironment[]} environments - Received Environment object.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createEnvironment(environments, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"f9c2e9e4-9c9a-4c1d-9a7d-2b4c8a6f0d5f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, environments, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {Contracts.TestSettings} testSettings\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createTestSettings(testSettings, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"930bad47-f826-4099-9597-f44d0a9c735c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, testSettings, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} testSettingsId\r\n     */\r\n    deleteTestSettings(project, testSettingsId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (testSettingsId == null) {\r\n                throw new TypeError('testSettingsId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    testSettingsId: testSettingsId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"930bad47-f826-4099-9597-f44d0a9c735c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} testSettingsId\r\n     */\r\n    getTestSettingsById(project, testSettingsId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (testSettingsId == null) {\r\n                throw new TypeError('testSettingsId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    testSettingsId: testSettingsId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"testresults\", \"930bad47-f826-4099-9597-f44d0a9c735c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {Contracts.WorkItemToTestLinks} workItemToTestLinks\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    addWorkItemToTestLinks(workItemToTestLinks, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"testresults\", \"4e3abe63-ca46-4fe0-98b2-363f7ec7aa5f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, workItemToTestLinks, options);\r\n                    let ret = this.formatResponse(res.result, Contracts.TypeInfo.WorkItemToTestLinks, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} testName\r\n     * @param {number} workItemId\r\n     */\r\n    deleteTestMethodToWorkItemLink(project, testName, workItemId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (testName == null) {\r\n                throw new TypeError('testName can not be null or undefined');\r\n            }\r\n            if (workItemId == null) {\r\n                throw new TypeError('workItemId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    testName: testName,\r\n                    workItemId: workItemId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"testresults\", \"cbd50bd7-f7ed-4e35-b127-4408ae6bfa2c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} testName\r\n     */\r\n    queryTestMethodLinkedWorkItems(project, testName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (testName == null) {\r\n                throw new TypeError('testName can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    testName: testName,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"testresults\", \"cbd50bd7-f7ed-4e35-b127-4408ae6bfa2c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} runId\r\n     * @param {number} testCaseResultId\r\n     */\r\n    getTestResultWorkItemsById(project, runId, testCaseResultId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    runId: runId,\r\n                    testCaseResultId: testCaseResultId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"testresults\", \"3d032fd6-e7a0-468b-b105-75d206f99aad\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Query Test Result WorkItems based on filter\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} workItemCategory - can take values Microsoft.BugCategory or all(for getting all workitems)\r\n     * @param {string} automatedTestName\r\n     * @param {number} testCaseId\r\n     * @param {Date} maxCompleteDate\r\n     * @param {number} days\r\n     * @param {number} workItemCount\r\n     */\r\n    queryTestResultWorkItems(project, workItemCategory, automatedTestName, testCaseId, maxCompleteDate, days, workItemCount) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (workItemCategory == null) {\r\n                throw new TypeError('workItemCategory can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    workItemCategory: workItemCategory,\r\n                    automatedTestName: automatedTestName,\r\n                    testCaseId: testCaseId,\r\n                    maxCompleteDate: maxCompleteDate,\r\n                    days: days,\r\n                    '$workItemCount': workItemCount,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"testresults\", \"f7401a26-331b-44fe-a470-f7ed35138e4a\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nTestResultsApi.RESOURCE_AREA_ID = \"c83eaf52-edf3-4034-ae11-17d38f25404c\";\r\nexports.TestResultsApi = TestResultsApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst TfvcInterfaces = require(\"./interfaces/TfvcInterfaces\");\r\nclass TfvcApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-Tfvc-api', options);\r\n    }\r\n    /**\r\n     * Get a single branch hierarchy at the given path with parents or children as specified.\r\n     *\r\n     * @param {string} path - Full path to the branch.  Default: $/ Examples: $/, $/MyProject, $/MyProject/SomeFolder.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} includeParent - Return the parent branch, if there is one. Default: False\r\n     * @param {boolean} includeChildren - Return child branches, if there are any. Default: False\r\n     */\r\n    getBranch(path, project, includeParent, includeChildren) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (path == null) {\r\n                throw new TypeError('path can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    path: path,\r\n                    includeParent: includeParent,\r\n                    includeChildren: includeChildren,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"tfvc\", \"bc1f417e-239d-42e7-85e1-76e80cb2d6eb\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcBranch, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a collection of branch roots -- first-level children, branches with no parents.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} includeParent - Return the parent branch, if there is one. Default: False\r\n     * @param {boolean} includeChildren - Return the child branches for each root branch. Default: False\r\n     * @param {boolean} includeDeleted - Return deleted branches. Default: False\r\n     * @param {boolean} includeLinks - Return links. Default: False\r\n     */\r\n    getBranches(project, includeParent, includeChildren, includeDeleted, includeLinks) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    includeParent: includeParent,\r\n                    includeChildren: includeChildren,\r\n                    includeDeleted: includeDeleted,\r\n                    includeLinks: includeLinks,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"tfvc\", \"bc1f417e-239d-42e7-85e1-76e80cb2d6eb\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcBranch, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get branch hierarchies below the specified scopePath\r\n     *\r\n     * @param {string} scopePath - Full path to the branch.  Default: $/ Examples: $/, $/MyProject, $/MyProject/SomeFolder.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} includeDeleted - Return deleted branches. Default: False\r\n     * @param {boolean} includeLinks - Return links. Default: False\r\n     */\r\n    getBranchRefs(scopePath, project, includeDeleted, includeLinks) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (scopePath == null) {\r\n                throw new TypeError('scopePath can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    scopePath: scopePath,\r\n                    includeDeleted: includeDeleted,\r\n                    includeLinks: includeLinks,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"tfvc\", \"bc1f417e-239d-42e7-85e1-76e80cb2d6eb\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcBranchRef, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve Tfvc changes for a given changeset.\r\n     *\r\n     * @param {number} id - ID of the changeset. Default: null\r\n     * @param {number} skip - Number of results to skip. Default: null\r\n     * @param {number} top - The maximum number of results to return. Default: null\r\n     */\r\n    getChangesetChanges(id, skip, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    '$skip': skip,\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"tfvc\", \"f32b86f2-15b9-4fe6-81b1-6f8938617ee5\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcChange, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a new changeset.\r\n     *\r\n     * @param {TfvcInterfaces.TfvcChangeset} changeset\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createChangeset(changeset, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"tfvc\", \"0bc8f0a4-6bfb-42a9-ba84-139da7b99c49\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, changeset, options);\r\n                    let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcChangesetRef, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve a Tfvc Changeset\r\n     *\r\n     * @param {number} id - Changeset Id to retrieve.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} maxChangeCount - Number of changes to return (maximum 100 changes) Default: 0\r\n     * @param {boolean} includeDetails - Include policy details and check-in notes in the response. Default: false\r\n     * @param {boolean} includeWorkItems - Include workitems. Default: false\r\n     * @param {number} maxCommentLength - Include details about associated work items in the response. Default: null\r\n     * @param {boolean} includeSourceRename - Include renames.  Default: false\r\n     * @param {number} skip - Number of results to skip. Default: null\r\n     * @param {number} top - The maximum number of results to return. Default: null\r\n     * @param {string} orderby - Results are sorted by ID in descending order by default. Use id asc to sort by ID in ascending order.\r\n     * @param {TfvcInterfaces.TfvcChangesetSearchCriteria} searchCriteria - Following criteria available (.itemPath, .version, .versionType, .versionOption, .author, .fromId, .toId, .fromDate, .toDate) Default: null\r\n     */\r\n    getChangeset(id, project, maxChangeCount, includeDetails, includeWorkItems, maxCommentLength, includeSourceRename, skip, top, orderby, searchCriteria) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    maxChangeCount: maxChangeCount,\r\n                    includeDetails: includeDetails,\r\n                    includeWorkItems: includeWorkItems,\r\n                    maxCommentLength: maxCommentLength,\r\n                    includeSourceRename: includeSourceRename,\r\n                    '$skip': skip,\r\n                    '$top': top,\r\n                    '$orderby': orderby,\r\n                    searchCriteria: searchCriteria,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"tfvc\", \"0bc8f0a4-6bfb-42a9-ba84-139da7b99c49\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcChangeset, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve Tfvc Changesets\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} maxCommentLength - Include details about associated work items in the response. Default: null\r\n     * @param {number} skip - Number of results to skip. Default: null\r\n     * @param {number} top - The maximum number of results to return. Default: null\r\n     * @param {string} orderby - Results are sorted by ID in descending order by default. Use id asc to sort by ID in ascending order.\r\n     * @param {TfvcInterfaces.TfvcChangesetSearchCriteria} searchCriteria - Following criteria available (.itemPath, .version, .versionType, .versionOption, .author, .fromId, .toId, .fromDate, .toDate) Default: null\r\n     */\r\n    getChangesets(project, maxCommentLength, skip, top, orderby, searchCriteria) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    maxCommentLength: maxCommentLength,\r\n                    '$skip': skip,\r\n                    '$top': top,\r\n                    '$orderby': orderby,\r\n                    searchCriteria: searchCriteria,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"tfvc\", \"0bc8f0a4-6bfb-42a9-ba84-139da7b99c49\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcChangesetRef, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns changesets for a given list of changeset Ids.\r\n     *\r\n     * @param {TfvcInterfaces.TfvcChangesetsRequestData} changesetsRequestData - List of changeset IDs.\r\n     */\r\n    getBatchedChangesets(changesetsRequestData) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"tfvc\", \"b7e7c173-803c-4fea-9ec8-31ee35c5502a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, changesetsRequestData, options);\r\n                    let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcChangesetRef, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieves the work items associated with a particular changeset.\r\n     *\r\n     * @param {number} id - ID of the changeset.\r\n     */\r\n    getChangesetWorkItems(id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    id: id\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"tfvc\", \"64ae0bea-1d71-47c9-a9e5-fe73f5ea0ff4\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Post for retrieving a set of items given a list of paths or a long path. Allows for specifying the recursionLevel and version descriptors for each path.\r\n     *\r\n     * @param {TfvcInterfaces.TfvcItemRequestData} itemRequestData\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getItemsBatch(itemRequestData, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"tfvc\", \"fe6f827b-5f64-480f-b8af-1eca3b80e833\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, itemRequestData, options);\r\n                    let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcItem, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Post for retrieving a set of items given a list of paths or a long path. Allows for specifying the recursionLevel and version descriptors for each path.\r\n     *\r\n     * @param {TfvcInterfaces.TfvcItemRequestData} itemRequestData\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getItemsBatchZip(itemRequestData, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"tfvc\", \"fe6f827b-5f64-480f-b8af-1eca3b80e833\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.\r\n     *\r\n     * @param {string} path - Version control path of an individual item to return.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} fileName - file name of item returned.\r\n     * @param {boolean} download - If true, create a downloadable attachment.\r\n     * @param {string} scopePath - Version control path of a folder to return multiple items.\r\n     * @param {TfvcInterfaces.VersionControlRecursionType} recursionLevel - None (just the item), or OneLevel (contents of a folder).\r\n     * @param {TfvcInterfaces.TfvcVersionDescriptor} versionDescriptor - Version descriptor.  Default is null.\r\n     * @param {boolean} includeContent - Set to true to include item content when requesting json.  Default is false.\r\n     */\r\n    getItem(path, project, fileName, download, scopePath, recursionLevel, versionDescriptor, includeContent) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (path == null) {\r\n                throw new TypeError('path can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    path: path,\r\n                    fileName: fileName,\r\n                    download: download,\r\n                    scopePath: scopePath,\r\n                    recursionLevel: recursionLevel,\r\n                    versionDescriptor: versionDescriptor,\r\n                    includeContent: includeContent,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"tfvc\", \"ba9fc436-9a38-4578-89d6-e4f3241f5040\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcItem, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.\r\n     *\r\n     * @param {string} path - Version control path of an individual item to return.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} fileName - file name of item returned.\r\n     * @param {boolean} download - If true, create a downloadable attachment.\r\n     * @param {string} scopePath - Version control path of a folder to return multiple items.\r\n     * @param {TfvcInterfaces.VersionControlRecursionType} recursionLevel - None (just the item), or OneLevel (contents of a folder).\r\n     * @param {TfvcInterfaces.TfvcVersionDescriptor} versionDescriptor - Version descriptor.  Default is null.\r\n     * @param {boolean} includeContent - Set to true to include item content when requesting json.  Default is false.\r\n     */\r\n    getItemContent(path, project, fileName, download, scopePath, recursionLevel, versionDescriptor, includeContent) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (path == null) {\r\n                throw new TypeError('path can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    path: path,\r\n                    fileName: fileName,\r\n                    download: download,\r\n                    scopePath: scopePath,\r\n                    recursionLevel: recursionLevel,\r\n                    versionDescriptor: versionDescriptor,\r\n                    includeContent: includeContent,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"tfvc\", \"ba9fc436-9a38-4578-89d6-e4f3241f5040\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of Tfvc items\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} scopePath - Version control path of a folder to return multiple items.\r\n     * @param {TfvcInterfaces.VersionControlRecursionType} recursionLevel - None (just the item), or OneLevel (contents of a folder).\r\n     * @param {boolean} includeLinks - True to include links.\r\n     * @param {TfvcInterfaces.TfvcVersionDescriptor} versionDescriptor\r\n     */\r\n    getItems(project, scopePath, recursionLevel, includeLinks, versionDescriptor) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    scopePath: scopePath,\r\n                    recursionLevel: recursionLevel,\r\n                    includeLinks: includeLinks,\r\n                    versionDescriptor: versionDescriptor,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"tfvc\", \"ba9fc436-9a38-4578-89d6-e4f3241f5040\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcItem, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.\r\n     *\r\n     * @param {string} path - Version control path of an individual item to return.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} fileName - file name of item returned.\r\n     * @param {boolean} download - If true, create a downloadable attachment.\r\n     * @param {string} scopePath - Version control path of a folder to return multiple items.\r\n     * @param {TfvcInterfaces.VersionControlRecursionType} recursionLevel - None (just the item), or OneLevel (contents of a folder).\r\n     * @param {TfvcInterfaces.TfvcVersionDescriptor} versionDescriptor - Version descriptor.  Default is null.\r\n     * @param {boolean} includeContent - Set to true to include item content when requesting json.  Default is false.\r\n     */\r\n    getItemText(path, project, fileName, download, scopePath, recursionLevel, versionDescriptor, includeContent) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (path == null) {\r\n                throw new TypeError('path can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    path: path,\r\n                    fileName: fileName,\r\n                    download: download,\r\n                    scopePath: scopePath,\r\n                    recursionLevel: recursionLevel,\r\n                    versionDescriptor: versionDescriptor,\r\n                    includeContent: includeContent,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"tfvc\", \"ba9fc436-9a38-4578-89d6-e4f3241f5040\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/plain\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.\r\n     *\r\n     * @param {string} path - Version control path of an individual item to return.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} fileName - file name of item returned.\r\n     * @param {boolean} download - If true, create a downloadable attachment.\r\n     * @param {string} scopePath - Version control path of a folder to return multiple items.\r\n     * @param {TfvcInterfaces.VersionControlRecursionType} recursionLevel - None (just the item), or OneLevel (contents of a folder).\r\n     * @param {TfvcInterfaces.TfvcVersionDescriptor} versionDescriptor - Version descriptor.  Default is null.\r\n     * @param {boolean} includeContent - Set to true to include item content when requesting json.  Default is false.\r\n     */\r\n    getItemZip(path, project, fileName, download, scopePath, recursionLevel, versionDescriptor, includeContent) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (path == null) {\r\n                throw new TypeError('path can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    path: path,\r\n                    fileName: fileName,\r\n                    download: download,\r\n                    scopePath: scopePath,\r\n                    recursionLevel: recursionLevel,\r\n                    versionDescriptor: versionDescriptor,\r\n                    includeContent: includeContent,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"tfvc\", \"ba9fc436-9a38-4578-89d6-e4f3241f5040\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get items under a label.\r\n     *\r\n     * @param {string} labelId - Unique identifier of label\r\n     * @param {number} top - Max number of items to return\r\n     * @param {number} skip - Number of items to skip\r\n     */\r\n    getLabelItems(labelId, top, skip) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    labelId: labelId\r\n                };\r\n                let queryValues = {\r\n                    '$top': top,\r\n                    '$skip': skip,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"tfvc\", \"06166e34-de17-4b60-8cd1-23182a346fda\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcItem, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a single deep label.\r\n     *\r\n     * @param {string} labelId - Unique identifier of label\r\n     * @param {TfvcInterfaces.TfvcLabelRequestData} requestData - maxItemCount\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getLabel(labelId, requestData, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (requestData == null) {\r\n                throw new TypeError('requestData can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    labelId: labelId\r\n                };\r\n                let queryValues = {\r\n                    requestData: requestData,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"tfvc\", \"a5d9bd7f-b661-4d0e-b9be-d9c16affae54\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcLabel, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a collection of shallow label references.\r\n     *\r\n     * @param {TfvcInterfaces.TfvcLabelRequestData} requestData - labelScope, name, owner, and itemLabelFilter\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} top - Max number of labels to return, defaults to 100 when undefined\r\n     * @param {number} skip - Number of labels to skip\r\n     */\r\n    getLabels(requestData, project, top, skip) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (requestData == null) {\r\n                throw new TypeError('requestData can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    requestData: requestData,\r\n                    '$top': top,\r\n                    '$skip': skip,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"tfvc\", \"a5d9bd7f-b661-4d0e-b9be-d9c16affae54\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcLabelRef, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get changes included in a shelveset.\r\n     *\r\n     * @param {string} shelvesetId - Shelveset's unique ID\r\n     * @param {number} top - Max number of changes to return\r\n     * @param {number} skip - Number of changes to skip\r\n     */\r\n    getShelvesetChanges(shelvesetId, top, skip) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (shelvesetId == null) {\r\n                throw new TypeError('shelvesetId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    shelvesetId: shelvesetId,\r\n                    '$top': top,\r\n                    '$skip': skip,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"tfvc\", \"dbaf075b-0445-4c34-9e5b-82292f856522\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcChange, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a single deep shelveset.\r\n     *\r\n     * @param {string} shelvesetId - Shelveset's unique ID\r\n     * @param {TfvcInterfaces.TfvcShelvesetRequestData} requestData - includeDetails, includeWorkItems, maxChangeCount, and maxCommentLength\r\n     */\r\n    getShelveset(shelvesetId, requestData) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (shelvesetId == null) {\r\n                throw new TypeError('shelvesetId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    shelvesetId: shelvesetId,\r\n                    requestData: requestData,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"tfvc\", \"e36d44fb-e907-4b0a-b194-f83f1ed32ad3\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcShelveset, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Return a collection of shallow shelveset references.\r\n     *\r\n     * @param {TfvcInterfaces.TfvcShelvesetRequestData} requestData - name, owner, and maxCommentLength\r\n     * @param {number} top - Max number of shelvesets to return\r\n     * @param {number} skip - Number of shelvesets to skip\r\n     */\r\n    getShelvesets(requestData, top, skip) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    requestData: requestData,\r\n                    '$top': top,\r\n                    '$skip': skip,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"tfvc\", \"e36d44fb-e907-4b0a-b194-f83f1ed32ad3\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, TfvcInterfaces.TypeInfo.TfvcShelvesetRef, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get work items associated with a shelveset.\r\n     *\r\n     * @param {string} shelvesetId - Shelveset's unique ID\r\n     */\r\n    getShelvesetWorkItems(shelvesetId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (shelvesetId == null) {\r\n                throw new TypeError('shelvesetId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    shelvesetId: shelvesetId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"tfvc\", \"a7a0c1c1-373e-425a-b031-a519474d743d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Provides File Count and Uncompressed Bytes for a Collection/Project at a particular scope for TFVC.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} scopePath - '$/' for collection, '$/project' for specific project\r\n     */\r\n    getTfvcStatistics(project, scopePath) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    scopePath: scopePath,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"tfvc\", \"e15c74c0-3605-40e0-aed4-4cc61e549ed8\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nTfvcApi.RESOURCE_AREA_ID = \"8aa40520-446d-40e6-89f6-9c9f9ce44c48\";\r\nexports.TfvcApi = TfvcApi;\r\n","\"use strict\";\r\n//*******************************************************************************************************\r\n// significant portions of this file copied from: VSO\\src\\Vssf\\WebPlatform\\Platform\\Scripts\\VSS\\WebApi\\RestClient.ts\r\n//*******************************************************************************************************\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/// Imports of 3rd Party ///\r\nconst url = require(\"url\");\r\nconst path = require(\"path\");\r\nclass InvalidApiResourceVersionError {\r\n    constructor(message) {\r\n        this.name = \"Invalid resource version\";\r\n        this.message = message;\r\n    }\r\n}\r\nexports.InvalidApiResourceVersionError = InvalidApiResourceVersionError;\r\n/**\r\n * Base class that should be used (derived from) to make requests to VSS REST apis\r\n */\r\nclass VsoClient {\r\n    constructor(baseUrl, restClient) {\r\n        this.baseUrl = baseUrl;\r\n        this.basePath = url.parse(baseUrl).pathname;\r\n        this.restClient = restClient;\r\n        this._locationsByAreaPromises = {};\r\n        this._initializationPromise = Promise.resolve(true);\r\n    }\r\n    autoNegotiateApiVersion(location, requestedVersion) {\r\n        let negotiatedVersion;\r\n        let apiVersion;\r\n        let apiVersionString;\r\n        if (requestedVersion) {\r\n            let apiVersionRegEx = new RegExp('(\\\\d+(\\\\.\\\\d+)?)(-preview(\\\\.(\\\\d+))?)?');\r\n            // Need to handle 3 types of api versions + invalid apiversion\r\n            // '2.1-preview.1' = [\"2.1-preview.1\", \"2.1\", \".1\", -preview.1\", \".1\", \"1\"]\r\n            // '2.1-preview' = [\"2.1-preview\", \"2.1\", \".1\", \"-preview\", undefined, undefined]\r\n            // '2.1' = [\"2.1\", \"2.1\", \".1\", undefined, undefined, undefined]\r\n            let isPreview = false;\r\n            let resourceVersion;\r\n            let regExExecArray = apiVersionRegEx.exec(requestedVersion);\r\n            if (regExExecArray) {\r\n                if (regExExecArray[1]) {\r\n                    // we have an api version\r\n                    apiVersion = +regExExecArray[1];\r\n                    apiVersionString = regExExecArray[1];\r\n                    if (regExExecArray[3]) {\r\n                        // requesting preview\r\n                        isPreview = true;\r\n                        if (regExExecArray[5]) {\r\n                            // we have a resource version\r\n                            resourceVersion = +regExExecArray[5];\r\n                        }\r\n                    }\r\n                    // compare the location version and requestedversion\r\n                    if (apiVersion <= +location.releasedVersion\r\n                        || (!resourceVersion && apiVersion <= +location.maxVersion && isPreview)\r\n                        || (resourceVersion && apiVersion <= +location.maxVersion && resourceVersion <= +location.resourceVersion)) {\r\n                        negotiatedVersion = requestedVersion;\r\n                    }\r\n                    // else fall back to latest version of the resource from location\r\n                }\r\n            }\r\n        }\r\n        if (!negotiatedVersion) {\r\n            // Use the latest version of the resource if the api version was not specified in the request or if the requested version is higher then the location's supported version\r\n            if (apiVersion < +location.maxVersion) {\r\n                negotiatedVersion = apiVersionString + \"-preview\";\r\n            }\r\n            else if (location.maxVersion === location.releasedVersion) {\r\n                negotiatedVersion = location.maxVersion;\r\n            }\r\n            else {\r\n                negotiatedVersion = location.maxVersion + \"-preview.\" + location.resourceVersion;\r\n            }\r\n        }\r\n        return negotiatedVersion;\r\n    }\r\n    /**\r\n     * Gets the route template for a resource based on its location ID and negotiates the api version\r\n     */\r\n    getVersioningData(apiVersion, area, locationId, routeValues, queryParams) {\r\n        let requestUrl;\r\n        return this.beginGetLocation(area, locationId)\r\n            .then((location) => {\r\n            if (!location) {\r\n                throw new Error(\"Failed to find api location for area: \" + area + \" id: \" + locationId);\r\n            }\r\n            apiVersion = this.autoNegotiateApiVersion(location, apiVersion);\r\n            requestUrl = this.getRequestUrl(location.routeTemplate, location.area, location.resourceName, routeValues, queryParams);\r\n            return {\r\n                apiVersion: apiVersion,\r\n                requestUrl: requestUrl\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Sets a promise that is waited on before any requests are issued. Can be used to asynchronously\r\n     * set the request url and auth token manager.\r\n     */\r\n    _setInitializationPromise(promise) {\r\n        if (promise) {\r\n            this._initializationPromise = promise;\r\n        }\r\n    }\r\n    /**\r\n     * Gets information about an API resource location (route template, supported versions, etc.)\r\n     *\r\n     * @param area resource area name\r\n     * @param locationId Guid of the location to get\r\n     */\r\n    beginGetLocation(area, locationId) {\r\n        return this._initializationPromise.then(() => {\r\n            return this.beginGetAreaLocations(area);\r\n        }).then((areaLocations) => {\r\n            return areaLocations[(locationId || \"\").toLowerCase()];\r\n        });\r\n    }\r\n    beginGetAreaLocations(area) {\r\n        let areaLocationsPromise = this._locationsByAreaPromises[area];\r\n        if (!areaLocationsPromise) {\r\n            let requestUrl = this.resolveUrl(VsoClient.APIS_RELATIVE_PATH + \"/\" + area);\r\n            areaLocationsPromise = this.restClient.options(requestUrl)\r\n                .then((res) => {\r\n                if (!res.result) {\r\n                    return {};\r\n                }\r\n                let locationsLookup = {};\r\n                let resourceLocations = res.result.value;\r\n                let i;\r\n                for (i = 0; i < resourceLocations.length; i++) {\r\n                    let resourceLocation = resourceLocations[i];\r\n                    locationsLookup[resourceLocation.id.toLowerCase()] = resourceLocation;\r\n                }\r\n                // If we have completed successfully, cache the response.\r\n                this._locationsByAreaPromises[area] = areaLocationsPromise;\r\n                return locationsLookup;\r\n            });\r\n        }\r\n        return areaLocationsPromise;\r\n    }\r\n    resolveUrl(relativeUrl) {\r\n        return url.resolve(this.baseUrl, path.join(this.basePath, relativeUrl));\r\n    }\r\n    queryParamsToStringHelper(queryParams, prefix) {\r\n        if (queryParams == null || queryParams.length === 0) {\r\n            return '';\r\n        }\r\n        let queryString = '';\r\n        if (typeof (queryParams) !== 'string') {\r\n            for (let property in queryParams) {\r\n                if (queryParams.hasOwnProperty(property)) {\r\n                    const prop = queryParams[property];\r\n                    const newPrefix = prefix + encodeURIComponent(property.toString()) + '.';\r\n                    queryString += this.queryParamsToStringHelper(prop, newPrefix);\r\n                }\r\n            }\r\n        }\r\n        if (queryString === '' && prefix.length > 0) {\r\n            // Date.prototype.toString() returns a string that is not valid for the REST API.\r\n            // Need to specially call `toUTCString()` instead for such cases\r\n            const queryValue = typeof queryParams === 'object' && 'toUTCString' in queryParams ? queryParams.toUTCString() : queryParams.toString();\r\n            // Will always need to chop period off of end of prefix\r\n            queryString = prefix.slice(0, -1) + '=' + encodeURIComponent(queryValue) + '&';\r\n        }\r\n        return queryString;\r\n    }\r\n    queryParamsToString(queryParams) {\r\n        const queryString = '?' + this.queryParamsToStringHelper(queryParams, '');\r\n        // Will always need to slice either a ? or & off of the end\r\n        return queryString.slice(0, -1);\r\n    }\r\n    getRequestUrl(routeTemplate, area, resource, routeValues, queryParams) {\r\n        // Add area/resource route values (based on the location)\r\n        routeValues = routeValues || {};\r\n        if (!routeValues.area) {\r\n            routeValues.area = area;\r\n        }\r\n        if (!routeValues.resource) {\r\n            routeValues.resource = resource;\r\n        }\r\n        // Replace templated route values\r\n        let relativeUrl = this.replaceRouteValues(routeTemplate, routeValues);\r\n        // Append query parameters to the end\r\n        if (queryParams) {\r\n            relativeUrl += this.queryParamsToString(queryParams);\r\n        }\r\n        // Resolve the relative url with the base\r\n        return url.resolve(this.baseUrl, path.join(this.basePath, relativeUrl));\r\n    }\r\n    // helper method copied directly from VSS\\WebAPI\\restclient.ts\r\n    replaceRouteValues(routeTemplate, routeValues) {\r\n        let result = \"\", currentPathPart = \"\", paramName = \"\", insideParam = false, charIndex, routeTemplateLength = routeTemplate.length, c;\r\n        for (charIndex = 0; charIndex < routeTemplateLength; charIndex++) {\r\n            c = routeTemplate[charIndex];\r\n            if (insideParam) {\r\n                if (c == \"}\") {\r\n                    insideParam = false;\r\n                    if (routeValues[paramName]) {\r\n                        currentPathPart += encodeURIComponent(routeValues[paramName]);\r\n                    }\r\n                    else {\r\n                        // Normalize param name in order to capture wild-card routes\r\n                        let strippedParamName = paramName.replace(/[^a-z0-9]/ig, '');\r\n                        if (routeValues[strippedParamName]) {\r\n                            currentPathPart += encodeURIComponent(routeValues[strippedParamName]);\r\n                        }\r\n                    }\r\n                    paramName = \"\";\r\n                }\r\n                else {\r\n                    paramName += c;\r\n                }\r\n            }\r\n            else {\r\n                if (c == \"/\") {\r\n                    if (currentPathPart) {\r\n                        if (result) {\r\n                            result += \"/\";\r\n                        }\r\n                        result += currentPathPart;\r\n                        currentPathPart = \"\";\r\n                    }\r\n                }\r\n                else if (c == \"{\") {\r\n                    if ((charIndex + 1) < routeTemplateLength && routeTemplate[charIndex + 1] == \"{\") {\r\n                        // Escaped '{'\r\n                        currentPathPart += c;\r\n                        charIndex++;\r\n                    }\r\n                    else {\r\n                        insideParam = true;\r\n                    }\r\n                }\r\n                else if (c == '}') {\r\n                    currentPathPart += c;\r\n                    if ((charIndex + 1) < routeTemplateLength && routeTemplate[charIndex + 1] == \"}\") {\r\n                        // Escaped '}'\r\n                        charIndex++;\r\n                    }\r\n                }\r\n                else {\r\n                    currentPathPart += c;\r\n                }\r\n            }\r\n        }\r\n        if (currentPathPart) {\r\n            if (result) {\r\n                result += \"/\";\r\n            }\r\n            result += currentPathPart;\r\n        }\r\n        return result;\r\n    }\r\n}\r\nVsoClient.APIS_RELATIVE_PATH = \"_apis\";\r\nVsoClient.PREVIEW_INDICATOR = \"-preview.\";\r\nexports.VsoClient = VsoClient;\r\n",null,"\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst Comments_Contracts = require(\"./interfaces/CommentsInterfaces\");\r\nconst WikiInterfaces = require(\"./interfaces/WikiInterfaces\");\r\nclass WikiApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-Wiki-api', options);\r\n    }\r\n    /**\r\n     * Uploads an attachment on a comment on a wiki page.\r\n     *\r\n     * @param {NodeJS.ReadableStream} contentStream - Content to upload\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} wikiIdentifier - Wiki ID or wiki name.\r\n     * @param {number} pageId - Wiki page ID.\r\n     */\r\n    createCommentAttachment(customHeaders, contentStream, project, wikiIdentifier, pageId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    wikiIdentifier: wikiIdentifier,\r\n                    pageId: pageId\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"wiki\", \"5100d976-363d-42e7-a19d-4171ecb44782\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"POST\", url, contentStream, options);\r\n                    let ret = this.formatResponse(res.result, Comments_Contracts.TypeInfo.CommentAttachment, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Downloads an attachment on a comment on a wiki page.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} wikiIdentifier - Wiki ID or wiki name.\r\n     * @param {number} pageId - Wiki page ID.\r\n     * @param {string} attachmentId - Attachment ID.\r\n     */\r\n    getAttachmentContent(project, wikiIdentifier, pageId, attachmentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    wikiIdentifier: wikiIdentifier,\r\n                    pageId: pageId,\r\n                    attachmentId: attachmentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"wiki\", \"5100d976-363d-42e7-a19d-4171ecb44782\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Add a reaction on a wiki page comment.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} wikiIdentifier - Wiki ID or wiki name\r\n     * @param {number} pageId - Wiki page ID\r\n     * @param {number} commentId - ID of the associated comment\r\n     * @param {Comments_Contracts.CommentReactionType} type - Type of the reaction being added\r\n     */\r\n    addCommentReaction(project, wikiIdentifier, pageId, commentId, type) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    wikiIdentifier: wikiIdentifier,\r\n                    pageId: pageId,\r\n                    commentId: commentId,\r\n                    type: type\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"wiki\", \"7a5bc693-aab7-4d48-8f34-36f373022063\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, null, options);\r\n                    let ret = this.formatResponse(res.result, Comments_Contracts.TypeInfo.CommentReaction, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a reaction on a wiki page comment.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} wikiIdentifier - Wiki ID or name\r\n     * @param {number} pageId - Wiki page ID\r\n     * @param {number} commentId - ID of the associated comment\r\n     * @param {Comments_Contracts.CommentReactionType} type - Type of the reaction being deleted\r\n     */\r\n    deleteCommentReaction(project, wikiIdentifier, pageId, commentId, type) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    wikiIdentifier: wikiIdentifier,\r\n                    pageId: pageId,\r\n                    commentId: commentId,\r\n                    type: type\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"wiki\", \"7a5bc693-aab7-4d48-8f34-36f373022063\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, Comments_Contracts.TypeInfo.CommentReaction, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a list of users who have reacted for the given wiki comment with a given reaction type. Supports paging, with a default page size of 100 users at a time.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} wikiIdentifier - Wiki ID or wiki name.\r\n     * @param {number} pageId - Wiki page ID.\r\n     * @param {number} commentId - ID of the associated comment\r\n     * @param {Comments_Contracts.CommentReactionType} type - Type of the reaction for which the engaged users are being requested\r\n     * @param {number} top - Number of enagaged users to be returned in a given page. Optional, defaults to 100\r\n     * @param {number} skip - Number of engaged users to be skipped to page the next set of engaged users, defaults to 0\r\n     */\r\n    getEngagedUsers(project, wikiIdentifier, pageId, commentId, type, top, skip) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    wikiIdentifier: wikiIdentifier,\r\n                    pageId: pageId,\r\n                    commentId: commentId,\r\n                    type: type\r\n                };\r\n                let queryValues = {\r\n                    '$top': top,\r\n                    '$skip': skip,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"wiki\", \"598a5268-41a7-4162-b7dc-344131e4d1fa\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Add a comment on a wiki page.\r\n     *\r\n     * @param {Comments_Contracts.CommentCreateParameters} request - Comment create request.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} wikiIdentifier - Wiki ID or wiki name.\r\n     * @param {number} pageId - Wiki page ID.\r\n     */\r\n    addComment(request, project, wikiIdentifier, pageId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    wikiIdentifier: wikiIdentifier,\r\n                    pageId: pageId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"wiki\", \"9b394e93-7db5-46cb-9c26-09a36aa5c895\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, request, options);\r\n                    let ret = this.formatResponse(res.result, Comments_Contracts.TypeInfo.Comment, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a comment on a wiki page.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} wikiIdentifier - Wiki ID or name.\r\n     * @param {number} pageId - Wiki page ID.\r\n     * @param {number} id - Comment ID.\r\n     */\r\n    deleteComment(project, wikiIdentifier, pageId, id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    wikiIdentifier: wikiIdentifier,\r\n                    pageId: pageId,\r\n                    id: id\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"wiki\", \"9b394e93-7db5-46cb-9c26-09a36aa5c895\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a comment associated with the Wiki Page.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} wikiIdentifier - Wiki ID or wiki name.\r\n     * @param {number} pageId - Wiki page ID.\r\n     * @param {number} id - ID of the comment to return.\r\n     * @param {boolean} excludeDeleted - Specify if the deleted comment should be skipped.\r\n     * @param {Comments_Contracts.CommentExpandOptions} expand - Specifies the additional data retrieval options for comments.\r\n     */\r\n    getComment(project, wikiIdentifier, pageId, id, excludeDeleted, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    wikiIdentifier: wikiIdentifier,\r\n                    pageId: pageId,\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    excludeDeleted: excludeDeleted,\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"wiki\", \"9b394e93-7db5-46cb-9c26-09a36aa5c895\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Comments_Contracts.TypeInfo.Comment, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a pageable list of comments.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} wikiIdentifier - Wiki ID or wiki name.\r\n     * @param {number} pageId - Wiki page ID.\r\n     * @param {number} top - Max number of comments to return.\r\n     * @param {string} continuationToken - Used to query for the next page of comments.\r\n     * @param {boolean} excludeDeleted - Specify if the deleted comments should be skipped.\r\n     * @param {Comments_Contracts.CommentExpandOptions} expand - Specifies the additional data retrieval options for comments.\r\n     * @param {Comments_Contracts.CommentSortOrder} order - Order in which the comments should be returned.\r\n     * @param {number} parentId - CommentId of the parent comment.\r\n     */\r\n    listComments(project, wikiIdentifier, pageId, top, continuationToken, excludeDeleted, expand, order, parentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    wikiIdentifier: wikiIdentifier,\r\n                    pageId: pageId\r\n                };\r\n                let queryValues = {\r\n                    '$top': top,\r\n                    continuationToken: continuationToken,\r\n                    excludeDeleted: excludeDeleted,\r\n                    '$expand': expand,\r\n                    order: order,\r\n                    parentId: parentId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"wiki\", \"9b394e93-7db5-46cb-9c26-09a36aa5c895\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, Comments_Contracts.TypeInfo.CommentList, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a comment on a wiki page.\r\n     *\r\n     * @param {Comments_Contracts.CommentUpdateParameters} comment - Comment update request.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} wikiIdentifier - Wiki ID or wiki name.\r\n     * @param {number} pageId - Wiki page ID.\r\n     * @param {number} id - Comment ID.\r\n     */\r\n    updateComment(comment, project, wikiIdentifier, pageId, id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    wikiIdentifier: wikiIdentifier,\r\n                    pageId: pageId,\r\n                    id: id\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"wiki\", \"9b394e93-7db5-46cb-9c26-09a36aa5c895\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, comment, options);\r\n                    let ret = this.formatResponse(res.result, Comments_Contracts.TypeInfo.Comment, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets metadata or content of the wiki page for the provided path. Content negotiation is done based on the `Accept` header sent in the request.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} wikiIdentifier - Wiki ID or wiki name.\r\n     * @param {string} path - Wiki page path.\r\n     * @param {GitInterfaces.VersionControlRecursionType} recursionLevel - Recursion level for subpages retrieval. Defaults to `None` (Optional).\r\n     * @param {GitInterfaces.GitVersionDescriptor} versionDescriptor - GitVersionDescriptor for the page. Defaults to the default branch (Optional).\r\n     * @param {boolean} includeContent - True to include the content of the page in the response for Json content type. Defaults to false (Optional)\r\n     */\r\n    getPageText(project, wikiIdentifier, path, recursionLevel, versionDescriptor, includeContent) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    wikiIdentifier: wikiIdentifier\r\n                };\r\n                let queryValues = {\r\n                    path: path,\r\n                    recursionLevel: recursionLevel,\r\n                    versionDescriptor: versionDescriptor,\r\n                    includeContent: includeContent,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"wiki\", \"25d3fbc7-fe3d-46cb-b5a5-0b6f79caf27b\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/plain\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets metadata or content of the wiki page for the provided path. Content negotiation is done based on the `Accept` header sent in the request.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} wikiIdentifier - Wiki ID or wiki name.\r\n     * @param {string} path - Wiki page path.\r\n     * @param {GitInterfaces.VersionControlRecursionType} recursionLevel - Recursion level for subpages retrieval. Defaults to `None` (Optional).\r\n     * @param {GitInterfaces.GitVersionDescriptor} versionDescriptor - GitVersionDescriptor for the page. Defaults to the default branch (Optional).\r\n     * @param {boolean} includeContent - True to include the content of the page in the response for Json content type. Defaults to false (Optional)\r\n     */\r\n    getPageZip(project, wikiIdentifier, path, recursionLevel, versionDescriptor, includeContent) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    wikiIdentifier: wikiIdentifier\r\n                };\r\n                let queryValues = {\r\n                    path: path,\r\n                    recursionLevel: recursionLevel,\r\n                    versionDescriptor: versionDescriptor,\r\n                    includeContent: includeContent,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"wiki\", \"25d3fbc7-fe3d-46cb-b5a5-0b6f79caf27b\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets metadata or content of the wiki page for the provided page id. Content negotiation is done based on the `Accept` header sent in the request.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} wikiIdentifier - Wiki ID or wiki name..\r\n     * @param {number} id - Wiki page ID.\r\n     * @param {GitInterfaces.VersionControlRecursionType} recursionLevel - Recursion level for subpages retrieval. Defaults to `None` (Optional).\r\n     * @param {boolean} includeContent - True to include the content of the page in the response for Json content type. Defaults to false (Optional)\r\n     */\r\n    getPageByIdText(project, wikiIdentifier, id, recursionLevel, includeContent) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    wikiIdentifier: wikiIdentifier,\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    recursionLevel: recursionLevel,\r\n                    includeContent: includeContent,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"wiki\", \"ceddcf75-1068-452d-8b13-2d4d76e1f970\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"text/plain\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets metadata or content of the wiki page for the provided page id. Content negotiation is done based on the `Accept` header sent in the request.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} wikiIdentifier - Wiki ID or wiki name..\r\n     * @param {number} id - Wiki page ID.\r\n     * @param {GitInterfaces.VersionControlRecursionType} recursionLevel - Recursion level for subpages retrieval. Defaults to `None` (Optional).\r\n     * @param {boolean} includeContent - True to include the content of the page in the response for Json content type. Defaults to false (Optional)\r\n     */\r\n    getPageByIdZip(project, wikiIdentifier, id, recursionLevel, includeContent) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    wikiIdentifier: wikiIdentifier,\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    recursionLevel: recursionLevel,\r\n                    includeContent: includeContent,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"wiki\", \"ceddcf75-1068-452d-8b13-2d4d76e1f970\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns pageable list of Wiki Pages\r\n     *\r\n     * @param {WikiInterfaces.WikiPagesBatchRequest} pagesBatchRequest - Wiki batch page request.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} wikiIdentifier - Wiki ID or wiki name.\r\n     * @param {GitInterfaces.GitVersionDescriptor} versionDescriptor - GitVersionDescriptor for the page. (Optional in case of ProjectWiki).\r\n     */\r\n    getPagesBatch(pagesBatchRequest, project, wikiIdentifier, versionDescriptor) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    wikiIdentifier: wikiIdentifier\r\n                };\r\n                let queryValues = {\r\n                    versionDescriptor: versionDescriptor,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"wiki\", \"71323c46-2592-4398-8771-ced73dd87207\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, pagesBatchRequest, options);\r\n                    let ret = this.formatResponse(res.result, WikiInterfaces.TypeInfo.WikiPageDetail, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns page detail corresponding to Page ID.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} wikiIdentifier - Wiki ID or wiki name.\r\n     * @param {number} pageId - Wiki page ID.\r\n     * @param {number} pageViewsForDays - last N days from the current day for which page views is to be returned. It's inclusive of current day.\r\n     */\r\n    getPageData(project, wikiIdentifier, pageId, pageViewsForDays) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    wikiIdentifier: wikiIdentifier,\r\n                    pageId: pageId\r\n                };\r\n                let queryValues = {\r\n                    pageViewsForDays: pageViewsForDays,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"wiki\", \"81c4e0fe-7663-4d62-ad46-6ab78459f274\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WikiInterfaces.TypeInfo.WikiPageDetail, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a new page view stats resource or updates an existing page view stats resource.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} wikiIdentifier - Wiki ID or wiki name.\r\n     * @param {GitInterfaces.GitVersionDescriptor} wikiVersion - Wiki version.\r\n     * @param {string} path - Wiki page path.\r\n     * @param {string} oldPath - Old page path. This is optional and required to rename path in existing page view stats.\r\n     */\r\n    createOrUpdatePageViewStats(project, wikiIdentifier, wikiVersion, path, oldPath) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (wikiVersion == null) {\r\n                throw new TypeError('wikiVersion can not be null or undefined');\r\n            }\r\n            if (path == null) {\r\n                throw new TypeError('path can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    wikiIdentifier: wikiIdentifier\r\n                };\r\n                let queryValues = {\r\n                    wikiVersion: wikiVersion,\r\n                    path: path,\r\n                    oldPath: oldPath,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"wiki\", \"1087b746-5d15-41b9-bea6-14e325e7f880\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, null, options);\r\n                    let ret = this.formatResponse(res.result, WikiInterfaces.TypeInfo.WikiPageViewStats, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates the wiki resource.\r\n     *\r\n     * @param {WikiInterfaces.WikiCreateParametersV2} wikiCreateParams - Parameters for the wiki creation.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createWiki(wikiCreateParams, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"wiki\", \"288d122c-dbd4-451d-aa5f-7dbbba070728\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, wikiCreateParams, options);\r\n                    let ret = this.formatResponse(res.result, WikiInterfaces.TypeInfo.WikiV2, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes the wiki corresponding to the wiki ID or wiki name provided.\r\n     *\r\n     * @param {string} wikiIdentifier - Wiki ID or wiki name.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    deleteWiki(wikiIdentifier, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    wikiIdentifier: wikiIdentifier\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"wiki\", \"288d122c-dbd4-451d-aa5f-7dbbba070728\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, WikiInterfaces.TypeInfo.WikiV2, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets all wikis in a project or collection.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getAllWikis(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"wiki\", \"288d122c-dbd4-451d-aa5f-7dbbba070728\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WikiInterfaces.TypeInfo.WikiV2, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the wiki corresponding to the wiki ID or wiki name provided.\r\n     *\r\n     * @param {string} wikiIdentifier - Wiki ID or wiki name.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getWiki(wikiIdentifier, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    wikiIdentifier: wikiIdentifier\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"wiki\", \"288d122c-dbd4-451d-aa5f-7dbbba070728\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WikiInterfaces.TypeInfo.WikiV2, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates the wiki corresponding to the wiki ID or wiki name provided using the update parameters.\r\n     *\r\n     * @param {WikiInterfaces.WikiUpdateParameters} updateParameters - Update parameters.\r\n     * @param {string} wikiIdentifier - Wiki ID or wiki name.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateWiki(updateParameters, wikiIdentifier, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    wikiIdentifier: wikiIdentifier\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"wiki\", \"288d122c-dbd4-451d-aa5f-7dbbba070728\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, updateParameters, options);\r\n                    let ret = this.formatResponse(res.result, WikiInterfaces.TypeInfo.WikiV2, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nWikiApi.RESOURCE_AREA_ID = \"bf7d82a0-8aa5-4613-94ef-6172a5ea01f3\";\r\nexports.WikiApi = WikiApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst WorkInterfaces = require(\"./interfaces/WorkInterfaces\");\r\nclass WorkApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-Work-api', options);\r\n    }\r\n    /**\r\n     * Creates/updates an automation rules settings\r\n     *\r\n     * @param {WorkInterfaces.TeamAutomationRulesSettingsRequestModel} ruleRequestModel - Required parameters to create/update an automation rules settings\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     */\r\n    updateAutomationRule(ruleRequestModel, teamContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"work\", \"2882c15d-0cb3-43b5-8fb7-db62e09a79db\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, ruleRequestModel, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets backlog configuration for a team\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     */\r\n    getBacklogConfigurations(teamContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"7799f497-3cb5-4f16-ad4f-5cd06012db64\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.BacklogConfiguration, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of work items within a backlog level\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} backlogId\r\n     */\r\n    getBacklogLevelWorkItems(teamContext, backlogId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    backlogId: backlogId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"7c468d96-ab1d-4294-a360-92f07e9ccd98\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a backlog level\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} id - The id of the backlog level\r\n     */\r\n    getBacklog(teamContext, id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    id: id\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"a93726f9-7867-4e38-b4f2-0bfafc2f6a94\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.BacklogLevelConfiguration, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * List all backlog levels\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     */\r\n    getBacklogs(teamContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"a93726f9-7867-4e38-b4f2-0bfafc2f6a94\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.BacklogLevelConfiguration, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a badge that displays the status of columns on the board.\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} id - The id of the board.\r\n     * @param {WorkInterfaces.BoardBadgeColumnOptions} columnOptions - Determines what columns to show.\r\n     * @param {string[]} columns - If columnOptions is set to custom, specify the list of column names.\r\n     */\r\n    getBoardBadge(teamContext, id, columnOptions, columns) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    columnOptions: columnOptions,\r\n                    columns: columns && columns.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"0120b002-ab6c-4ca0-98cf-a8d7492f865c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a badge that displays the status of columns on the board.\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} id - The id of the board.\r\n     * @param {WorkInterfaces.BoardBadgeColumnOptions} columnOptions - Determines what columns to show.\r\n     * @param {string[]} columns - If columnOptions is set to custom, specify the list of column names.\r\n     */\r\n    getBoardBadgeData(teamContext, id, columnOptions, columns) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    columnOptions: columnOptions,\r\n                    columns: columns && columns.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"0120b002-ab6c-4ca0-98cf-a8d7492f865c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get available board columns in a project\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getColumnSuggestedValues(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"eb7ec5a3-1ba3-4fd1-b834-49a5a387e57d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns the list of parent field filter model for the given list of workitem ids\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} childBacklogContextCategoryRefName\r\n     * @param {number[]} workitemIds\r\n     */\r\n    getBoardMappingParentItems(teamContext, childBacklogContextCategoryRefName, workitemIds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (childBacklogContextCategoryRefName == null) {\r\n                throw new TypeError('childBacklogContextCategoryRefName can not be null or undefined');\r\n            }\r\n            if (workitemIds == null) {\r\n                throw new TypeError('workitemIds can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                let queryValues = {\r\n                    childBacklogContextCategoryRefName: childBacklogContextCategoryRefName,\r\n                    workitemIds: workitemIds && workitemIds.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"186abea3-5c35-432f-9e28-7a15b4312a0e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get available board rows in a project\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getRowSuggestedValues(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"bb494cc6-a0f5-4c6c-8dca-ea6912e79eb9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get board\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} id - identifier for board, either board's backlog level name (Eg:\"Stories\") or Id\r\n     */\r\n    getBoard(teamContext, id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    id: id\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"23ad19fc-3b8e-4877-8462-b3f92bc06b40\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.Board, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get boards\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     */\r\n    getBoards(teamContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"23ad19fc-3b8e-4877-8462-b3f92bc06b40\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update board options\r\n     *\r\n     * @param {{ [key: string] : string; }} options - options to updated\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} id - identifier for board, either category plural name (Eg:\"Stories\") or guid\r\n     */\r\n    setBoardOptions(options, teamContext, id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    id: id\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"23ad19fc-3b8e-4877-8462-b3f92bc06b40\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, options, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get board user settings for a board id\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} board - Board ID or Name\r\n     */\r\n    getBoardUserSettings(teamContext, board) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    board: board\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"b30d9f58-1891-4b0a-b168-c46408f919b0\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update board user settings for the board id\r\n     *\r\n     * @param {{ [key: string] : string; }} boardUserSettings\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} board\r\n     */\r\n    updateBoardUserSettings(boardUserSettings, teamContext, board) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    board: board\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"b30d9f58-1891-4b0a-b168-c46408f919b0\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, boardUserSettings, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a team's capacity including total capacity and days off\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} iterationId - ID of the iteration\r\n     */\r\n    getCapacitiesWithIdentityRefAndTotals(teamContext, iterationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    iterationId: iterationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"work\", \"74412d15-8c1a-4352-a48d-ef1ed5587d57\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.TeamCapacity, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a team member's capacity\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} iterationId - ID of the iteration\r\n     * @param {string} teamMemberId - ID of the team member\r\n     */\r\n    getCapacityWithIdentityRef(teamContext, iterationId, teamMemberId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    iterationId: iterationId,\r\n                    teamMemberId: teamMemberId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"work\", \"74412d15-8c1a-4352-a48d-ef1ed5587d57\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.TeamMemberCapacityIdentityRef, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Replace a team's capacity\r\n     *\r\n     * @param {WorkInterfaces.TeamMemberCapacityIdentityRef[]} capacities - Team capacity to replace\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} iterationId - ID of the iteration\r\n     */\r\n    replaceCapacitiesWithIdentityRef(capacities, teamContext, iterationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    iterationId: iterationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"work\", \"74412d15-8c1a-4352-a48d-ef1ed5587d57\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, capacities, options);\r\n                    let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.TeamMemberCapacityIdentityRef, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a team member's capacity\r\n     *\r\n     * @param {WorkInterfaces.CapacityPatch} patch - Updated capacity\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} iterationId - ID of the iteration\r\n     * @param {string} teamMemberId - ID of the team member\r\n     */\r\n    updateCapacityWithIdentityRef(patch, teamContext, iterationId, teamMemberId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    iterationId: iterationId,\r\n                    teamMemberId: teamMemberId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.3\", \"work\", \"74412d15-8c1a-4352-a48d-ef1ed5587d57\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, patch, options);\r\n                    let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.TeamMemberCapacityIdentityRef, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get board card Rule settings for the board id or board by name\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} board\r\n     */\r\n    getBoardCardRuleSettings(teamContext, board) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    board: board\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"work\", \"b044a3d9-02ea-49c7-91a1-b730949cc896\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update board card Rule settings for the board id or board by name\r\n     *\r\n     * @param {WorkInterfaces.BoardCardRuleSettings} boardCardRuleSettings\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} board\r\n     */\r\n    updateBoardCardRuleSettings(boardCardRuleSettings, teamContext, board) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    board: board\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"work\", \"b044a3d9-02ea-49c7-91a1-b730949cc896\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, boardCardRuleSettings, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update taskboard card Rule settings\r\n     *\r\n     * @param {WorkInterfaces.BoardCardRuleSettings} boardCardRuleSettings\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     */\r\n    updateTaskboardCardRuleSettings(boardCardRuleSettings, teamContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"work\", \"3f84a8d1-1aab-423e-a94b-6dcbdcca511f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, boardCardRuleSettings, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get board card settings for the board id or board by name\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} board\r\n     */\r\n    getBoardCardSettings(teamContext, board) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    board: board\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"work\", \"07c3b467-bc60-4f05-8e34-599ce288fafc\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update board card settings for the board id or board by name\r\n     *\r\n     * @param {WorkInterfaces.BoardCardSettings} boardCardSettingsToSave\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} board\r\n     */\r\n    updateBoardCardSettings(boardCardSettingsToSave, teamContext, board) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    board: board\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"work\", \"07c3b467-bc60-4f05-8e34-599ce288fafc\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, boardCardSettingsToSave, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update taskboard card settings\r\n     *\r\n     * @param {WorkInterfaces.BoardCardSettings} boardCardSettingsToSave\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     */\r\n    updateTaskboardCardSettings(boardCardSettingsToSave, teamContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"work\", \"0d63745f-31f3-4cf3-9056-2a064e567637\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, boardCardSettingsToSave, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a board chart\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} board - Identifier for board, either board's backlog level name (Eg:\"Stories\") or Id\r\n     * @param {string} name - The chart name\r\n     */\r\n    getBoardChart(teamContext, board, name) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    board: board,\r\n                    name: name\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"45fe888c-239e-49fd-958c-df1a1ab21d97\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get board charts\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} board - Identifier for board, either board's backlog level name (Eg:\"Stories\") or Id\r\n     */\r\n    getBoardCharts(teamContext, board) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    board: board\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"45fe888c-239e-49fd-958c-df1a1ab21d97\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a board chart\r\n     *\r\n     * @param {WorkInterfaces.BoardChart} chart\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} board - Identifier for board, either board's backlog level name (Eg:\"Stories\") or Id\r\n     * @param {string} name - The chart name\r\n     */\r\n    updateBoardChart(chart, teamContext, board, name) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    board: board,\r\n                    name: name\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"45fe888c-239e-49fd-958c-df1a1ab21d97\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, chart, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get columns on a board\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} board - Name or ID of the specific board\r\n     */\r\n    getBoardColumns(teamContext, board) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    board: board\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"c555d7ff-84e1-47df-9923-a3fe0cd8751b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.BoardColumn, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update columns on a board\r\n     *\r\n     * @param {WorkInterfaces.BoardColumn[]} boardColumns - List of board columns to update\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} board - Name or ID of the specific board\r\n     */\r\n    updateBoardColumns(boardColumns, teamContext, board) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    board: board\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"c555d7ff-84e1-47df-9923-a3fe0cd8751b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, boardColumns, options);\r\n                    let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.BoardColumn, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get Delivery View Data\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} id - Identifier for delivery view\r\n     * @param {number} revision - Revision of the plan for which you want data. If the current plan is a different revision you will get an ViewRevisionMismatchException exception. If you do not supply a revision you will get data for the latest revision.\r\n     * @param {Date} startDate - The start date of timeline\r\n     * @param {Date} endDate - The end date of timeline\r\n     */\r\n    getDeliveryTimelineData(project, id, revision, startDate, endDate) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    revision: revision,\r\n                    startDate: startDate,\r\n                    endDate: endDate,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"bdd0834e-101f-49f0-a6ae-509f384a12b4\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.DeliveryViewData, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get an iteration's capacity for all teams in iteration\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} iterationId - ID of the iteration\r\n     */\r\n    getTotalIterationCapacities(project, iterationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    iterationId: iterationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"1e385ce0-396b-4273-8171-d64562c18d37\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a team's iteration by iterationId\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} id - ID of the iteration\r\n     */\r\n    deleteTeamIteration(teamContext, id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    id: id\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"c9175577-28a1-4b06-9197-8636af9f64ad\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get team's iteration by iterationId\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} id - ID of the iteration\r\n     */\r\n    getTeamIteration(teamContext, id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    id: id\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"c9175577-28a1-4b06-9197-8636af9f64ad\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.TeamSettingsIteration, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a team's iterations using timeframe filter\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} timeframe - A filter for which iterations are returned based on relative time. Only Current is supported currently.\r\n     */\r\n    getTeamIterations(teamContext, timeframe) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                let queryValues = {\r\n                    '$timeframe': timeframe,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"c9175577-28a1-4b06-9197-8636af9f64ad\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.TeamSettingsIteration, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Add an iteration to the team\r\n     *\r\n     * @param {WorkInterfaces.TeamSettingsIteration} iteration - Iteration to add\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     */\r\n    postTeamIteration(iteration, teamContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"c9175577-28a1-4b06-9197-8636af9f64ad\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, iteration, options);\r\n                    let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.TeamSettingsIteration, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Add a new plan for the team\r\n     *\r\n     * @param {WorkInterfaces.CreatePlan} postedPlan - Plan definition\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createPlan(postedPlan, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"0b42cb47-cd73-4810-ac90-19c9ba147453\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, postedPlan, options);\r\n                    let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.Plan, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete the specified plan\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} id - Identifier of the plan\r\n     */\r\n    deletePlan(project, id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    id: id\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"0b42cb47-cd73-4810-ac90-19c9ba147453\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the information for the specified plan\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} id - Identifier of the plan\r\n     */\r\n    getPlan(project, id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    id: id\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"0b42cb47-cd73-4810-ac90-19c9ba147453\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.Plan, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the information for all the plans configured for the given team\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getPlans(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"0b42cb47-cd73-4810-ac90-19c9ba147453\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.Plan, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update the information for the specified plan\r\n     *\r\n     * @param {WorkInterfaces.UpdatePlan} updatedPlan - Plan definition to be updated\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} id - Identifier of the plan\r\n     */\r\n    updatePlan(updatedPlan, project, id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    id: id\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"0b42cb47-cd73-4810-ac90-19c9ba147453\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, updatedPlan, options);\r\n                    let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.Plan, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get process configuration\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getProcessConfiguration(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"f901ba42-86d2-4b0c-89c1-3f86d06daa84\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get rows on a board\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} board - Name or ID of the specific board\r\n     */\r\n    getBoardRows(teamContext, board) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    board: board\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"0863355d-aefd-4d63-8669-984c9b7b0e78\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update rows on a board\r\n     *\r\n     * @param {WorkInterfaces.BoardRow[]} boardRows - List of board rows to update\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} board - Name or ID of the specific board\r\n     */\r\n    updateBoardRows(boardRows, teamContext, board) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    board: board\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"0863355d-aefd-4d63-8669-984c9b7b0e78\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, boardRows, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     */\r\n    getColumns(teamContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"c6815dbe-8e7e-4ffe-9a79-e83ee712aa92\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {WorkInterfaces.UpdateTaskboardColumn[]} updateColumns\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     */\r\n    updateColumns(updateColumns, teamContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"c6815dbe-8e7e-4ffe-9a79-e83ee712aa92\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, updateColumns, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} iterationId\r\n     */\r\n    getWorkItemColumns(teamContext, iterationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    iterationId: iterationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"1be23c36-8872-4abc-b57d-402cd6c669d9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {WorkInterfaces.UpdateTaskboardWorkItemColumn} updateColumn\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} iterationId\r\n     * @param {number} workItemId\r\n     */\r\n    updateWorkItemColumn(updateColumn, teamContext, iterationId, workItemId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    iterationId: iterationId,\r\n                    workItemId: workItemId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"1be23c36-8872-4abc-b57d-402cd6c669d9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, updateColumn, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get team's days off for an iteration\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} iterationId - ID of the iteration\r\n     */\r\n    getTeamDaysOff(teamContext, iterationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    iterationId: iterationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"2d4faa2e-9150-4cbf-a47a-932b1b4a0773\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.TeamSettingsDaysOff, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Set a team's days off for an iteration\r\n     *\r\n     * @param {WorkInterfaces.TeamSettingsDaysOffPatch} daysOffPatch - Team's days off patch containing a list of start and end dates\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} iterationId - ID of the iteration\r\n     */\r\n    updateTeamDaysOff(daysOffPatch, teamContext, iterationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    iterationId: iterationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"2d4faa2e-9150-4cbf-a47a-932b1b4a0773\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, daysOffPatch, options);\r\n                    let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.TeamSettingsDaysOff, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a collection of team field values\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     */\r\n    getTeamFieldValues(teamContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"07ced576-58ed-49e6-9c1e-5cb53ab8bf2a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update team field values\r\n     *\r\n     * @param {WorkInterfaces.TeamFieldValuesPatch} patch\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     */\r\n    updateTeamFieldValues(patch, teamContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"07ced576-58ed-49e6-9c1e-5cb53ab8bf2a\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, patch, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a team's settings\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     */\r\n    getTeamSettings(teamContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"c3c1012b-bea7-49d7-b45e-1664e566f84c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.TeamSetting, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a team's settings\r\n     *\r\n     * @param {WorkInterfaces.TeamSettingsPatch} teamSettingsPatch - TeamSettings changes\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     */\r\n    updateTeamSettings(teamSettingsPatch, teamContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"c3c1012b-bea7-49d7-b45e-1664e566f84c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, teamSettingsPatch, options);\r\n                    let ret = this.formatResponse(res.result, WorkInterfaces.TypeInfo.TeamSetting, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get work items for iteration\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} iterationId - ID of the iteration\r\n     */\r\n    getIterationWorkItems(teamContext, iterationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    iterationId: iterationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"5b3ef1a6-d3ab-44cd-bafd-c7f45db850fa\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Reorder Product Backlog/Boards Work Items\r\n     *\r\n     * @param {WorkInterfaces.ReorderOperation} operation\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     */\r\n    reorderBacklogWorkItems(operation, teamContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"1c22b714-e7e4-41b9-85e0-56ee13ef55ed\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, operation, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Reorder Sprint Backlog/Taskboard Work Items\r\n     *\r\n     * @param {WorkInterfaces.ReorderOperation} operation\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} iterationId - The id of the iteration\r\n     */\r\n    reorderIterationWorkItems(operation, teamContext, iterationId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    iterationId: iterationId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"work\", \"47755db2-d7eb-405a-8c25-675401525fc9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, operation, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nWorkApi.RESOURCE_AREA_ID = \"1d4f49f9-02b9-4e26-b826-2cdb6195f2a9\";\r\nexports.WorkApi = WorkApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst WorkItemTrackingInterfaces = require(\"./interfaces/WorkItemTrackingInterfaces\");\r\nclass WorkItemTrackingApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-WorkItemTracking-api', options);\r\n    }\r\n    /**\r\n     * INTERNAL ONLY: USED BY ACCOUNT MY WORK PAGE. This returns Doing, Done, Follows and activity work items details.\r\n     *\r\n     * @param {WorkItemTrackingInterfaces.QueryOption} queryOption\r\n     */\r\n    getAccountMyWorkData(queryOption) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    '$queryOption': queryOption,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"def3d688-ddf5-4096-9024-69beea15cdbd\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.AccountMyWorkResult, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets recent work item activities\r\n     *\r\n     */\r\n    getRecentActivityData() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"1bc988f4-c15f-4072-ad35-497c87e3a909\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.AccountRecentActivityWorkItemModel2, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * INTERNAL ONLY: USED BY ACCOUNT MY WORK PAGE.\r\n     *\r\n     */\r\n    getRecentMentions() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"d60eeb6e-e18c-4478-9e94-a0094e28f41c\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.AccountRecentMentionWorkItemModel, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get the list of work item tracking outbound artifact link types.\r\n     *\r\n     */\r\n    getWorkArtifactLinkTypes() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"1a31de40-e318-41cd-a6c6-881077df52e3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Queries work items linked to a given list of artifact URI.\r\n     *\r\n     * @param {WorkItemTrackingInterfaces.ArtifactUriQuery} artifactUriQuery - Defines a list of artifact URI for querying work items.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    queryWorkItemsForArtifactUris(artifactUriQuery, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"a9a9aa7a-8c09-44d3-ad1b-46e855c1e3d3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, artifactUriQuery, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Uploads an attachment.\r\n     *\r\n     * @param {NodeJS.ReadableStream} contentStream - Content to upload\r\n     * @param {string} fileName - The name of the file\r\n     * @param {string} uploadType - Attachment upload type: Simple or Chunked\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} areaPath - Target project Area Path\r\n     */\r\n    createAttachment(customHeaders, contentStream, fileName, uploadType, project, areaPath) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    fileName: fileName,\r\n                    uploadType: uploadType,\r\n                    areaPath: areaPath,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/octet-stream\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.3\", \"wit\", \"e07b5fa4-1499-494d-a496-64b860fd64ff\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.uploadStream(\"POST\", url, contentStream, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Downloads an attachment.\r\n     *\r\n     * @param {string} id - Attachment ID\r\n     * @param {string} fileName - Name of the file\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} download - If set to <c>true</c> always download attachment\r\n     */\r\n    getAttachmentContent(id, fileName, project, download) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    fileName: fileName,\r\n                    download: download,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.3\", \"wit\", \"e07b5fa4-1499-494d-a496-64b860fd64ff\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/octet-stream\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Downloads an attachment.\r\n     *\r\n     * @param {string} id - Attachment ID\r\n     * @param {string} fileName - Name of the file\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} download - If set to <c>true</c> always download attachment\r\n     */\r\n    getAttachmentZip(id, fileName, project, download) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    fileName: fileName,\r\n                    download: download,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.3\", \"wit\", \"e07b5fa4-1499-494d-a496-64b860fd64ff\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"application/zip\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets root classification nodes or list of classification nodes for a given list of nodes ids, for a given project. In case ids parameter is supplied you will  get list of classification nodes for those ids. Otherwise you will get root classification nodes for this project.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number[]} ids - Comma separated integer classification nodes ids. It's not required, if you want root nodes.\r\n     * @param {number} depth - Depth of children to fetch.\r\n     * @param {WorkItemTrackingInterfaces.ClassificationNodesErrorPolicy} errorPolicy - Flag to handle errors in getting some nodes. Possible options are Fail and Omit.\r\n     */\r\n    getClassificationNodes(project, ids, depth, errorPolicy) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (ids == null) {\r\n                throw new TypeError('ids can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    ids: ids && ids.join(\",\"),\r\n                    '$depth': depth,\r\n                    errorPolicy: errorPolicy,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"a70579d1-f53a-48ee-a5be-7be8659023b9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.WorkItemClassificationNode, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets root classification nodes under the project.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} depth - Depth of children to fetch.\r\n     */\r\n    getRootNodes(project, depth) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    '$depth': depth,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"a70579d1-f53a-48ee-a5be-7be8659023b9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.WorkItemClassificationNode, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create new or update an existing classification node.\r\n     *\r\n     * @param {WorkItemTrackingInterfaces.WorkItemClassificationNode} postedNode - Node to create or update.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {WorkItemTrackingInterfaces.TreeStructureGroup} structureGroup - Structure group of the classification node, area or iteration.\r\n     * @param {string} path - Path of the classification node.\r\n     */\r\n    createOrUpdateClassificationNode(postedNode, project, structureGroup, path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    structureGroup: structureGroup,\r\n                    path: path\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"5a172953-1b41-49d3-840a-33f79c3ce89f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, postedNode, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.WorkItemClassificationNode, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete an existing classification node.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {WorkItemTrackingInterfaces.TreeStructureGroup} structureGroup - Structure group of the classification node, area or iteration.\r\n     * @param {string} path - Path of the classification node.\r\n     * @param {number} reclassifyId - Id of the target classification node for reclassification.\r\n     */\r\n    deleteClassificationNode(project, structureGroup, path, reclassifyId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    structureGroup: structureGroup,\r\n                    path: path\r\n                };\r\n                let queryValues = {\r\n                    '$reclassifyId': reclassifyId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"5a172953-1b41-49d3-840a-33f79c3ce89f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the classification node for a given node path.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {WorkItemTrackingInterfaces.TreeStructureGroup} structureGroup - Structure group of the classification node, area or iteration.\r\n     * @param {string} path - Path of the classification node.\r\n     * @param {number} depth - Depth of children to fetch.\r\n     */\r\n    getClassificationNode(project, structureGroup, path, depth) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    structureGroup: structureGroup,\r\n                    path: path\r\n                };\r\n                let queryValues = {\r\n                    '$depth': depth,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"5a172953-1b41-49d3-840a-33f79c3ce89f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.WorkItemClassificationNode, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update an existing classification node.\r\n     *\r\n     * @param {WorkItemTrackingInterfaces.WorkItemClassificationNode} postedNode - Node to create or update.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {WorkItemTrackingInterfaces.TreeStructureGroup} structureGroup - Structure group of the classification node, area or iteration.\r\n     * @param {string} path - Path of the classification node.\r\n     */\r\n    updateClassificationNode(postedNode, project, structureGroup, path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    structureGroup: structureGroup,\r\n                    path: path\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"5a172953-1b41-49d3-840a-33f79c3ce89f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, postedNode, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.WorkItemClassificationNode, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get users who reacted on the comment.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} workItemId - WorkItem ID.\r\n     * @param {number} commentId - Comment ID.\r\n     * @param {WorkItemTrackingInterfaces.CommentReactionType} reactionType - Type of the reaction.\r\n     * @param {number} top\r\n     * @param {number} skip\r\n     */\r\n    getEngagedUsers(project, workItemId, commentId, reactionType, top, skip) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    workItemId: workItemId,\r\n                    commentId: commentId,\r\n                    reactionType: reactionType\r\n                };\r\n                let queryValues = {\r\n                    '$top': top,\r\n                    '$skip': skip,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"e33ca5e0-2349-4285-af3d-d72d86781c35\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Add a comment on a work item.\r\n     *\r\n     * @param {WorkItemTrackingInterfaces.CommentCreate} request - Comment create request.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} workItemId - Id of a work item.\r\n     */\r\n    addComment(request, project, workItemId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    workItemId: workItemId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.3\", \"wit\", \"608aac0a-32e1-4493-a863-b9cf4566d257\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, request, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.Comment, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a comment on a work item.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} workItemId - Id of a work item.\r\n     * @param {number} commentId\r\n     */\r\n    deleteComment(project, workItemId, commentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    workItemId: workItemId,\r\n                    commentId: commentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.3\", \"wit\", \"608aac0a-32e1-4493-a863-b9cf4566d257\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a work item comment.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} workItemId - Id of a work item to get the comment.\r\n     * @param {number} commentId - Id of the comment to return.\r\n     * @param {boolean} includeDeleted - Specify if the deleted comment should be retrieved.\r\n     * @param {WorkItemTrackingInterfaces.CommentExpandOptions} expand - Specifies the additional data retrieval options for work item comments.\r\n     */\r\n    getComment(project, workItemId, commentId, includeDeleted, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    workItemId: workItemId,\r\n                    commentId: commentId\r\n                };\r\n                let queryValues = {\r\n                    includeDeleted: includeDeleted,\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.3\", \"wit\", \"608aac0a-32e1-4493-a863-b9cf4566d257\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.Comment, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a list of work item comments, pageable.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} workItemId - Id of a work item to get comments for.\r\n     * @param {number} top - Max number of comments to return.\r\n     * @param {string} continuationToken - Used to query for the next page of comments.\r\n     * @param {boolean} includeDeleted - Specify if the deleted comments should be retrieved.\r\n     * @param {WorkItemTrackingInterfaces.CommentExpandOptions} expand - Specifies the additional data retrieval options for work item comments.\r\n     * @param {WorkItemTrackingInterfaces.CommentSortOrder} order - Order in which the comments should be returned.\r\n     */\r\n    getComments(project, workItemId, top, continuationToken, includeDeleted, expand, order) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    workItemId: workItemId\r\n                };\r\n                let queryValues = {\r\n                    '$top': top,\r\n                    continuationToken: continuationToken,\r\n                    includeDeleted: includeDeleted,\r\n                    '$expand': expand,\r\n                    order: order,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.3\", \"wit\", \"608aac0a-32e1-4493-a863-b9cf4566d257\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.CommentList, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a list of work item comments by ids.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} workItemId - Id of a work item to get comments for.\r\n     * @param {number[]} ids - Comma-separated list of comment ids to return.\r\n     * @param {boolean} includeDeleted - Specify if the deleted comments should be retrieved.\r\n     * @param {WorkItemTrackingInterfaces.CommentExpandOptions} expand - Specifies the additional data retrieval options for work item comments.\r\n     */\r\n    getCommentsBatch(project, workItemId, ids, includeDeleted, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (ids == null) {\r\n                throw new TypeError('ids can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    workItemId: workItemId\r\n                };\r\n                let queryValues = {\r\n                    ids: ids && ids.join(\",\"),\r\n                    includeDeleted: includeDeleted,\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.3\", \"wit\", \"608aac0a-32e1-4493-a863-b9cf4566d257\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.CommentList, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a comment on a work item.\r\n     *\r\n     * @param {WorkItemTrackingInterfaces.CommentUpdate} request - Comment update request.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} workItemId - Id of a work item.\r\n     * @param {number} commentId\r\n     */\r\n    updateComment(request, project, workItemId, commentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    workItemId: workItemId,\r\n                    commentId: commentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.3\", \"wit\", \"608aac0a-32e1-4493-a863-b9cf4566d257\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, request, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.Comment, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds a new reaction to a comment.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} workItemId - WorkItem ID\r\n     * @param {number} commentId - Comment ID\r\n     * @param {WorkItemTrackingInterfaces.CommentReactionType} reactionType - Type of the reaction\r\n     */\r\n    createCommentReaction(project, workItemId, commentId, reactionType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    workItemId: workItemId,\r\n                    commentId: commentId,\r\n                    reactionType: reactionType\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"f6cb3f27-1028-4851-af96-887e570dc21f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, null, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.CommentReaction, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes an existing reaction on a comment.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} workItemId - WorkItem ID\r\n     * @param {number} commentId - Comment ID\r\n     * @param {WorkItemTrackingInterfaces.CommentReactionType} reactionType - Type of the reaction\r\n     */\r\n    deleteCommentReaction(project, workItemId, commentId, reactionType) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    workItemId: workItemId,\r\n                    commentId: commentId,\r\n                    reactionType: reactionType\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"f6cb3f27-1028-4851-af96-887e570dc21f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.CommentReaction, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets reactions of a comment.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} workItemId - WorkItem ID\r\n     * @param {number} commentId - Comment ID\r\n     */\r\n    getCommentReactions(project, workItemId, commentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    workItemId: workItemId,\r\n                    commentId: commentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"f6cb3f27-1028-4851-af96-887e570dc21f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.CommentReaction, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} workItemId\r\n     * @param {number} commentId\r\n     * @param {number} version\r\n     */\r\n    getCommentVersion(project, workItemId, commentId, version) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    workItemId: workItemId,\r\n                    commentId: commentId,\r\n                    version: version\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"49e03b34-3be0-42e3-8a5d-e8dfb88ac954\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.CommentVersion, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {number} workItemId\r\n     * @param {number} commentId\r\n     */\r\n    getCommentVersions(project, workItemId, commentId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    workItemId: workItemId,\r\n                    commentId: commentId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"49e03b34-3be0-42e3-8a5d-e8dfb88ac954\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.CommentVersion, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Create a new field.\r\n     *\r\n     * @param {WorkItemTrackingInterfaces.WorkItemField} workItemField - New field definition\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    createField(workItemField, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"b51fd764-e5c2-4b9b-aaf7-3395cf4bdd94\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, workItemField, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.WorkItemField, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes the field. To undelete a filed, see \"Update Field\" API.\r\n     *\r\n     * @param {string} fieldNameOrRefName - Field simple name or reference name\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    deleteField(fieldNameOrRefName, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    fieldNameOrRefName: fieldNameOrRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"b51fd764-e5c2-4b9b-aaf7-3395cf4bdd94\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets information on a specific field.\r\n     *\r\n     * @param {string} fieldNameOrRefName - Field simple name or reference name\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getField(fieldNameOrRefName, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    fieldNameOrRefName: fieldNameOrRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"b51fd764-e5c2-4b9b-aaf7-3395cf4bdd94\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.WorkItemField, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns information for all fields. The project ID/name parameter is optional.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {WorkItemTrackingInterfaces.GetFieldsExpand} expand - Use ExtensionFields to include extension fields, otherwise exclude them. Unless the feature flag for this parameter is enabled, extension fields are always included.\r\n     */\r\n    getFields(project, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"b51fd764-e5c2-4b9b-aaf7-3395cf4bdd94\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.WorkItemField, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a field.\r\n     *\r\n     * @param {WorkItemTrackingInterfaces.UpdateWorkItemField} payload - Payload contains desired value of the field's properties\r\n     * @param {string} fieldNameOrRefName - Name/reference name of the field to be updated\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateField(payload, fieldNameOrRefName, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    fieldNameOrRefName: fieldNameOrRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"b51fd764-e5c2-4b9b-aaf7-3395cf4bdd94\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, payload, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.WorkItemField, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Migrates a project to a different process within the same OOB type. For example, you can only migrate a project from agile/custom-agile to agile/custom-agile.\r\n     *\r\n     * @param {WorkItemTrackingInterfaces.ProcessIdModel} newProcess\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    migrateProjectsProcess(newProcess, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"19801631-d4e5-47e9-8166-0330de0ff1e6\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, newProcess, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a query, or moves a query.\r\n     *\r\n     * @param {WorkItemTrackingInterfaces.QueryHierarchyItem} postedQuery - The query to create.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} query - The parent id or path under which the query is to be created.\r\n     * @param {boolean} validateWiqlOnly - If you only want to validate your WIQL query without actually creating one, set it to true. Default is false.\r\n     */\r\n    createQuery(postedQuery, project, query, validateWiqlOnly) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    query: query\r\n                };\r\n                let queryValues = {\r\n                    validateWiqlOnly: validateWiqlOnly,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"a67d190c-c41f-424b-814d-0e906f659301\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, postedQuery, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.QueryHierarchyItem, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Delete a query or a folder. This deletes any permission change on the deleted query or folder and any of its descendants if it is a folder. It is important to note that the deleted permission changes cannot be recovered upon undeleting the query or folder.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} query - ID or path of the query or folder to delete.\r\n     */\r\n    deleteQuery(project, query) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    query: query\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"a67d190c-c41f-424b-814d-0e906f659301\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the root queries and their children\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {WorkItemTrackingInterfaces.QueryExpand} expand - Include the query string (wiql), clauses, query result columns, and sort options in the results.\r\n     * @param {number} depth - In the folder of queries, return child queries and folders to this depth.\r\n     * @param {boolean} includeDeleted - Include deleted queries and folders\r\n     */\r\n    getQueries(project, expand, depth, includeDeleted) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    '$expand': expand,\r\n                    '$depth': depth,\r\n                    '$includeDeleted': includeDeleted,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"a67d190c-c41f-424b-814d-0e906f659301\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.QueryHierarchyItem, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Retrieves an individual query and its children\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} query - ID or path of the query.\r\n     * @param {WorkItemTrackingInterfaces.QueryExpand} expand - Include the query string (wiql), clauses, query result columns, and sort options in the results.\r\n     * @param {number} depth - In the folder of queries, return child queries and folders to this depth.\r\n     * @param {boolean} includeDeleted - Include deleted queries and folders\r\n     * @param {boolean} useIsoDateFormat - DateTime query clauses will be formatted using a ISO 8601 compliant format\r\n     */\r\n    getQuery(project, query, expand, depth, includeDeleted, useIsoDateFormat) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    query: query\r\n                };\r\n                let queryValues = {\r\n                    '$expand': expand,\r\n                    '$depth': depth,\r\n                    '$includeDeleted': includeDeleted,\r\n                    '$useIsoDateFormat': useIsoDateFormat,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"a67d190c-c41f-424b-814d-0e906f659301\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.QueryHierarchyItem, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Searches all queries the user has access to in the current project\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} filter - The text to filter the queries with.\r\n     * @param {number} top - The number of queries to return (Default is 50 and maximum is 200).\r\n     * @param {WorkItemTrackingInterfaces.QueryExpand} expand\r\n     * @param {boolean} includeDeleted - Include deleted queries and folders\r\n     */\r\n    searchQueries(project, filter, top, expand, includeDeleted) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (filter == null) {\r\n                throw new TypeError('filter can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    '$filter': filter,\r\n                    '$top': top,\r\n                    '$expand': expand,\r\n                    '$includeDeleted': includeDeleted,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"a67d190c-c41f-424b-814d-0e906f659301\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.QueryHierarchyItemsResult, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Update a query or a folder. This allows you to update, rename and move queries and folders.\r\n     *\r\n     * @param {WorkItemTrackingInterfaces.QueryHierarchyItem} queryUpdate - The query to update.\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} query - The ID or path for the query to update.\r\n     * @param {boolean} undeleteDescendants - Undelete the children of this folder. It is important to note that this will not bring back the permission changes that were previously applied to the descendants.\r\n     */\r\n    updateQuery(queryUpdate, project, query, undeleteDescendants) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    query: query\r\n                };\r\n                let queryValues = {\r\n                    '$undeleteDescendants': undeleteDescendants,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"a67d190c-c41f-424b-814d-0e906f659301\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, queryUpdate, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.QueryHierarchyItem, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a list of queries by ids (Maximum 1000)\r\n     *\r\n     * @param {WorkItemTrackingInterfaces.QueryBatchGetRequest} queryGetRequest\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getQueriesBatch(queryGetRequest, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"549816f9-09b0-4e75-9e81-01fbfcd07426\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, queryGetRequest, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.QueryHierarchyItem, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Destroys the specified work item permanently from the Recycle Bin. This action can not be undone.\r\n     *\r\n     * @param {number} id - ID of the work item to be destroyed permanently\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    destroyWorkItem(id, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    id: id\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"b70d8d39-926c-465e-b927-b1bf0e5ca0e0\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a deleted work item from Recycle Bin.\r\n     *\r\n     * @param {number} id - ID of the work item to be returned\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getDeletedWorkItem(id, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    id: id\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"b70d8d39-926c-465e-b927-b1bf0e5ca0e0\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the work items from the recycle bin, whose IDs have been specified in the parameters\r\n     *\r\n     * @param {number[]} ids - Comma separated list of IDs of the deleted work items to be returned\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getDeletedWorkItems(ids, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (ids == null) {\r\n                throw new TypeError('ids can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    ids: ids && ids.join(\",\"),\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"b70d8d39-926c-465e-b927-b1bf0e5ca0e0\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets a list of the IDs and the URLs of the deleted the work items in the Recycle Bin.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getDeletedWorkItemShallowReferences(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"b70d8d39-926c-465e-b927-b1bf0e5ca0e0\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Restores the deleted work item from Recycle Bin.\r\n     *\r\n     * @param {WorkItemTrackingInterfaces.WorkItemDeleteUpdate} payload - Paylod with instructions to update the IsDeleted flag to false\r\n     * @param {number} id - ID of the work item to be restored\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    restoreWorkItem(payload, id, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    id: id\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"b70d8d39-926c-465e-b927-b1bf0e5ca0e0\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, payload, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a fully hydrated work item for the requested revision\r\n     *\r\n     * @param {number} id\r\n     * @param {number} revisionNumber\r\n     * @param {WorkItemTrackingInterfaces.WorkItemExpand} expand\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getRevision(id, revisionNumber, expand, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    id: id,\r\n                    revisionNumber: revisionNumber\r\n                };\r\n                let queryValues = {\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.3\", \"wit\", \"a00c85a5-80fa-4565-99c3-bcd2181434bb\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns the list of fully hydrated work item revisions, paged.\r\n     *\r\n     * @param {number} id\r\n     * @param {number} top\r\n     * @param {number} skip\r\n     * @param {WorkItemTrackingInterfaces.WorkItemExpand} expand\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getRevisions(id, top, skip, expand, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    '$top': top,\r\n                    '$skip': skip,\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.3\", \"wit\", \"a00c85a5-80fa-4565-99c3-bcd2181434bb\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * RESTful method to send mail for selected/queried work items.\r\n     *\r\n     * @param {WorkItemTrackingInterfaces.SendMailBody} body\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    sendMail(body, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"12438500-2f84-4fa7-9f1a-c31871b4959d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, body, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} tagIdOrName\r\n     */\r\n    deleteTag(project, tagIdOrName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    tagIdOrName: tagIdOrName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"bc15bc60-e7a8-43cb-ab01-2106be3983a1\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} tagIdOrName\r\n     */\r\n    getTag(project, tagIdOrName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    tagIdOrName: tagIdOrName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"bc15bc60-e7a8-43cb-ab01-2106be3983a1\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getTags(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"bc15bc60-e7a8-43cb-ab01-2106be3983a1\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {WorkItemTrackingInterfaces.WorkItemTagDefinition} tagData\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} tagIdOrName\r\n     */\r\n    updateTag(tagData, project, tagIdOrName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    tagIdOrName: tagIdOrName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"bc15bc60-e7a8-43cb-ab01-2106be3983a1\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, tagData, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a template\r\n     *\r\n     * @param {WorkItemTrackingInterfaces.WorkItemTemplate} template - Template contents\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     */\r\n    createTemplate(template, teamContext) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"6a90345f-a676-4969-afce-8e163e1d5642\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, template, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets template\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} workitemtypename - Optional, When specified returns templates for given Work item type.\r\n     */\r\n    getTemplates(teamContext, workitemtypename) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                let queryValues = {\r\n                    workitemtypename: workitemtypename,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"6a90345f-a676-4969-afce-8e163e1d5642\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes the template with given id\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} templateId - Template id\r\n     */\r\n    deleteTemplate(teamContext, templateId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    templateId: templateId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"fb10264a-8836-48a0-8033-1b0ccd2748d5\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the template with specified id\r\n     *\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} templateId - Template Id\r\n     */\r\n    getTemplate(teamContext, templateId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    templateId: templateId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"fb10264a-8836-48a0-8033-1b0ccd2748d5\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Replace template contents\r\n     *\r\n     * @param {WorkItemTrackingInterfaces.WorkItemTemplate} templateContent - Template contents to replace with\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {string} templateId - Template id\r\n     */\r\n    replaceTemplate(templateContent, teamContext, templateId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    templateId: templateId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"fb10264a-8836-48a0-8033-1b0ccd2748d5\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, templateContent, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a single update for a work item\r\n     *\r\n     * @param {number} id\r\n     * @param {number} updateNumber\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getUpdate(id, updateNumber, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    id: id,\r\n                    updateNumber: updateNumber\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.3\", \"wit\", \"6570bf97-d02c-4a91-8d93-3abe9895b1a9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.WorkItemUpdate, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a the deltas between work item revisions\r\n     *\r\n     * @param {number} id\r\n     * @param {number} top\r\n     * @param {number} skip\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getUpdates(id, top, skip, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    '$top': top,\r\n                    '$skip': skip,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.3\", \"wit\", \"6570bf97-d02c-4a91-8d93-3abe9895b1a9\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.WorkItemUpdate, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the results of the query given its WIQL.\r\n     *\r\n     * @param {WorkItemTrackingInterfaces.Wiql} wiql - The query containing the WIQL.\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {boolean} timePrecision - Whether or not to use time precision.\r\n     * @param {number} top - The max number of results to return.\r\n     */\r\n    queryByWiql(wiql, teamContext, timePrecision, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team\r\n                };\r\n                let queryValues = {\r\n                    timePrecision: timePrecision,\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"1a9c53f7-f243-4447-b110-35ef023636e4\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, wiql, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.WorkItemQueryResult, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the results of the query given the query ID.\r\n     *\r\n     * @param {string} id - The query ID.\r\n     * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation\r\n     * @param {boolean} timePrecision - Whether or not to use time precision.\r\n     * @param {number} top - The max number of results to return.\r\n     */\r\n    queryById(id, teamContext, timePrecision, top) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let project = null;\r\n                let team = null;\r\n                if (teamContext) {\r\n                    project = teamContext.projectId || teamContext.project;\r\n                    team = teamContext.teamId || teamContext.team;\r\n                }\r\n                let routeValues = {\r\n                    project: project,\r\n                    team: team,\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    timePrecision: timePrecision,\r\n                    '$top': top,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"a02355f5-5f8a-4671-8e32-369d23aac83d\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingInterfaces.TypeInfo.WorkItemQueryResult, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a work item icon given the friendly name and icon color.\r\n     *\r\n     * @param {string} icon - The name of the icon\r\n     * @param {string} color - The 6-digit hex color for the icon\r\n     * @param {number} v - The version of the icon (used only for cache invalidation)\r\n     */\r\n    getWorkItemIconJson(icon, color, v) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    icon: icon\r\n                };\r\n                let queryValues = {\r\n                    color: color,\r\n                    v: v,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"4e1eb4a5-1970-4228-a682-ec48eb2dca30\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of all work item icons.\r\n     *\r\n     */\r\n    getWorkItemIcons() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"4e1eb4a5-1970-4228-a682-ec48eb2dca30\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a work item icon given the friendly name and icon color.\r\n     *\r\n     * @param {string} icon - The name of the icon\r\n     * @param {string} color - The 6-digit hex color for the icon\r\n     * @param {number} v - The version of the icon (used only for cache invalidation)\r\n     */\r\n    getWorkItemIconSvg(icon, color, v) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    icon: icon\r\n                };\r\n                let queryValues = {\r\n                    color: color,\r\n                    v: v,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"4e1eb4a5-1970-4228-a682-ec48eb2dca30\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"image/svg+xml\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a work item icon given the friendly name and icon color.\r\n     *\r\n     * @param {string} icon - The name of the icon\r\n     * @param {string} color - The 6-digit hex color for the icon\r\n     * @param {number} v - The version of the icon (used only for cache invalidation)\r\n     */\r\n    getWorkItemIconXaml(icon, color, v) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    icon: icon\r\n                };\r\n                let queryValues = {\r\n                    color: color,\r\n                    v: v,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"4e1eb4a5-1970-4228-a682-ec48eb2dca30\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let apiVersion = verData.apiVersion;\r\n                    let accept = this.createAcceptHeader(\"image/xaml+xml\", apiVersion);\r\n                    resolve((yield this.http.get(url, { \"Accept\": accept })).message);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a batch of work item links\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string[]} linkTypes - A list of types to filter the results to specific link types. Omit this parameter to get work item links of all link types.\r\n     * @param {string[]} types - A list of types to filter the results to specific work item types. Omit this parameter to get work item links of all work item types.\r\n     * @param {string} continuationToken - Specifies the continuationToken to start the batch from. Omit this parameter to get the first batch of links.\r\n     * @param {Date} startDateTime - Date/time to use as a starting point for link changes. Only link changes that occurred after that date/time will be returned. Cannot be used in conjunction with 'watermark' parameter.\r\n     */\r\n    getReportingLinksByLinkType(project, linkTypes, types, continuationToken, startDateTime) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    linkTypes: linkTypes && linkTypes.join(\",\"),\r\n                    types: types && types.join(\",\"),\r\n                    continuationToken: continuationToken,\r\n                    startDateTime: startDateTime,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.3\", \"wit\", \"b5b5b6d0-0308-40a1-b3f4-b9bb3c66878f\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the work item relation type definition.\r\n     *\r\n     * @param {string} relation - The relation name\r\n     */\r\n    getRelationType(relation) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    relation: relation\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"f5d33bc9-5b49-4a3c-a9bd-f3cd46dd2165\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the work item relation types.\r\n     *\r\n     */\r\n    getRelationTypes() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"f5d33bc9-5b49-4a3c-a9bd-f3cd46dd2165\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a batch of work item revisions with the option of including deleted items\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string[]} fields - A list of fields to return in work item revisions. Omit this parameter to get all reportable fields.\r\n     * @param {string[]} types - A list of types to filter the results to specific work item types. Omit this parameter to get work item revisions of all work item types.\r\n     * @param {string} continuationToken - Specifies the watermark to start the batch from. Omit this parameter to get the first batch of revisions.\r\n     * @param {Date} startDateTime - Date/time to use as a starting point for revisions, all revisions will occur after this date/time. Cannot be used in conjunction with 'watermark' parameter.\r\n     * @param {boolean} includeIdentityRef - Return an identity reference instead of a string value for identity fields.\r\n     * @param {boolean} includeDeleted - Specify if the deleted item should be returned.\r\n     * @param {boolean} includeTagRef - Specify if the tag objects should be returned for System.Tags field.\r\n     * @param {boolean} includeLatestOnly - Return only the latest revisions of work items, skipping all historical revisions\r\n     * @param {WorkItemTrackingInterfaces.ReportingRevisionsExpand} expand - Return all the fields in work item revisions, including long text fields which are not returned by default\r\n     * @param {boolean} includeDiscussionChangesOnly - Return only the those revisions of work items, where only history field was changed\r\n     * @param {number} maxPageSize - The maximum number of results to return in this batch\r\n     */\r\n    readReportingRevisionsGet(project, fields, types, continuationToken, startDateTime, includeIdentityRef, includeDeleted, includeTagRef, includeLatestOnly, expand, includeDiscussionChangesOnly, maxPageSize) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    fields: fields && fields.join(\",\"),\r\n                    types: types && types.join(\",\"),\r\n                    continuationToken: continuationToken,\r\n                    startDateTime: startDateTime,\r\n                    includeIdentityRef: includeIdentityRef,\r\n                    includeDeleted: includeDeleted,\r\n                    includeTagRef: includeTagRef,\r\n                    includeLatestOnly: includeLatestOnly,\r\n                    '$expand': expand,\r\n                    includeDiscussionChangesOnly: includeDiscussionChangesOnly,\r\n                    '$maxPageSize': maxPageSize,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"f828fe59-dd87-495d-a17c-7a8d6211ca6c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a batch of work item revisions. This request may be used if your list of fields is large enough that it may run the URL over the length limit.\r\n     *\r\n     * @param {WorkItemTrackingInterfaces.ReportingWorkItemRevisionsFilter} filter - An object that contains request settings: field filter, type filter, identity format\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} continuationToken - Specifies the watermark to start the batch from. Omit this parameter to get the first batch of revisions.\r\n     * @param {Date} startDateTime - Date/time to use as a starting point for revisions, all revisions will occur after this date/time. Cannot be used in conjunction with 'watermark' parameter.\r\n     * @param {WorkItemTrackingInterfaces.ReportingRevisionsExpand} expand\r\n     */\r\n    readReportingRevisionsPost(filter, project, continuationToken, startDateTime, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    continuationToken: continuationToken,\r\n                    startDateTime: startDateTime,\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"f828fe59-dd87-495d-a17c-7a8d6211ca6c\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, filter, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} continuationToken\r\n     * @param {number} maxPageSize\r\n     */\r\n    readReportingDiscussions(project, continuationToken, maxPageSize) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    continuationToken: continuationToken,\r\n                    '$maxPageSize': maxPageSize,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"4a644469-90c5-4fcc-9a9f-be0827d369ec\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a single work item.\r\n     *\r\n     * @param {VSSInterfaces.JsonPatchDocument} document - The JSON Patch document representing the work item\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} type - The work item type of the work item to create\r\n     * @param {boolean} validateOnly - Indicate if you only want to validate the changes without saving the work item\r\n     * @param {boolean} bypassRules - Do not enforce the work item type rules on this update\r\n     * @param {boolean} suppressNotifications - Do not fire any notifications for this change\r\n     * @param {WorkItemTrackingInterfaces.WorkItemExpand} expand - The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }.\r\n     */\r\n    createWorkItem(customHeaders, document, project, type, validateOnly, bypassRules, suppressNotifications, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    type: type\r\n                };\r\n                let queryValues = {\r\n                    validateOnly: validateOnly,\r\n                    bypassRules: bypassRules,\r\n                    suppressNotifications: suppressNotifications,\r\n                    '$expand': expand,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/json-patch+json\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.3\", \"wit\", \"62d3d110-0047-428c-ad3c-4fe872c91c74\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.create(url, document, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a single work item from a template.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} type - The work item type name\r\n     * @param {string} fields - Comma-separated list of requested fields\r\n     * @param {Date} asOf - AsOf UTC date time string\r\n     * @param {WorkItemTrackingInterfaces.WorkItemExpand} expand - The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }.\r\n     */\r\n    getWorkItemTemplate(project, type, fields, asOf, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    type: type\r\n                };\r\n                let queryValues = {\r\n                    fields: fields,\r\n                    asOf: asOf,\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.3\", \"wit\", \"62d3d110-0047-428c-ad3c-4fe872c91c74\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes the specified work item and sends it to the Recycle Bin, so that it can be restored back, if required. Optionally, if the destroy parameter has been set to true, it destroys the work item permanently. WARNING: If the destroy parameter is set to true, work items deleted by this command will NOT go to recycle-bin and there is no way to restore/recover them after deletion. It is recommended NOT to use this parameter. If you do, please use this parameter with extreme caution.\r\n     *\r\n     * @param {number} id - ID of the work item to be deleted\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} destroy - Optional parameter, if set to true, the work item is deleted permanently. Please note: the destroy action is PERMANENT and cannot be undone.\r\n     */\r\n    deleteWorkItem(id, project, destroy) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    destroy: destroy,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.3\", \"wit\", \"72c7ddf8-2cdc-4f60-90cd-ab71c14a399b\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a single work item.\r\n     *\r\n     * @param {number} id - The work item id\r\n     * @param {string[]} fields - Comma-separated list of requested fields\r\n     * @param {Date} asOf - AsOf UTC date time string\r\n     * @param {WorkItemTrackingInterfaces.WorkItemExpand} expand - The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getWorkItem(id, fields, asOf, expand, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    fields: fields && fields.join(\",\"),\r\n                    asOf: asOf,\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.3\", \"wit\", \"72c7ddf8-2cdc-4f60-90cd-ab71c14a399b\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a list of work items (Maximum 200)\r\n     *\r\n     * @param {number[]} ids - The comma-separated list of requested work item ids. (Maximum 200 ids allowed).\r\n     * @param {string[]} fields - Comma-separated list of requested fields\r\n     * @param {Date} asOf - AsOf UTC date time string\r\n     * @param {WorkItemTrackingInterfaces.WorkItemExpand} expand - The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }.\r\n     * @param {WorkItemTrackingInterfaces.WorkItemErrorPolicy} errorPolicy - The flag to control error policy in a bulk get work items request. Possible options are {Fail, Omit}.\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getWorkItems(ids, fields, asOf, expand, errorPolicy, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (ids == null) {\r\n                throw new TypeError('ids can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                let queryValues = {\r\n                    ids: ids && ids.join(\",\"),\r\n                    fields: fields && fields.join(\",\"),\r\n                    asOf: asOf,\r\n                    '$expand': expand,\r\n                    errorPolicy: errorPolicy,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.3\", \"wit\", \"72c7ddf8-2cdc-4f60-90cd-ab71c14a399b\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates a single work item.\r\n     *\r\n     * @param {VSSInterfaces.JsonPatchDocument} document - The JSON Patch document representing the update\r\n     * @param {number} id - The id of the work item to update\r\n     * @param {string} project - Project ID or project name\r\n     * @param {boolean} validateOnly - Indicate if you only want to validate the changes without saving the work item\r\n     * @param {boolean} bypassRules - Do not enforce the work item type rules on this update\r\n     * @param {boolean} suppressNotifications - Do not fire any notifications for this change\r\n     * @param {WorkItemTrackingInterfaces.WorkItemExpand} expand - The expand parameters for work item attributes. Possible options are { None, Relations, Fields, Links, All }.\r\n     */\r\n    updateWorkItem(customHeaders, document, id, project, validateOnly, bypassRules, suppressNotifications, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    id: id\r\n                };\r\n                let queryValues = {\r\n                    validateOnly: validateOnly,\r\n                    bypassRules: bypassRules,\r\n                    suppressNotifications: suppressNotifications,\r\n                    '$expand': expand,\r\n                };\r\n                customHeaders = customHeaders || {};\r\n                customHeaders[\"Content-Type\"] = \"application/json-patch+json\";\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.3\", \"wit\", \"72c7ddf8-2cdc-4f60-90cd-ab71c14a399b\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    options.additionalHeaders = customHeaders;\r\n                    let res;\r\n                    res = yield this.rest.update(url, document, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets work items for a list of work item ids (Maximum 200)\r\n     *\r\n     * @param {WorkItemTrackingInterfaces.WorkItemBatchGetRequest} workItemGetRequest\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getWorkItemsBatch(workItemGetRequest, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"908509b6-4248-4475-a1cd-829139ba419f\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, workItemGetRequest, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * INTERNAL ONLY: It will be used for My account work experience. Get the work item type state color for multiple projects\r\n     *\r\n     * @param {string[]} projectNames\r\n     */\r\n    getWorkItemStateColors(projectNames) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"0b83df8a-3496-4ddb-ba44-63634f4cda61\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, projectNames, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns the next state on the given work item IDs.\r\n     *\r\n     * @param {number[]} ids - list of work item ids\r\n     * @param {string} action - possible actions. Currently only supports checkin\r\n     */\r\n    getWorkItemNextStatesOnCheckinAction(ids, action) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (ids == null) {\r\n                throw new TypeError('ids can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    ids: ids && ids.join(\",\"),\r\n                    action: action,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"afae844b-e2f6-44c2-8053-17b3bb936a40\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get all work item type categories.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getWorkItemTypeCategories(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"9b9f5734-36c8-415e-ba67-f83b45c31408\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get specific work item type category by name.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} category - The category name\r\n     */\r\n    getWorkItemTypeCategory(project, category) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    category: category\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"9b9f5734-36c8-415e-ba67-f83b45c31408\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * INTERNAL ONLY: It will be used for My account work experience. Get the wit type color for multiple projects\r\n     *\r\n     * @param {string[]} projectNames\r\n     */\r\n    getWorkItemTypeColors(projectNames) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"958fde80-115e-43fb-bd65-749c48057faf\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, projectNames, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * INTERNAL ONLY: It is used for color and icon providers. Get the wit type color for multiple projects\r\n     *\r\n     * @param {string[]} projectNames\r\n     */\r\n    getWorkItemTypeColorAndIcons(projectNames) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"f0f8dc62-3975-48ce-8051-f636b68b52e3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, projectNames, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a work item type definition.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} type - Work item type name\r\n     */\r\n    getWorkItemType(project, type) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    type: type\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"7c8d7a76-4a09-43e8-b5df-bd792f4ac6aa\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns the list of work item types\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    getWorkItemTypes(project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.2\", \"wit\", \"7c8d7a76-4a09-43e8-b5df-bd792f4ac6aa\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a list of fields for a work item type with detailed references.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} type - Work item type.\r\n     * @param {WorkItemTrackingInterfaces.WorkItemTypeFieldsExpandLevel} expand - Expand level for the API response. Properties: to include allowedvalues, default value, isRequired etc. as a part of response; None: to skip these properties.\r\n     */\r\n    getWorkItemTypeFieldsWithReferences(project, type, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    type: type\r\n                };\r\n                let queryValues = {\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.3\", \"wit\", \"bd293ce5-3d25-4192-8e67-e8092e879efb\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a field for a work item type with detailed references.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} type - Work item type.\r\n     * @param {string} field\r\n     * @param {WorkItemTrackingInterfaces.WorkItemTypeFieldsExpandLevel} expand - Expand level for the API response. Properties: to include allowedvalues, default value, isRequired etc. as a part of response; None: to skip these properties.\r\n     */\r\n    getWorkItemTypeFieldWithReferences(project, type, field, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    type: type,\r\n                    field: field\r\n                };\r\n                let queryValues = {\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.3\", \"wit\", \"bd293ce5-3d25-4192-8e67-e8092e879efb\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns the state names and colors for a work item type.\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} type - The state name\r\n     */\r\n    getWorkItemTypeStates(project, type) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    type: type\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"7c9d7a76-4a09-43e8-b5df-bd792f4ac6aa\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Export work item type\r\n     *\r\n     * @param {string} project - Project ID or project name\r\n     * @param {string} type\r\n     * @param {boolean} exportGlobalLists\r\n     */\r\n    exportWorkItemTypeDefinition(project, type, exportGlobalLists) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project,\r\n                    type: type\r\n                };\r\n                let queryValues = {\r\n                    exportGlobalLists: exportGlobalLists,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"8637ac8b-5eb6-4f90-b3f7-4f2ff576a459\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Add/updates a work item type\r\n     *\r\n     * @param {WorkItemTrackingInterfaces.WorkItemTypeTemplateUpdateModel} updateModel\r\n     * @param {string} project - Project ID or project name\r\n     */\r\n    updateWorkItemTypeDefinition(updateModel, project) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    project: project\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.1-preview.1\", \"wit\", \"8637ac8b-5eb6-4f90-b3f7-4f2ff576a459\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, updateModel, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nWorkItemTrackingApi.RESOURCE_AREA_ID = \"5264459e-e5e0-4bd8-b118-0985e68a4ec5\";\r\nexports.WorkItemTrackingApi = WorkItemTrackingApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst WorkItemTrackingProcessInterfaces = require(\"./interfaces/WorkItemTrackingProcessInterfaces\");\r\nclass WorkItemTrackingProcessApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-WorkItemTracking-api', options);\r\n    }\r\n    /**\r\n     * Creates a single behavior in the given process.\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.ProcessBehaviorCreateRequest} behavior\r\n     * @param {string} processId - The ID of the process\r\n     */\r\n    createProcessBehavior(behavior, processId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"processes\", \"d1800200-f184-4e75-a5f2-ad0b04b4373e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, behavior, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessBehavior, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a behavior in the process.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} behaviorRefName - The reference name of the behavior\r\n     */\r\n    deleteProcessBehavior(processId, behaviorRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    behaviorRefName: behaviorRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"processes\", \"d1800200-f184-4e75-a5f2-ad0b04b4373e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a behavior of the process.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} behaviorRefName - The reference name of the behavior\r\n     * @param {WorkItemTrackingProcessInterfaces.GetBehaviorsExpand} expand\r\n     */\r\n    getProcessBehavior(processId, behaviorRefName, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    behaviorRefName: behaviorRefName\r\n                };\r\n                let queryValues = {\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"processes\", \"d1800200-f184-4e75-a5f2-ad0b04b4373e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessBehavior, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a list of all behaviors in the process.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {WorkItemTrackingProcessInterfaces.GetBehaviorsExpand} expand\r\n     */\r\n    getProcessBehaviors(processId, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId\r\n                };\r\n                let queryValues = {\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"processes\", \"d1800200-f184-4e75-a5f2-ad0b04b4373e\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessBehavior, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Replaces a behavior in the process.\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.ProcessBehaviorUpdateRequest} behaviorData\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} behaviorRefName - The reference name of the behavior\r\n     */\r\n    updateProcessBehavior(behaviorData, processId, behaviorRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    behaviorRefName: behaviorRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"processes\", \"d1800200-f184-4e75-a5f2-ad0b04b4373e\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, behaviorData, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessBehavior, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a control in a group.\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.Control} control - The control.\r\n     * @param {string} processId - The ID of the process.\r\n     * @param {string} witRefName - The reference name of the work item type.\r\n     * @param {string} groupId - The ID of the group to add the control to.\r\n     */\r\n    createControlInGroup(control, processId, witRefName, groupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    groupId: groupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"1f59b363-a2d0-4b7e-9bc6-eb9f5f3f0e58\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, control, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Moves a control to a specified group.\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.Control} control - The control.\r\n     * @param {string} processId - The ID of the process.\r\n     * @param {string} witRefName - The reference name of the work item type.\r\n     * @param {string} groupId - The ID of the group to move the control to.\r\n     * @param {string} controlId - The ID of the control.\r\n     * @param {string} removeFromGroupId - The group ID to remove the control from.\r\n     */\r\n    moveControlToGroup(control, processId, witRefName, groupId, controlId, removeFromGroupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    groupId: groupId,\r\n                    controlId: controlId\r\n                };\r\n                let queryValues = {\r\n                    removeFromGroupId: removeFromGroupId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"1f59b363-a2d0-4b7e-9bc6-eb9f5f3f0e58\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, control, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a control from the work item form.\r\n     *\r\n     * @param {string} processId - The ID of the process.\r\n     * @param {string} witRefName - The reference name of the work item type.\r\n     * @param {string} groupId - The ID of the group.\r\n     * @param {string} controlId - The ID of the control to remove.\r\n     */\r\n    removeControlFromGroup(processId, witRefName, groupId, controlId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    groupId: groupId,\r\n                    controlId: controlId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"1f59b363-a2d0-4b7e-9bc6-eb9f5f3f0e58\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates a control on the work item form.\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.Control} control - The updated control.\r\n     * @param {string} processId - The ID of the process.\r\n     * @param {string} witRefName - The reference name of the work item type.\r\n     * @param {string} groupId - The ID of the group.\r\n     * @param {string} controlId - The ID of the control.\r\n     */\r\n    updateControl(control, processId, witRefName, groupId, controlId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    groupId: groupId,\r\n                    controlId: controlId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"1f59b363-a2d0-4b7e-9bc6-eb9f5f3f0e58\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, control, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds a field to a work item type.\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.AddProcessWorkItemTypeFieldRequest} field\r\n     * @param {string} processId - The ID of the process.\r\n     * @param {string} witRefName - The reference name of the work item type.\r\n     */\r\n    addFieldToWorkItemType(field, processId, witRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"processes\", \"bc0ad8dc-e3f3-46b0-b06c-5bf861793196\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, field, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessWorkItemTypeField, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a list of all fields in a work item type.\r\n     *\r\n     * @param {string} processId - The ID of the process.\r\n     * @param {string} witRefName - The reference name of the work item type.\r\n     */\r\n    getAllWorkItemTypeFields(processId, witRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"processes\", \"bc0ad8dc-e3f3-46b0-b06c-5bf861793196\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessWorkItemTypeField, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a field in a work item type.\r\n     *\r\n     * @param {string} processId - The ID of the process.\r\n     * @param {string} witRefName - The reference name of the work item type.\r\n     * @param {string} fieldRefName - The reference name of the field.\r\n     * @param {WorkItemTrackingProcessInterfaces.ProcessWorkItemTypeFieldsExpandLevel} expand\r\n     */\r\n    getWorkItemTypeField(processId, witRefName, fieldRefName, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    fieldRefName: fieldRefName\r\n                };\r\n                let queryValues = {\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"processes\", \"bc0ad8dc-e3f3-46b0-b06c-5bf861793196\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessWorkItemTypeField, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a field from a work item type. Does not permanently delete the field.\r\n     *\r\n     * @param {string} processId - The ID of the process.\r\n     * @param {string} witRefName - The reference name of the work item type.\r\n     * @param {string} fieldRefName - The reference name of the field.\r\n     */\r\n    removeWorkItemTypeField(processId, witRefName, fieldRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    fieldRefName: fieldRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"processes\", \"bc0ad8dc-e3f3-46b0-b06c-5bf861793196\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates a field in a work item type.\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.UpdateProcessWorkItemTypeFieldRequest} field\r\n     * @param {string} processId - The ID of the process.\r\n     * @param {string} witRefName - The reference name of the work item type.\r\n     * @param {string} fieldRefName - The reference name of the field.\r\n     */\r\n    updateWorkItemTypeField(field, processId, witRefName, fieldRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    fieldRefName: fieldRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"processes\", \"bc0ad8dc-e3f3-46b0-b06c-5bf861793196\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, field, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessWorkItemTypeField, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds a group to the work item form.\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.Group} group - The group.\r\n     * @param {string} processId - The ID of the process.\r\n     * @param {string} witRefName - The reference name of the work item type.\r\n     * @param {string} pageId - The ID of the page to add the group to.\r\n     * @param {string} sectionId - The ID of the section to add the group to.\r\n     */\r\n    addGroup(group, processId, witRefName, pageId, sectionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    pageId: pageId,\r\n                    sectionId: sectionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"766e44e1-36a8-41d7-9050-c343ff02f7a5\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, group, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Moves a group to a different page and section.\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.Group} group - The updated group.\r\n     * @param {string} processId - The ID of the process.\r\n     * @param {string} witRefName - The reference name of the work item type.\r\n     * @param {string} pageId - The ID of the page the group is in.\r\n     * @param {string} sectionId - The ID of the section the group is i.n\r\n     * @param {string} groupId - The ID of the group.\r\n     * @param {string} removeFromPageId - ID of the page to remove the group from.\r\n     * @param {string} removeFromSectionId - ID of the section to remove the group from.\r\n     */\r\n    moveGroupToPage(group, processId, witRefName, pageId, sectionId, groupId, removeFromPageId, removeFromSectionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (removeFromPageId == null) {\r\n                throw new TypeError('removeFromPageId can not be null or undefined');\r\n            }\r\n            if (removeFromSectionId == null) {\r\n                throw new TypeError('removeFromSectionId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    pageId: pageId,\r\n                    sectionId: sectionId,\r\n                    groupId: groupId\r\n                };\r\n                let queryValues = {\r\n                    removeFromPageId: removeFromPageId,\r\n                    removeFromSectionId: removeFromSectionId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"766e44e1-36a8-41d7-9050-c343ff02f7a5\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, group, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Moves a group to a different section.\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.Group} group - The updated group.\r\n     * @param {string} processId - The ID of the process.\r\n     * @param {string} witRefName - The reference name of the work item type.\r\n     * @param {string} pageId - The ID of the page the group is in.\r\n     * @param {string} sectionId - The ID of the section the group is in.\r\n     * @param {string} groupId - The ID of the group.\r\n     * @param {string} removeFromSectionId - ID of the section to remove the group from.\r\n     */\r\n    moveGroupToSection(group, processId, witRefName, pageId, sectionId, groupId, removeFromSectionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (removeFromSectionId == null) {\r\n                throw new TypeError('removeFromSectionId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    pageId: pageId,\r\n                    sectionId: sectionId,\r\n                    groupId: groupId\r\n                };\r\n                let queryValues = {\r\n                    removeFromSectionId: removeFromSectionId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"766e44e1-36a8-41d7-9050-c343ff02f7a5\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, group, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a group from the work item form.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     * @param {string} pageId - The ID of the page the group is in\r\n     * @param {string} sectionId - The ID of the section to the group is in\r\n     * @param {string} groupId - The ID of the group\r\n     */\r\n    removeGroup(processId, witRefName, pageId, sectionId, groupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    pageId: pageId,\r\n                    sectionId: sectionId,\r\n                    groupId: groupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"766e44e1-36a8-41d7-9050-c343ff02f7a5\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates a group in the work item form.\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.Group} group - The updated group.\r\n     * @param {string} processId - The ID of the process.\r\n     * @param {string} witRefName - The reference name of the work item type.\r\n     * @param {string} pageId - The ID of the page the group is in.\r\n     * @param {string} sectionId - The ID of the section the group is in.\r\n     * @param {string} groupId - The ID of the group.\r\n     */\r\n    updateGroup(group, processId, witRefName, pageId, sectionId, groupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    pageId: pageId,\r\n                    sectionId: sectionId,\r\n                    groupId: groupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"766e44e1-36a8-41d7-9050-c343ff02f7a5\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, group, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the form layout.\r\n     *\r\n     * @param {string} processId - The ID of the process.\r\n     * @param {string} witRefName - The reference name of the work item type.\r\n     */\r\n    getFormLayout(processId, witRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"fa8646eb-43cd-4b71-9564-40106fd63e40\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.FormLayout, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a picklist.\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.PickList} picklist - Picklist\r\n     */\r\n    createList(picklist) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"01e15468-e27c-4e20-a974-bd957dcccebc\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, picklist, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a picklist.\r\n     *\r\n     * @param {string} listId - The ID of the list\r\n     */\r\n    deleteList(listId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    listId: listId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"01e15468-e27c-4e20-a974-bd957dcccebc\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a picklist.\r\n     *\r\n     * @param {string} listId - The ID of the list\r\n     */\r\n    getList(listId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    listId: listId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"01e15468-e27c-4e20-a974-bd957dcccebc\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns meta data of the picklist.\r\n     *\r\n     */\r\n    getListsMetadata() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"01e15468-e27c-4e20-a974-bd957dcccebc\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates a list.\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.PickList} picklist\r\n     * @param {string} listId - The ID of the list\r\n     */\r\n    updateList(picklist, listId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    listId: listId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"01e15468-e27c-4e20-a974-bd957dcccebc\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, picklist, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds a page to the work item form.\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.Page} page - The page.\r\n     * @param {string} processId - The ID of the process.\r\n     * @param {string} witRefName - The reference name of the work item type.\r\n     */\r\n    addPage(page, processId, witRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"1cc7b29f-6697-4d9d-b0a1-2650d3e1d584\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, page, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.Page, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a page from the work item form\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     * @param {string} pageId - The ID of the page\r\n     */\r\n    removePage(processId, witRefName, pageId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    pageId: pageId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"1cc7b29f-6697-4d9d-b0a1-2650d3e1d584\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates a page on the work item form\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.Page} page - The page\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     */\r\n    updatePage(page, processId, witRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"1cc7b29f-6697-4d9d-b0a1-2650d3e1d584\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, page, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.Page, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a process.\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.CreateProcessModel} createRequest - CreateProcessModel.\r\n     */\r\n    createNewProcess(createRequest) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"processes\", \"02cc6a73-5cfb-427d-8c8e-b49fb086e8af\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, createRequest, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessInfo, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a process of a specific ID.\r\n     *\r\n     * @param {string} processTypeId\r\n     */\r\n    deleteProcessById(processTypeId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processTypeId: processTypeId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"processes\", \"02cc6a73-5cfb-427d-8c8e-b49fb086e8af\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Edit a process of a specific ID.\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.UpdateProcessModel} updateRequest\r\n     * @param {string} processTypeId\r\n     */\r\n    editProcess(updateRequest, processTypeId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processTypeId: processTypeId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"processes\", \"02cc6a73-5cfb-427d-8c8e-b49fb086e8af\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, updateRequest, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessInfo, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get list of all processes including system and inherited.\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.GetProcessExpandLevel} expand\r\n     */\r\n    getListOfProcesses(expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                let queryValues = {\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"processes\", \"02cc6a73-5cfb-427d-8c8e-b49fb086e8af\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessInfo, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Get a single process of a specified ID.\r\n     *\r\n     * @param {string} processTypeId\r\n     * @param {WorkItemTrackingProcessInterfaces.GetProcessExpandLevel} expand\r\n     */\r\n    getProcessByItsId(processTypeId, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processTypeId: processTypeId\r\n                };\r\n                let queryValues = {\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"processes\", \"02cc6a73-5cfb-427d-8c8e-b49fb086e8af\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessInfo, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds a rule to work item type in the process.\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.CreateProcessRuleRequest} processRuleCreate\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     */\r\n    addProcessWorkItemTypeRule(processRuleCreate, processId, witRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"processes\", \"76fe3432-d825-479d-a5f6-983bbb78b4f3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, processRuleCreate, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessRule, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a rule from the work item type in the process.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     * @param {string} ruleId - The ID of the rule\r\n     */\r\n    deleteProcessWorkItemTypeRule(processId, witRefName, ruleId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    ruleId: ruleId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"processes\", \"76fe3432-d825-479d-a5f6-983bbb78b4f3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a single rule in the work item type of the process.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     * @param {string} ruleId - The ID of the rule\r\n     */\r\n    getProcessWorkItemTypeRule(processId, witRefName, ruleId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    ruleId: ruleId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"processes\", \"76fe3432-d825-479d-a5f6-983bbb78b4f3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessRule, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a list of all rules in the work item type of the process.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     */\r\n    getProcessWorkItemTypeRules(processId, witRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"processes\", \"76fe3432-d825-479d-a5f6-983bbb78b4f3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessRule, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates a rule in the work item type of the process.\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.UpdateProcessRuleRequest} processRule\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     * @param {string} ruleId - The ID of the rule\r\n     */\r\n    updateProcessWorkItemTypeRule(processRule, processId, witRefName, ruleId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    ruleId: ruleId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"processes\", \"76fe3432-d825-479d-a5f6-983bbb78b4f3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, processRule, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessRule, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a state definition in the work item type of the process.\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.WorkItemStateInputModel} stateModel\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     */\r\n    createStateDefinition(stateModel, processId, witRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"31015d57-2dff-4a46-adb3-2fb4ee3dcec9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, stateModel, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.WorkItemStateResultModel, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a state definition in the work item type of the process.\r\n     *\r\n     * @param {string} processId - ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     * @param {string} stateId - ID of the state\r\n     */\r\n    deleteStateDefinition(processId, witRefName, stateId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    stateId: stateId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"31015d57-2dff-4a46-adb3-2fb4ee3dcec9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a single state definition in a work item type of the process.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     * @param {string} stateId - The ID of the state\r\n     */\r\n    getStateDefinition(processId, witRefName, stateId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    stateId: stateId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"31015d57-2dff-4a46-adb3-2fb4ee3dcec9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.WorkItemStateResultModel, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a list of all state definitions in a work item type of the process.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     */\r\n    getStateDefinitions(processId, witRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"31015d57-2dff-4a46-adb3-2fb4ee3dcec9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.WorkItemStateResultModel, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Hides a state definition in the work item type of the process.Only states with customizationType:System can be hidden.\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.HideStateModel} hideStateModel\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     * @param {string} stateId - The ID of the state\r\n     */\r\n    hideStateDefinition(hideStateModel, processId, witRefName, stateId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    stateId: stateId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"31015d57-2dff-4a46-adb3-2fb4ee3dcec9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, hideStateModel, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.WorkItemStateResultModel, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates a given state definition in the work item type of the process.\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.WorkItemStateInputModel} stateModel\r\n     * @param {string} processId - ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     * @param {string} stateId - ID of the state\r\n     */\r\n    updateStateDefinition(stateModel, processId, witRefName, stateId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    stateId: stateId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"31015d57-2dff-4a46-adb3-2fb4ee3dcec9\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, stateModel, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.WorkItemStateResultModel, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Deletes a system control modification on the work item form.\r\n     *\r\n     * @param {string} processId - The ID of the process.\r\n     * @param {string} witRefName - The reference name of the work item type.\r\n     * @param {string} controlId - The ID of the control.\r\n     */\r\n    deleteSystemControl(processId, witRefName, controlId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    controlId: controlId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"ff9a3d2c-32b7-4c6c-991c-d5a251fb9098\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets edited system controls for a work item type in a process. To get all system controls (base + edited) use layout API(s)\r\n     *\r\n     * @param {string} processId - The ID of the process.\r\n     * @param {string} witRefName - The reference name of the work item type.\r\n     */\r\n    getSystemControls(processId, witRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"ff9a3d2c-32b7-4c6c-991c-d5a251fb9098\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates/adds a system control on the work item form.\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.Control} control\r\n     * @param {string} processId - The ID of the process.\r\n     * @param {string} witRefName - The reference name of the work item type.\r\n     * @param {string} controlId - The ID of the control.\r\n     */\r\n    updateSystemControl(control, processId, witRefName, controlId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    controlId: controlId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"ff9a3d2c-32b7-4c6c-991c-d5a251fb9098\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, control, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a work item type in the process.\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.CreateProcessWorkItemTypeRequest} workItemType\r\n     * @param {string} processId - The ID of the process on which to create work item type.\r\n     */\r\n    createProcessWorkItemType(workItemType, processId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"processes\", \"e2e9d1a6-432d-4062-8870-bfcb8c324ad7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, workItemType, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessWorkItemType, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a work item type in the process.\r\n     *\r\n     * @param {string} processId - The ID of the process.\r\n     * @param {string} witRefName - The reference name of the work item type.\r\n     */\r\n    deleteProcessWorkItemType(processId, witRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"processes\", \"e2e9d1a6-432d-4062-8870-bfcb8c324ad7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a single work item type in a process.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     * @param {WorkItemTrackingProcessInterfaces.GetWorkItemTypeExpand} expand - Flag to determine what properties of work item type to return\r\n     */\r\n    getProcessWorkItemType(processId, witRefName, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName\r\n                };\r\n                let queryValues = {\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"processes\", \"e2e9d1a6-432d-4062-8870-bfcb8c324ad7\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessWorkItemType, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a list of all work item types in a process.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {WorkItemTrackingProcessInterfaces.GetWorkItemTypeExpand} expand - Flag to determine what properties of work item type to return\r\n     */\r\n    getProcessWorkItemTypes(processId, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId\r\n                };\r\n                let queryValues = {\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"processes\", \"e2e9d1a6-432d-4062-8870-bfcb8c324ad7\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessWorkItemType, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates a work item type of the process.\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.UpdateProcessWorkItemTypeRequest} workItemTypeUpdate\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     */\r\n    updateProcessWorkItemType(workItemTypeUpdate, processId, witRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.2\", \"processes\", \"e2e9d1a6-432d-4062-8870-bfcb8c324ad7\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, workItemTypeUpdate, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessInterfaces.TypeInfo.ProcessWorkItemType, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds a behavior to the work item type of the process.\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.WorkItemTypeBehavior} behavior\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefNameForBehaviors - Work item type reference name for the behavior\r\n     */\r\n    addBehaviorToWorkItemType(behavior, processId, witRefNameForBehaviors) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefNameForBehaviors: witRefNameForBehaviors\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"6d765a2e-4e1b-4b11-be93-f953be676024\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, behavior, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a behavior for the work item type of the process.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefNameForBehaviors - Work item type reference name for the behavior\r\n     * @param {string} behaviorRefName - The reference name of the behavior\r\n     */\r\n    getBehaviorForWorkItemType(processId, witRefNameForBehaviors, behaviorRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefNameForBehaviors: witRefNameForBehaviors,\r\n                    behaviorRefName: behaviorRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"6d765a2e-4e1b-4b11-be93-f953be676024\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a list of all behaviors for the work item type of the process.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefNameForBehaviors - Work item type reference name for the behavior\r\n     */\r\n    getBehaviorsForWorkItemType(processId, witRefNameForBehaviors) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefNameForBehaviors: witRefNameForBehaviors\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"6d765a2e-4e1b-4b11-be93-f953be676024\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a behavior for the work item type of the process.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefNameForBehaviors - Work item type reference name for the behavior\r\n     * @param {string} behaviorRefName - The reference name of the behavior\r\n     */\r\n    removeBehaviorFromWorkItemType(processId, witRefNameForBehaviors, behaviorRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefNameForBehaviors: witRefNameForBehaviors,\r\n                    behaviorRefName: behaviorRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"6d765a2e-4e1b-4b11-be93-f953be676024\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates a behavior for the work item type of the process.\r\n     *\r\n     * @param {WorkItemTrackingProcessInterfaces.WorkItemTypeBehavior} behavior\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefNameForBehaviors - Work item type reference name for the behavior\r\n     */\r\n    updateBehaviorToWorkItemType(behavior, processId, witRefNameForBehaviors) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefNameForBehaviors: witRefNameForBehaviors\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processes\", \"6d765a2e-4e1b-4b11-be93-f953be676024\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, behavior, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nWorkItemTrackingProcessApi.RESOURCE_AREA_ID = \"5264459e-e5e0-4bd8-b118-0985e68a4ec5\";\r\nexports.WorkItemTrackingProcessApi = WorkItemTrackingProcessApi;\r\n","\"use strict\";\r\n/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst basem = require(\"./ClientApiBases\");\r\nconst WorkItemTrackingProcessDefinitionsInterfaces = require(\"./interfaces/WorkItemTrackingProcessDefinitionsInterfaces\");\r\nclass WorkItemTrackingProcessDefinitionsApi extends basem.ClientApiBase {\r\n    constructor(baseUrl, handlers, options) {\r\n        super(baseUrl, handlers, 'node-WorkItemTracking-api', options);\r\n    }\r\n    /**\r\n     * Creates a single behavior in the given process.\r\n     *\r\n     * @param {WorkItemTrackingProcessDefinitionsInterfaces.BehaviorCreateModel} behavior\r\n     * @param {string} processId - The ID of the process\r\n     */\r\n    createBehavior(behavior, processId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"47a651f4-fb70-43bf-b96b-7c0ba947142b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, behavior, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a behavior in the process.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} behaviorId - The ID of the behavior\r\n     */\r\n    deleteBehavior(processId, behaviorId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    behaviorId: behaviorId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"47a651f4-fb70-43bf-b96b-7c0ba947142b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a single behavior in the process.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} behaviorId - The ID of the behavior\r\n     */\r\n    getBehavior(processId, behaviorId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    behaviorId: behaviorId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"47a651f4-fb70-43bf-b96b-7c0ba947142b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a list of all behaviors in the process.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     */\r\n    getBehaviors(processId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"47a651f4-fb70-43bf-b96b-7c0ba947142b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Replaces a behavior in the process.\r\n     *\r\n     * @param {WorkItemTrackingProcessDefinitionsInterfaces.BehaviorReplaceModel} behaviorData\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} behaviorId - The ID of the behavior\r\n     */\r\n    replaceBehavior(behaviorData, processId, behaviorId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    behaviorId: behaviorId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"47a651f4-fb70-43bf-b96b-7c0ba947142b\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, behaviorData, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a control in a group\r\n     *\r\n     * @param {WorkItemTrackingProcessDefinitionsInterfaces.Control} control - The control\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     * @param {string} groupId - The ID of the group to add the control to\r\n     */\r\n    addControlToGroup(control, processId, witRefName, groupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    groupId: groupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"e2e3166a-627a-4e9b-85b2-d6a097bbd731\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, control, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates a control on the work item form\r\n     *\r\n     * @param {WorkItemTrackingProcessDefinitionsInterfaces.Control} control - The updated control\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     * @param {string} groupId - The ID of the group\r\n     * @param {string} controlId - The ID of the control\r\n     */\r\n    editControl(control, processId, witRefName, groupId, controlId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    groupId: groupId,\r\n                    controlId: controlId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"e2e3166a-627a-4e9b-85b2-d6a097bbd731\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, control, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a control from the work item form\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     * @param {string} groupId - The ID of the group\r\n     * @param {string} controlId - The ID of the control to remove\r\n     */\r\n    removeControlFromGroup(processId, witRefName, groupId, controlId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    groupId: groupId,\r\n                    controlId: controlId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"e2e3166a-627a-4e9b-85b2-d6a097bbd731\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Moves a control to a new group\r\n     *\r\n     * @param {WorkItemTrackingProcessDefinitionsInterfaces.Control} control - The control\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     * @param {string} groupId - The ID of the group to move the control to\r\n     * @param {string} controlId - The id of the control\r\n     * @param {string} removeFromGroupId - The group to remove the control from\r\n     */\r\n    setControlInGroup(control, processId, witRefName, groupId, controlId, removeFromGroupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    groupId: groupId,\r\n                    controlId: controlId\r\n                };\r\n                let queryValues = {\r\n                    removeFromGroupId: removeFromGroupId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"e2e3166a-627a-4e9b-85b2-d6a097bbd731\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, control, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a single field in the process.\r\n     *\r\n     * @param {WorkItemTrackingProcessDefinitionsInterfaces.FieldModel} field\r\n     * @param {string} processId - The ID of the process\r\n     */\r\n    createField(field, processId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"f36c66c7-911d-4163-8938-d3c5d0d7f5aa\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, field, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessDefinitionsInterfaces.TypeInfo.FieldModel, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates a given field in the process.\r\n     *\r\n     * @param {WorkItemTrackingProcessDefinitionsInterfaces.FieldUpdate} field\r\n     * @param {string} processId - The ID of the process\r\n     */\r\n    updateField(field, processId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"f36c66c7-911d-4163-8938-d3c5d0d7f5aa\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, field, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessDefinitionsInterfaces.TypeInfo.FieldModel, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds a group to the work item form\r\n     *\r\n     * @param {WorkItemTrackingProcessDefinitionsInterfaces.Group} group - The group\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     * @param {string} pageId - The ID of the page to add the group to\r\n     * @param {string} sectionId - The ID of the section to add the group to\r\n     */\r\n    addGroup(group, processId, witRefName, pageId, sectionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    pageId: pageId,\r\n                    sectionId: sectionId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"2617828b-e850-4375-a92a-04855704d4c3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, group, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates a group in the work item form\r\n     *\r\n     * @param {WorkItemTrackingProcessDefinitionsInterfaces.Group} group - The updated group\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     * @param {string} pageId - The ID of the page the group is in\r\n     * @param {string} sectionId - The ID of the section the group is in\r\n     * @param {string} groupId - The ID of the group\r\n     */\r\n    editGroup(group, processId, witRefName, pageId, sectionId, groupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    pageId: pageId,\r\n                    sectionId: sectionId,\r\n                    groupId: groupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"2617828b-e850-4375-a92a-04855704d4c3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, group, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a group from the work item form\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     * @param {string} pageId - The ID of the page the group is in\r\n     * @param {string} sectionId - The ID of the section to the group is in\r\n     * @param {string} groupId - The ID of the group\r\n     */\r\n    removeGroup(processId, witRefName, pageId, sectionId, groupId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    pageId: pageId,\r\n                    sectionId: sectionId,\r\n                    groupId: groupId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"2617828b-e850-4375-a92a-04855704d4c3\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Moves a group to a different page and section\r\n     *\r\n     * @param {WorkItemTrackingProcessDefinitionsInterfaces.Group} group - The updated group\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     * @param {string} pageId - The ID of the page the group is in\r\n     * @param {string} sectionId - The ID of the section the group is in\r\n     * @param {string} groupId - The ID of the group\r\n     * @param {string} removeFromPageId - ID of the page to remove the group from\r\n     * @param {string} removeFromSectionId - ID of the section to remove the group from\r\n     */\r\n    setGroupInPage(group, processId, witRefName, pageId, sectionId, groupId, removeFromPageId, removeFromSectionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (removeFromPageId == null) {\r\n                throw new TypeError('removeFromPageId can not be null or undefined');\r\n            }\r\n            if (removeFromSectionId == null) {\r\n                throw new TypeError('removeFromSectionId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    pageId: pageId,\r\n                    sectionId: sectionId,\r\n                    groupId: groupId\r\n                };\r\n                let queryValues = {\r\n                    removeFromPageId: removeFromPageId,\r\n                    removeFromSectionId: removeFromSectionId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"2617828b-e850-4375-a92a-04855704d4c3\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, group, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Moves a group to a different section\r\n     *\r\n     * @param {WorkItemTrackingProcessDefinitionsInterfaces.Group} group - The updated group\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     * @param {string} pageId - The ID of the page the group is in\r\n     * @param {string} sectionId - The ID of the section the group is in\r\n     * @param {string} groupId - The ID of the group\r\n     * @param {string} removeFromSectionId - ID of the section to remove the group from\r\n     */\r\n    setGroupInSection(group, processId, witRefName, pageId, sectionId, groupId, removeFromSectionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (removeFromSectionId == null) {\r\n                throw new TypeError('removeFromSectionId can not be null or undefined');\r\n            }\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    pageId: pageId,\r\n                    sectionId: sectionId,\r\n                    groupId: groupId\r\n                };\r\n                let queryValues = {\r\n                    removeFromSectionId: removeFromSectionId,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"2617828b-e850-4375-a92a-04855704d4c3\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, group, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Gets the form layout\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     */\r\n    getFormLayout(processId, witRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"3eacc80a-ddca-4404-857a-6331aac99063\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessDefinitionsInterfaces.TypeInfo.FormLayout, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns meta data of the picklist.\r\n     *\r\n     */\r\n    getListsMetadata() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"b45cc931-98e3-44a1-b1cd-2e8e9c6dc1c6\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a picklist.\r\n     *\r\n     * @param {WorkItemTrackingProcessDefinitionsInterfaces.PickListModel} picklist\r\n     */\r\n    createList(picklist) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {};\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"0b6179e2-23ce-46b2-b094-2ffa5ee70286\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, picklist, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a picklist.\r\n     *\r\n     * @param {string} listId - The ID of the list\r\n     */\r\n    deleteList(listId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    listId: listId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"0b6179e2-23ce-46b2-b094-2ffa5ee70286\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a picklist.\r\n     *\r\n     * @param {string} listId - The ID of the list\r\n     */\r\n    getList(listId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    listId: listId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"0b6179e2-23ce-46b2-b094-2ffa5ee70286\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates a list.\r\n     *\r\n     * @param {WorkItemTrackingProcessDefinitionsInterfaces.PickListModel} picklist\r\n     * @param {string} listId - The ID of the list\r\n     */\r\n    updateList(picklist, listId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    listId: listId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"0b6179e2-23ce-46b2-b094-2ffa5ee70286\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, picklist, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds a page to the work item form\r\n     *\r\n     * @param {WorkItemTrackingProcessDefinitionsInterfaces.Page} page - The page\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     */\r\n    addPage(page, processId, witRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"1b4ac126-59b2-4f37-b4df-0a48ba807edb\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, page, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessDefinitionsInterfaces.TypeInfo.Page, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates a page on the work item form\r\n     *\r\n     * @param {WorkItemTrackingProcessDefinitionsInterfaces.Page} page - The page\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     */\r\n    editPage(page, processId, witRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"1b4ac126-59b2-4f37-b4df-0a48ba807edb\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, page, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessDefinitionsInterfaces.TypeInfo.Page, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a page from the work item form\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     * @param {string} pageId - The ID of the page\r\n     */\r\n    removePage(processId, witRefName, pageId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    pageId: pageId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"1b4ac126-59b2-4f37-b4df-0a48ba807edb\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a state definition in the work item type of the process.\r\n     *\r\n     * @param {WorkItemTrackingProcessDefinitionsInterfaces.WorkItemStateInputModel} stateModel\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     */\r\n    createStateDefinition(stateModel, processId, witRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"4303625d-08f4-4461-b14b-32c65bba5599\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, stateModel, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a state definition in the work item type of the process.\r\n     *\r\n     * @param {string} processId - ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     * @param {string} stateId - ID of the state\r\n     */\r\n    deleteStateDefinition(processId, witRefName, stateId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    stateId: stateId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"4303625d-08f4-4461-b14b-32c65bba5599\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a state definition in the work item type of the process.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     * @param {string} stateId - The ID of the state\r\n     */\r\n    getStateDefinition(processId, witRefName, stateId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    stateId: stateId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"4303625d-08f4-4461-b14b-32c65bba5599\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a list of all state definitions in the work item type of the process.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     */\r\n    getStateDefinitions(processId, witRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"4303625d-08f4-4461-b14b-32c65bba5599\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Hides a state definition in the work item type of the process.\r\n     *\r\n     * @param {WorkItemTrackingProcessDefinitionsInterfaces.HideStateModel} hideStateModel\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     * @param {string} stateId - The ID of the state\r\n     */\r\n    hideStateDefinition(hideStateModel, processId, witRefName, stateId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    stateId: stateId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"4303625d-08f4-4461-b14b-32c65bba5599\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.replace(url, hideStateModel, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates a given state definition in the work item type of the process.\r\n     *\r\n     * @param {WorkItemTrackingProcessDefinitionsInterfaces.WorkItemStateInputModel} stateModel\r\n     * @param {string} processId - ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     * @param {string} stateId - ID of the state\r\n     */\r\n    updateStateDefinition(stateModel, processId, witRefName, stateId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName,\r\n                    stateId: stateId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"4303625d-08f4-4461-b14b-32c65bba5599\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, stateModel, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds a behavior to the work item type of the process.\r\n     *\r\n     * @param {WorkItemTrackingProcessDefinitionsInterfaces.WorkItemTypeBehavior} behavior\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefNameForBehaviors - Work item type reference name for the behavior\r\n     */\r\n    addBehaviorToWorkItemType(behavior, processId, witRefNameForBehaviors) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefNameForBehaviors: witRefNameForBehaviors\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"921dfb88-ef57-4c69-94e5-dd7da2d7031d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, behavior, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a behavior for the work item type of the process.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefNameForBehaviors - Work item type reference name for the behavior\r\n     * @param {string} behaviorRefName - The reference name of the behavior\r\n     */\r\n    getBehaviorForWorkItemType(processId, witRefNameForBehaviors, behaviorRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefNameForBehaviors: witRefNameForBehaviors,\r\n                    behaviorRefName: behaviorRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"921dfb88-ef57-4c69-94e5-dd7da2d7031d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a list of all behaviors for the work item type of the process.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefNameForBehaviors - Work item type reference name for the behavior\r\n     */\r\n    getBehaviorsForWorkItemType(processId, witRefNameForBehaviors) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefNameForBehaviors: witRefNameForBehaviors\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"921dfb88-ef57-4c69-94e5-dd7da2d7031d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, null, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a behavior for the work item type of the process.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefNameForBehaviors - Work item type reference name for the behavior\r\n     * @param {string} behaviorRefName - The reference name of the behavior\r\n     */\r\n    removeBehaviorFromWorkItemType(processId, witRefNameForBehaviors, behaviorRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefNameForBehaviors: witRefNameForBehaviors,\r\n                    behaviorRefName: behaviorRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"921dfb88-ef57-4c69-94e5-dd7da2d7031d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates default work item type for the behavior of the process.\r\n     *\r\n     * @param {WorkItemTrackingProcessDefinitionsInterfaces.WorkItemTypeBehavior} behavior\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefNameForBehaviors - Work item type reference name for the behavior\r\n     */\r\n    updateBehaviorToWorkItemType(behavior, processId, witRefNameForBehaviors) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefNameForBehaviors: witRefNameForBehaviors\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"921dfb88-ef57-4c69-94e5-dd7da2d7031d\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, behavior, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Creates a work item type in the process.\r\n     *\r\n     * @param {WorkItemTrackingProcessDefinitionsInterfaces.WorkItemTypeModel} workItemType\r\n     * @param {string} processId - The ID of the process\r\n     */\r\n    createWorkItemType(workItemType, processId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"1ce0acad-4638-49c3-969c-04aa65ba6bea\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, workItemType, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessDefinitionsInterfaces.TypeInfo.WorkItemTypeModel, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a work item type in the process.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     */\r\n    deleteWorkItemType(processId, witRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"1ce0acad-4638-49c3-969c-04aa65ba6bea\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a work item type of the process.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     * @param {WorkItemTrackingProcessDefinitionsInterfaces.GetWorkItemTypeExpand} expand\r\n     */\r\n    getWorkItemType(processId, witRefName, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName\r\n                };\r\n                let queryValues = {\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"1ce0acad-4638-49c3-969c-04aa65ba6bea\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessDefinitionsInterfaces.TypeInfo.WorkItemTypeModel, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a list of all work item types in the process.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {WorkItemTrackingProcessDefinitionsInterfaces.GetWorkItemTypeExpand} expand\r\n     */\r\n    getWorkItemTypes(processId, expand) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId\r\n                };\r\n                let queryValues = {\r\n                    '$expand': expand,\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"1ce0acad-4638-49c3-969c-04aa65ba6bea\", routeValues, queryValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessDefinitionsInterfaces.TypeInfo.WorkItemTypeModel, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates a work item type of the process.\r\n     *\r\n     * @param {WorkItemTrackingProcessDefinitionsInterfaces.WorkItemTypeUpdateModel} workItemTypeUpdate\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefName - The reference name of the work item type\r\n     */\r\n    updateWorkItemType(workItemTypeUpdate, processId, witRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefName: witRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"1ce0acad-4638-49c3-969c-04aa65ba6bea\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, workItemTypeUpdate, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessDefinitionsInterfaces.TypeInfo.WorkItemTypeModel, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Adds a field to the work item type in the process.\r\n     *\r\n     * @param {WorkItemTrackingProcessDefinitionsInterfaces.WorkItemTypeFieldModel2} field\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefNameForFields - Work item type reference name for the field\r\n     */\r\n    addFieldToWorkItemType(field, processId, witRefNameForFields) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefNameForFields: witRefNameForFields\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"976713b4-a62e-499e-94dc-eeb869ea9126\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.create(url, field, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessDefinitionsInterfaces.TypeInfo.WorkItemTypeFieldModel2, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a single field in the work item type of the process.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefNameForFields - Work item type reference name for fields\r\n     * @param {string} fieldRefName - The reference name of the field\r\n     */\r\n    getWorkItemTypeField(processId, witRefNameForFields, fieldRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefNameForFields: witRefNameForFields,\r\n                    fieldRefName: fieldRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"976713b4-a62e-499e-94dc-eeb869ea9126\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessDefinitionsInterfaces.TypeInfo.WorkItemTypeFieldModel2, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a list of all fields in the work item type of the process.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefNameForFields - Work item type reference name for fields\r\n     */\r\n    getWorkItemTypeFields(processId, witRefNameForFields) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefNameForFields: witRefNameForFields\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"976713b4-a62e-499e-94dc-eeb869ea9126\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.get(url, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessDefinitionsInterfaces.TypeInfo.WorkItemTypeFieldModel2, true);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Removes a field in the work item type of the process.\r\n     *\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefNameForFields - Work item type reference name for fields\r\n     * @param {string} fieldRefName - The reference name of the field\r\n     */\r\n    removeFieldFromWorkItemType(processId, witRefNameForFields, fieldRefName) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefNameForFields: witRefNameForFields,\r\n                    fieldRefName: fieldRefName\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"976713b4-a62e-499e-94dc-eeb869ea9126\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.del(url, options);\r\n                    let ret = this.formatResponse(res.result, null, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * Updates a single field in the scope of the given process and work item type.\r\n     *\r\n     * @param {WorkItemTrackingProcessDefinitionsInterfaces.WorkItemTypeFieldModel2} field - The model with which to update the field\r\n     * @param {string} processId - The ID of the process\r\n     * @param {string} witRefNameForFields - Work item type reference name for fields\r\n     */\r\n    updateWorkItemTypeField(field, processId, witRefNameForFields) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n                let routeValues = {\r\n                    processId: processId,\r\n                    witRefNameForFields: witRefNameForFields\r\n                };\r\n                try {\r\n                    let verData = yield this.vsoClient.getVersioningData(\"7.2-preview.1\", \"processDefinitions\", \"976713b4-a62e-499e-94dc-eeb869ea9126\", routeValues);\r\n                    let url = verData.requestUrl;\r\n                    let options = this.createRequestOptions('application/json', verData.apiVersion);\r\n                    let res;\r\n                    res = yield this.rest.update(url, field, options);\r\n                    let ret = this.formatResponse(res.result, WorkItemTrackingProcessDefinitionsInterfaces.TypeInfo.WorkItemTypeFieldModel2, false);\r\n                    resolve(ret);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nWorkItemTrackingProcessDefinitionsApi.RESOURCE_AREA_ID = \"5264459e-e5e0-4bd8-b118-0985e68a4ec5\";\r\nexports.WorkItemTrackingProcessDefinitionsApi = WorkItemTrackingProcessDefinitionsApi;\r\n","\"use strict\";\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for full license information.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst resthandlers = require(\"typed-rest-client/Handlers\");\r\nclass BasicCredentialHandler extends resthandlers.BasicCredentialHandler {\r\n    constructor(username, password, allowCrossOriginAuthentication = true) {\r\n        super(username, password, allowCrossOriginAuthentication);\r\n    }\r\n}\r\nexports.BasicCredentialHandler = BasicCredentialHandler;\r\n","\"use strict\";\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for full license information.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst resthandlers = require(\"typed-rest-client/Handlers\");\r\nclass BearerCredentialHandler extends resthandlers.BearerCredentialHandler {\r\n    constructor(token, allowCrossOriginAuthentication = true) {\r\n        super(token, allowCrossOriginAuthentication);\r\n    }\r\n}\r\nexports.BearerCredentialHandler = BearerCredentialHandler;\r\n","\"use strict\";\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for full license information.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst resthandlers = require(\"typed-rest-client/Handlers\");\r\nclass NtlmCredentialHandler extends resthandlers.NtlmCredentialHandler {\r\n    constructor(username, password, workstation, domain) {\r\n        super(username, password, workstation, domain);\r\n    }\r\n}\r\nexports.NtlmCredentialHandler = NtlmCredentialHandler;\r\n","\"use strict\";\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for full license information.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst resthandlers = require(\"typed-rest-client/Handlers\");\r\nclass PersonalAccessTokenCredentialHandler extends resthandlers.PersonalAccessTokenCredentialHandler {\r\n    constructor(token, allowCrossOriginAuthentication = true) {\r\n        super(token, allowCrossOriginAuthentication);\r\n    }\r\n}\r\nexports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;\r\n","/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AlertType;\r\n(function (AlertType) {\r\n    /**\r\n     * The code has an unspecified vulnerability type\r\n     */\r\n    AlertType[AlertType[\"Unknown\"] = 0] = \"Unknown\";\r\n    /**\r\n     * The code uses a dependency with a known vulnerability.\r\n     */\r\n    AlertType[AlertType[\"Dependency\"] = 1] = \"Dependency\";\r\n    /**\r\n     * The code contains a secret that has now been compromised and must be revoked.\r\n     */\r\n    AlertType[AlertType[\"Secret\"] = 2] = \"Secret\";\r\n    /**\r\n     * The code contains a weakness determined by static analysis.\r\n     */\r\n    AlertType[AlertType[\"Code\"] = 3] = \"Code\";\r\n})(AlertType = exports.AlertType || (exports.AlertType = {}));\r\nvar AnalysisConfigurationType;\r\n(function (AnalysisConfigurationType) {\r\n    /**\r\n     * Default analysis configuration that is not attached to any other configuration data\r\n     */\r\n    AnalysisConfigurationType[AnalysisConfigurationType[\"Default\"] = 0] = \"Default\";\r\n    /**\r\n     * Ado Pipeline, contains branch, pipeline, phase, and ADOPipelineId\r\n     */\r\n    AnalysisConfigurationType[AnalysisConfigurationType[\"AdoPipeline\"] = 1] = \"AdoPipeline\";\r\n})(AnalysisConfigurationType = exports.AnalysisConfigurationType || (exports.AnalysisConfigurationType = {}));\r\n/**\r\n * This enum defines the dependency components.\r\n */\r\nvar ComponentType;\r\n(function (ComponentType) {\r\n    ComponentType[ComponentType[\"Unknown\"] = 0] = \"Unknown\";\r\n    ComponentType[ComponentType[\"NuGet\"] = 1] = \"NuGet\";\r\n    /**\r\n     * Indicates the component is an Npm package.\r\n     */\r\n    ComponentType[ComponentType[\"Npm\"] = 2] = \"Npm\";\r\n    /**\r\n     * Indicates the component is a Maven artifact.\r\n     */\r\n    ComponentType[ComponentType[\"Maven\"] = 3] = \"Maven\";\r\n    /**\r\n     * Indicates the component is a Git repository.\r\n     */\r\n    ComponentType[ComponentType[\"Git\"] = 4] = \"Git\";\r\n    /**\r\n     * Indicates the component is not any of the supported component types by Governance.\r\n     */\r\n    ComponentType[ComponentType[\"Other\"] = 5] = \"Other\";\r\n    /**\r\n     * Indicates the component is a Ruby gem.\r\n     */\r\n    ComponentType[ComponentType[\"RubyGems\"] = 6] = \"RubyGems\";\r\n    /**\r\n     * Indicates the component is a Cargo package.\r\n     */\r\n    ComponentType[ComponentType[\"Cargo\"] = 7] = \"Cargo\";\r\n    /**\r\n     * Indicates the component is a Pip package.\r\n     */\r\n    ComponentType[ComponentType[\"Pip\"] = 8] = \"Pip\";\r\n    /**\r\n     * Indicates the component is a loose file. Not a package as understood by different package managers.\r\n     */\r\n    ComponentType[ComponentType[\"File\"] = 9] = \"File\";\r\n    /**\r\n     * Indicates the component is a Go package.\r\n     */\r\n    ComponentType[ComponentType[\"Go\"] = 10] = \"Go\";\r\n    /**\r\n     * Indicates the component is a Docker Image\r\n     */\r\n    ComponentType[ComponentType[\"DockerImage\"] = 11] = \"DockerImage\";\r\n    /**\r\n     * Indicates the component is a CocoaPods pod.\r\n     */\r\n    ComponentType[ComponentType[\"Pod\"] = 12] = \"Pod\";\r\n    /**\r\n     * Indicates the component is found in a linux environment. A package understood by linux based package managers like apt and rpm.\r\n     */\r\n    ComponentType[ComponentType[\"Linux\"] = 13] = \"Linux\";\r\n    /**\r\n     * Indicates the component is a Conda package.\r\n     */\r\n    ComponentType[ComponentType[\"Conda\"] = 14] = \"Conda\";\r\n    /**\r\n     * Indicates the component is a Docker Reference.\r\n     */\r\n    ComponentType[ComponentType[\"DockerReference\"] = 15] = \"DockerReference\";\r\n    /**\r\n     * Indicates the component is a Vcpkg Package.\r\n     */\r\n    ComponentType[ComponentType[\"Vcpkg\"] = 16] = \"Vcpkg\";\r\n})(ComponentType = exports.ComponentType || (exports.ComponentType = {}));\r\nvar DismissalType;\r\n(function (DismissalType) {\r\n    /**\r\n     * Dismissal type unknown\r\n     */\r\n    DismissalType[DismissalType[\"Unknown\"] = 0] = \"Unknown\";\r\n    /**\r\n     * Dismissal indicating alert has been fixed\r\n     */\r\n    DismissalType[DismissalType[\"Fixed\"] = 1] = \"Fixed\";\r\n    /**\r\n     * Dismissal indicating user is accepting a risk for the alert\r\n     */\r\n    DismissalType[DismissalType[\"AcceptedRisk\"] = 2] = \"AcceptedRisk\";\r\n    /**\r\n     * Dismissal indicating alert is a false positive and will likely not be fixed.\r\n     */\r\n    DismissalType[DismissalType[\"FalsePositive\"] = 3] = \"FalsePositive\";\r\n})(DismissalType = exports.DismissalType || (exports.DismissalType = {}));\r\nvar ExpandOption;\r\n(function (ExpandOption) {\r\n    /**\r\n     * No Expands.\r\n     */\r\n    ExpandOption[ExpandOption[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Return validationFingerprints in Alert.\r\n     */\r\n    ExpandOption[ExpandOption[\"ValidationFingerprint\"] = 1] = \"ValidationFingerprint\";\r\n})(ExpandOption = exports.ExpandOption || (exports.ExpandOption = {}));\r\n/**\r\n * This enum defines the different result types.\r\n */\r\nvar ResultType;\r\n(function (ResultType) {\r\n    /**\r\n     * The result was found from an unspecified analysis type\r\n     */\r\n    ResultType[ResultType[\"Unknown\"] = 0] = \"Unknown\";\r\n    /**\r\n     * The result was found from dependency analysis\r\n     */\r\n    ResultType[ResultType[\"Dependency\"] = 1] = \"Dependency\";\r\n    /**\r\n     * The result was found from static code analysis\r\n     */\r\n    ResultType[ResultType[\"VersionControl\"] = 2] = \"VersionControl\";\r\n})(ResultType = exports.ResultType || (exports.ResultType = {}));\r\nvar SarifJobStatus;\r\n(function (SarifJobStatus) {\r\n    /**\r\n     * The job type when it is new\r\n     */\r\n    SarifJobStatus[SarifJobStatus[\"New\"] = 0] = \"New\";\r\n    /**\r\n     * The job type when it is queued\r\n     */\r\n    SarifJobStatus[SarifJobStatus[\"Queued\"] = 1] = \"Queued\";\r\n    /**\r\n     * The job type when it is completed\r\n     */\r\n    SarifJobStatus[SarifJobStatus[\"Completed\"] = 2] = \"Completed\";\r\n    /**\r\n     * The job type when it fails\r\n     */\r\n    SarifJobStatus[SarifJobStatus[\"Failed\"] = 3] = \"Failed\";\r\n})(SarifJobStatus = exports.SarifJobStatus || (exports.SarifJobStatus = {}));\r\nvar Severity;\r\n(function (Severity) {\r\n    Severity[Severity[\"Low\"] = 0] = \"Low\";\r\n    Severity[Severity[\"Medium\"] = 1] = \"Medium\";\r\n    Severity[Severity[\"High\"] = 2] = \"High\";\r\n    Severity[Severity[\"Critical\"] = 3] = \"Critical\";\r\n    Severity[Severity[\"Note\"] = 4] = \"Note\";\r\n    Severity[Severity[\"Warning\"] = 5] = \"Warning\";\r\n    Severity[Severity[\"Error\"] = 6] = \"Error\";\r\n})(Severity = exports.Severity || (exports.Severity = {}));\r\nvar State;\r\n(function (State) {\r\n    /**\r\n     * Alert is in an indeterminate state\r\n     */\r\n    State[State[\"Unknown\"] = 0] = \"Unknown\";\r\n    /**\r\n     * Alert has been detected in the code\r\n     */\r\n    State[State[\"Active\"] = 1] = \"Active\";\r\n    /**\r\n     * Alert was dismissed by a user\r\n     */\r\n    State[State[\"Dismissed\"] = 2] = \"Dismissed\";\r\n    /**\r\n     * The issue is no longer detected in the code\r\n     */\r\n    State[State[\"Fixed\"] = 4] = \"Fixed\";\r\n    /**\r\n     * The tool has determined that the issue is no longer a risk\r\n     */\r\n    State[State[\"AutoDismissed\"] = 8] = \"AutoDismissed\";\r\n})(State = exports.State || (exports.State = {}));\r\nexports.TypeInfo = {\r\n    Alert: {},\r\n    AlertAnalysisInstance: {},\r\n    AlertStateUpdate: {},\r\n    AlertType: {\r\n        enumValues: {\r\n            \"unknown\": 0,\r\n            \"dependency\": 1,\r\n            \"secret\": 2,\r\n            \"code\": 3\r\n        }\r\n    },\r\n    AnalysisConfiguration: {},\r\n    AnalysisConfigurationType: {\r\n        enumValues: {\r\n            \"default\": 0,\r\n            \"adoPipeline\": 1\r\n        }\r\n    },\r\n    AnalysisInstance: {},\r\n    AnalysisResult: {},\r\n    Branch: {},\r\n    ComponentType: {\r\n        enumValues: {\r\n            \"unknown\": 0,\r\n            \"nuGet\": 1,\r\n            \"npm\": 2,\r\n            \"maven\": 3,\r\n            \"git\": 4,\r\n            \"other\": 5,\r\n            \"rubyGems\": 6,\r\n            \"cargo\": 7,\r\n            \"pip\": 8,\r\n            \"file\": 9,\r\n            \"go\": 10,\r\n            \"dockerImage\": 11,\r\n            \"pod\": 12,\r\n            \"linux\": 13,\r\n            \"conda\": 14,\r\n            \"dockerReference\": 15,\r\n            \"vcpkg\": 16\r\n        }\r\n    },\r\n    Dependency: {},\r\n    DependencyResult: {},\r\n    Dismissal: {},\r\n    DismissalType: {\r\n        enumValues: {\r\n            \"unknown\": 0,\r\n            \"fixed\": 1,\r\n            \"acceptedRisk\": 2,\r\n            \"falsePositive\": 3\r\n        }\r\n    },\r\n    ExpandOption: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"validationFingerprint\": 1\r\n        }\r\n    },\r\n    Result: {},\r\n    ResultType: {\r\n        enumValues: {\r\n            \"unknown\": 0,\r\n            \"dependency\": 1,\r\n            \"versionControl\": 2\r\n        }\r\n    },\r\n    SarifJobStatus: {\r\n        enumValues: {\r\n            \"new\": 0,\r\n            \"queued\": 1,\r\n            \"completed\": 2,\r\n            \"failed\": 3\r\n        }\r\n    },\r\n    SarifUploadStatus: {},\r\n    SearchCriteria: {},\r\n    Severity: {\r\n        enumValues: {\r\n            \"low\": 0,\r\n            \"medium\": 1,\r\n            \"high\": 2,\r\n            \"critical\": 3,\r\n            \"note\": 4,\r\n            \"warning\": 5,\r\n            \"error\": 6\r\n        }\r\n    },\r\n    State: {\r\n        enumValues: {\r\n            \"unknown\": 0,\r\n            \"active\": 1,\r\n            \"dismissed\": 2,\r\n            \"fixed\": 4,\r\n            \"autoDismissed\": 8\r\n        }\r\n    },\r\n    UxFilters: {},\r\n};\r\nexports.TypeInfo.Alert.fields = {\r\n    alertType: {\r\n        enumType: exports.TypeInfo.AlertType\r\n    },\r\n    dismissal: {\r\n        typeInfo: exports.TypeInfo.Dismissal\r\n    },\r\n    firstSeenDate: {\r\n        isDate: true,\r\n    },\r\n    fixedDate: {\r\n        isDate: true,\r\n    },\r\n    introducedDate: {\r\n        isDate: true,\r\n    },\r\n    lastSeenDate: {\r\n        isDate: true,\r\n    },\r\n    severity: {\r\n        enumType: exports.TypeInfo.Severity\r\n    },\r\n    state: {\r\n        enumType: exports.TypeInfo.State\r\n    }\r\n};\r\nexports.TypeInfo.AlertAnalysisInstance.fields = {\r\n    analysisConfiguration: {\r\n        typeInfo: exports.TypeInfo.AnalysisConfiguration\r\n    },\r\n    firstSeen: {\r\n        typeInfo: exports.TypeInfo.AnalysisInstance\r\n    },\r\n    fixedIn: {\r\n        typeInfo: exports.TypeInfo.AnalysisInstance\r\n    },\r\n    lastSeen: {\r\n        typeInfo: exports.TypeInfo.AnalysisInstance\r\n    },\r\n    recentAnalysisInstance: {\r\n        typeInfo: exports.TypeInfo.AnalysisInstance\r\n    },\r\n    state: {\r\n        enumType: exports.TypeInfo.State\r\n    }\r\n};\r\nexports.TypeInfo.AlertStateUpdate.fields = {\r\n    dismissedReason: {\r\n        enumType: exports.TypeInfo.DismissalType\r\n    },\r\n    state: {\r\n        enumType: exports.TypeInfo.State\r\n    }\r\n};\r\nexports.TypeInfo.AnalysisConfiguration.fields = {\r\n    analysisConfigurationType: {\r\n        enumType: exports.TypeInfo.AnalysisConfigurationType\r\n    }\r\n};\r\nexports.TypeInfo.AnalysisInstance.fields = {\r\n    configuration: {\r\n        typeInfo: exports.TypeInfo.AnalysisConfiguration\r\n    },\r\n    createdDate: {\r\n        isDate: true,\r\n    },\r\n    results: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.AnalysisResult\r\n    }\r\n};\r\nexports.TypeInfo.AnalysisResult.fields = {\r\n    result: {\r\n        typeInfo: exports.TypeInfo.Result\r\n    },\r\n    state: {\r\n        enumType: exports.TypeInfo.State\r\n    }\r\n};\r\nexports.TypeInfo.Branch.fields = {\r\n    deletedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.Dependency.fields = {\r\n    componentType: {\r\n        enumType: exports.TypeInfo.ComponentType\r\n    }\r\n};\r\nexports.TypeInfo.DependencyResult.fields = {\r\n    dependency: {\r\n        typeInfo: exports.TypeInfo.Dependency\r\n    }\r\n};\r\nexports.TypeInfo.Dismissal.fields = {\r\n    dismissalType: {\r\n        enumType: exports.TypeInfo.DismissalType\r\n    },\r\n    requestedOn: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.Result.fields = {\r\n    dependencyResult: {\r\n        typeInfo: exports.TypeInfo.DependencyResult\r\n    },\r\n    resultType: {\r\n        enumType: exports.TypeInfo.ResultType\r\n    },\r\n    severity: {\r\n        enumType: exports.TypeInfo.Severity\r\n    }\r\n};\r\nexports.TypeInfo.SarifUploadStatus.fields = {\r\n    processingStatus: {\r\n        enumType: exports.TypeInfo.SarifJobStatus\r\n    }\r\n};\r\nexports.TypeInfo.SearchCriteria.fields = {\r\n    alertType: {\r\n        enumType: exports.TypeInfo.AlertType\r\n    },\r\n    fromDate: {\r\n        isDate: true,\r\n    },\r\n    modifiedSince: {\r\n        isDate: true,\r\n    },\r\n    severities: {\r\n        isArray: true,\r\n        enumType: exports.TypeInfo.Severity\r\n    },\r\n    states: {\r\n        isArray: true,\r\n        enumType: exports.TypeInfo.State\r\n    },\r\n    toDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.UxFilters.fields = {\r\n    branches: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.Branch\r\n    },\r\n    packages: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.Dependency\r\n    },\r\n    severities: {\r\n        isArray: true,\r\n        enumType: exports.TypeInfo.Severity\r\n    },\r\n    states: {\r\n        isArray: true,\r\n        enumType: exports.TypeInfo.State\r\n    }\r\n};\r\n","/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst TFS_TestManagement_Contracts = require(\"../interfaces/TestInterfaces\");\r\nconst TfsCoreInterfaces = require(\"../interfaces/CoreInterfaces\");\r\nvar AgentStatus;\r\n(function (AgentStatus) {\r\n    /**\r\n     * Indicates that the build agent cannot be contacted.\r\n     */\r\n    AgentStatus[AgentStatus[\"Unavailable\"] = 0] = \"Unavailable\";\r\n    /**\r\n     * Indicates that the build agent is currently available.\r\n     */\r\n    AgentStatus[AgentStatus[\"Available\"] = 1] = \"Available\";\r\n    /**\r\n     * Indicates that the build agent has taken itself offline.\r\n     */\r\n    AgentStatus[AgentStatus[\"Offline\"] = 2] = \"Offline\";\r\n})(AgentStatus = exports.AgentStatus || (exports.AgentStatus = {}));\r\nvar AuditAction;\r\n(function (AuditAction) {\r\n    AuditAction[AuditAction[\"Add\"] = 1] = \"Add\";\r\n    AuditAction[AuditAction[\"Update\"] = 2] = \"Update\";\r\n    AuditAction[AuditAction[\"Delete\"] = 3] = \"Delete\";\r\n})(AuditAction = exports.AuditAction || (exports.AuditAction = {}));\r\n/**\r\n * Represents the desired scope of authorization for a build.\r\n */\r\nvar BuildAuthorizationScope;\r\n(function (BuildAuthorizationScope) {\r\n    /**\r\n     * The identity used should have build service account permissions scoped to the project collection. This is useful when resources for a single build are spread across multiple projects.\r\n     */\r\n    BuildAuthorizationScope[BuildAuthorizationScope[\"ProjectCollection\"] = 1] = \"ProjectCollection\";\r\n    /**\r\n     * The identity used should have build service account permissions scoped to the project in which the build definition resides. This is useful for isolation of build jobs to a particular team project to avoid any unintentional escalation of privilege attacks during a build.\r\n     */\r\n    BuildAuthorizationScope[BuildAuthorizationScope[\"Project\"] = 2] = \"Project\";\r\n})(BuildAuthorizationScope = exports.BuildAuthorizationScope || (exports.BuildAuthorizationScope = {}));\r\nvar BuildOptionInputType;\r\n(function (BuildOptionInputType) {\r\n    BuildOptionInputType[BuildOptionInputType[\"String\"] = 0] = \"String\";\r\n    BuildOptionInputType[BuildOptionInputType[\"Boolean\"] = 1] = \"Boolean\";\r\n    BuildOptionInputType[BuildOptionInputType[\"StringList\"] = 2] = \"StringList\";\r\n    BuildOptionInputType[BuildOptionInputType[\"Radio\"] = 3] = \"Radio\";\r\n    BuildOptionInputType[BuildOptionInputType[\"PickList\"] = 4] = \"PickList\";\r\n    BuildOptionInputType[BuildOptionInputType[\"MultiLine\"] = 5] = \"MultiLine\";\r\n    BuildOptionInputType[BuildOptionInputType[\"BranchFilter\"] = 6] = \"BranchFilter\";\r\n})(BuildOptionInputType = exports.BuildOptionInputType || (exports.BuildOptionInputType = {}));\r\nvar BuildPhaseStatus;\r\n(function (BuildPhaseStatus) {\r\n    /**\r\n     * The state is not known.\r\n     */\r\n    BuildPhaseStatus[BuildPhaseStatus[\"Unknown\"] = 0] = \"Unknown\";\r\n    /**\r\n     * The build phase completed unsuccessfully.\r\n     */\r\n    BuildPhaseStatus[BuildPhaseStatus[\"Failed\"] = 1] = \"Failed\";\r\n    /**\r\n     * The build phase completed successfully.\r\n     */\r\n    BuildPhaseStatus[BuildPhaseStatus[\"Succeeded\"] = 2] = \"Succeeded\";\r\n})(BuildPhaseStatus = exports.BuildPhaseStatus || (exports.BuildPhaseStatus = {}));\r\n/**\r\n * Specifies the desired ordering of builds.\r\n */\r\nvar BuildQueryOrder;\r\n(function (BuildQueryOrder) {\r\n    /**\r\n     * Order by finish time ascending.\r\n     */\r\n    BuildQueryOrder[BuildQueryOrder[\"FinishTimeAscending\"] = 2] = \"FinishTimeAscending\";\r\n    /**\r\n     * Order by finish time descending.\r\n     */\r\n    BuildQueryOrder[BuildQueryOrder[\"FinishTimeDescending\"] = 3] = \"FinishTimeDescending\";\r\n    /**\r\n     * Order by queue time descending.\r\n     */\r\n    BuildQueryOrder[BuildQueryOrder[\"QueueTimeDescending\"] = 4] = \"QueueTimeDescending\";\r\n    /**\r\n     * Order by queue time ascending.\r\n     */\r\n    BuildQueryOrder[BuildQueryOrder[\"QueueTimeAscending\"] = 5] = \"QueueTimeAscending\";\r\n    /**\r\n     * Order by start time descending.\r\n     */\r\n    BuildQueryOrder[BuildQueryOrder[\"StartTimeDescending\"] = 6] = \"StartTimeDescending\";\r\n    /**\r\n     * Order by start time ascending.\r\n     */\r\n    BuildQueryOrder[BuildQueryOrder[\"StartTimeAscending\"] = 7] = \"StartTimeAscending\";\r\n})(BuildQueryOrder = exports.BuildQueryOrder || (exports.BuildQueryOrder = {}));\r\nvar BuildReason;\r\n(function (BuildReason) {\r\n    /**\r\n     * No reason. This value should not be used.\r\n     */\r\n    BuildReason[BuildReason[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * The build was started manually.\r\n     */\r\n    BuildReason[BuildReason[\"Manual\"] = 1] = \"Manual\";\r\n    /**\r\n     * The build was started for the trigger TriggerType.ContinuousIntegration.\r\n     */\r\n    BuildReason[BuildReason[\"IndividualCI\"] = 2] = \"IndividualCI\";\r\n    /**\r\n     * The build was started for the trigger TriggerType.BatchedContinuousIntegration.\r\n     */\r\n    BuildReason[BuildReason[\"BatchedCI\"] = 4] = \"BatchedCI\";\r\n    /**\r\n     * The build was started for the trigger TriggerType.Schedule.\r\n     */\r\n    BuildReason[BuildReason[\"Schedule\"] = 8] = \"Schedule\";\r\n    /**\r\n     * The build was started for the trigger TriggerType.ScheduleForced.\r\n     */\r\n    BuildReason[BuildReason[\"ScheduleForced\"] = 16] = \"ScheduleForced\";\r\n    /**\r\n     * The build was created by a user.\r\n     */\r\n    BuildReason[BuildReason[\"UserCreated\"] = 32] = \"UserCreated\";\r\n    /**\r\n     * The build was started manually for private validation.\r\n     */\r\n    BuildReason[BuildReason[\"ValidateShelveset\"] = 64] = \"ValidateShelveset\";\r\n    /**\r\n     * The build was started for the trigger ContinuousIntegrationType.Gated.\r\n     */\r\n    BuildReason[BuildReason[\"CheckInShelveset\"] = 128] = \"CheckInShelveset\";\r\n    /**\r\n     * The build was started by a pull request. Added in resource version 3.\r\n     */\r\n    BuildReason[BuildReason[\"PullRequest\"] = 256] = \"PullRequest\";\r\n    /**\r\n     * The build was started when another build completed.\r\n     */\r\n    BuildReason[BuildReason[\"BuildCompletion\"] = 512] = \"BuildCompletion\";\r\n    /**\r\n     * The build was started when resources in pipeline triggered it\r\n     */\r\n    BuildReason[BuildReason[\"ResourceTrigger\"] = 1024] = \"ResourceTrigger\";\r\n    /**\r\n     * The build was triggered for retention policy purposes.\r\n     */\r\n    BuildReason[BuildReason[\"Triggered\"] = 1967] = \"Triggered\";\r\n    /**\r\n     * All reasons.\r\n     */\r\n    BuildReason[BuildReason[\"All\"] = 2031] = \"All\";\r\n})(BuildReason = exports.BuildReason || (exports.BuildReason = {}));\r\n/**\r\n * This is not a Flags enum because we don't want to set multiple statuses on a build. However, when adding values, please stick to powers of 2 as if it were a Flags enum This will ensure that things that key off multiple result types (like labelling sources) continue to work\r\n */\r\nvar BuildResult;\r\n(function (BuildResult) {\r\n    /**\r\n     * No result\r\n     */\r\n    BuildResult[BuildResult[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * The build completed successfully.\r\n     */\r\n    BuildResult[BuildResult[\"Succeeded\"] = 2] = \"Succeeded\";\r\n    /**\r\n     * The build completed compilation successfully but had other errors.\r\n     */\r\n    BuildResult[BuildResult[\"PartiallySucceeded\"] = 4] = \"PartiallySucceeded\";\r\n    /**\r\n     * The build completed unsuccessfully.\r\n     */\r\n    BuildResult[BuildResult[\"Failed\"] = 8] = \"Failed\";\r\n    /**\r\n     * The build was canceled before starting.\r\n     */\r\n    BuildResult[BuildResult[\"Canceled\"] = 32] = \"Canceled\";\r\n})(BuildResult = exports.BuildResult || (exports.BuildResult = {}));\r\nvar BuildStatus;\r\n(function (BuildStatus) {\r\n    /**\r\n     * No status.\r\n     */\r\n    BuildStatus[BuildStatus[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * The build is currently in progress.\r\n     */\r\n    BuildStatus[BuildStatus[\"InProgress\"] = 1] = \"InProgress\";\r\n    /**\r\n     * The build has completed.\r\n     */\r\n    BuildStatus[BuildStatus[\"Completed\"] = 2] = \"Completed\";\r\n    /**\r\n     * The build is cancelling\r\n     */\r\n    BuildStatus[BuildStatus[\"Cancelling\"] = 4] = \"Cancelling\";\r\n    /**\r\n     * The build is inactive in the queue.\r\n     */\r\n    BuildStatus[BuildStatus[\"Postponed\"] = 8] = \"Postponed\";\r\n    /**\r\n     * The build has not yet started.\r\n     */\r\n    BuildStatus[BuildStatus[\"NotStarted\"] = 32] = \"NotStarted\";\r\n    /**\r\n     * All status.\r\n     */\r\n    BuildStatus[BuildStatus[\"All\"] = 47] = \"All\";\r\n})(BuildStatus = exports.BuildStatus || (exports.BuildStatus = {}));\r\nvar ControllerStatus;\r\n(function (ControllerStatus) {\r\n    /**\r\n     * Indicates that the build controller cannot be contacted.\r\n     */\r\n    ControllerStatus[ControllerStatus[\"Unavailable\"] = 0] = \"Unavailable\";\r\n    /**\r\n     * Indicates that the build controller is currently available.\r\n     */\r\n    ControllerStatus[ControllerStatus[\"Available\"] = 1] = \"Available\";\r\n    /**\r\n     * Indicates that the build controller has taken itself offline.\r\n     */\r\n    ControllerStatus[ControllerStatus[\"Offline\"] = 2] = \"Offline\";\r\n})(ControllerStatus = exports.ControllerStatus || (exports.ControllerStatus = {}));\r\nvar DefinitionQuality;\r\n(function (DefinitionQuality) {\r\n    DefinitionQuality[DefinitionQuality[\"Definition\"] = 1] = \"Definition\";\r\n    DefinitionQuality[DefinitionQuality[\"Draft\"] = 2] = \"Draft\";\r\n})(DefinitionQuality = exports.DefinitionQuality || (exports.DefinitionQuality = {}));\r\n/**\r\n * Specifies the desired ordering of definitions.\r\n */\r\nvar DefinitionQueryOrder;\r\n(function (DefinitionQueryOrder) {\r\n    /**\r\n     * No order\r\n     */\r\n    DefinitionQueryOrder[DefinitionQueryOrder[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Order by created on/last modified time ascending.\r\n     */\r\n    DefinitionQueryOrder[DefinitionQueryOrder[\"LastModifiedAscending\"] = 1] = \"LastModifiedAscending\";\r\n    /**\r\n     * Order by created on/last modified time descending.\r\n     */\r\n    DefinitionQueryOrder[DefinitionQueryOrder[\"LastModifiedDescending\"] = 2] = \"LastModifiedDescending\";\r\n    /**\r\n     * Order by definition name ascending.\r\n     */\r\n    DefinitionQueryOrder[DefinitionQueryOrder[\"DefinitionNameAscending\"] = 3] = \"DefinitionNameAscending\";\r\n    /**\r\n     * Order by definition name descending.\r\n     */\r\n    DefinitionQueryOrder[DefinitionQueryOrder[\"DefinitionNameDescending\"] = 4] = \"DefinitionNameDescending\";\r\n})(DefinitionQueryOrder = exports.DefinitionQueryOrder || (exports.DefinitionQueryOrder = {}));\r\nvar DefinitionQueueStatus;\r\n(function (DefinitionQueueStatus) {\r\n    /**\r\n     * When enabled the definition queue allows builds to be queued by users, the system will queue scheduled, gated and continuous integration builds, and the queued builds will be started by the system.\r\n     */\r\n    DefinitionQueueStatus[DefinitionQueueStatus[\"Enabled\"] = 0] = \"Enabled\";\r\n    /**\r\n     * When paused the definition queue allows builds to be queued by users and the system will queue scheduled, gated and continuous integration builds. Builds in the queue will not be started by the system.\r\n     */\r\n    DefinitionQueueStatus[DefinitionQueueStatus[\"Paused\"] = 1] = \"Paused\";\r\n    /**\r\n     * When disabled the definition queue will not allow builds to be queued by users and the system will not queue scheduled, gated or continuous integration builds. Builds already in the queue will not be started by the system.\r\n     */\r\n    DefinitionQueueStatus[DefinitionQueueStatus[\"Disabled\"] = 2] = \"Disabled\";\r\n})(DefinitionQueueStatus = exports.DefinitionQueueStatus || (exports.DefinitionQueueStatus = {}));\r\nvar DefinitionTriggerType;\r\n(function (DefinitionTriggerType) {\r\n    /**\r\n     * Manual builds only.\r\n     */\r\n    DefinitionTriggerType[DefinitionTriggerType[\"None\"] = 1] = \"None\";\r\n    /**\r\n     * A build should be started for each changeset.\r\n     */\r\n    DefinitionTriggerType[DefinitionTriggerType[\"ContinuousIntegration\"] = 2] = \"ContinuousIntegration\";\r\n    /**\r\n     * A build should be started for multiple changesets at a time at a specified interval.\r\n     */\r\n    DefinitionTriggerType[DefinitionTriggerType[\"BatchedContinuousIntegration\"] = 4] = \"BatchedContinuousIntegration\";\r\n    /**\r\n     * A build should be started on a specified schedule whether or not changesets exist.\r\n     */\r\n    DefinitionTriggerType[DefinitionTriggerType[\"Schedule\"] = 8] = \"Schedule\";\r\n    /**\r\n     * A validation build should be started for each check-in.\r\n     */\r\n    DefinitionTriggerType[DefinitionTriggerType[\"GatedCheckIn\"] = 16] = \"GatedCheckIn\";\r\n    /**\r\n     * A validation build should be started for each batch of check-ins.\r\n     */\r\n    DefinitionTriggerType[DefinitionTriggerType[\"BatchedGatedCheckIn\"] = 32] = \"BatchedGatedCheckIn\";\r\n    /**\r\n     * A build should be triggered when a GitHub pull request is created or updated. Added in resource version 3\r\n     */\r\n    DefinitionTriggerType[DefinitionTriggerType[\"PullRequest\"] = 64] = \"PullRequest\";\r\n    /**\r\n     * A build should be triggered when another build completes.\r\n     */\r\n    DefinitionTriggerType[DefinitionTriggerType[\"BuildCompletion\"] = 128] = \"BuildCompletion\";\r\n    /**\r\n     * All types.\r\n     */\r\n    DefinitionTriggerType[DefinitionTriggerType[\"All\"] = 255] = \"All\";\r\n})(DefinitionTriggerType = exports.DefinitionTriggerType || (exports.DefinitionTriggerType = {}));\r\nvar DefinitionType;\r\n(function (DefinitionType) {\r\n    DefinitionType[DefinitionType[\"Xaml\"] = 1] = \"Xaml\";\r\n    DefinitionType[DefinitionType[\"Build\"] = 2] = \"Build\";\r\n})(DefinitionType = exports.DefinitionType || (exports.DefinitionType = {}));\r\nvar DeleteOptions;\r\n(function (DeleteOptions) {\r\n    /**\r\n     * No data should be deleted. This value should not be used.\r\n     */\r\n    DeleteOptions[DeleteOptions[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * The drop location should be deleted.\r\n     */\r\n    DeleteOptions[DeleteOptions[\"DropLocation\"] = 1] = \"DropLocation\";\r\n    /**\r\n     * The test results should be deleted.\r\n     */\r\n    DeleteOptions[DeleteOptions[\"TestResults\"] = 2] = \"TestResults\";\r\n    /**\r\n     * The version control label should be deleted.\r\n     */\r\n    DeleteOptions[DeleteOptions[\"Label\"] = 4] = \"Label\";\r\n    /**\r\n     * The build should be deleted.\r\n     */\r\n    DeleteOptions[DeleteOptions[\"Details\"] = 8] = \"Details\";\r\n    /**\r\n     * Published symbols should be deleted.\r\n     */\r\n    DeleteOptions[DeleteOptions[\"Symbols\"] = 16] = \"Symbols\";\r\n    /**\r\n     * All data should be deleted.\r\n     */\r\n    DeleteOptions[DeleteOptions[\"All\"] = 31] = \"All\";\r\n})(DeleteOptions = exports.DeleteOptions || (exports.DeleteOptions = {}));\r\n/**\r\n * Specifies the desired ordering of folders.\r\n */\r\nvar FolderQueryOrder;\r\n(function (FolderQueryOrder) {\r\n    /**\r\n     * No order\r\n     */\r\n    FolderQueryOrder[FolderQueryOrder[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Order by folder name and path ascending.\r\n     */\r\n    FolderQueryOrder[FolderQueryOrder[\"FolderAscending\"] = 1] = \"FolderAscending\";\r\n    /**\r\n     * Order by folder name and path descending.\r\n     */\r\n    FolderQueryOrder[FolderQueryOrder[\"FolderDescending\"] = 2] = \"FolderDescending\";\r\n})(FolderQueryOrder = exports.FolderQueryOrder || (exports.FolderQueryOrder = {}));\r\nvar GetOption;\r\n(function (GetOption) {\r\n    /**\r\n     * Use the latest changeset at the time the build is queued.\r\n     */\r\n    GetOption[GetOption[\"LatestOnQueue\"] = 0] = \"LatestOnQueue\";\r\n    /**\r\n     * Use the latest changeset at the time the build is started.\r\n     */\r\n    GetOption[GetOption[\"LatestOnBuild\"] = 1] = \"LatestOnBuild\";\r\n    /**\r\n     * A user-specified version has been supplied.\r\n     */\r\n    GetOption[GetOption[\"Custom\"] = 2] = \"Custom\";\r\n})(GetOption = exports.GetOption || (exports.GetOption = {}));\r\nvar IssueType;\r\n(function (IssueType) {\r\n    IssueType[IssueType[\"Error\"] = 1] = \"Error\";\r\n    IssueType[IssueType[\"Warning\"] = 2] = \"Warning\";\r\n})(IssueType = exports.IssueType || (exports.IssueType = {}));\r\nvar ProcessTemplateType;\r\n(function (ProcessTemplateType) {\r\n    /**\r\n     * Indicates a custom template.\r\n     */\r\n    ProcessTemplateType[ProcessTemplateType[\"Custom\"] = 0] = \"Custom\";\r\n    /**\r\n     * Indicates a default template.\r\n     */\r\n    ProcessTemplateType[ProcessTemplateType[\"Default\"] = 1] = \"Default\";\r\n    /**\r\n     * Indicates an upgrade template.\r\n     */\r\n    ProcessTemplateType[ProcessTemplateType[\"Upgrade\"] = 2] = \"Upgrade\";\r\n})(ProcessTemplateType = exports.ProcessTemplateType || (exports.ProcessTemplateType = {}));\r\nvar QueryDeletedOption;\r\n(function (QueryDeletedOption) {\r\n    /**\r\n     * Include only non-deleted builds.\r\n     */\r\n    QueryDeletedOption[QueryDeletedOption[\"ExcludeDeleted\"] = 0] = \"ExcludeDeleted\";\r\n    /**\r\n     * Include deleted and non-deleted builds.\r\n     */\r\n    QueryDeletedOption[QueryDeletedOption[\"IncludeDeleted\"] = 1] = \"IncludeDeleted\";\r\n    /**\r\n     * Include only deleted builds.\r\n     */\r\n    QueryDeletedOption[QueryDeletedOption[\"OnlyDeleted\"] = 2] = \"OnlyDeleted\";\r\n})(QueryDeletedOption = exports.QueryDeletedOption || (exports.QueryDeletedOption = {}));\r\nvar QueueOptions;\r\n(function (QueueOptions) {\r\n    /**\r\n     * No queue options\r\n     */\r\n    QueueOptions[QueueOptions[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Create a plan Id for the build, do not run it\r\n     */\r\n    QueueOptions[QueueOptions[\"DoNotRun\"] = 1] = \"DoNotRun\";\r\n})(QueueOptions = exports.QueueOptions || (exports.QueueOptions = {}));\r\nvar QueuePriority;\r\n(function (QueuePriority) {\r\n    /**\r\n     * Low priority.\r\n     */\r\n    QueuePriority[QueuePriority[\"Low\"] = 5] = \"Low\";\r\n    /**\r\n     * Below normal priority.\r\n     */\r\n    QueuePriority[QueuePriority[\"BelowNormal\"] = 4] = \"BelowNormal\";\r\n    /**\r\n     * Normal priority.\r\n     */\r\n    QueuePriority[QueuePriority[\"Normal\"] = 3] = \"Normal\";\r\n    /**\r\n     * Above normal priority.\r\n     */\r\n    QueuePriority[QueuePriority[\"AboveNormal\"] = 2] = \"AboveNormal\";\r\n    /**\r\n     * High priority.\r\n     */\r\n    QueuePriority[QueuePriority[\"High\"] = 1] = \"High\";\r\n})(QueuePriority = exports.QueuePriority || (exports.QueuePriority = {}));\r\nvar RepositoryCleanOptions;\r\n(function (RepositoryCleanOptions) {\r\n    /**\r\n     * Run git clean -fdx && git reset --hard or Tf /scorch on $(build.sourcesDirectory)\r\n     */\r\n    RepositoryCleanOptions[RepositoryCleanOptions[\"Source\"] = 0] = \"Source\";\r\n    /**\r\n     * Run git clean -fdx && git reset --hard or Tf /scorch on $(build.sourcesDirectory), also re-create $(build.binariesDirectory)\r\n     */\r\n    RepositoryCleanOptions[RepositoryCleanOptions[\"SourceAndOutputDir\"] = 1] = \"SourceAndOutputDir\";\r\n    /**\r\n     * Re-create $(build.sourcesDirectory)\r\n     */\r\n    RepositoryCleanOptions[RepositoryCleanOptions[\"SourceDir\"] = 2] = \"SourceDir\";\r\n    /**\r\n     * Re-create $(agnet.buildDirectory) which contains $(build.sourcesDirectory), $(build.binariesDirectory) and any folders that left from previous build.\r\n     */\r\n    RepositoryCleanOptions[RepositoryCleanOptions[\"AllBuildDir\"] = 3] = \"AllBuildDir\";\r\n})(RepositoryCleanOptions = exports.RepositoryCleanOptions || (exports.RepositoryCleanOptions = {}));\r\nvar ResultSet;\r\n(function (ResultSet) {\r\n    /**\r\n     * Include all repositories\r\n     */\r\n    ResultSet[ResultSet[\"All\"] = 0] = \"All\";\r\n    /**\r\n     * Include most relevant repositories for user\r\n     */\r\n    ResultSet[ResultSet[\"Top\"] = 1] = \"Top\";\r\n})(ResultSet = exports.ResultSet || (exports.ResultSet = {}));\r\nvar ScheduleDays;\r\n(function (ScheduleDays) {\r\n    /**\r\n     * Do not run.\r\n     */\r\n    ScheduleDays[ScheduleDays[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Run on Monday.\r\n     */\r\n    ScheduleDays[ScheduleDays[\"Monday\"] = 1] = \"Monday\";\r\n    /**\r\n     * Run on Tuesday.\r\n     */\r\n    ScheduleDays[ScheduleDays[\"Tuesday\"] = 2] = \"Tuesday\";\r\n    /**\r\n     * Run on Wednesday.\r\n     */\r\n    ScheduleDays[ScheduleDays[\"Wednesday\"] = 4] = \"Wednesday\";\r\n    /**\r\n     * Run on Thursday.\r\n     */\r\n    ScheduleDays[ScheduleDays[\"Thursday\"] = 8] = \"Thursday\";\r\n    /**\r\n     * Run on Friday.\r\n     */\r\n    ScheduleDays[ScheduleDays[\"Friday\"] = 16] = \"Friday\";\r\n    /**\r\n     * Run on Saturday.\r\n     */\r\n    ScheduleDays[ScheduleDays[\"Saturday\"] = 32] = \"Saturday\";\r\n    /**\r\n     * Run on Sunday.\r\n     */\r\n    ScheduleDays[ScheduleDays[\"Sunday\"] = 64] = \"Sunday\";\r\n    /**\r\n     * Run on all days of the week.\r\n     */\r\n    ScheduleDays[ScheduleDays[\"All\"] = 127] = \"All\";\r\n})(ScheduleDays = exports.ScheduleDays || (exports.ScheduleDays = {}));\r\nvar ServiceHostStatus;\r\n(function (ServiceHostStatus) {\r\n    /**\r\n     * The service host is currently connected and accepting commands.\r\n     */\r\n    ServiceHostStatus[ServiceHostStatus[\"Online\"] = 1] = \"Online\";\r\n    /**\r\n     * The service host is currently disconnected and not accepting commands.\r\n     */\r\n    ServiceHostStatus[ServiceHostStatus[\"Offline\"] = 2] = \"Offline\";\r\n})(ServiceHostStatus = exports.ServiceHostStatus || (exports.ServiceHostStatus = {}));\r\nvar SourceProviderAvailability;\r\n(function (SourceProviderAvailability) {\r\n    /**\r\n     * The source provider is available in the hosted environment.\r\n     */\r\n    SourceProviderAvailability[SourceProviderAvailability[\"Hosted\"] = 1] = \"Hosted\";\r\n    /**\r\n     * The source provider is available in the on-premises environment.\r\n     */\r\n    SourceProviderAvailability[SourceProviderAvailability[\"OnPremises\"] = 2] = \"OnPremises\";\r\n    /**\r\n     * The source provider is available in all environments.\r\n     */\r\n    SourceProviderAvailability[SourceProviderAvailability[\"All\"] = 3] = \"All\";\r\n})(SourceProviderAvailability = exports.SourceProviderAvailability || (exports.SourceProviderAvailability = {}));\r\nvar StageUpdateType;\r\n(function (StageUpdateType) {\r\n    StageUpdateType[StageUpdateType[\"Cancel\"] = 0] = \"Cancel\";\r\n    StageUpdateType[StageUpdateType[\"Retry\"] = 1] = \"Retry\";\r\n})(StageUpdateType = exports.StageUpdateType || (exports.StageUpdateType = {}));\r\nvar SupportLevel;\r\n(function (SupportLevel) {\r\n    /**\r\n     * The functionality is not supported.\r\n     */\r\n    SupportLevel[SupportLevel[\"Unsupported\"] = 0] = \"Unsupported\";\r\n    /**\r\n     * The functionality is supported.\r\n     */\r\n    SupportLevel[SupportLevel[\"Supported\"] = 1] = \"Supported\";\r\n    /**\r\n     * The functionality is required.\r\n     */\r\n    SupportLevel[SupportLevel[\"Required\"] = 2] = \"Required\";\r\n})(SupportLevel = exports.SupportLevel || (exports.SupportLevel = {}));\r\nvar TaskResult;\r\n(function (TaskResult) {\r\n    TaskResult[TaskResult[\"Succeeded\"] = 0] = \"Succeeded\";\r\n    TaskResult[TaskResult[\"SucceededWithIssues\"] = 1] = \"SucceededWithIssues\";\r\n    TaskResult[TaskResult[\"Failed\"] = 2] = \"Failed\";\r\n    TaskResult[TaskResult[\"Canceled\"] = 3] = \"Canceled\";\r\n    TaskResult[TaskResult[\"Skipped\"] = 4] = \"Skipped\";\r\n    TaskResult[TaskResult[\"Abandoned\"] = 5] = \"Abandoned\";\r\n})(TaskResult = exports.TaskResult || (exports.TaskResult = {}));\r\nvar TimelineRecordState;\r\n(function (TimelineRecordState) {\r\n    TimelineRecordState[TimelineRecordState[\"Pending\"] = 0] = \"Pending\";\r\n    TimelineRecordState[TimelineRecordState[\"InProgress\"] = 1] = \"InProgress\";\r\n    TimelineRecordState[TimelineRecordState[\"Completed\"] = 2] = \"Completed\";\r\n})(TimelineRecordState = exports.TimelineRecordState || (exports.TimelineRecordState = {}));\r\nvar ValidationResult;\r\n(function (ValidationResult) {\r\n    ValidationResult[ValidationResult[\"OK\"] = 0] = \"OK\";\r\n    ValidationResult[ValidationResult[\"Warning\"] = 1] = \"Warning\";\r\n    ValidationResult[ValidationResult[\"Error\"] = 2] = \"Error\";\r\n})(ValidationResult = exports.ValidationResult || (exports.ValidationResult = {}));\r\nvar WorkspaceMappingType;\r\n(function (WorkspaceMappingType) {\r\n    /**\r\n     * The path is mapped in the workspace.\r\n     */\r\n    WorkspaceMappingType[WorkspaceMappingType[\"Map\"] = 0] = \"Map\";\r\n    /**\r\n     * The path is cloaked in the workspace.\r\n     */\r\n    WorkspaceMappingType[WorkspaceMappingType[\"Cloak\"] = 1] = \"Cloak\";\r\n})(WorkspaceMappingType = exports.WorkspaceMappingType || (exports.WorkspaceMappingType = {}));\r\nexports.TypeInfo = {\r\n    AgentStatus: {\r\n        enumValues: {\r\n            \"unavailable\": 0,\r\n            \"available\": 1,\r\n            \"offline\": 2\r\n        }\r\n    },\r\n    AuditAction: {\r\n        enumValues: {\r\n            \"add\": 1,\r\n            \"update\": 2,\r\n            \"delete\": 3\r\n        }\r\n    },\r\n    Build: {},\r\n    BuildAgent: {},\r\n    BuildAuthorizationScope: {\r\n        enumValues: {\r\n            \"projectCollection\": 1,\r\n            \"project\": 2\r\n        }\r\n    },\r\n    BuildCompletedEvent: {},\r\n    BuildCompletionTrigger: {},\r\n    BuildController: {},\r\n    BuildDefinition: {},\r\n    BuildDefinition3_2: {},\r\n    BuildDefinitionReference: {},\r\n    BuildDefinitionReference3_2: {},\r\n    BuildDefinitionRevision: {},\r\n    BuildDefinitionSourceProvider: {},\r\n    BuildDefinitionTemplate: {},\r\n    BuildDefinitionTemplate3_2: {},\r\n    BuildDeletedEvent: {},\r\n    BuildDeployment: {},\r\n    BuildLog: {},\r\n    BuildMetric: {},\r\n    BuildOptionDefinition: {},\r\n    BuildOptionInputDefinition: {},\r\n    BuildOptionInputType: {\r\n        enumValues: {\r\n            \"string\": 0,\r\n            \"boolean\": 1,\r\n            \"stringList\": 2,\r\n            \"radio\": 3,\r\n            \"pickList\": 4,\r\n            \"multiLine\": 5,\r\n            \"branchFilter\": 6\r\n        }\r\n    },\r\n    BuildPhaseStatus: {\r\n        enumValues: {\r\n            \"unknown\": 0,\r\n            \"failed\": 1,\r\n            \"succeeded\": 2\r\n        }\r\n    },\r\n    BuildProcessTemplate: {},\r\n    BuildQueryOrder: {\r\n        enumValues: {\r\n            \"finishTimeAscending\": 2,\r\n            \"finishTimeDescending\": 3,\r\n            \"queueTimeDescending\": 4,\r\n            \"queueTimeAscending\": 5,\r\n            \"startTimeDescending\": 6,\r\n            \"startTimeAscending\": 7\r\n        }\r\n    },\r\n    BuildQueuedEvent: {},\r\n    BuildReason: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"manual\": 1,\r\n            \"individualCI\": 2,\r\n            \"batchedCI\": 4,\r\n            \"schedule\": 8,\r\n            \"scheduleForced\": 16,\r\n            \"userCreated\": 32,\r\n            \"validateShelveset\": 64,\r\n            \"checkInShelveset\": 128,\r\n            \"pullRequest\": 256,\r\n            \"buildCompletion\": 512,\r\n            \"resourceTrigger\": 1024,\r\n            \"triggered\": 1967,\r\n            \"all\": 2031\r\n        }\r\n    },\r\n    BuildReference: {},\r\n    BuildRequestValidationResult: {},\r\n    BuildResult: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"succeeded\": 2,\r\n            \"partiallySucceeded\": 4,\r\n            \"failed\": 8,\r\n            \"canceled\": 32\r\n        }\r\n    },\r\n    BuildRetentionHistory: {},\r\n    BuildRetentionSample: {},\r\n    BuildServer: {},\r\n    BuildStatus: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"inProgress\": 1,\r\n            \"completed\": 2,\r\n            \"cancelling\": 4,\r\n            \"postponed\": 8,\r\n            \"notStarted\": 32,\r\n            \"all\": 47\r\n        }\r\n    },\r\n    BuildSummary: {},\r\n    BuildTagsAddedEvent: {},\r\n    BuildTrigger: {},\r\n    BuildUpdatedEvent: {},\r\n    Change: {},\r\n    ContinuousDeploymentDefinition: {},\r\n    ContinuousIntegrationTrigger: {},\r\n    ControllerStatus: {\r\n        enumValues: {\r\n            \"unavailable\": 0,\r\n            \"available\": 1,\r\n            \"offline\": 2\r\n        }\r\n    },\r\n    DefinitionQuality: {\r\n        enumValues: {\r\n            \"definition\": 1,\r\n            \"draft\": 2\r\n        }\r\n    },\r\n    DefinitionQueryOrder: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"lastModifiedAscending\": 1,\r\n            \"lastModifiedDescending\": 2,\r\n            \"definitionNameAscending\": 3,\r\n            \"definitionNameDescending\": 4\r\n        }\r\n    },\r\n    DefinitionQueueStatus: {\r\n        enumValues: {\r\n            \"enabled\": 0,\r\n            \"paused\": 1,\r\n            \"disabled\": 2\r\n        }\r\n    },\r\n    DefinitionReference: {},\r\n    DefinitionTriggerType: {\r\n        enumValues: {\r\n            \"none\": 1,\r\n            \"continuousIntegration\": 2,\r\n            \"batchedContinuousIntegration\": 4,\r\n            \"schedule\": 8,\r\n            \"gatedCheckIn\": 16,\r\n            \"batchedGatedCheckIn\": 32,\r\n            \"pullRequest\": 64,\r\n            \"buildCompletion\": 128,\r\n            \"all\": 255\r\n        }\r\n    },\r\n    DefinitionType: {\r\n        enumValues: {\r\n            \"xaml\": 1,\r\n            \"build\": 2\r\n        }\r\n    },\r\n    DeleteOptions: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"dropLocation\": 1,\r\n            \"testResults\": 2,\r\n            \"label\": 4,\r\n            \"details\": 8,\r\n            \"symbols\": 16,\r\n            \"all\": 31\r\n        }\r\n    },\r\n    DesignerProcess: {},\r\n    Folder: {},\r\n    FolderQueryOrder: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"folderAscending\": 1,\r\n            \"folderDescending\": 2\r\n        }\r\n    },\r\n    GatedCheckInTrigger: {},\r\n    GetOption: {\r\n        enumValues: {\r\n            \"latestOnQueue\": 0,\r\n            \"latestOnBuild\": 1,\r\n            \"custom\": 2\r\n        }\r\n    },\r\n    InformationNode: {},\r\n    Issue: {},\r\n    IssueType: {\r\n        enumValues: {\r\n            \"error\": 1,\r\n            \"warning\": 2\r\n        }\r\n    },\r\n    Phase: {},\r\n    ProcessTemplateType: {\r\n        enumValues: {\r\n            \"custom\": 0,\r\n            \"default\": 1,\r\n            \"upgrade\": 2\r\n        }\r\n    },\r\n    PullRequestTrigger: {},\r\n    QueryDeletedOption: {\r\n        enumValues: {\r\n            \"excludeDeleted\": 0,\r\n            \"includeDeleted\": 1,\r\n            \"onlyDeleted\": 2\r\n        }\r\n    },\r\n    QueueOptions: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"doNotRun\": 1\r\n        }\r\n    },\r\n    QueuePriority: {\r\n        enumValues: {\r\n            \"low\": 5,\r\n            \"belowNormal\": 4,\r\n            \"normal\": 3,\r\n            \"aboveNormal\": 2,\r\n            \"high\": 1\r\n        }\r\n    },\r\n    RepositoryCleanOptions: {\r\n        enumValues: {\r\n            \"source\": 0,\r\n            \"sourceAndOutputDir\": 1,\r\n            \"sourceDir\": 2,\r\n            \"allBuildDir\": 3\r\n        }\r\n    },\r\n    RepositoryWebhook: {},\r\n    ResultSet: {\r\n        enumValues: {\r\n            \"all\": 0,\r\n            \"top\": 1\r\n        }\r\n    },\r\n    RetentionLease: {},\r\n    Schedule: {},\r\n    ScheduleDays: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"monday\": 1,\r\n            \"tuesday\": 2,\r\n            \"wednesday\": 4,\r\n            \"thursday\": 8,\r\n            \"friday\": 16,\r\n            \"saturday\": 32,\r\n            \"sunday\": 64,\r\n            \"all\": 127\r\n        }\r\n    },\r\n    ScheduleTrigger: {},\r\n    ServiceHostStatus: {\r\n        enumValues: {\r\n            \"online\": 1,\r\n            \"offline\": 2\r\n        }\r\n    },\r\n    SourceProviderAttributes: {},\r\n    SourceProviderAvailability: {\r\n        enumValues: {\r\n            \"hosted\": 1,\r\n            \"onPremises\": 2,\r\n            \"all\": 3\r\n        }\r\n    },\r\n    StageUpdateType: {\r\n        enumValues: {\r\n            \"cancel\": 0,\r\n            \"retry\": 1\r\n        }\r\n    },\r\n    SupportedTrigger: {},\r\n    SupportLevel: {\r\n        enumValues: {\r\n            \"unsupported\": 0,\r\n            \"supported\": 1,\r\n            \"required\": 2\r\n        }\r\n    },\r\n    TaskResult: {\r\n        enumValues: {\r\n            \"succeeded\": 0,\r\n            \"succeededWithIssues\": 1,\r\n            \"failed\": 2,\r\n            \"canceled\": 3,\r\n            \"skipped\": 4,\r\n            \"abandoned\": 5\r\n        }\r\n    },\r\n    Timeline: {},\r\n    TimelineRecord: {},\r\n    TimelineRecordState: {\r\n        enumValues: {\r\n            \"pending\": 0,\r\n            \"inProgress\": 1,\r\n            \"completed\": 2\r\n        }\r\n    },\r\n    TimelineRecordsUpdatedEvent: {},\r\n    UpdateStageParameters: {},\r\n    ValidationResult: {\r\n        enumValues: {\r\n            \"ok\": 0,\r\n            \"warning\": 1,\r\n            \"error\": 2\r\n        }\r\n    },\r\n    WorkspaceMapping: {},\r\n    WorkspaceMappingType: {\r\n        enumValues: {\r\n            \"map\": 0,\r\n            \"cloak\": 1\r\n        }\r\n    },\r\n    WorkspaceTemplate: {},\r\n    XamlBuildDefinition: {},\r\n};\r\nexports.TypeInfo.Build.fields = {\r\n    controller: {\r\n        typeInfo: exports.TypeInfo.BuildController\r\n    },\r\n    definition: {\r\n        typeInfo: exports.TypeInfo.DefinitionReference\r\n    },\r\n    deletedDate: {\r\n        isDate: true,\r\n    },\r\n    finishTime: {\r\n        isDate: true,\r\n    },\r\n    lastChangedDate: {\r\n        isDate: true,\r\n    },\r\n    priority: {\r\n        enumType: exports.TypeInfo.QueuePriority\r\n    },\r\n    project: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    },\r\n    queueOptions: {\r\n        enumType: exports.TypeInfo.QueueOptions\r\n    },\r\n    queueTime: {\r\n        isDate: true,\r\n    },\r\n    reason: {\r\n        enumType: exports.TypeInfo.BuildReason\r\n    },\r\n    result: {\r\n        enumType: exports.TypeInfo.BuildResult\r\n    },\r\n    startTime: {\r\n        isDate: true,\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.BuildStatus\r\n    },\r\n    triggeredByBuild: {\r\n        typeInfo: exports.TypeInfo.Build\r\n    },\r\n    validationResults: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.BuildRequestValidationResult\r\n    }\r\n};\r\nexports.TypeInfo.BuildAgent.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.AgentStatus\r\n    },\r\n    updatedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.BuildCompletedEvent.fields = {\r\n    build: {\r\n        typeInfo: exports.TypeInfo.Build\r\n    },\r\n    changes: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.Change\r\n    },\r\n    testResults: {\r\n        typeInfo: TFS_TestManagement_Contracts.TypeInfo.AggregatedResultsAnalysis\r\n    },\r\n    timelineRecords: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TimelineRecord\r\n    }\r\n};\r\nexports.TypeInfo.BuildCompletionTrigger.fields = {\r\n    definition: {\r\n        typeInfo: exports.TypeInfo.DefinitionReference\r\n    },\r\n    triggerType: {\r\n        enumType: exports.TypeInfo.DefinitionTriggerType\r\n    }\r\n};\r\nexports.TypeInfo.BuildController.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.ControllerStatus\r\n    },\r\n    updatedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.BuildDefinition.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    },\r\n    draftOf: {\r\n        typeInfo: exports.TypeInfo.DefinitionReference\r\n    },\r\n    drafts: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.DefinitionReference\r\n    },\r\n    jobAuthorizationScope: {\r\n        enumType: exports.TypeInfo.BuildAuthorizationScope\r\n    },\r\n    latestBuild: {\r\n        typeInfo: exports.TypeInfo.Build\r\n    },\r\n    latestCompletedBuild: {\r\n        typeInfo: exports.TypeInfo.Build\r\n    },\r\n    metrics: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.BuildMetric\r\n    },\r\n    project: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    },\r\n    quality: {\r\n        enumType: exports.TypeInfo.DefinitionQuality\r\n    },\r\n    queueStatus: {\r\n        enumType: exports.TypeInfo.DefinitionQueueStatus\r\n    },\r\n    triggers: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.BuildTrigger\r\n    },\r\n    type: {\r\n        enumType: exports.TypeInfo.DefinitionType\r\n    }\r\n};\r\nexports.TypeInfo.BuildDefinition3_2.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    },\r\n    draftOf: {\r\n        typeInfo: exports.TypeInfo.DefinitionReference\r\n    },\r\n    drafts: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.DefinitionReference\r\n    },\r\n    jobAuthorizationScope: {\r\n        enumType: exports.TypeInfo.BuildAuthorizationScope\r\n    },\r\n    latestBuild: {\r\n        typeInfo: exports.TypeInfo.Build\r\n    },\r\n    latestCompletedBuild: {\r\n        typeInfo: exports.TypeInfo.Build\r\n    },\r\n    metrics: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.BuildMetric\r\n    },\r\n    project: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    },\r\n    quality: {\r\n        enumType: exports.TypeInfo.DefinitionQuality\r\n    },\r\n    queueStatus: {\r\n        enumType: exports.TypeInfo.DefinitionQueueStatus\r\n    },\r\n    triggers: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.BuildTrigger\r\n    },\r\n    type: {\r\n        enumType: exports.TypeInfo.DefinitionType\r\n    }\r\n};\r\nexports.TypeInfo.BuildDefinitionReference.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    },\r\n    draftOf: {\r\n        typeInfo: exports.TypeInfo.DefinitionReference\r\n    },\r\n    drafts: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.DefinitionReference\r\n    },\r\n    latestBuild: {\r\n        typeInfo: exports.TypeInfo.Build\r\n    },\r\n    latestCompletedBuild: {\r\n        typeInfo: exports.TypeInfo.Build\r\n    },\r\n    metrics: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.BuildMetric\r\n    },\r\n    project: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    },\r\n    quality: {\r\n        enumType: exports.TypeInfo.DefinitionQuality\r\n    },\r\n    queueStatus: {\r\n        enumType: exports.TypeInfo.DefinitionQueueStatus\r\n    },\r\n    type: {\r\n        enumType: exports.TypeInfo.DefinitionType\r\n    }\r\n};\r\nexports.TypeInfo.BuildDefinitionReference3_2.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    },\r\n    draftOf: {\r\n        typeInfo: exports.TypeInfo.DefinitionReference\r\n    },\r\n    drafts: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.DefinitionReference\r\n    },\r\n    metrics: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.BuildMetric\r\n    },\r\n    project: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    },\r\n    quality: {\r\n        enumType: exports.TypeInfo.DefinitionQuality\r\n    },\r\n    queueStatus: {\r\n        enumType: exports.TypeInfo.DefinitionQueueStatus\r\n    },\r\n    type: {\r\n        enumType: exports.TypeInfo.DefinitionType\r\n    }\r\n};\r\nexports.TypeInfo.BuildDefinitionRevision.fields = {\r\n    changedDate: {\r\n        isDate: true,\r\n    },\r\n    changeType: {\r\n        enumType: exports.TypeInfo.AuditAction\r\n    }\r\n};\r\nexports.TypeInfo.BuildDefinitionSourceProvider.fields = {\r\n    lastModified: {\r\n        isDate: true,\r\n    },\r\n    supportedTriggerTypes: {\r\n        enumType: exports.TypeInfo.DefinitionTriggerType\r\n    }\r\n};\r\nexports.TypeInfo.BuildDefinitionTemplate.fields = {\r\n    template: {\r\n        typeInfo: exports.TypeInfo.BuildDefinition\r\n    }\r\n};\r\nexports.TypeInfo.BuildDefinitionTemplate3_2.fields = {\r\n    template: {\r\n        typeInfo: exports.TypeInfo.BuildDefinition3_2\r\n    }\r\n};\r\nexports.TypeInfo.BuildDeletedEvent.fields = {\r\n    build: {\r\n        typeInfo: exports.TypeInfo.Build\r\n    }\r\n};\r\nexports.TypeInfo.BuildDeployment.fields = {\r\n    deployment: {\r\n        typeInfo: exports.TypeInfo.BuildSummary\r\n    }\r\n};\r\nexports.TypeInfo.BuildLog.fields = {\r\n    createdOn: {\r\n        isDate: true,\r\n    },\r\n    lastChangedOn: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.BuildMetric.fields = {\r\n    date: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.BuildOptionDefinition.fields = {\r\n    inputs: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.BuildOptionInputDefinition\r\n    }\r\n};\r\nexports.TypeInfo.BuildOptionInputDefinition.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.BuildOptionInputType\r\n    }\r\n};\r\nexports.TypeInfo.BuildProcessTemplate.fields = {\r\n    supportedReasons: {\r\n        enumType: exports.TypeInfo.BuildReason\r\n    },\r\n    templateType: {\r\n        enumType: exports.TypeInfo.ProcessTemplateType\r\n    }\r\n};\r\nexports.TypeInfo.BuildQueuedEvent.fields = {\r\n    build: {\r\n        typeInfo: exports.TypeInfo.Build\r\n    }\r\n};\r\nexports.TypeInfo.BuildReference.fields = {\r\n    finishTime: {\r\n        isDate: true,\r\n    },\r\n    queueTime: {\r\n        isDate: true,\r\n    },\r\n    result: {\r\n        enumType: exports.TypeInfo.BuildResult\r\n    },\r\n    startTime: {\r\n        isDate: true,\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.BuildStatus\r\n    }\r\n};\r\nexports.TypeInfo.BuildRequestValidationResult.fields = {\r\n    result: {\r\n        enumType: exports.TypeInfo.ValidationResult\r\n    }\r\n};\r\nexports.TypeInfo.BuildRetentionHistory.fields = {\r\n    buildRetentionSamples: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.BuildRetentionSample\r\n    }\r\n};\r\nexports.TypeInfo.BuildRetentionSample.fields = {\r\n    sampleTime: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.BuildServer.fields = {\r\n    status: {\r\n        enumType: exports.TypeInfo.ServiceHostStatus\r\n    },\r\n    statusChangedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.BuildSummary.fields = {\r\n    finishTime: {\r\n        isDate: true,\r\n    },\r\n    reason: {\r\n        enumType: exports.TypeInfo.BuildReason\r\n    },\r\n    startTime: {\r\n        isDate: true,\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.BuildStatus\r\n    }\r\n};\r\nexports.TypeInfo.BuildTagsAddedEvent.fields = {\r\n    build: {\r\n        typeInfo: exports.TypeInfo.Build\r\n    }\r\n};\r\nexports.TypeInfo.BuildTrigger.fields = {\r\n    triggerType: {\r\n        enumType: exports.TypeInfo.DefinitionTriggerType\r\n    }\r\n};\r\nexports.TypeInfo.BuildUpdatedEvent.fields = {\r\n    build: {\r\n        typeInfo: exports.TypeInfo.Build\r\n    }\r\n};\r\nexports.TypeInfo.Change.fields = {\r\n    timestamp: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.ContinuousDeploymentDefinition.fields = {\r\n    project: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    }\r\n};\r\nexports.TypeInfo.ContinuousIntegrationTrigger.fields = {\r\n    triggerType: {\r\n        enumType: exports.TypeInfo.DefinitionTriggerType\r\n    }\r\n};\r\nexports.TypeInfo.DefinitionReference.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    },\r\n    project: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    },\r\n    queueStatus: {\r\n        enumType: exports.TypeInfo.DefinitionQueueStatus\r\n    },\r\n    type: {\r\n        enumType: exports.TypeInfo.DefinitionType\r\n    }\r\n};\r\nexports.TypeInfo.DesignerProcess.fields = {\r\n    phases: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.Phase\r\n    }\r\n};\r\nexports.TypeInfo.Folder.fields = {\r\n    createdOn: {\r\n        isDate: true,\r\n    },\r\n    lastChangedDate: {\r\n        isDate: true,\r\n    },\r\n    project: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    }\r\n};\r\nexports.TypeInfo.GatedCheckInTrigger.fields = {\r\n    triggerType: {\r\n        enumType: exports.TypeInfo.DefinitionTriggerType\r\n    }\r\n};\r\nexports.TypeInfo.InformationNode.fields = {\r\n    lastModifiedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.Issue.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.IssueType\r\n    }\r\n};\r\nexports.TypeInfo.Phase.fields = {\r\n    jobAuthorizationScope: {\r\n        enumType: exports.TypeInfo.BuildAuthorizationScope\r\n    }\r\n};\r\nexports.TypeInfo.PullRequestTrigger.fields = {\r\n    triggerType: {\r\n        enumType: exports.TypeInfo.DefinitionTriggerType\r\n    }\r\n};\r\nexports.TypeInfo.RepositoryWebhook.fields = {\r\n    types: {\r\n        isArray: true,\r\n        enumType: exports.TypeInfo.DefinitionTriggerType\r\n    }\r\n};\r\nexports.TypeInfo.RetentionLease.fields = {\r\n    createdOn: {\r\n        isDate: true,\r\n    },\r\n    validUntil: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.Schedule.fields = {\r\n    daysToBuild: {\r\n        enumType: exports.TypeInfo.ScheduleDays\r\n    }\r\n};\r\nexports.TypeInfo.ScheduleTrigger.fields = {\r\n    schedules: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.Schedule\r\n    },\r\n    triggerType: {\r\n        enumType: exports.TypeInfo.DefinitionTriggerType\r\n    }\r\n};\r\nexports.TypeInfo.SourceProviderAttributes.fields = {\r\n    supportedTriggers: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.SupportedTrigger\r\n    }\r\n};\r\nexports.TypeInfo.SupportedTrigger.fields = {\r\n    supportedCapabilities: {\r\n        isDictionary: true,\r\n        dictionaryValueEnumType: exports.TypeInfo.SupportLevel\r\n    },\r\n    type: {\r\n        enumType: exports.TypeInfo.DefinitionTriggerType\r\n    }\r\n};\r\nexports.TypeInfo.Timeline.fields = {\r\n    lastChangedOn: {\r\n        isDate: true,\r\n    },\r\n    records: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TimelineRecord\r\n    }\r\n};\r\nexports.TypeInfo.TimelineRecord.fields = {\r\n    finishTime: {\r\n        isDate: true,\r\n    },\r\n    issues: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.Issue\r\n    },\r\n    lastModified: {\r\n        isDate: true,\r\n    },\r\n    result: {\r\n        enumType: exports.TypeInfo.TaskResult\r\n    },\r\n    startTime: {\r\n        isDate: true,\r\n    },\r\n    state: {\r\n        enumType: exports.TypeInfo.TimelineRecordState\r\n    }\r\n};\r\nexports.TypeInfo.TimelineRecordsUpdatedEvent.fields = {\r\n    timelineRecords: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TimelineRecord\r\n    }\r\n};\r\nexports.TypeInfo.UpdateStageParameters.fields = {\r\n    state: {\r\n        enumType: exports.TypeInfo.StageUpdateType\r\n    }\r\n};\r\nexports.TypeInfo.WorkspaceMapping.fields = {\r\n    mappingType: {\r\n        enumType: exports.TypeInfo.WorkspaceMappingType\r\n    }\r\n};\r\nexports.TypeInfo.WorkspaceTemplate.fields = {\r\n    lastModifiedDate: {\r\n        isDate: true,\r\n    },\r\n    mappings: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.WorkspaceMapping\r\n    }\r\n};\r\nexports.TypeInfo.XamlBuildDefinition.fields = {\r\n    controller: {\r\n        typeInfo: exports.TypeInfo.BuildController\r\n    },\r\n    createdDate: {\r\n        isDate: true,\r\n    },\r\n    createdOn: {\r\n        isDate: true,\r\n    },\r\n    project: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    },\r\n    queueStatus: {\r\n        enumType: exports.TypeInfo.DefinitionQueueStatus\r\n    },\r\n    supportedReasons: {\r\n        enumType: exports.TypeInfo.BuildReason\r\n    },\r\n    triggerType: {\r\n        enumType: exports.TypeInfo.DefinitionTriggerType\r\n    },\r\n    type: {\r\n        enumType: exports.TypeInfo.DefinitionType\r\n    }\r\n};\r\n","/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Specifies the additional data retrieval options for comments.\r\n */\r\nvar CommentExpandOptions;\r\n(function (CommentExpandOptions) {\r\n    /**\r\n     * Include comments only, no mentions, reactions or rendered text\r\n     */\r\n    CommentExpandOptions[CommentExpandOptions[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Include comment reactions\r\n     */\r\n    CommentExpandOptions[CommentExpandOptions[\"Reactions\"] = 1] = \"Reactions\";\r\n    /**\r\n     * Include the rendered text (html) in addition to markdown text\r\n     */\r\n    CommentExpandOptions[CommentExpandOptions[\"RenderedText\"] = 8] = \"RenderedText\";\r\n    /**\r\n     * If specified, then ONLY rendered text (html) will be returned, w/o markdown. Supposed to be used internally from data provides for optimization purposes.\r\n     */\r\n    CommentExpandOptions[CommentExpandOptions[\"RenderedTextOnly\"] = 16] = \"RenderedTextOnly\";\r\n    /**\r\n     * If specified, then responses will be expanded in the results\r\n     */\r\n    CommentExpandOptions[CommentExpandOptions[\"Children\"] = 32] = \"Children\";\r\n    /**\r\n     * Expand everything including Reactions, Mentions and also include RenderedText (HTML) for markdown comments\r\n     */\r\n    CommentExpandOptions[CommentExpandOptions[\"All\"] = -17] = \"All\";\r\n})(CommentExpandOptions = exports.CommentExpandOptions || (exports.CommentExpandOptions = {}));\r\n/**\r\n * Format of the comment. Ex. Markdown, Html.\r\n */\r\nvar CommentFormat;\r\n(function (CommentFormat) {\r\n    CommentFormat[CommentFormat[\"Markdown\"] = 0] = \"Markdown\";\r\n    CommentFormat[CommentFormat[\"Html\"] = 1] = \"Html\";\r\n})(CommentFormat = exports.CommentFormat || (exports.CommentFormat = {}));\r\nvar CommentMentionType;\r\n(function (CommentMentionType) {\r\n    /**\r\n     * An identity was mentioned by using the format @{VSID}\r\n     */\r\n    CommentMentionType[CommentMentionType[\"Person\"] = 0] = \"Person\";\r\n    /**\r\n     * A work item was mentioned by using the format #{Work Item ID}\r\n     */\r\n    CommentMentionType[CommentMentionType[\"WorkItem\"] = 1] = \"WorkItem\";\r\n    /**\r\n     * A Pull Request was mentioned by using the format !{PR Number}\r\n     */\r\n    CommentMentionType[CommentMentionType[\"PullRequest\"] = 2] = \"PullRequest\";\r\n})(CommentMentionType = exports.CommentMentionType || (exports.CommentMentionType = {}));\r\n/**\r\n * Represents different reaction types for a comment\r\n */\r\nvar CommentReactionType;\r\n(function (CommentReactionType) {\r\n    CommentReactionType[CommentReactionType[\"Like\"] = 0] = \"Like\";\r\n    CommentReactionType[CommentReactionType[\"Dislike\"] = 1] = \"Dislike\";\r\n    CommentReactionType[CommentReactionType[\"Heart\"] = 2] = \"Heart\";\r\n    CommentReactionType[CommentReactionType[\"Hooray\"] = 3] = \"Hooray\";\r\n    CommentReactionType[CommentReactionType[\"Smile\"] = 4] = \"Smile\";\r\n    CommentReactionType[CommentReactionType[\"Confused\"] = 5] = \"Confused\";\r\n})(CommentReactionType = exports.CommentReactionType || (exports.CommentReactionType = {}));\r\nvar CommentSortOrder;\r\n(function (CommentSortOrder) {\r\n    /**\r\n     * The results will be sorted in Ascending order.\r\n     */\r\n    CommentSortOrder[CommentSortOrder[\"Asc\"] = 1] = \"Asc\";\r\n    /**\r\n     * The results will be sorted in Descending order.\r\n     */\r\n    CommentSortOrder[CommentSortOrder[\"Desc\"] = 2] = \"Desc\";\r\n})(CommentSortOrder = exports.CommentSortOrder || (exports.CommentSortOrder = {}));\r\n/**\r\n * Represents the possible comment states.\r\n */\r\nvar CommentState;\r\n(function (CommentState) {\r\n    CommentState[CommentState[\"Active\"] = 0] = \"Active\";\r\n    CommentState[CommentState[\"Resolved\"] = 1] = \"Resolved\";\r\n    CommentState[CommentState[\"Closed\"] = 2] = \"Closed\";\r\n})(CommentState = exports.CommentState || (exports.CommentState = {}));\r\nexports.TypeInfo = {\r\n    Comment: {},\r\n    CommentAttachment: {},\r\n    CommentExpandOptions: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"reactions\": 1,\r\n            \"renderedText\": 8,\r\n            \"renderedTextOnly\": 16,\r\n            \"children\": 32,\r\n            \"all\": -17\r\n        }\r\n    },\r\n    CommentFormat: {\r\n        enumValues: {\r\n            \"markdown\": 0,\r\n            \"html\": 1\r\n        }\r\n    },\r\n    CommentList: {},\r\n    CommentMention: {},\r\n    CommentMentionType: {\r\n        enumValues: {\r\n            \"person\": 0,\r\n            \"workItem\": 1,\r\n            \"pullRequest\": 2\r\n        }\r\n    },\r\n    CommentReaction: {},\r\n    CommentReactionType: {\r\n        enumValues: {\r\n            \"like\": 0,\r\n            \"dislike\": 1,\r\n            \"heart\": 2,\r\n            \"hooray\": 3,\r\n            \"smile\": 4,\r\n            \"confused\": 5\r\n        }\r\n    },\r\n    CommentSortOrder: {\r\n        enumValues: {\r\n            \"asc\": 1,\r\n            \"desc\": 2\r\n        }\r\n    },\r\n    CommentState: {\r\n        enumValues: {\r\n            \"active\": 0,\r\n            \"resolved\": 1,\r\n            \"closed\": 2\r\n        }\r\n    },\r\n    CommentUpdateParameters: {},\r\n    CommentVersion: {},\r\n};\r\nexports.TypeInfo.Comment.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    },\r\n    mentions: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.CommentMention\r\n    },\r\n    modifiedDate: {\r\n        isDate: true,\r\n    },\r\n    reactions: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.CommentReaction\r\n    },\r\n    replies: {\r\n        typeInfo: exports.TypeInfo.CommentList\r\n    },\r\n    state: {\r\n        enumType: exports.TypeInfo.CommentState\r\n    }\r\n};\r\nexports.TypeInfo.CommentAttachment.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.CommentList.fields = {\r\n    comments: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.Comment\r\n    }\r\n};\r\nexports.TypeInfo.CommentMention.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.CommentMentionType\r\n    }\r\n};\r\nexports.TypeInfo.CommentReaction.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.CommentReactionType\r\n    }\r\n};\r\nexports.TypeInfo.CommentUpdateParameters.fields = {\r\n    state: {\r\n        enumType: exports.TypeInfo.CommentState\r\n    }\r\n};\r\nexports.TypeInfo.CommentVersion.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    },\r\n    modifiedDate: {\r\n        isDate: true,\r\n    },\r\n    state: {\r\n        enumType: exports.TypeInfo.CommentState\r\n    }\r\n};\r\n","/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ConnectedServiceKind;\r\n(function (ConnectedServiceKind) {\r\n    /**\r\n     * Custom or unknown service\r\n     */\r\n    ConnectedServiceKind[ConnectedServiceKind[\"Custom\"] = 0] = \"Custom\";\r\n    /**\r\n     * Azure Subscription\r\n     */\r\n    ConnectedServiceKind[ConnectedServiceKind[\"AzureSubscription\"] = 1] = \"AzureSubscription\";\r\n    /**\r\n     * Chef Connection\r\n     */\r\n    ConnectedServiceKind[ConnectedServiceKind[\"Chef\"] = 2] = \"Chef\";\r\n    /**\r\n     * Generic Connection\r\n     */\r\n    ConnectedServiceKind[ConnectedServiceKind[\"Generic\"] = 3] = \"Generic\";\r\n})(ConnectedServiceKind = exports.ConnectedServiceKind || (exports.ConnectedServiceKind = {}));\r\n/**\r\n * Type of process customization on a collection.\r\n */\r\nvar ProcessCustomizationType;\r\n(function (ProcessCustomizationType) {\r\n    /**\r\n     * Process customization can't be computed.\r\n     */\r\n    ProcessCustomizationType[ProcessCustomizationType[\"Unknown\"] = -1] = \"Unknown\";\r\n    /**\r\n     * Customization based on project-scoped xml customization\r\n     */\r\n    ProcessCustomizationType[ProcessCustomizationType[\"Xml\"] = 0] = \"Xml\";\r\n    /**\r\n     * Customization based on process inheritance\r\n     */\r\n    ProcessCustomizationType[ProcessCustomizationType[\"Inherited\"] = 1] = \"Inherited\";\r\n})(ProcessCustomizationType = exports.ProcessCustomizationType || (exports.ProcessCustomizationType = {}));\r\nvar ProcessType;\r\n(function (ProcessType) {\r\n    ProcessType[ProcessType[\"System\"] = 0] = \"System\";\r\n    ProcessType[ProcessType[\"Custom\"] = 1] = \"Custom\";\r\n    ProcessType[ProcessType[\"Inherited\"] = 2] = \"Inherited\";\r\n})(ProcessType = exports.ProcessType || (exports.ProcessType = {}));\r\nvar ProjectChangeType;\r\n(function (ProjectChangeType) {\r\n    ProjectChangeType[ProjectChangeType[\"Modified\"] = 0] = \"Modified\";\r\n    ProjectChangeType[ProjectChangeType[\"Deleted\"] = 1] = \"Deleted\";\r\n    ProjectChangeType[ProjectChangeType[\"Added\"] = 2] = \"Added\";\r\n})(ProjectChangeType = exports.ProjectChangeType || (exports.ProjectChangeType = {}));\r\nvar ProjectVisibility;\r\n(function (ProjectVisibility) {\r\n    ProjectVisibility[ProjectVisibility[\"Unchanged\"] = -1] = \"Unchanged\";\r\n    /**\r\n     * The project is only visible to users with explicit access.\r\n     */\r\n    ProjectVisibility[ProjectVisibility[\"Private\"] = 0] = \"Private\";\r\n    /**\r\n     * Enterprise level project visibility\r\n     */\r\n    ProjectVisibility[ProjectVisibility[\"Organization\"] = 1] = \"Organization\";\r\n    /**\r\n     * The project is visible to all.\r\n     */\r\n    ProjectVisibility[ProjectVisibility[\"Public\"] = 2] = \"Public\";\r\n    ProjectVisibility[ProjectVisibility[\"SystemPrivate\"] = 3] = \"SystemPrivate\";\r\n})(ProjectVisibility = exports.ProjectVisibility || (exports.ProjectVisibility = {}));\r\nvar SourceControlTypes;\r\n(function (SourceControlTypes) {\r\n    SourceControlTypes[SourceControlTypes[\"Tfvc\"] = 1] = \"Tfvc\";\r\n    SourceControlTypes[SourceControlTypes[\"Git\"] = 2] = \"Git\";\r\n})(SourceControlTypes = exports.SourceControlTypes || (exports.SourceControlTypes = {}));\r\nexports.TypeInfo = {\r\n    ConnectedServiceKind: {\r\n        enumValues: {\r\n            \"custom\": 0,\r\n            \"azureSubscription\": 1,\r\n            \"chef\": 2,\r\n            \"generic\": 3\r\n        }\r\n    },\r\n    Process: {},\r\n    ProcessCustomizationType: {\r\n        enumValues: {\r\n            \"unknown\": -1,\r\n            \"xml\": 0,\r\n            \"inherited\": 1\r\n        }\r\n    },\r\n    ProcessType: {\r\n        enumValues: {\r\n            \"system\": 0,\r\n            \"custom\": 1,\r\n            \"inherited\": 2\r\n        }\r\n    },\r\n    ProjectChangeType: {\r\n        enumValues: {\r\n            \"modified\": 0,\r\n            \"deleted\": 1,\r\n            \"added\": 2\r\n        }\r\n    },\r\n    ProjectInfo: {},\r\n    ProjectMessage: {},\r\n    ProjectVisibility: {\r\n        enumValues: {\r\n            \"private\": 0,\r\n            \"organization\": 1,\r\n            \"public\": 2\r\n        }\r\n    },\r\n    SourceControlTypes: {\r\n        enumValues: {\r\n            \"tfvc\": 1,\r\n            \"git\": 2\r\n        }\r\n    },\r\n    TeamProject: {},\r\n    TeamProjectCollection: {},\r\n    TeamProjectReference: {},\r\n    TemporaryDataCreatedDTO: {},\r\n    WebApiConnectedService: {},\r\n    WebApiConnectedServiceDetails: {},\r\n    WebApiProject: {},\r\n};\r\nexports.TypeInfo.Process.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.ProcessType\r\n    }\r\n};\r\nexports.TypeInfo.ProjectInfo.fields = {\r\n    lastUpdateTime: {\r\n        isDate: true,\r\n    },\r\n    visibility: {\r\n        enumType: exports.TypeInfo.ProjectVisibility\r\n    }\r\n};\r\nexports.TypeInfo.ProjectMessage.fields = {\r\n    project: {\r\n        typeInfo: exports.TypeInfo.ProjectInfo\r\n    },\r\n    projectChangeType: {\r\n        enumType: exports.TypeInfo.ProjectChangeType\r\n    }\r\n};\r\nexports.TypeInfo.TeamProject.fields = {\r\n    lastUpdateTime: {\r\n        isDate: true,\r\n    },\r\n    visibility: {\r\n        enumType: exports.TypeInfo.ProjectVisibility\r\n    }\r\n};\r\nexports.TypeInfo.TeamProjectCollection.fields = {\r\n    processCustomizationType: {\r\n        enumType: exports.TypeInfo.ProcessCustomizationType\r\n    }\r\n};\r\nexports.TypeInfo.TeamProjectReference.fields = {\r\n    lastUpdateTime: {\r\n        isDate: true,\r\n    },\r\n    visibility: {\r\n        enumType: exports.TypeInfo.ProjectVisibility\r\n    }\r\n};\r\nexports.TypeInfo.TemporaryDataCreatedDTO.fields = {\r\n    expirationDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.WebApiConnectedService.fields = {\r\n    project: {\r\n        typeInfo: exports.TypeInfo.TeamProjectReference\r\n    }\r\n};\r\nexports.TypeInfo.WebApiConnectedServiceDetails.fields = {\r\n    connectedServiceMetaData: {\r\n        typeInfo: exports.TypeInfo.WebApiConnectedService\r\n    }\r\n};\r\nexports.TypeInfo.WebApiProject.fields = {\r\n    lastUpdateTime: {\r\n        isDate: true,\r\n    },\r\n    visibility: {\r\n        enumType: exports.TypeInfo.ProjectVisibility\r\n    }\r\n};\r\n","/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * identifies the scope of dashboard storage and permissions.\r\n */\r\nvar DashboardScope;\r\n(function (DashboardScope) {\r\n    /**\r\n     * [DEPRECATED] Dashboard is scoped to the collection user.\r\n     */\r\n    DashboardScope[DashboardScope[\"Collection_User\"] = 0] = \"Collection_User\";\r\n    /**\r\n     * Dashboard is scoped to the team.\r\n     */\r\n    DashboardScope[DashboardScope[\"Project_Team\"] = 1] = \"Project_Team\";\r\n    /**\r\n     * Dashboard is scoped to the project.\r\n     */\r\n    DashboardScope[DashboardScope[\"Project\"] = 2] = \"Project\";\r\n})(DashboardScope = exports.DashboardScope || (exports.DashboardScope = {}));\r\n/**\r\n * None - Team member cannot edit dashboard Edit - Team member can add, configure and delete widgets Manage - Team member can add, reorder, delete dashboards Manage Permissions - Team member can manage membership of other members to perform group operations.\r\n */\r\nvar GroupMemberPermission;\r\n(function (GroupMemberPermission) {\r\n    GroupMemberPermission[GroupMemberPermission[\"None\"] = 0] = \"None\";\r\n    GroupMemberPermission[GroupMemberPermission[\"Edit\"] = 1] = \"Edit\";\r\n    GroupMemberPermission[GroupMemberPermission[\"Manage\"] = 2] = \"Manage\";\r\n    GroupMemberPermission[GroupMemberPermission[\"ManagePermissions\"] = 3] = \"ManagePermissions\";\r\n})(GroupMemberPermission = exports.GroupMemberPermission || (exports.GroupMemberPermission = {}));\r\n/**\r\n * Read - User can see dashboards Create - User can create dashboards Edit - User can add, configure and delete widgets, and edit dashboard settings. Delete - User can delete dashboards Manage Permissions - Team member can manage membership of other members to perform group operations.\r\n */\r\nvar TeamDashboardPermission;\r\n(function (TeamDashboardPermission) {\r\n    TeamDashboardPermission[TeamDashboardPermission[\"None\"] = 0] = \"None\";\r\n    TeamDashboardPermission[TeamDashboardPermission[\"Read\"] = 1] = \"Read\";\r\n    TeamDashboardPermission[TeamDashboardPermission[\"Create\"] = 2] = \"Create\";\r\n    TeamDashboardPermission[TeamDashboardPermission[\"Edit\"] = 4] = \"Edit\";\r\n    TeamDashboardPermission[TeamDashboardPermission[\"Delete\"] = 8] = \"Delete\";\r\n    TeamDashboardPermission[TeamDashboardPermission[\"ManagePermissions\"] = 16] = \"ManagePermissions\";\r\n})(TeamDashboardPermission = exports.TeamDashboardPermission || (exports.TeamDashboardPermission = {}));\r\n/**\r\n * data contract required for the widget to function in a webaccess area or page.\r\n */\r\nvar WidgetScope;\r\n(function (WidgetScope) {\r\n    WidgetScope[WidgetScope[\"Collection_User\"] = 0] = \"Collection_User\";\r\n    WidgetScope[WidgetScope[\"Project_Team\"] = 1] = \"Project_Team\";\r\n})(WidgetScope = exports.WidgetScope || (exports.WidgetScope = {}));\r\nexports.TypeInfo = {\r\n    CopyDashboardOptions: {},\r\n    CopyDashboardResponse: {},\r\n    Dashboard: {},\r\n    DashboardGroup: {},\r\n    DashboardGroupEntry: {},\r\n    DashboardGroupEntryResponse: {},\r\n    DashboardResponse: {},\r\n    DashboardScope: {\r\n        enumValues: {\r\n            \"collection_User\": 0,\r\n            \"project_Team\": 1,\r\n            \"project\": 2\r\n        }\r\n    },\r\n    GroupMemberPermission: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"edit\": 1,\r\n            \"manage\": 2,\r\n            \"managePermissions\": 3\r\n        }\r\n    },\r\n    TeamDashboardPermission: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"read\": 1,\r\n            \"create\": 2,\r\n            \"edit\": 4,\r\n            \"delete\": 8,\r\n            \"managePermissions\": 16\r\n        }\r\n    },\r\n    Widget: {},\r\n    WidgetMetadata: {},\r\n    WidgetMetadataResponse: {},\r\n    WidgetResponse: {},\r\n    WidgetScope: {\r\n        enumValues: {\r\n            \"collection_User\": 0,\r\n            \"project_Team\": 1\r\n        }\r\n    },\r\n    WidgetsVersionedList: {},\r\n    WidgetTypesResponse: {},\r\n};\r\nexports.TypeInfo.CopyDashboardOptions.fields = {\r\n    copyDashboardScope: {\r\n        enumType: exports.TypeInfo.DashboardScope\r\n    }\r\n};\r\nexports.TypeInfo.CopyDashboardResponse.fields = {\r\n    copiedDashboard: {\r\n        typeInfo: exports.TypeInfo.Dashboard\r\n    },\r\n    copyDashboardOptions: {\r\n        typeInfo: exports.TypeInfo.CopyDashboardOptions\r\n    }\r\n};\r\nexports.TypeInfo.Dashboard.fields = {\r\n    dashboardScope: {\r\n        enumType: exports.TypeInfo.DashboardScope\r\n    },\r\n    lastAccessedDate: {\r\n        isDate: true,\r\n    },\r\n    modifiedDate: {\r\n        isDate: true,\r\n    },\r\n    widgets: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.Widget\r\n    }\r\n};\r\nexports.TypeInfo.DashboardGroup.fields = {\r\n    dashboardEntries: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.DashboardGroupEntry\r\n    },\r\n    permission: {\r\n        enumType: exports.TypeInfo.GroupMemberPermission\r\n    },\r\n    teamDashboardPermission: {\r\n        enumType: exports.TypeInfo.TeamDashboardPermission\r\n    }\r\n};\r\nexports.TypeInfo.DashboardGroupEntry.fields = {\r\n    dashboardScope: {\r\n        enumType: exports.TypeInfo.DashboardScope\r\n    },\r\n    lastAccessedDate: {\r\n        isDate: true,\r\n    },\r\n    modifiedDate: {\r\n        isDate: true,\r\n    },\r\n    widgets: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.Widget\r\n    }\r\n};\r\nexports.TypeInfo.DashboardGroupEntryResponse.fields = {\r\n    dashboardScope: {\r\n        enumType: exports.TypeInfo.DashboardScope\r\n    },\r\n    lastAccessedDate: {\r\n        isDate: true,\r\n    },\r\n    modifiedDate: {\r\n        isDate: true,\r\n    },\r\n    widgets: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.Widget\r\n    }\r\n};\r\nexports.TypeInfo.DashboardResponse.fields = {\r\n    dashboardScope: {\r\n        enumType: exports.TypeInfo.DashboardScope\r\n    },\r\n    lastAccessedDate: {\r\n        isDate: true,\r\n    },\r\n    modifiedDate: {\r\n        isDate: true,\r\n    },\r\n    widgets: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.Widget\r\n    }\r\n};\r\nexports.TypeInfo.Widget.fields = {\r\n    dashboard: {\r\n        typeInfo: exports.TypeInfo.Dashboard\r\n    }\r\n};\r\nexports.TypeInfo.WidgetMetadata.fields = {\r\n    supportedScopes: {\r\n        isArray: true,\r\n        enumType: exports.TypeInfo.WidgetScope\r\n    }\r\n};\r\nexports.TypeInfo.WidgetMetadataResponse.fields = {\r\n    widgetMetadata: {\r\n        typeInfo: exports.TypeInfo.WidgetMetadata\r\n    }\r\n};\r\nexports.TypeInfo.WidgetResponse.fields = {\r\n    dashboard: {\r\n        typeInfo: exports.TypeInfo.Dashboard\r\n    }\r\n};\r\nexports.TypeInfo.WidgetsVersionedList.fields = {\r\n    widgets: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.Widget\r\n    }\r\n};\r\nexports.TypeInfo.WidgetTypesResponse.fields = {\r\n    widgetTypes: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.WidgetMetadata\r\n    }\r\n};\r\n","/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst GalleryInterfaces = require(\"../interfaces/GalleryInterfaces\");\r\n/**\r\n * How the acquisition is assigned\r\n */\r\nvar AcquisitionAssignmentType;\r\n(function (AcquisitionAssignmentType) {\r\n    AcquisitionAssignmentType[AcquisitionAssignmentType[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Just assign for me\r\n     */\r\n    AcquisitionAssignmentType[AcquisitionAssignmentType[\"Me\"] = 1] = \"Me\";\r\n    /**\r\n     * Assign for all users in the account\r\n     */\r\n    AcquisitionAssignmentType[AcquisitionAssignmentType[\"All\"] = 2] = \"All\";\r\n})(AcquisitionAssignmentType = exports.AcquisitionAssignmentType || (exports.AcquisitionAssignmentType = {}));\r\nvar AcquisitionOperationState;\r\n(function (AcquisitionOperationState) {\r\n    /**\r\n     * Not allowed to use this AcquisitionOperation\r\n     */\r\n    AcquisitionOperationState[AcquisitionOperationState[\"Disallow\"] = 0] = \"Disallow\";\r\n    /**\r\n     * Allowed to use this AcquisitionOperation\r\n     */\r\n    AcquisitionOperationState[AcquisitionOperationState[\"Allow\"] = 1] = \"Allow\";\r\n    /**\r\n     * Operation has already been completed and is no longer available\r\n     */\r\n    AcquisitionOperationState[AcquisitionOperationState[\"Completed\"] = 3] = \"Completed\";\r\n})(AcquisitionOperationState = exports.AcquisitionOperationState || (exports.AcquisitionOperationState = {}));\r\n/**\r\n * Set of different types of operations that can be requested.\r\n */\r\nvar AcquisitionOperationType;\r\n(function (AcquisitionOperationType) {\r\n    /**\r\n     * Not yet used\r\n     */\r\n    AcquisitionOperationType[AcquisitionOperationType[\"Get\"] = 0] = \"Get\";\r\n    /**\r\n     * Install this extension into the host provided\r\n     */\r\n    AcquisitionOperationType[AcquisitionOperationType[\"Install\"] = 1] = \"Install\";\r\n    /**\r\n     * Buy licenses for this extension and install into the host provided\r\n     */\r\n    AcquisitionOperationType[AcquisitionOperationType[\"Buy\"] = 2] = \"Buy\";\r\n    /**\r\n     * Try this extension\r\n     */\r\n    AcquisitionOperationType[AcquisitionOperationType[\"Try\"] = 3] = \"Try\";\r\n    /**\r\n     * Request this extension for installation\r\n     */\r\n    AcquisitionOperationType[AcquisitionOperationType[\"Request\"] = 4] = \"Request\";\r\n    /**\r\n     * No action found\r\n     */\r\n    AcquisitionOperationType[AcquisitionOperationType[\"None\"] = 5] = \"None\";\r\n    /**\r\n     * Request admins for purchasing extension\r\n     */\r\n    AcquisitionOperationType[AcquisitionOperationType[\"PurchaseRequest\"] = 6] = \"PurchaseRequest\";\r\n})(AcquisitionOperationType = exports.AcquisitionOperationType || (exports.AcquisitionOperationType = {}));\r\n/**\r\n * Represents different ways of including contributions based on licensing\r\n */\r\nvar ContributionLicensingBehaviorType;\r\n(function (ContributionLicensingBehaviorType) {\r\n    /**\r\n     * Default value - only include the contribution if the user is licensed for the extension\r\n     */\r\n    ContributionLicensingBehaviorType[ContributionLicensingBehaviorType[\"OnlyIfLicensed\"] = 0] = \"OnlyIfLicensed\";\r\n    /**\r\n     * Only include the contribution if the user is NOT licensed for the extension\r\n     */\r\n    ContributionLicensingBehaviorType[ContributionLicensingBehaviorType[\"OnlyIfUnlicensed\"] = 1] = \"OnlyIfUnlicensed\";\r\n    /**\r\n     * Always include the contribution regardless of whether or not the user is licensed for the extension\r\n     */\r\n    ContributionLicensingBehaviorType[ContributionLicensingBehaviorType[\"AlwaysInclude\"] = 2] = \"AlwaysInclude\";\r\n})(ContributionLicensingBehaviorType = exports.ContributionLicensingBehaviorType || (exports.ContributionLicensingBehaviorType = {}));\r\n/**\r\n * The type of value used for a property\r\n */\r\nvar ContributionPropertyType;\r\n(function (ContributionPropertyType) {\r\n    /**\r\n     * Contribution type is unknown (value may be anything)\r\n     */\r\n    ContributionPropertyType[ContributionPropertyType[\"Unknown\"] = 0] = \"Unknown\";\r\n    /**\r\n     * Value is a string\r\n     */\r\n    ContributionPropertyType[ContributionPropertyType[\"String\"] = 1] = \"String\";\r\n    /**\r\n     * Value is a Uri\r\n     */\r\n    ContributionPropertyType[ContributionPropertyType[\"Uri\"] = 2] = \"Uri\";\r\n    /**\r\n     * Value is a GUID\r\n     */\r\n    ContributionPropertyType[ContributionPropertyType[\"Guid\"] = 4] = \"Guid\";\r\n    /**\r\n     * Value is True or False\r\n     */\r\n    ContributionPropertyType[ContributionPropertyType[\"Boolean\"] = 8] = \"Boolean\";\r\n    /**\r\n     * Value is an integer\r\n     */\r\n    ContributionPropertyType[ContributionPropertyType[\"Integer\"] = 16] = \"Integer\";\r\n    /**\r\n     * Value is a double\r\n     */\r\n    ContributionPropertyType[ContributionPropertyType[\"Double\"] = 32] = \"Double\";\r\n    /**\r\n     * Value is a DateTime object\r\n     */\r\n    ContributionPropertyType[ContributionPropertyType[\"DateTime\"] = 64] = \"DateTime\";\r\n    /**\r\n     * Value is a generic Dictionary/JObject/property bag\r\n     */\r\n    ContributionPropertyType[ContributionPropertyType[\"Dictionary\"] = 128] = \"Dictionary\";\r\n    /**\r\n     * Value is an array\r\n     */\r\n    ContributionPropertyType[ContributionPropertyType[\"Array\"] = 256] = \"Array\";\r\n    /**\r\n     * Value is an arbitrary/custom object\r\n     */\r\n    ContributionPropertyType[ContributionPropertyType[\"Object\"] = 512] = \"Object\";\r\n})(ContributionPropertyType = exports.ContributionPropertyType || (exports.ContributionPropertyType = {}));\r\n/**\r\n * Options that control the contributions to include in a query\r\n */\r\nvar ContributionQueryOptions;\r\n(function (ContributionQueryOptions) {\r\n    ContributionQueryOptions[ContributionQueryOptions[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Include the direct contributions that have the ids queried.\r\n     */\r\n    ContributionQueryOptions[ContributionQueryOptions[\"IncludeSelf\"] = 16] = \"IncludeSelf\";\r\n    /**\r\n     * Include the contributions that directly target the contributions queried.\r\n     */\r\n    ContributionQueryOptions[ContributionQueryOptions[\"IncludeChildren\"] = 32] = \"IncludeChildren\";\r\n    /**\r\n     * Include the contributions from the entire sub-tree targeting the contributions queried.\r\n     */\r\n    ContributionQueryOptions[ContributionQueryOptions[\"IncludeSubTree\"] = 96] = \"IncludeSubTree\";\r\n    /**\r\n     * Include the contribution being queried as well as all contributions that target them recursively.\r\n     */\r\n    ContributionQueryOptions[ContributionQueryOptions[\"IncludeAll\"] = 112] = \"IncludeAll\";\r\n    /**\r\n     * Some callers may want the entire tree back without constraint evaluation being performed.\r\n     */\r\n    ContributionQueryOptions[ContributionQueryOptions[\"IgnoreConstraints\"] = 256] = \"IgnoreConstraints\";\r\n})(ContributionQueryOptions = exports.ContributionQueryOptions || (exports.ContributionQueryOptions = {}));\r\n/**\r\n * Set of flags applied to extensions that are relevant to contribution consumers\r\n */\r\nvar ExtensionFlags;\r\n(function (ExtensionFlags) {\r\n    /**\r\n     * A built-in extension is installed for all VSTS accounts by default\r\n     */\r\n    ExtensionFlags[ExtensionFlags[\"BuiltIn\"] = 1] = \"BuiltIn\";\r\n    /**\r\n     * The extension comes from a fully-trusted publisher\r\n     */\r\n    ExtensionFlags[ExtensionFlags[\"Trusted\"] = 2] = \"Trusted\";\r\n})(ExtensionFlags = exports.ExtensionFlags || (exports.ExtensionFlags = {}));\r\n/**\r\n * Represents the state of an extension request\r\n */\r\nvar ExtensionRequestState;\r\n(function (ExtensionRequestState) {\r\n    /**\r\n     * The request has been opened, but not yet responded to\r\n     */\r\n    ExtensionRequestState[ExtensionRequestState[\"Open\"] = 0] = \"Open\";\r\n    /**\r\n     * The request was accepted (extension installed or license assigned)\r\n     */\r\n    ExtensionRequestState[ExtensionRequestState[\"Accepted\"] = 1] = \"Accepted\";\r\n    /**\r\n     * The request was rejected (extension not installed or license not assigned)\r\n     */\r\n    ExtensionRequestState[ExtensionRequestState[\"Rejected\"] = 2] = \"Rejected\";\r\n})(ExtensionRequestState = exports.ExtensionRequestState || (exports.ExtensionRequestState = {}));\r\nvar ExtensionRequestUpdateType;\r\n(function (ExtensionRequestUpdateType) {\r\n    ExtensionRequestUpdateType[ExtensionRequestUpdateType[\"Created\"] = 1] = \"Created\";\r\n    ExtensionRequestUpdateType[ExtensionRequestUpdateType[\"Approved\"] = 2] = \"Approved\";\r\n    ExtensionRequestUpdateType[ExtensionRequestUpdateType[\"Rejected\"] = 3] = \"Rejected\";\r\n    ExtensionRequestUpdateType[ExtensionRequestUpdateType[\"Deleted\"] = 4] = \"Deleted\";\r\n})(ExtensionRequestUpdateType = exports.ExtensionRequestUpdateType || (exports.ExtensionRequestUpdateType = {}));\r\n/**\r\n * States of an extension Note:  If you add value to this enum, you need to do 2 other things.  First add the back compat enum in value src\\Vssf\\Sdk\\Server\\Contributions\\InstalledExtensionMessage.cs.  Second, you can not send the new value on the message bus.  You need to remove it from the message bus event prior to being sent.\r\n */\r\nvar ExtensionStateFlags;\r\n(function (ExtensionStateFlags) {\r\n    /**\r\n     * No flags set\r\n     */\r\n    ExtensionStateFlags[ExtensionStateFlags[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Extension is disabled\r\n     */\r\n    ExtensionStateFlags[ExtensionStateFlags[\"Disabled\"] = 1] = \"Disabled\";\r\n    /**\r\n     * Extension is a built in\r\n     */\r\n    ExtensionStateFlags[ExtensionStateFlags[\"BuiltIn\"] = 2] = \"BuiltIn\";\r\n    /**\r\n     * Extension has multiple versions\r\n     */\r\n    ExtensionStateFlags[ExtensionStateFlags[\"MultiVersion\"] = 4] = \"MultiVersion\";\r\n    /**\r\n     * Extension is not installed.  This is for builtin extensions only and can not otherwise be set.\r\n     */\r\n    ExtensionStateFlags[ExtensionStateFlags[\"UnInstalled\"] = 8] = \"UnInstalled\";\r\n    /**\r\n     * Error performing version check\r\n     */\r\n    ExtensionStateFlags[ExtensionStateFlags[\"VersionCheckError\"] = 16] = \"VersionCheckError\";\r\n    /**\r\n     * Trusted extensions are ones that are given special capabilities. These tend to come from Microsoft and can't be published by the general public.  Note: BuiltIn extensions are always trusted.\r\n     */\r\n    ExtensionStateFlags[ExtensionStateFlags[\"Trusted\"] = 32] = \"Trusted\";\r\n    /**\r\n     * Extension is currently in an error state\r\n     */\r\n    ExtensionStateFlags[ExtensionStateFlags[\"Error\"] = 64] = \"Error\";\r\n    /**\r\n     * Extension scopes have changed and the extension requires re-authorization\r\n     */\r\n    ExtensionStateFlags[ExtensionStateFlags[\"NeedsReauthorization\"] = 128] = \"NeedsReauthorization\";\r\n    /**\r\n     * Error performing auto-upgrade. For example, if the new version has demands not supported the extension cannot be auto-upgraded.\r\n     */\r\n    ExtensionStateFlags[ExtensionStateFlags[\"AutoUpgradeError\"] = 256] = \"AutoUpgradeError\";\r\n    /**\r\n     * Extension is currently in a warning state, that can cause a degraded experience. The degraded experience can be caused for example by some installation issues detected such as implicit demands not supported.\r\n     */\r\n    ExtensionStateFlags[ExtensionStateFlags[\"Warning\"] = 512] = \"Warning\";\r\n})(ExtensionStateFlags = exports.ExtensionStateFlags || (exports.ExtensionStateFlags = {}));\r\nvar ExtensionUpdateType;\r\n(function (ExtensionUpdateType) {\r\n    ExtensionUpdateType[ExtensionUpdateType[\"Installed\"] = 1] = \"Installed\";\r\n    ExtensionUpdateType[ExtensionUpdateType[\"Uninstalled\"] = 2] = \"Uninstalled\";\r\n    ExtensionUpdateType[ExtensionUpdateType[\"Enabled\"] = 3] = \"Enabled\";\r\n    ExtensionUpdateType[ExtensionUpdateType[\"Disabled\"] = 4] = \"Disabled\";\r\n    ExtensionUpdateType[ExtensionUpdateType[\"VersionUpdated\"] = 5] = \"VersionUpdated\";\r\n    ExtensionUpdateType[ExtensionUpdateType[\"ActionRequired\"] = 6] = \"ActionRequired\";\r\n    ExtensionUpdateType[ExtensionUpdateType[\"ActionResolved\"] = 7] = \"ActionResolved\";\r\n})(ExtensionUpdateType = exports.ExtensionUpdateType || (exports.ExtensionUpdateType = {}));\r\n/**\r\n * Installation issue type (Warning, Error)\r\n */\r\nvar InstalledExtensionStateIssueType;\r\n(function (InstalledExtensionStateIssueType) {\r\n    /**\r\n     * Represents an installation warning, for example an implicit demand not supported\r\n     */\r\n    InstalledExtensionStateIssueType[InstalledExtensionStateIssueType[\"Warning\"] = 0] = \"Warning\";\r\n    /**\r\n     * Represents an installation error, for example an explicit demand not supported\r\n     */\r\n    InstalledExtensionStateIssueType[InstalledExtensionStateIssueType[\"Error\"] = 1] = \"Error\";\r\n})(InstalledExtensionStateIssueType = exports.InstalledExtensionStateIssueType || (exports.InstalledExtensionStateIssueType = {}));\r\nexports.TypeInfo = {\r\n    AcquisitionAssignmentType: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"me\": 1,\r\n            \"all\": 2\r\n        }\r\n    },\r\n    AcquisitionOperation: {},\r\n    AcquisitionOperationState: {\r\n        enumValues: {\r\n            \"disallow\": 0,\r\n            \"allow\": 1,\r\n            \"completed\": 3\r\n        }\r\n    },\r\n    AcquisitionOperationType: {\r\n        enumValues: {\r\n            \"get\": 0,\r\n            \"install\": 1,\r\n            \"buy\": 2,\r\n            \"try\": 3,\r\n            \"request\": 4,\r\n            \"none\": 5,\r\n            \"purchaseRequest\": 6\r\n        }\r\n    },\r\n    AcquisitionOptions: {},\r\n    ContributionLicensingBehaviorType: {\r\n        enumValues: {\r\n            \"onlyIfLicensed\": 0,\r\n            \"onlyIfUnlicensed\": 1,\r\n            \"alwaysInclude\": 2\r\n        }\r\n    },\r\n    ContributionNodeQuery: {},\r\n    ContributionPropertyDescription: {},\r\n    ContributionPropertyType: {\r\n        enumValues: {\r\n            \"unknown\": 0,\r\n            \"string\": 1,\r\n            \"uri\": 2,\r\n            \"guid\": 4,\r\n            \"boolean\": 8,\r\n            \"integer\": 16,\r\n            \"double\": 32,\r\n            \"dateTime\": 64,\r\n            \"dictionary\": 128,\r\n            \"array\": 256,\r\n            \"object\": 512\r\n        }\r\n    },\r\n    ContributionQueryOptions: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"includeSelf\": 16,\r\n            \"includeChildren\": 32,\r\n            \"includeSubTree\": 96,\r\n            \"includeAll\": 112,\r\n            \"ignoreConstraints\": 256\r\n        }\r\n    },\r\n    ContributionType: {},\r\n    ExtensionAcquisitionRequest: {},\r\n    ExtensionAuditLog: {},\r\n    ExtensionAuditLogEntry: {},\r\n    ExtensionEvent: {},\r\n    ExtensionFlags: {\r\n        enumValues: {\r\n            \"builtIn\": 1,\r\n            \"trusted\": 2\r\n        }\r\n    },\r\n    ExtensionLicensing: {},\r\n    ExtensionManifest: {},\r\n    ExtensionRequest: {},\r\n    ExtensionRequestEvent: {},\r\n    ExtensionRequestsEvent: {},\r\n    ExtensionRequestState: {\r\n        enumValues: {\r\n            \"open\": 0,\r\n            \"accepted\": 1,\r\n            \"rejected\": 2\r\n        }\r\n    },\r\n    ExtensionRequestUpdateType: {\r\n        enumValues: {\r\n            \"created\": 1,\r\n            \"approved\": 2,\r\n            \"rejected\": 3,\r\n            \"deleted\": 4\r\n        }\r\n    },\r\n    ExtensionState: {},\r\n    ExtensionStateFlags: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"disabled\": 1,\r\n            \"builtIn\": 2,\r\n            \"multiVersion\": 4,\r\n            \"unInstalled\": 8,\r\n            \"versionCheckError\": 16,\r\n            \"trusted\": 32,\r\n            \"error\": 64,\r\n            \"needsReauthorization\": 128,\r\n            \"autoUpgradeError\": 256,\r\n            \"warning\": 512\r\n        }\r\n    },\r\n    ExtensionUpdateType: {\r\n        enumValues: {\r\n            \"installed\": 1,\r\n            \"uninstalled\": 2,\r\n            \"enabled\": 3,\r\n            \"disabled\": 4,\r\n            \"versionUpdated\": 5,\r\n            \"actionRequired\": 6,\r\n            \"actionResolved\": 7\r\n        }\r\n    },\r\n    InstalledExtension: {},\r\n    InstalledExtensionState: {},\r\n    InstalledExtensionStateIssue: {},\r\n    InstalledExtensionStateIssueType: {\r\n        enumValues: {\r\n            \"warning\": 0,\r\n            \"error\": 1\r\n        }\r\n    },\r\n    LicensingOverride: {},\r\n    RequestedExtension: {},\r\n};\r\nexports.TypeInfo.AcquisitionOperation.fields = {\r\n    operationState: {\r\n        enumType: exports.TypeInfo.AcquisitionOperationState\r\n    },\r\n    operationType: {\r\n        enumType: exports.TypeInfo.AcquisitionOperationType\r\n    }\r\n};\r\nexports.TypeInfo.AcquisitionOptions.fields = {\r\n    defaultOperation: {\r\n        typeInfo: exports.TypeInfo.AcquisitionOperation\r\n    },\r\n    operations: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.AcquisitionOperation\r\n    }\r\n};\r\nexports.TypeInfo.ContributionNodeQuery.fields = {\r\n    queryOptions: {\r\n        enumType: exports.TypeInfo.ContributionQueryOptions\r\n    }\r\n};\r\nexports.TypeInfo.ContributionPropertyDescription.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.ContributionPropertyType\r\n    }\r\n};\r\nexports.TypeInfo.ContributionType.fields = {\r\n    properties: {\r\n        isDictionary: true,\r\n        dictionaryValueTypeInfo: exports.TypeInfo.ContributionPropertyDescription\r\n    }\r\n};\r\nexports.TypeInfo.ExtensionAcquisitionRequest.fields = {\r\n    assignmentType: {\r\n        enumType: exports.TypeInfo.AcquisitionAssignmentType\r\n    },\r\n    operationType: {\r\n        enumType: exports.TypeInfo.AcquisitionOperationType\r\n    }\r\n};\r\nexports.TypeInfo.ExtensionAuditLog.fields = {\r\n    entries: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ExtensionAuditLogEntry\r\n    }\r\n};\r\nexports.TypeInfo.ExtensionAuditLogEntry.fields = {\r\n    auditDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.ExtensionEvent.fields = {\r\n    extension: {\r\n        typeInfo: GalleryInterfaces.TypeInfo.PublishedExtension\r\n    },\r\n    updateType: {\r\n        enumType: exports.TypeInfo.ExtensionUpdateType\r\n    }\r\n};\r\nexports.TypeInfo.ExtensionLicensing.fields = {\r\n    overrides: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.LicensingOverride\r\n    }\r\n};\r\nexports.TypeInfo.ExtensionManifest.fields = {\r\n    contributionTypes: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ContributionType\r\n    },\r\n    licensing: {\r\n        typeInfo: exports.TypeInfo.ExtensionLicensing\r\n    }\r\n};\r\nexports.TypeInfo.ExtensionRequest.fields = {\r\n    requestDate: {\r\n        isDate: true,\r\n    },\r\n    requestState: {\r\n        enumType: exports.TypeInfo.ExtensionRequestState\r\n    },\r\n    resolveDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.ExtensionRequestEvent.fields = {\r\n    extension: {\r\n        typeInfo: GalleryInterfaces.TypeInfo.PublishedExtension\r\n    },\r\n    request: {\r\n        typeInfo: exports.TypeInfo.ExtensionRequest\r\n    },\r\n    updateType: {\r\n        enumType: exports.TypeInfo.ExtensionRequestUpdateType\r\n    }\r\n};\r\nexports.TypeInfo.ExtensionRequestsEvent.fields = {\r\n    extension: {\r\n        typeInfo: GalleryInterfaces.TypeInfo.PublishedExtension\r\n    },\r\n    requests: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ExtensionRequest\r\n    },\r\n    updateType: {\r\n        enumType: exports.TypeInfo.ExtensionRequestUpdateType\r\n    }\r\n};\r\nexports.TypeInfo.ExtensionState.fields = {\r\n    flags: {\r\n        enumType: exports.TypeInfo.ExtensionStateFlags\r\n    },\r\n    installationIssues: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.InstalledExtensionStateIssue\r\n    },\r\n    lastUpdated: {\r\n        isDate: true,\r\n    },\r\n    lastVersionCheck: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.InstalledExtension.fields = {\r\n    contributionTypes: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ContributionType\r\n    },\r\n    flags: {\r\n        enumType: exports.TypeInfo.ExtensionFlags\r\n    },\r\n    installState: {\r\n        typeInfo: exports.TypeInfo.InstalledExtensionState\r\n    },\r\n    lastPublished: {\r\n        isDate: true,\r\n    },\r\n    licensing: {\r\n        typeInfo: exports.TypeInfo.ExtensionLicensing\r\n    }\r\n};\r\nexports.TypeInfo.InstalledExtensionState.fields = {\r\n    flags: {\r\n        enumType: exports.TypeInfo.ExtensionStateFlags\r\n    },\r\n    installationIssues: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.InstalledExtensionStateIssue\r\n    },\r\n    lastUpdated: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.InstalledExtensionStateIssue.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.InstalledExtensionStateIssueType\r\n    }\r\n};\r\nexports.TypeInfo.LicensingOverride.fields = {\r\n    behavior: {\r\n        enumType: exports.TypeInfo.ContributionLicensingBehaviorType\r\n    }\r\n};\r\nexports.TypeInfo.RequestedExtension.fields = {\r\n    extensionRequests: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ExtensionRequest\r\n    }\r\n};\r\n","/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * The current state of a feature within a given scope\r\n */\r\nvar ContributedFeatureEnabledValue;\r\n(function (ContributedFeatureEnabledValue) {\r\n    /**\r\n     * The state of the feature is not set for the specified scope\r\n     */\r\n    ContributedFeatureEnabledValue[ContributedFeatureEnabledValue[\"Undefined\"] = -1] = \"Undefined\";\r\n    /**\r\n     * The feature is disabled at the specified scope\r\n     */\r\n    ContributedFeatureEnabledValue[ContributedFeatureEnabledValue[\"Disabled\"] = 0] = \"Disabled\";\r\n    /**\r\n     * The feature is enabled at the specified scope\r\n     */\r\n    ContributedFeatureEnabledValue[ContributedFeatureEnabledValue[\"Enabled\"] = 1] = \"Enabled\";\r\n})(ContributedFeatureEnabledValue = exports.ContributedFeatureEnabledValue || (exports.ContributedFeatureEnabledValue = {}));\r\nexports.TypeInfo = {\r\n    ContributedFeatureEnabledValue: {\r\n        enumValues: {\r\n            \"undefined\": -1,\r\n            \"disabled\": 0,\r\n            \"enabled\": 1\r\n        }\r\n    },\r\n    ContributedFeatureState: {},\r\n    ContributedFeatureStateQuery: {},\r\n};\r\nexports.TypeInfo.ContributedFeatureState.fields = {\r\n    state: {\r\n        enumType: exports.TypeInfo.ContributedFeatureEnabledValue\r\n    }\r\n};\r\nexports.TypeInfo.ContributedFeatureStateQuery.fields = {\r\n    featureStates: {\r\n        isDictionary: true,\r\n        dictionaryValueTypeInfo: exports.TypeInfo.ContributedFeatureState\r\n    }\r\n};\r\n","/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Compression type for file stored in Blobstore\r\n */\r\nvar BlobCompressionType;\r\n(function (BlobCompressionType) {\r\n    BlobCompressionType[BlobCompressionType[\"None\"] = 0] = \"None\";\r\n    BlobCompressionType[BlobCompressionType[\"GZip\"] = 1] = \"GZip\";\r\n})(BlobCompressionType = exports.BlobCompressionType || (exports.BlobCompressionType = {}));\r\n/**\r\n * Status of a container item.\r\n */\r\nvar ContainerItemStatus;\r\n(function (ContainerItemStatus) {\r\n    /**\r\n     * Item is created.\r\n     */\r\n    ContainerItemStatus[ContainerItemStatus[\"Created\"] = 1] = \"Created\";\r\n    /**\r\n     * Item is a file pending for upload.\r\n     */\r\n    ContainerItemStatus[ContainerItemStatus[\"PendingUpload\"] = 2] = \"PendingUpload\";\r\n})(ContainerItemStatus = exports.ContainerItemStatus || (exports.ContainerItemStatus = {}));\r\n/**\r\n * Type of a container item.\r\n */\r\nvar ContainerItemType;\r\n(function (ContainerItemType) {\r\n    /**\r\n     * Any item type.\r\n     */\r\n    ContainerItemType[ContainerItemType[\"Any\"] = 0] = \"Any\";\r\n    /**\r\n     * Item is a folder which can have child items.\r\n     */\r\n    ContainerItemType[ContainerItemType[\"Folder\"] = 1] = \"Folder\";\r\n    /**\r\n     * Item is a file which is stored in the file service.\r\n     */\r\n    ContainerItemType[ContainerItemType[\"File\"] = 2] = \"File\";\r\n})(ContainerItemType = exports.ContainerItemType || (exports.ContainerItemType = {}));\r\n/**\r\n * Options a container can have.\r\n */\r\nvar ContainerOptions;\r\n(function (ContainerOptions) {\r\n    /**\r\n     * No option.\r\n     */\r\n    ContainerOptions[ContainerOptions[\"None\"] = 0] = \"None\";\r\n})(ContainerOptions = exports.ContainerOptions || (exports.ContainerOptions = {}));\r\nexports.TypeInfo = {\r\n    BlobCompressionType: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"gZip\": 1\r\n        }\r\n    },\r\n    ContainerItemBlobReference: {},\r\n    ContainerItemStatus: {\r\n        enumValues: {\r\n            \"created\": 1,\r\n            \"pendingUpload\": 2\r\n        }\r\n    },\r\n    ContainerItemType: {\r\n        enumValues: {\r\n            \"any\": 0,\r\n            \"folder\": 1,\r\n            \"file\": 2\r\n        }\r\n    },\r\n    ContainerOptions: {\r\n        enumValues: {\r\n            \"none\": 0\r\n        }\r\n    },\r\n    FileContainer: {},\r\n    FileContainerItem: {},\r\n};\r\nexports.TypeInfo.ContainerItemBlobReference.fields = {\r\n    compressionType: {\r\n        enumType: exports.TypeInfo.BlobCompressionType\r\n    }\r\n};\r\nexports.TypeInfo.FileContainer.fields = {\r\n    dateCreated: {\r\n        isDate: true,\r\n    },\r\n    options: {\r\n        enumType: exports.TypeInfo.ContainerOptions\r\n    }\r\n};\r\nexports.TypeInfo.FileContainerItem.fields = {\r\n    blobMetadata: {\r\n        typeInfo: exports.TypeInfo.ContainerItemBlobReference\r\n    },\r\n    dateCreated: {\r\n        isDate: true,\r\n    },\r\n    dateLastModified: {\r\n        isDate: true,\r\n    },\r\n    itemType: {\r\n        enumType: exports.TypeInfo.ContainerItemType\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.ContainerItemStatus\r\n    }\r\n};\r\n","/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * How the acquisition is assigned\r\n */\r\nvar AcquisitionAssignmentType;\r\n(function (AcquisitionAssignmentType) {\r\n    AcquisitionAssignmentType[AcquisitionAssignmentType[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Just assign for me\r\n     */\r\n    AcquisitionAssignmentType[AcquisitionAssignmentType[\"Me\"] = 1] = \"Me\";\r\n    /**\r\n     * Assign for all users in the account\r\n     */\r\n    AcquisitionAssignmentType[AcquisitionAssignmentType[\"All\"] = 2] = \"All\";\r\n})(AcquisitionAssignmentType = exports.AcquisitionAssignmentType || (exports.AcquisitionAssignmentType = {}));\r\nvar AcquisitionOperationState;\r\n(function (AcquisitionOperationState) {\r\n    /**\r\n     * Not allowed to use this AcquisitionOperation\r\n     */\r\n    AcquisitionOperationState[AcquisitionOperationState[\"Disallow\"] = 0] = \"Disallow\";\r\n    /**\r\n     * Allowed to use this AcquisitionOperation\r\n     */\r\n    AcquisitionOperationState[AcquisitionOperationState[\"Allow\"] = 1] = \"Allow\";\r\n    /**\r\n     * Operation has already been completed and is no longer available\r\n     */\r\n    AcquisitionOperationState[AcquisitionOperationState[\"Completed\"] = 3] = \"Completed\";\r\n})(AcquisitionOperationState = exports.AcquisitionOperationState || (exports.AcquisitionOperationState = {}));\r\n/**\r\n * Set of different types of operations that can be requested.\r\n */\r\nvar AcquisitionOperationType;\r\n(function (AcquisitionOperationType) {\r\n    /**\r\n     * Not yet used\r\n     */\r\n    AcquisitionOperationType[AcquisitionOperationType[\"Get\"] = 0] = \"Get\";\r\n    /**\r\n     * Install this extension into the host provided\r\n     */\r\n    AcquisitionOperationType[AcquisitionOperationType[\"Install\"] = 1] = \"Install\";\r\n    /**\r\n     * Buy licenses for this extension and install into the host provided\r\n     */\r\n    AcquisitionOperationType[AcquisitionOperationType[\"Buy\"] = 2] = \"Buy\";\r\n    /**\r\n     * Try this extension\r\n     */\r\n    AcquisitionOperationType[AcquisitionOperationType[\"Try\"] = 3] = \"Try\";\r\n    /**\r\n     * Request this extension for installation\r\n     */\r\n    AcquisitionOperationType[AcquisitionOperationType[\"Request\"] = 4] = \"Request\";\r\n    /**\r\n     * No action found\r\n     */\r\n    AcquisitionOperationType[AcquisitionOperationType[\"None\"] = 5] = \"None\";\r\n    /**\r\n     * Request admins for purchasing extension\r\n     */\r\n    AcquisitionOperationType[AcquisitionOperationType[\"PurchaseRequest\"] = 6] = \"PurchaseRequest\";\r\n})(AcquisitionOperationType = exports.AcquisitionOperationType || (exports.AcquisitionOperationType = {}));\r\nvar ConcernCategory;\r\n(function (ConcernCategory) {\r\n    ConcernCategory[ConcernCategory[\"General\"] = 1] = \"General\";\r\n    ConcernCategory[ConcernCategory[\"Abusive\"] = 2] = \"Abusive\";\r\n    ConcernCategory[ConcernCategory[\"Spam\"] = 4] = \"Spam\";\r\n})(ConcernCategory = exports.ConcernCategory || (exports.ConcernCategory = {}));\r\nvar DraftPatchOperation;\r\n(function (DraftPatchOperation) {\r\n    DraftPatchOperation[DraftPatchOperation[\"Publish\"] = 1] = \"Publish\";\r\n    DraftPatchOperation[DraftPatchOperation[\"Cancel\"] = 2] = \"Cancel\";\r\n})(DraftPatchOperation = exports.DraftPatchOperation || (exports.DraftPatchOperation = {}));\r\nvar DraftStateType;\r\n(function (DraftStateType) {\r\n    DraftStateType[DraftStateType[\"Unpublished\"] = 1] = \"Unpublished\";\r\n    DraftStateType[DraftStateType[\"Published\"] = 2] = \"Published\";\r\n    DraftStateType[DraftStateType[\"Cancelled\"] = 3] = \"Cancelled\";\r\n    DraftStateType[DraftStateType[\"Error\"] = 4] = \"Error\";\r\n})(DraftStateType = exports.DraftStateType || (exports.DraftStateType = {}));\r\nvar ExtensionDeploymentTechnology;\r\n(function (ExtensionDeploymentTechnology) {\r\n    ExtensionDeploymentTechnology[ExtensionDeploymentTechnology[\"Exe\"] = 1] = \"Exe\";\r\n    ExtensionDeploymentTechnology[ExtensionDeploymentTechnology[\"Msi\"] = 2] = \"Msi\";\r\n    ExtensionDeploymentTechnology[ExtensionDeploymentTechnology[\"Vsix\"] = 3] = \"Vsix\";\r\n    ExtensionDeploymentTechnology[ExtensionDeploymentTechnology[\"ReferralLink\"] = 4] = \"ReferralLink\";\r\n})(ExtensionDeploymentTechnology = exports.ExtensionDeploymentTechnology || (exports.ExtensionDeploymentTechnology = {}));\r\n/**\r\n * Type of event\r\n */\r\nvar ExtensionLifecycleEventType;\r\n(function (ExtensionLifecycleEventType) {\r\n    ExtensionLifecycleEventType[ExtensionLifecycleEventType[\"Uninstall\"] = 1] = \"Uninstall\";\r\n    ExtensionLifecycleEventType[ExtensionLifecycleEventType[\"Install\"] = 2] = \"Install\";\r\n    ExtensionLifecycleEventType[ExtensionLifecycleEventType[\"Review\"] = 3] = \"Review\";\r\n    ExtensionLifecycleEventType[ExtensionLifecycleEventType[\"Acquisition\"] = 4] = \"Acquisition\";\r\n    ExtensionLifecycleEventType[ExtensionLifecycleEventType[\"Sales\"] = 5] = \"Sales\";\r\n    ExtensionLifecycleEventType[ExtensionLifecycleEventType[\"Other\"] = 999] = \"Other\";\r\n})(ExtensionLifecycleEventType = exports.ExtensionLifecycleEventType || (exports.ExtensionLifecycleEventType = {}));\r\n/**\r\n * Set of flags that can be associated with a given permission over an extension\r\n */\r\nvar ExtensionPolicyFlags;\r\n(function (ExtensionPolicyFlags) {\r\n    /**\r\n     * No permission\r\n     */\r\n    ExtensionPolicyFlags[ExtensionPolicyFlags[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Permission on private extensions\r\n     */\r\n    ExtensionPolicyFlags[ExtensionPolicyFlags[\"Private\"] = 1] = \"Private\";\r\n    /**\r\n     * Permission on public extensions\r\n     */\r\n    ExtensionPolicyFlags[ExtensionPolicyFlags[\"Public\"] = 2] = \"Public\";\r\n    /**\r\n     * Permission in extensions that are in preview\r\n     */\r\n    ExtensionPolicyFlags[ExtensionPolicyFlags[\"Preview\"] = 4] = \"Preview\";\r\n    /**\r\n     * Permission in released extensions\r\n     */\r\n    ExtensionPolicyFlags[ExtensionPolicyFlags[\"Released\"] = 8] = \"Released\";\r\n    /**\r\n     * Permission in 1st party extensions\r\n     */\r\n    ExtensionPolicyFlags[ExtensionPolicyFlags[\"FirstParty\"] = 16] = \"FirstParty\";\r\n    /**\r\n     * Mask that defines all permissions\r\n     */\r\n    ExtensionPolicyFlags[ExtensionPolicyFlags[\"All\"] = 31] = \"All\";\r\n})(ExtensionPolicyFlags = exports.ExtensionPolicyFlags || (exports.ExtensionPolicyFlags = {}));\r\n/**\r\n * Type of extension filters that are supported in the queries.\r\n */\r\nvar ExtensionQueryFilterType;\r\n(function (ExtensionQueryFilterType) {\r\n    /**\r\n     * The values are used as tags. All tags are treated as \"OR\" conditions with each other. There may be some value put on the number of matched tags from the query.\r\n     */\r\n    ExtensionQueryFilterType[ExtensionQueryFilterType[\"Tag\"] = 1] = \"Tag\";\r\n    /**\r\n     * The Values are an ExtensionName or fragment that is used to match other extension names.\r\n     */\r\n    ExtensionQueryFilterType[ExtensionQueryFilterType[\"DisplayName\"] = 2] = \"DisplayName\";\r\n    /**\r\n     * The Filter is one or more tokens that define what scope to return private extensions for.\r\n     */\r\n    ExtensionQueryFilterType[ExtensionQueryFilterType[\"Private\"] = 3] = \"Private\";\r\n    /**\r\n     * Retrieve a set of extensions based on their id's. The values should be the extension id's encoded as strings.\r\n     */\r\n    ExtensionQueryFilterType[ExtensionQueryFilterType[\"Id\"] = 4] = \"Id\";\r\n    /**\r\n     * The category is unlike other filters. It is AND'd with the other filters instead of being a separate query.\r\n     */\r\n    ExtensionQueryFilterType[ExtensionQueryFilterType[\"Category\"] = 5] = \"Category\";\r\n    /**\r\n     * Certain contribution types may be indexed to allow for query by type. User defined types can't be indexed at the moment.\r\n     */\r\n    ExtensionQueryFilterType[ExtensionQueryFilterType[\"ContributionType\"] = 6] = \"ContributionType\";\r\n    /**\r\n     * Retrieve an set extension based on the name based identifier. This differs from the internal id (which is being deprecated).\r\n     */\r\n    ExtensionQueryFilterType[ExtensionQueryFilterType[\"Name\"] = 7] = \"Name\";\r\n    /**\r\n     * The InstallationTarget for an extension defines the target consumer for the extension. This may be something like VS, VSOnline, or VSCode\r\n     */\r\n    ExtensionQueryFilterType[ExtensionQueryFilterType[\"InstallationTarget\"] = 8] = \"InstallationTarget\";\r\n    /**\r\n     * Query for featured extensions, no value is allowed when using the query type.\r\n     */\r\n    ExtensionQueryFilterType[ExtensionQueryFilterType[\"Featured\"] = 9] = \"Featured\";\r\n    /**\r\n     * The SearchText provided by the user to search for extensions\r\n     */\r\n    ExtensionQueryFilterType[ExtensionQueryFilterType[\"SearchText\"] = 10] = \"SearchText\";\r\n    /**\r\n     * Query for extensions that are featured in their own category, The filterValue for this is name of category of extensions.\r\n     */\r\n    ExtensionQueryFilterType[ExtensionQueryFilterType[\"FeaturedInCategory\"] = 11] = \"FeaturedInCategory\";\r\n    /**\r\n     * When retrieving extensions from a query, exclude the extensions which are having the given flags. The value specified for this filter should be a string representing the integer values of the flags to be excluded. In case of multiple flags to be specified, a logical OR of the interger values should be given as value for this filter This should be at most one filter of this type. This only acts as a restrictive filter after. In case of having a particular flag in both IncludeWithFlags and ExcludeWithFlags, excludeFlags will remove the included extensions giving empty result for that flag.\r\n     */\r\n    ExtensionQueryFilterType[ExtensionQueryFilterType[\"ExcludeWithFlags\"] = 12] = \"ExcludeWithFlags\";\r\n    /**\r\n     * When retrieving extensions from a query, include the extensions which are having the given flags. The value specified for this filter should be a string representing the integer values of the flags to be included. In case of multiple flags to be specified, a logical OR of the integer values should be given as value for this filter This should be at most one filter of this type. This only acts as a restrictive filter after. In case of having a particular flag in both IncludeWithFlags and ExcludeWithFlags, excludeFlags will remove the included extensions giving empty result for that flag. In case of multiple flags given in IncludeWithFlags in ORed fashion, extensions having any of the given flags will be included.\r\n     */\r\n    ExtensionQueryFilterType[ExtensionQueryFilterType[\"IncludeWithFlags\"] = 13] = \"IncludeWithFlags\";\r\n    /**\r\n     * Filter the extensions based on the LCID values applicable. Any extensions which are not having any LCID values will also be filtered. This is currently only supported for VS extensions.\r\n     */\r\n    ExtensionQueryFilterType[ExtensionQueryFilterType[\"Lcid\"] = 14] = \"Lcid\";\r\n    /**\r\n     * Filter to provide the version of the installation target. This filter will be used along with InstallationTarget filter. The value should be a valid version string. Currently supported only if search text is provided.\r\n     */\r\n    ExtensionQueryFilterType[ExtensionQueryFilterType[\"InstallationTargetVersion\"] = 15] = \"InstallationTargetVersion\";\r\n    /**\r\n     * Filter type for specifying a range of installation target version. The filter will be used along with InstallationTarget filter. The value should be a pair of well formed version values separated by hyphen(-). Currently supported only if search text is provided.\r\n     */\r\n    ExtensionQueryFilterType[ExtensionQueryFilterType[\"InstallationTargetVersionRange\"] = 16] = \"InstallationTargetVersionRange\";\r\n    /**\r\n     * Filter type for specifying metadata key and value to be used for filtering.\r\n     */\r\n    ExtensionQueryFilterType[ExtensionQueryFilterType[\"VsixMetadata\"] = 17] = \"VsixMetadata\";\r\n    /**\r\n     * Filter to get extensions published by a publisher having supplied internal name\r\n     */\r\n    ExtensionQueryFilterType[ExtensionQueryFilterType[\"PublisherName\"] = 18] = \"PublisherName\";\r\n    /**\r\n     * Filter to get extensions published by all publishers having supplied display name\r\n     */\r\n    ExtensionQueryFilterType[ExtensionQueryFilterType[\"PublisherDisplayName\"] = 19] = \"PublisherDisplayName\";\r\n    /**\r\n     * When retrieving extensions from a query, include the extensions which have a publisher having the given flags. The value specified for this filter should be a string representing the integer values of the flags to be included. In case of multiple flags to be specified, a logical OR of the integer values should be given as value for this filter There should be at most one filter of this type. This only acts as a restrictive filter after. In case of multiple flags given in IncludeWithFlags in ORed fashion, extensions having any of the given flags will be included.\r\n     */\r\n    ExtensionQueryFilterType[ExtensionQueryFilterType[\"IncludeWithPublisherFlags\"] = 20] = \"IncludeWithPublisherFlags\";\r\n    /**\r\n     * Filter to get extensions shared with particular organization\r\n     */\r\n    ExtensionQueryFilterType[ExtensionQueryFilterType[\"OrganizationSharedWith\"] = 21] = \"OrganizationSharedWith\";\r\n    /**\r\n     * Filter to get VS IDE extensions by Product Architecture\r\n     */\r\n    ExtensionQueryFilterType[ExtensionQueryFilterType[\"ProductArchitecture\"] = 22] = \"ProductArchitecture\";\r\n    /**\r\n     * Filter to get VS Code extensions by target platform.\r\n     */\r\n    ExtensionQueryFilterType[ExtensionQueryFilterType[\"TargetPlatform\"] = 23] = \"TargetPlatform\";\r\n    /**\r\n     * Retrieve an extension based on the extensionName.\r\n     */\r\n    ExtensionQueryFilterType[ExtensionQueryFilterType[\"ExtensionName\"] = 24] = \"ExtensionName\";\r\n})(ExtensionQueryFilterType = exports.ExtensionQueryFilterType || (exports.ExtensionQueryFilterType = {}));\r\n/**\r\n * Set of flags used to determine which set of information is retrieved when reading published extensions\r\n */\r\nvar ExtensionQueryFlags;\r\n(function (ExtensionQueryFlags) {\r\n    /**\r\n     * None is used to retrieve only the basic extension details.\r\n     */\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * IncludeVersions will return version information for extensions returned\r\n     */\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"IncludeVersions\"] = 1] = \"IncludeVersions\";\r\n    /**\r\n     * IncludeFiles will return information about which files were found within the extension that were stored independent of the manifest. When asking for files, versions will be included as well since files are returned as a property of the versions.  These files can be retrieved using the path to the file without requiring the entire manifest be downloaded.\r\n     */\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"IncludeFiles\"] = 2] = \"IncludeFiles\";\r\n    /**\r\n     * Include the Categories and Tags that were added to the extension definition.\r\n     */\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"IncludeCategoryAndTags\"] = 4] = \"IncludeCategoryAndTags\";\r\n    /**\r\n     * Include the details about which accounts the extension has been shared with if the extension is a private extension.\r\n     */\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"IncludeSharedAccounts\"] = 8] = \"IncludeSharedAccounts\";\r\n    /**\r\n     * Include properties associated with versions of the extension\r\n     */\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"IncludeVersionProperties\"] = 16] = \"IncludeVersionProperties\";\r\n    /**\r\n     * Excluding non-validated extensions will remove any extension versions that either are in the process of being validated or have failed validation.\r\n     */\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"ExcludeNonValidated\"] = 32] = \"ExcludeNonValidated\";\r\n    /**\r\n     * Include the set of installation targets the extension has requested.\r\n     */\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"IncludeInstallationTargets\"] = 64] = \"IncludeInstallationTargets\";\r\n    /**\r\n     * Include the base uri for assets of this extension\r\n     */\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"IncludeAssetUri\"] = 128] = \"IncludeAssetUri\";\r\n    /**\r\n     * Include the statistics associated with this extension\r\n     */\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"IncludeStatistics\"] = 256] = \"IncludeStatistics\";\r\n    /**\r\n     * When retrieving versions from a query, only include the latest version of the extensions that matched. This is useful when the caller doesn't need all the published versions. It will save a significant size in the returned payload.\r\n     */\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"IncludeLatestVersionOnly\"] = 512] = \"IncludeLatestVersionOnly\";\r\n    /**\r\n     * This flag switches the asset uri to use GetAssetByName instead of CDN When this is used, values of base asset uri and base asset uri fallback are switched When this is used, source of asset files are pointed to Gallery service always even if CDN is available\r\n     */\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"UseFallbackAssetUri\"] = 1024] = \"UseFallbackAssetUri\";\r\n    /**\r\n     * This flag is used to get all the metadata values associated with the extension. This is not applicable to VSTS or VSCode extensions and usage is only internal.\r\n     */\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"IncludeMetadata\"] = 2048] = \"IncludeMetadata\";\r\n    /**\r\n     * This flag is used to indicate to return very small data for extension required by VS IDE. This flag is only compatible when querying is done by VS IDE\r\n     */\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"IncludeMinimalPayloadForVsIde\"] = 4096] = \"IncludeMinimalPayloadForVsIde\";\r\n    /**\r\n     * This flag is used to get Lcid values associated with the extension. This is not applicable to VSTS or VSCode extensions and usage is only internal\r\n     */\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"IncludeLcids\"] = 8192] = \"IncludeLcids\";\r\n    /**\r\n     * Include the details about which organizations the extension has been shared with if the extension is a private extension.\r\n     */\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"IncludeSharedOrganizations\"] = 16384] = \"IncludeSharedOrganizations\";\r\n    /**\r\n     * Include the details if an extension is in conflict list or not Currently being used for VSCode extensions.\r\n     */\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"IncludeNameConflictInfo\"] = 32768] = \"IncludeNameConflictInfo\";\r\n    /**\r\n     * AllAttributes is designed to be a mask that defines all sub-elements of the extension should be returned.  NOTE: This is not actually All flags. This is now locked to the set defined since changing this enum would be a breaking change and would change the behavior of anyone using it. Try not to use this value when making calls to the service, instead be explicit about the options required.\r\n     */\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"AllAttributes\"] = 16863] = \"AllAttributes\";\r\n    /**\r\n     * Excluding unpublished extensions from acquisition flow. The flag indicates whether an extension is unpublished or locked.\r\n     */\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"ExcludeUnpublished1\"] = 4356] = \"ExcludeUnpublished1\";\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"ExcludeUnpublished2\"] = 4372] = \"ExcludeUnpublished2\";\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"ExcludeUnpublished3\"] = 6404] = \"ExcludeUnpublished3\";\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"ExcludeUnpublished4\"] = 6420] = \"ExcludeUnpublished4\";\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"ExcludeUnpublished5\"] = 8196] = \"ExcludeUnpublished5\";\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"ExcludeUnpublished6\"] = 20740] = \"ExcludeUnpublished6\";\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"ExcludeUnpublished7\"] = 20756] = \"ExcludeUnpublished7\";\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"ExcludeUnpublished8\"] = 22788] = \"ExcludeUnpublished8\";\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"ExcludeUnpublished9\"] = 22804] = \"ExcludeUnpublished9\";\r\n    ExtensionQueryFlags[ExtensionQueryFlags[\"ExcludeUnpublished10\"] = 37124] = \"ExcludeUnpublished10\";\r\n})(ExtensionQueryFlags = exports.ExtensionQueryFlags || (exports.ExtensionQueryFlags = {}));\r\nvar ExtensionStatisticOperation;\r\n(function (ExtensionStatisticOperation) {\r\n    ExtensionStatisticOperation[ExtensionStatisticOperation[\"None\"] = 0] = \"None\";\r\n    ExtensionStatisticOperation[ExtensionStatisticOperation[\"Set\"] = 1] = \"Set\";\r\n    ExtensionStatisticOperation[ExtensionStatisticOperation[\"Increment\"] = 2] = \"Increment\";\r\n    ExtensionStatisticOperation[ExtensionStatisticOperation[\"Decrement\"] = 3] = \"Decrement\";\r\n    ExtensionStatisticOperation[ExtensionStatisticOperation[\"Delete\"] = 4] = \"Delete\";\r\n})(ExtensionStatisticOperation = exports.ExtensionStatisticOperation || (exports.ExtensionStatisticOperation = {}));\r\n/**\r\n * Stats aggregation type\r\n */\r\nvar ExtensionStatsAggregateType;\r\n(function (ExtensionStatsAggregateType) {\r\n    ExtensionStatsAggregateType[ExtensionStatsAggregateType[\"Daily\"] = 1] = \"Daily\";\r\n})(ExtensionStatsAggregateType = exports.ExtensionStatsAggregateType || (exports.ExtensionStatsAggregateType = {}));\r\n/**\r\n * Set of flags that can be associated with a given extension version. These flags apply to a specific version of the extension.\r\n */\r\nvar ExtensionVersionFlags;\r\n(function (ExtensionVersionFlags) {\r\n    /**\r\n     * No flags exist for this version.\r\n     */\r\n    ExtensionVersionFlags[ExtensionVersionFlags[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * The Validated flag for a version means the extension version has passed validation and can be used..\r\n     */\r\n    ExtensionVersionFlags[ExtensionVersionFlags[\"Validated\"] = 1] = \"Validated\";\r\n})(ExtensionVersionFlags = exports.ExtensionVersionFlags || (exports.ExtensionVersionFlags = {}));\r\n/**\r\n * Type of event\r\n */\r\nvar NotificationTemplateType;\r\n(function (NotificationTemplateType) {\r\n    /**\r\n     * Template type for Review Notification.\r\n     */\r\n    NotificationTemplateType[NotificationTemplateType[\"ReviewNotification\"] = 1] = \"ReviewNotification\";\r\n    /**\r\n     * Template type for Qna Notification.\r\n     */\r\n    NotificationTemplateType[NotificationTemplateType[\"QnaNotification\"] = 2] = \"QnaNotification\";\r\n    /**\r\n     * Template type for Customer Contact Notification.\r\n     */\r\n    NotificationTemplateType[NotificationTemplateType[\"CustomerContactNotification\"] = 3] = \"CustomerContactNotification\";\r\n    /**\r\n     * Template type for Publisher Member Notification.\r\n     */\r\n    NotificationTemplateType[NotificationTemplateType[\"PublisherMemberUpdateNotification\"] = 4] = \"PublisherMemberUpdateNotification\";\r\n})(NotificationTemplateType = exports.NotificationTemplateType || (exports.NotificationTemplateType = {}));\r\n/**\r\n * PagingDirection is used to define which set direction to move the returned result set based on a previous query.\r\n */\r\nvar PagingDirection;\r\n(function (PagingDirection) {\r\n    /**\r\n     * Backward will return results from earlier in the resultset.\r\n     */\r\n    PagingDirection[PagingDirection[\"Backward\"] = 1] = \"Backward\";\r\n    /**\r\n     * Forward will return results from later in the resultset.\r\n     */\r\n    PagingDirection[PagingDirection[\"Forward\"] = 2] = \"Forward\";\r\n})(PagingDirection = exports.PagingDirection || (exports.PagingDirection = {}));\r\n/**\r\n * Set of flags that can be associated with a given extension. These flags apply to all versions of the extension and not to a specific version.\r\n */\r\nvar PublishedExtensionFlags;\r\n(function (PublishedExtensionFlags) {\r\n    /**\r\n     * No flags exist for this extension.\r\n     */\r\n    PublishedExtensionFlags[PublishedExtensionFlags[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * The Disabled flag for an extension means the extension can't be changed and won't be used by consumers. The disabled flag is managed by the service and can't be supplied by the Extension Developers.\r\n     */\r\n    PublishedExtensionFlags[PublishedExtensionFlags[\"Disabled\"] = 1] = \"Disabled\";\r\n    /**\r\n     * BuiltIn Extension are available to all Tenants. An explicit registration is not required. This attribute is reserved and can't be supplied by Extension Developers.  BuiltIn extensions are by definition Public. There is no need to set the public flag for extensions marked BuiltIn.\r\n     */\r\n    PublishedExtensionFlags[PublishedExtensionFlags[\"BuiltIn\"] = 2] = \"BuiltIn\";\r\n    /**\r\n     * This extension has been validated by the service. The extension meets the requirements specified. This attribute is reserved and can't be supplied by the Extension Developers. Validation is a process that ensures that all contributions are well formed. They meet the requirements defined by the contribution type they are extending. Note this attribute will be updated asynchronously as the extension is validated by the developer of the contribution type. There will be restricted access to the extension while this process is performed.\r\n     */\r\n    PublishedExtensionFlags[PublishedExtensionFlags[\"Validated\"] = 4] = \"Validated\";\r\n    /**\r\n     * Trusted extensions are ones that are given special capabilities. These tend to come from Microsoft and can't be published by the general public.  Note: BuiltIn extensions are always trusted.\r\n     */\r\n    PublishedExtensionFlags[PublishedExtensionFlags[\"Trusted\"] = 8] = \"Trusted\";\r\n    /**\r\n     * The Paid flag indicates that the commerce can be enabled for this extension. Publisher needs to setup Offer/Pricing plan in Azure. If Paid flag is set and a corresponding Offer is not available, the extension will automatically be marked as Preview. If the publisher intends to make the extension Paid in the future, it is mandatory to set the Preview flag. This is currently available only for VSTS extensions only.\r\n     */\r\n    PublishedExtensionFlags[PublishedExtensionFlags[\"Paid\"] = 16] = \"Paid\";\r\n    /**\r\n     * This extension registration is public, making its visibility open to the public. This means all tenants have the ability to install this extension. Without this flag the extension will be private and will need to be shared with the tenants that can install it.\r\n     */\r\n    PublishedExtensionFlags[PublishedExtensionFlags[\"Public\"] = 256] = \"Public\";\r\n    /**\r\n     * This extension has multiple versions active at one time and version discovery should be done using the defined \"Version Discovery\" protocol to determine the version available to a specific user or tenant.  @TODO: Link to Version Discovery Protocol.\r\n     */\r\n    PublishedExtensionFlags[PublishedExtensionFlags[\"MultiVersion\"] = 512] = \"MultiVersion\";\r\n    /**\r\n     * The system flag is reserved, and cant be used by publishers.\r\n     */\r\n    PublishedExtensionFlags[PublishedExtensionFlags[\"System\"] = 1024] = \"System\";\r\n    /**\r\n     * The Preview flag indicates that the extension is still under preview (not yet of \"release\" quality). These extensions may be decorated differently in the gallery and may have different policies applied to them.\r\n     */\r\n    PublishedExtensionFlags[PublishedExtensionFlags[\"Preview\"] = 2048] = \"Preview\";\r\n    /**\r\n     * The Unpublished flag indicates that the extension can't be installed/downloaded. Users who have installed such an extension can continue to use the extension.\r\n     */\r\n    PublishedExtensionFlags[PublishedExtensionFlags[\"Unpublished\"] = 4096] = \"Unpublished\";\r\n    /**\r\n     * The Trial flag indicates that the extension is in Trial version. The flag is right now being used only with respect to Visual Studio extensions.\r\n     */\r\n    PublishedExtensionFlags[PublishedExtensionFlags[\"Trial\"] = 8192] = \"Trial\";\r\n    /**\r\n     * The Locked flag indicates that extension has been locked from Marketplace. Further updates/acquisitions are not allowed on the extension until this is present. This should be used along with making the extension private/unpublished.\r\n     */\r\n    PublishedExtensionFlags[PublishedExtensionFlags[\"Locked\"] = 16384] = \"Locked\";\r\n    /**\r\n     * This flag is set for extensions we want to hide from Marketplace home and search pages. This will be used to override the exposure of builtIn flags.\r\n     */\r\n    PublishedExtensionFlags[PublishedExtensionFlags[\"Hidden\"] = 32768] = \"Hidden\";\r\n})(PublishedExtensionFlags = exports.PublishedExtensionFlags || (exports.PublishedExtensionFlags = {}));\r\nvar PublisherFlags;\r\n(function (PublisherFlags) {\r\n    /**\r\n     * This should never be returned, it is used to represent a publisher who's flags haven't changed during update calls.\r\n     */\r\n    PublisherFlags[PublisherFlags[\"UnChanged\"] = 1073741824] = \"UnChanged\";\r\n    /**\r\n     * No flags exist for this publisher.\r\n     */\r\n    PublisherFlags[PublisherFlags[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * The Disabled flag for a publisher means the publisher can't be changed and won't be used by consumers, this extends to extensions owned by the publisher as well. The disabled flag is managed by the service and can't be supplied by the Extension Developers.\r\n     */\r\n    PublisherFlags[PublisherFlags[\"Disabled\"] = 1] = \"Disabled\";\r\n    /**\r\n     * A verified publisher is one that Microsoft has done some review of and ensured the publisher meets a set of requirements. The requirements to become a verified publisher are not listed here.  They can be found in public documentation (TBD).\r\n     */\r\n    PublisherFlags[PublisherFlags[\"Verified\"] = 2] = \"Verified\";\r\n    /**\r\n     * A Certified publisher is one that is Microsoft verified and in addition meets a set of requirements for its published extensions. The requirements to become a certified publisher are not listed here.  They can be found in public documentation (TBD).\r\n     */\r\n    PublisherFlags[PublisherFlags[\"Certified\"] = 4] = \"Certified\";\r\n    /**\r\n     * This is the set of flags that can't be supplied by the developer and is managed by the service itself.\r\n     */\r\n    PublisherFlags[PublisherFlags[\"ServiceFlags\"] = 7] = \"ServiceFlags\";\r\n})(PublisherFlags = exports.PublisherFlags || (exports.PublisherFlags = {}));\r\nvar PublisherPermissions;\r\n(function (PublisherPermissions) {\r\n    /**\r\n     * This gives the bearer the rights to read Publishers and Extensions.\r\n     */\r\n    PublisherPermissions[PublisherPermissions[\"Read\"] = 1] = \"Read\";\r\n    /**\r\n     * This gives the bearer the rights to update, delete, and share Extensions (but not the ability to create them).\r\n     */\r\n    PublisherPermissions[PublisherPermissions[\"UpdateExtension\"] = 2] = \"UpdateExtension\";\r\n    /**\r\n     * This gives the bearer the rights to create new Publishers at the root of the namespace.\r\n     */\r\n    PublisherPermissions[PublisherPermissions[\"CreatePublisher\"] = 4] = \"CreatePublisher\";\r\n    /**\r\n     * This gives the bearer the rights to create new Extensions within a publisher.\r\n     */\r\n    PublisherPermissions[PublisherPermissions[\"PublishExtension\"] = 8] = \"PublishExtension\";\r\n    /**\r\n     * Admin gives the bearer the rights to manage restricted attributes of Publishers and Extensions.\r\n     */\r\n    PublisherPermissions[PublisherPermissions[\"Admin\"] = 16] = \"Admin\";\r\n    /**\r\n     * TrustedPartner gives the bearer the rights to publish a extensions with restricted capabilities.\r\n     */\r\n    PublisherPermissions[PublisherPermissions[\"TrustedPartner\"] = 32] = \"TrustedPartner\";\r\n    /**\r\n     * PrivateRead is another form of read designed to allow higher privilege accessors the ability to read private extensions.\r\n     */\r\n    PublisherPermissions[PublisherPermissions[\"PrivateRead\"] = 64] = \"PrivateRead\";\r\n    /**\r\n     * This gives the bearer the rights to delete any extension.\r\n     */\r\n    PublisherPermissions[PublisherPermissions[\"DeleteExtension\"] = 128] = \"DeleteExtension\";\r\n    /**\r\n     * This gives the bearer the rights edit the publisher settings.\r\n     */\r\n    PublisherPermissions[PublisherPermissions[\"EditSettings\"] = 256] = \"EditSettings\";\r\n    /**\r\n     * This gives the bearer the rights to see all permissions on the publisher.\r\n     */\r\n    PublisherPermissions[PublisherPermissions[\"ViewPermissions\"] = 512] = \"ViewPermissions\";\r\n    /**\r\n     * This gives the bearer the rights to assign permissions on the publisher.\r\n     */\r\n    PublisherPermissions[PublisherPermissions[\"ManagePermissions\"] = 1024] = \"ManagePermissions\";\r\n    /**\r\n     * This gives the bearer the rights to delete the publisher.\r\n     */\r\n    PublisherPermissions[PublisherPermissions[\"DeletePublisher\"] = 2048] = \"DeletePublisher\";\r\n})(PublisherPermissions = exports.PublisherPermissions || (exports.PublisherPermissions = {}));\r\n/**\r\n * Set of flags used to define the attributes requested when a publisher is returned. Some API's allow the caller to specify the level of detail needed.\r\n */\r\nvar PublisherQueryFlags;\r\n(function (PublisherQueryFlags) {\r\n    /**\r\n     * None is used to retrieve only the basic publisher details.\r\n     */\r\n    PublisherQueryFlags[PublisherQueryFlags[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Is used to include a list of basic extension details for all extensions published by the requested publisher.\r\n     */\r\n    PublisherQueryFlags[PublisherQueryFlags[\"IncludeExtensions\"] = 1] = \"IncludeExtensions\";\r\n    /**\r\n     * Is used to include email address of all the users who are marked as owners for the publisher\r\n     */\r\n    PublisherQueryFlags[PublisherQueryFlags[\"IncludeEmailAddress\"] = 2] = \"IncludeEmailAddress\";\r\n})(PublisherQueryFlags = exports.PublisherQueryFlags || (exports.PublisherQueryFlags = {}));\r\n/**\r\n * Access definition for a RoleAssignment.\r\n */\r\nvar PublisherRoleAccess;\r\n(function (PublisherRoleAccess) {\r\n    /**\r\n     * Access has been explicitly set.\r\n     */\r\n    PublisherRoleAccess[PublisherRoleAccess[\"Assigned\"] = 1] = \"Assigned\";\r\n    /**\r\n     * Access has been inherited from a higher scope.\r\n     */\r\n    PublisherRoleAccess[PublisherRoleAccess[\"Inherited\"] = 2] = \"Inherited\";\r\n})(PublisherRoleAccess = exports.PublisherRoleAccess || (exports.PublisherRoleAccess = {}));\r\nvar PublisherState;\r\n(function (PublisherState) {\r\n    /**\r\n     * No state exists for this publisher.\r\n     */\r\n    PublisherState[PublisherState[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * This state indicates that publisher has applied for Marketplace verification (via UI) and still not been certified. This state would be reset once the publisher is verified.\r\n     */\r\n    PublisherState[PublisherState[\"VerificationPending\"] = 1] = \"VerificationPending\";\r\n    /**\r\n     * This state indicates that publisher has applied for Marketplace certification (via UI) and still not been certified. This state would be reset once the publisher is certified.\r\n     */\r\n    PublisherState[PublisherState[\"CertificationPending\"] = 2] = \"CertificationPending\";\r\n    /**\r\n     * This state indicates that publisher had applied for Marketplace certification (via UI) but his/her certification got rejected. This state would be reset if and when the publisher is certified.\r\n     */\r\n    PublisherState[PublisherState[\"CertificationRejected\"] = 4] = \"CertificationRejected\";\r\n    /**\r\n     * This state indicates that publisher was certified on the Marketplace, but his/her certification got revoked. This state would never be reset, even after publisher gets re-certified. It would indicate that the publisher certification was revoked at least once.\r\n     */\r\n    PublisherState[PublisherState[\"CertificationRevoked\"] = 8] = \"CertificationRevoked\";\r\n})(PublisherState = exports.PublisherState || (exports.PublisherState = {}));\r\n/**\r\n * Denotes the status of the QnA Item\r\n */\r\nvar QnAItemStatus;\r\n(function (QnAItemStatus) {\r\n    QnAItemStatus[QnAItemStatus[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * The UserEditable flag indicates whether the item is editable by the logged in user.\r\n     */\r\n    QnAItemStatus[QnAItemStatus[\"UserEditable\"] = 1] = \"UserEditable\";\r\n    /**\r\n     * The PublisherCreated flag indicates whether the item has been created by extension publisher.\r\n     */\r\n    QnAItemStatus[QnAItemStatus[\"PublisherCreated\"] = 2] = \"PublisherCreated\";\r\n})(QnAItemStatus = exports.QnAItemStatus || (exports.QnAItemStatus = {}));\r\n/**\r\n * The status of a REST Api response status.\r\n */\r\nvar RestApiResponseStatus;\r\n(function (RestApiResponseStatus) {\r\n    /**\r\n     * The operation is completed.\r\n     */\r\n    RestApiResponseStatus[RestApiResponseStatus[\"Completed\"] = 0] = \"Completed\";\r\n    /**\r\n     * The operation is failed.\r\n     */\r\n    RestApiResponseStatus[RestApiResponseStatus[\"Failed\"] = 1] = \"Failed\";\r\n    /**\r\n     * The operation is in progress.\r\n     */\r\n    RestApiResponseStatus[RestApiResponseStatus[\"Inprogress\"] = 2] = \"Inprogress\";\r\n    /**\r\n     * The operation is in skipped.\r\n     */\r\n    RestApiResponseStatus[RestApiResponseStatus[\"Skipped\"] = 3] = \"Skipped\";\r\n})(RestApiResponseStatus = exports.RestApiResponseStatus || (exports.RestApiResponseStatus = {}));\r\n/**\r\n * Type of operation\r\n */\r\nvar ReviewEventOperation;\r\n(function (ReviewEventOperation) {\r\n    ReviewEventOperation[ReviewEventOperation[\"Create\"] = 1] = \"Create\";\r\n    ReviewEventOperation[ReviewEventOperation[\"Update\"] = 2] = \"Update\";\r\n    ReviewEventOperation[ReviewEventOperation[\"Delete\"] = 3] = \"Delete\";\r\n})(ReviewEventOperation = exports.ReviewEventOperation || (exports.ReviewEventOperation = {}));\r\n/**\r\n * Options to GetReviews query\r\n */\r\nvar ReviewFilterOptions;\r\n(function (ReviewFilterOptions) {\r\n    /**\r\n     * No filtering, all reviews are returned (default option)\r\n     */\r\n    ReviewFilterOptions[ReviewFilterOptions[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Filter out review items with empty review text\r\n     */\r\n    ReviewFilterOptions[ReviewFilterOptions[\"FilterEmptyReviews\"] = 1] = \"FilterEmptyReviews\";\r\n    /**\r\n     * Filter out review items with empty usernames\r\n     */\r\n    ReviewFilterOptions[ReviewFilterOptions[\"FilterEmptyUserNames\"] = 2] = \"FilterEmptyUserNames\";\r\n})(ReviewFilterOptions = exports.ReviewFilterOptions || (exports.ReviewFilterOptions = {}));\r\n/**\r\n * Denotes the patch operation type\r\n */\r\nvar ReviewPatchOperation;\r\n(function (ReviewPatchOperation) {\r\n    /**\r\n     * Flag a review\r\n     */\r\n    ReviewPatchOperation[ReviewPatchOperation[\"FlagReview\"] = 1] = \"FlagReview\";\r\n    /**\r\n     * Update an existing review\r\n     */\r\n    ReviewPatchOperation[ReviewPatchOperation[\"UpdateReview\"] = 2] = \"UpdateReview\";\r\n    /**\r\n     * Submit a reply for a review\r\n     */\r\n    ReviewPatchOperation[ReviewPatchOperation[\"ReplyToReview\"] = 3] = \"ReplyToReview\";\r\n    /**\r\n     * Submit an admin response\r\n     */\r\n    ReviewPatchOperation[ReviewPatchOperation[\"AdminResponseForReview\"] = 4] = \"AdminResponseForReview\";\r\n    /**\r\n     * Delete an Admin Reply\r\n     */\r\n    ReviewPatchOperation[ReviewPatchOperation[\"DeleteAdminReply\"] = 5] = \"DeleteAdminReply\";\r\n    /**\r\n     * Delete Publisher Reply\r\n     */\r\n    ReviewPatchOperation[ReviewPatchOperation[\"DeletePublisherReply\"] = 6] = \"DeletePublisherReply\";\r\n})(ReviewPatchOperation = exports.ReviewPatchOperation || (exports.ReviewPatchOperation = {}));\r\n/**\r\n * Type of event\r\n */\r\nvar ReviewResourceType;\r\n(function (ReviewResourceType) {\r\n    ReviewResourceType[ReviewResourceType[\"Review\"] = 1] = \"Review\";\r\n    ReviewResourceType[ReviewResourceType[\"PublisherReply\"] = 2] = \"PublisherReply\";\r\n    ReviewResourceType[ReviewResourceType[\"AdminReply\"] = 3] = \"AdminReply\";\r\n})(ReviewResourceType = exports.ReviewResourceType || (exports.ReviewResourceType = {}));\r\n/**\r\n * Defines the sort order that can be defined for Extensions query\r\n */\r\nvar SortByType;\r\n(function (SortByType) {\r\n    /**\r\n     * The results will be sorted by relevance in case search query is given, if no search query resutls will be provided as is\r\n     */\r\n    SortByType[SortByType[\"Relevance\"] = 0] = \"Relevance\";\r\n    /**\r\n     * The results will be sorted as per Last Updated date of the extensions with recently updated at the top\r\n     */\r\n    SortByType[SortByType[\"LastUpdatedDate\"] = 1] = \"LastUpdatedDate\";\r\n    /**\r\n     * Results will be sorted Alphabetically as per the title of the extension\r\n     */\r\n    SortByType[SortByType[\"Title\"] = 2] = \"Title\";\r\n    /**\r\n     * Results will be sorted Alphabetically as per Publisher title\r\n     */\r\n    SortByType[SortByType[\"Publisher\"] = 3] = \"Publisher\";\r\n    /**\r\n     * Results will be sorted by Install Count\r\n     */\r\n    SortByType[SortByType[\"InstallCount\"] = 4] = \"InstallCount\";\r\n    /**\r\n     * The results will be sorted as per Published date of the extensions\r\n     */\r\n    SortByType[SortByType[\"PublishedDate\"] = 5] = \"PublishedDate\";\r\n    /**\r\n     * The results will be sorted as per Average ratings of the extensions\r\n     */\r\n    SortByType[SortByType[\"AverageRating\"] = 6] = \"AverageRating\";\r\n    /**\r\n     * The results will be sorted as per Trending Daily Score of the extensions\r\n     */\r\n    SortByType[SortByType[\"TrendingDaily\"] = 7] = \"TrendingDaily\";\r\n    /**\r\n     * The results will be sorted as per Trending weekly Score of the extensions\r\n     */\r\n    SortByType[SortByType[\"TrendingWeekly\"] = 8] = \"TrendingWeekly\";\r\n    /**\r\n     * The results will be sorted as per Trending monthly Score of the extensions\r\n     */\r\n    SortByType[SortByType[\"TrendingMonthly\"] = 9] = \"TrendingMonthly\";\r\n    /**\r\n     * The results will be sorted as per ReleaseDate of the extensions (date on which the extension first went public)\r\n     */\r\n    SortByType[SortByType[\"ReleaseDate\"] = 10] = \"ReleaseDate\";\r\n    /**\r\n     * The results will be sorted as per Author defined in the VSix/Metadata. If not defined, publisher name is used This is specifically needed by VS IDE, other (new and old) clients are not encouraged to use this\r\n     */\r\n    SortByType[SortByType[\"Author\"] = 11] = \"Author\";\r\n    /**\r\n     * The results will be sorted as per Weighted Rating of the extension.\r\n     */\r\n    SortByType[SortByType[\"WeightedRating\"] = 12] = \"WeightedRating\";\r\n})(SortByType = exports.SortByType || (exports.SortByType = {}));\r\n/**\r\n * Defines the sort order that can be defined for Extensions query\r\n */\r\nvar SortOrderType;\r\n(function (SortOrderType) {\r\n    /**\r\n     * Results will be sorted in the default order as per the sorting type defined. The default varies for each type, e.g. for Relevance, default is Descending, for Title default is Ascending etc.\r\n     */\r\n    SortOrderType[SortOrderType[\"Default\"] = 0] = \"Default\";\r\n    /**\r\n     * The results will be sorted in Ascending order\r\n     */\r\n    SortOrderType[SortOrderType[\"Ascending\"] = 1] = \"Ascending\";\r\n    /**\r\n     * The results will be sorted in Descending order\r\n     */\r\n    SortOrderType[SortOrderType[\"Descending\"] = 2] = \"Descending\";\r\n})(SortOrderType = exports.SortOrderType || (exports.SortOrderType = {}));\r\nvar VSCodeWebExtensionStatisicsType;\r\n(function (VSCodeWebExtensionStatisicsType) {\r\n    VSCodeWebExtensionStatisicsType[VSCodeWebExtensionStatisicsType[\"Install\"] = 1] = \"Install\";\r\n    VSCodeWebExtensionStatisicsType[VSCodeWebExtensionStatisicsType[\"Update\"] = 2] = \"Update\";\r\n    VSCodeWebExtensionStatisicsType[VSCodeWebExtensionStatisicsType[\"Uninstall\"] = 3] = \"Uninstall\";\r\n})(VSCodeWebExtensionStatisicsType = exports.VSCodeWebExtensionStatisicsType || (exports.VSCodeWebExtensionStatisicsType = {}));\r\nexports.TypeInfo = {\r\n    AcquisitionAssignmentType: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"me\": 1,\r\n            \"all\": 2\r\n        }\r\n    },\r\n    AcquisitionOperation: {},\r\n    AcquisitionOperationState: {\r\n        enumValues: {\r\n            \"disallow\": 0,\r\n            \"allow\": 1,\r\n            \"completed\": 3\r\n        }\r\n    },\r\n    AcquisitionOperationType: {\r\n        enumValues: {\r\n            \"get\": 0,\r\n            \"install\": 1,\r\n            \"buy\": 2,\r\n            \"try\": 3,\r\n            \"request\": 4,\r\n            \"none\": 5,\r\n            \"purchaseRequest\": 6\r\n        }\r\n    },\r\n    AcquisitionOptions: {},\r\n    AzureRestApiResponseModel: {},\r\n    Concern: {},\r\n    ConcernCategory: {\r\n        enumValues: {\r\n            \"general\": 1,\r\n            \"abusive\": 2,\r\n            \"spam\": 4\r\n        }\r\n    },\r\n    CustomerLastContact: {},\r\n    CustomerSupportRequest: {},\r\n    DraftPatchOperation: {\r\n        enumValues: {\r\n            \"publish\": 1,\r\n            \"cancel\": 2\r\n        }\r\n    },\r\n    DraftStateType: {\r\n        enumValues: {\r\n            \"unpublished\": 1,\r\n            \"published\": 2,\r\n            \"cancelled\": 3,\r\n            \"error\": 4\r\n        }\r\n    },\r\n    ExtensionAcquisitionRequest: {},\r\n    ExtensionDailyStat: {},\r\n    ExtensionDailyStats: {},\r\n    ExtensionDeploymentTechnology: {\r\n        enumValues: {\r\n            \"exe\": 1,\r\n            \"msi\": 2,\r\n            \"vsix\": 3,\r\n            \"referralLink\": 4\r\n        }\r\n    },\r\n    ExtensionDraft: {},\r\n    ExtensionDraftPatch: {},\r\n    ExtensionEvent: {},\r\n    ExtensionEvents: {},\r\n    ExtensionFilterResult: {},\r\n    ExtensionLifecycleEventType: {\r\n        enumValues: {\r\n            \"uninstall\": 1,\r\n            \"install\": 2,\r\n            \"review\": 3,\r\n            \"acquisition\": 4,\r\n            \"sales\": 5,\r\n            \"other\": 999\r\n        }\r\n    },\r\n    ExtensionPayload: {},\r\n    ExtensionPolicy: {},\r\n    ExtensionPolicyFlags: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"private\": 1,\r\n            \"public\": 2,\r\n            \"preview\": 4,\r\n            \"released\": 8,\r\n            \"firstParty\": 16,\r\n            \"all\": 31\r\n        }\r\n    },\r\n    ExtensionQuery: {},\r\n    ExtensionQueryFilterType: {\r\n        enumValues: {\r\n            \"tag\": 1,\r\n            \"displayName\": 2,\r\n            \"private\": 3,\r\n            \"id\": 4,\r\n            \"category\": 5,\r\n            \"contributionType\": 6,\r\n            \"name\": 7,\r\n            \"installationTarget\": 8,\r\n            \"featured\": 9,\r\n            \"searchText\": 10,\r\n            \"featuredInCategory\": 11,\r\n            \"excludeWithFlags\": 12,\r\n            \"includeWithFlags\": 13,\r\n            \"lcid\": 14,\r\n            \"installationTargetVersion\": 15,\r\n            \"installationTargetVersionRange\": 16,\r\n            \"vsixMetadata\": 17,\r\n            \"publisherName\": 18,\r\n            \"publisherDisplayName\": 19,\r\n            \"includeWithPublisherFlags\": 20,\r\n            \"organizationSharedWith\": 21,\r\n            \"productArchitecture\": 22,\r\n            \"targetPlatform\": 23,\r\n            \"extensionName\": 24\r\n        }\r\n    },\r\n    ExtensionQueryFlags: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"includeVersions\": 1,\r\n            \"includeFiles\": 2,\r\n            \"includeCategoryAndTags\": 4,\r\n            \"includeSharedAccounts\": 8,\r\n            \"includeVersionProperties\": 16,\r\n            \"excludeNonValidated\": 32,\r\n            \"includeInstallationTargets\": 64,\r\n            \"includeAssetUri\": 128,\r\n            \"includeStatistics\": 256,\r\n            \"includeLatestVersionOnly\": 512,\r\n            \"useFallbackAssetUri\": 1024,\r\n            \"includeMetadata\": 2048,\r\n            \"includeMinimalPayloadForVsIde\": 4096,\r\n            \"includeLcids\": 8192,\r\n            \"includeSharedOrganizations\": 16384,\r\n            \"includeNameConflictInfo\": 32768,\r\n            \"allAttributes\": 16863,\r\n            \"excludeUnpublished1\": 4356,\r\n            \"excludeUnpublished2\": 4372,\r\n            \"excludeUnpublished3\": 6404,\r\n            \"excludeUnpublished4\": 6420,\r\n            \"excludeUnpublished5\": 8196,\r\n            \"excludeUnpublished6\": 20740,\r\n            \"excludeUnpublished7\": 20756,\r\n            \"excludeUnpublished8\": 22788,\r\n            \"excludeUnpublished9\": 22804,\r\n            \"excludeUnpublished10\": 37124\r\n        }\r\n    },\r\n    ExtensionQueryResult: {},\r\n    ExtensionStatisticOperation: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"set\": 1,\r\n            \"increment\": 2,\r\n            \"decrement\": 3,\r\n            \"delete\": 4\r\n        }\r\n    },\r\n    ExtensionStatisticUpdate: {},\r\n    ExtensionStatsAggregateType: {\r\n        enumValues: {\r\n            \"daily\": 1\r\n        }\r\n    },\r\n    ExtensionVersion: {},\r\n    ExtensionVersionFlags: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"validated\": 1\r\n        }\r\n    },\r\n    NotificationsData: {},\r\n    NotificationTemplateType: {\r\n        enumValues: {\r\n            \"reviewNotification\": 1,\r\n            \"qnaNotification\": 2,\r\n            \"customerContactNotification\": 3,\r\n            \"publisherMemberUpdateNotification\": 4\r\n        }\r\n    },\r\n    PagingDirection: {\r\n        enumValues: {\r\n            \"backward\": 1,\r\n            \"forward\": 2\r\n        }\r\n    },\r\n    PublishedExtension: {},\r\n    PublishedExtensionFlags: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"disabled\": 1,\r\n            \"builtIn\": 2,\r\n            \"validated\": 4,\r\n            \"trusted\": 8,\r\n            \"paid\": 16,\r\n            \"public\": 256,\r\n            \"multiVersion\": 512,\r\n            \"system\": 1024,\r\n            \"preview\": 2048,\r\n            \"unpublished\": 4096,\r\n            \"trial\": 8192,\r\n            \"locked\": 16384,\r\n            \"hidden\": 32768\r\n        }\r\n    },\r\n    Publisher: {},\r\n    PublisherBase: {},\r\n    PublisherFacts: {},\r\n    PublisherFilterResult: {},\r\n    PublisherFlags: {\r\n        enumValues: {\r\n            \"unChanged\": 1073741824,\r\n            \"none\": 0,\r\n            \"disabled\": 1,\r\n            \"verified\": 2,\r\n            \"certified\": 4,\r\n            \"serviceFlags\": 7\r\n        }\r\n    },\r\n    PublisherPermissions: {\r\n        enumValues: {\r\n            \"read\": 1,\r\n            \"updateExtension\": 2,\r\n            \"createPublisher\": 4,\r\n            \"publishExtension\": 8,\r\n            \"admin\": 16,\r\n            \"trustedPartner\": 32,\r\n            \"privateRead\": 64,\r\n            \"deleteExtension\": 128,\r\n            \"editSettings\": 256,\r\n            \"viewPermissions\": 512,\r\n            \"managePermissions\": 1024,\r\n            \"deletePublisher\": 2048\r\n        }\r\n    },\r\n    PublisherQuery: {},\r\n    PublisherQueryFlags: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"includeExtensions\": 1,\r\n            \"includeEmailAddress\": 2\r\n        }\r\n    },\r\n    PublisherQueryResult: {},\r\n    PublisherRoleAccess: {\r\n        enumValues: {\r\n            \"assigned\": 1,\r\n            \"inherited\": 2\r\n        }\r\n    },\r\n    PublisherRoleAssignment: {},\r\n    PublisherState: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"verificationPending\": 1,\r\n            \"certificationPending\": 2,\r\n            \"certificationRejected\": 4,\r\n            \"certificationRevoked\": 8\r\n        }\r\n    },\r\n    QnAItem: {},\r\n    QnAItemStatus: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"userEditable\": 1,\r\n            \"publisherCreated\": 2\r\n        }\r\n    },\r\n    QueryFilter: {},\r\n    Question: {},\r\n    QuestionsResult: {},\r\n    Response: {},\r\n    RestApiResponseStatus: {\r\n        enumValues: {\r\n            \"completed\": 0,\r\n            \"failed\": 1,\r\n            \"inprogress\": 2,\r\n            \"skipped\": 3\r\n        }\r\n    },\r\n    RestApiResponseStatusModel: {},\r\n    Review: {},\r\n    ReviewEventOperation: {\r\n        enumValues: {\r\n            \"create\": 1,\r\n            \"update\": 2,\r\n            \"delete\": 3\r\n        }\r\n    },\r\n    ReviewEventProperties: {},\r\n    ReviewFilterOptions: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"filterEmptyReviews\": 1,\r\n            \"filterEmptyUserNames\": 2\r\n        }\r\n    },\r\n    ReviewPatch: {},\r\n    ReviewPatchOperation: {\r\n        enumValues: {\r\n            \"flagReview\": 1,\r\n            \"updateReview\": 2,\r\n            \"replyToReview\": 3,\r\n            \"adminResponseForReview\": 4,\r\n            \"deleteAdminReply\": 5,\r\n            \"deletePublisherReply\": 6\r\n        }\r\n    },\r\n    ReviewReply: {},\r\n    ReviewResourceType: {\r\n        enumValues: {\r\n            \"review\": 1,\r\n            \"publisherReply\": 2,\r\n            \"adminReply\": 3\r\n        }\r\n    },\r\n    ReviewsResult: {},\r\n    SortByType: {\r\n        enumValues: {\r\n            \"relevance\": 0,\r\n            \"lastUpdatedDate\": 1,\r\n            \"title\": 2,\r\n            \"publisher\": 3,\r\n            \"installCount\": 4,\r\n            \"publishedDate\": 5,\r\n            \"averageRating\": 6,\r\n            \"trendingDaily\": 7,\r\n            \"trendingWeekly\": 8,\r\n            \"trendingMonthly\": 9,\r\n            \"releaseDate\": 10,\r\n            \"author\": 11,\r\n            \"weightedRating\": 12\r\n        }\r\n    },\r\n    SortOrderType: {\r\n        enumValues: {\r\n            \"default\": 0,\r\n            \"ascending\": 1,\r\n            \"descending\": 2\r\n        }\r\n    },\r\n    UserExtensionPolicy: {},\r\n    UserReportedConcern: {},\r\n    VSCodeWebExtensionStatisicsType: {\r\n        enumValues: {\r\n            \"install\": 1,\r\n            \"update\": 2,\r\n            \"uninstall\": 3\r\n        }\r\n    },\r\n};\r\nexports.TypeInfo.AcquisitionOperation.fields = {\r\n    operationState: {\r\n        enumType: exports.TypeInfo.AcquisitionOperationState\r\n    },\r\n    operationType: {\r\n        enumType: exports.TypeInfo.AcquisitionOperationType\r\n    }\r\n};\r\nexports.TypeInfo.AcquisitionOptions.fields = {\r\n    defaultOperation: {\r\n        typeInfo: exports.TypeInfo.AcquisitionOperation\r\n    },\r\n    operations: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.AcquisitionOperation\r\n    }\r\n};\r\nexports.TypeInfo.AzureRestApiResponseModel.fields = {\r\n    operationStatus: {\r\n        typeInfo: exports.TypeInfo.RestApiResponseStatusModel\r\n    }\r\n};\r\nexports.TypeInfo.Concern.fields = {\r\n    category: {\r\n        enumType: exports.TypeInfo.ConcernCategory\r\n    },\r\n    createdDate: {\r\n        isDate: true,\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.QnAItemStatus\r\n    },\r\n    updatedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.CustomerLastContact.fields = {\r\n    lastContactDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.CustomerSupportRequest.fields = {\r\n    review: {\r\n        typeInfo: exports.TypeInfo.Review\r\n    }\r\n};\r\nexports.TypeInfo.ExtensionAcquisitionRequest.fields = {\r\n    assignmentType: {\r\n        enumType: exports.TypeInfo.AcquisitionAssignmentType\r\n    },\r\n    operationType: {\r\n        enumType: exports.TypeInfo.AcquisitionOperationType\r\n    }\r\n};\r\nexports.TypeInfo.ExtensionDailyStat.fields = {\r\n    statisticDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.ExtensionDailyStats.fields = {\r\n    dailyStats: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ExtensionDailyStat\r\n    }\r\n};\r\nexports.TypeInfo.ExtensionDraft.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    },\r\n    draftState: {\r\n        enumType: exports.TypeInfo.DraftStateType\r\n    },\r\n    lastUpdated: {\r\n        isDate: true,\r\n    },\r\n    payload: {\r\n        typeInfo: exports.TypeInfo.ExtensionPayload\r\n    }\r\n};\r\nexports.TypeInfo.ExtensionDraftPatch.fields = {\r\n    operation: {\r\n        enumType: exports.TypeInfo.DraftPatchOperation\r\n    }\r\n};\r\nexports.TypeInfo.ExtensionEvent.fields = {\r\n    statisticDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.ExtensionEvents.fields = {\r\n    events: {\r\n        isDictionary: true,\r\n        dictionaryValueFieldInfo: {\r\n            isArray: true,\r\n            typeInfo: exports.TypeInfo.ExtensionEvent\r\n        }\r\n    }\r\n};\r\nexports.TypeInfo.ExtensionFilterResult.fields = {\r\n    extensions: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.PublishedExtension\r\n    }\r\n};\r\nexports.TypeInfo.ExtensionPayload.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.ExtensionDeploymentTechnology\r\n    }\r\n};\r\nexports.TypeInfo.ExtensionPolicy.fields = {\r\n    install: {\r\n        enumType: exports.TypeInfo.ExtensionPolicyFlags\r\n    },\r\n    request: {\r\n        enumType: exports.TypeInfo.ExtensionPolicyFlags\r\n    }\r\n};\r\nexports.TypeInfo.ExtensionQuery.fields = {\r\n    filters: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.QueryFilter\r\n    },\r\n    flags: {\r\n        enumType: exports.TypeInfo.ExtensionQueryFlags\r\n    }\r\n};\r\nexports.TypeInfo.ExtensionQueryResult.fields = {\r\n    results: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ExtensionFilterResult\r\n    }\r\n};\r\nexports.TypeInfo.ExtensionStatisticUpdate.fields = {\r\n    operation: {\r\n        enumType: exports.TypeInfo.ExtensionStatisticOperation\r\n    }\r\n};\r\nexports.TypeInfo.ExtensionVersion.fields = {\r\n    flags: {\r\n        enumType: exports.TypeInfo.ExtensionVersionFlags\r\n    },\r\n    lastUpdated: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.NotificationsData.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.NotificationTemplateType\r\n    }\r\n};\r\nexports.TypeInfo.PublishedExtension.fields = {\r\n    deploymentType: {\r\n        enumType: exports.TypeInfo.ExtensionDeploymentTechnology\r\n    },\r\n    flags: {\r\n        enumType: exports.TypeInfo.PublishedExtensionFlags\r\n    },\r\n    lastUpdated: {\r\n        isDate: true,\r\n    },\r\n    publishedDate: {\r\n        isDate: true,\r\n    },\r\n    publisher: {\r\n        typeInfo: exports.TypeInfo.PublisherFacts\r\n    },\r\n    releaseDate: {\r\n        isDate: true,\r\n    },\r\n    versions: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ExtensionVersion\r\n    }\r\n};\r\nexports.TypeInfo.Publisher.fields = {\r\n    extensions: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.PublishedExtension\r\n    },\r\n    flags: {\r\n        enumType: exports.TypeInfo.PublisherFlags\r\n    },\r\n    lastUpdated: {\r\n        isDate: true,\r\n    },\r\n    state: {\r\n        enumType: exports.TypeInfo.PublisherState\r\n    }\r\n};\r\nexports.TypeInfo.PublisherBase.fields = {\r\n    extensions: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.PublishedExtension\r\n    },\r\n    flags: {\r\n        enumType: exports.TypeInfo.PublisherFlags\r\n    },\r\n    lastUpdated: {\r\n        isDate: true,\r\n    },\r\n    state: {\r\n        enumType: exports.TypeInfo.PublisherState\r\n    }\r\n};\r\nexports.TypeInfo.PublisherFacts.fields = {\r\n    flags: {\r\n        enumType: exports.TypeInfo.PublisherFlags\r\n    }\r\n};\r\nexports.TypeInfo.PublisherFilterResult.fields = {\r\n    publishers: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.Publisher\r\n    }\r\n};\r\nexports.TypeInfo.PublisherQuery.fields = {\r\n    filters: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.QueryFilter\r\n    },\r\n    flags: {\r\n        enumType: exports.TypeInfo.PublisherQueryFlags\r\n    }\r\n};\r\nexports.TypeInfo.PublisherQueryResult.fields = {\r\n    results: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.PublisherFilterResult\r\n    }\r\n};\r\nexports.TypeInfo.PublisherRoleAssignment.fields = {\r\n    access: {\r\n        enumType: exports.TypeInfo.PublisherRoleAccess\r\n    }\r\n};\r\nexports.TypeInfo.QnAItem.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.QnAItemStatus\r\n    },\r\n    updatedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.QueryFilter.fields = {\r\n    direction: {\r\n        enumType: exports.TypeInfo.PagingDirection\r\n    }\r\n};\r\nexports.TypeInfo.Question.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    },\r\n    responses: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.Response\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.QnAItemStatus\r\n    },\r\n    updatedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.QuestionsResult.fields = {\r\n    questions: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.Question\r\n    }\r\n};\r\nexports.TypeInfo.Response.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.QnAItemStatus\r\n    },\r\n    updatedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.RestApiResponseStatusModel.fields = {\r\n    status: {\r\n        enumType: exports.TypeInfo.RestApiResponseStatus\r\n    }\r\n};\r\nexports.TypeInfo.Review.fields = {\r\n    adminReply: {\r\n        typeInfo: exports.TypeInfo.ReviewReply\r\n    },\r\n    reply: {\r\n        typeInfo: exports.TypeInfo.ReviewReply\r\n    },\r\n    updatedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.ReviewEventProperties.fields = {\r\n    eventOperation: {\r\n        enumType: exports.TypeInfo.ReviewEventOperation\r\n    },\r\n    replyDate: {\r\n        isDate: true,\r\n    },\r\n    resourceType: {\r\n        enumType: exports.TypeInfo.ReviewResourceType\r\n    },\r\n    reviewDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.ReviewPatch.fields = {\r\n    operation: {\r\n        enumType: exports.TypeInfo.ReviewPatchOperation\r\n    },\r\n    reportedConcern: {\r\n        typeInfo: exports.TypeInfo.UserReportedConcern\r\n    },\r\n    reviewItem: {\r\n        typeInfo: exports.TypeInfo.Review\r\n    }\r\n};\r\nexports.TypeInfo.ReviewReply.fields = {\r\n    updatedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.ReviewsResult.fields = {\r\n    reviews: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.Review\r\n    }\r\n};\r\nexports.TypeInfo.UserExtensionPolicy.fields = {\r\n    permissions: {\r\n        typeInfo: exports.TypeInfo.ExtensionPolicy\r\n    }\r\n};\r\nexports.TypeInfo.UserReportedConcern.fields = {\r\n    category: {\r\n        enumType: exports.TypeInfo.ConcernCategory\r\n    },\r\n    submittedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\n","/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst PolicyInterfaces = require(\"../interfaces/PolicyInterfaces\");\r\nconst TfsCoreInterfaces = require(\"../interfaces/CoreInterfaces\");\r\n/**\r\n * The status of a comment thread.\r\n */\r\nvar CommentThreadStatus;\r\n(function (CommentThreadStatus) {\r\n    /**\r\n     * The thread status is unknown.\r\n     */\r\n    CommentThreadStatus[CommentThreadStatus[\"Unknown\"] = 0] = \"Unknown\";\r\n    /**\r\n     * The thread status is active.\r\n     */\r\n    CommentThreadStatus[CommentThreadStatus[\"Active\"] = 1] = \"Active\";\r\n    /**\r\n     * The thread status is resolved as fixed.\r\n     */\r\n    CommentThreadStatus[CommentThreadStatus[\"Fixed\"] = 2] = \"Fixed\";\r\n    /**\r\n     * The thread status is resolved as won't fix.\r\n     */\r\n    CommentThreadStatus[CommentThreadStatus[\"WontFix\"] = 3] = \"WontFix\";\r\n    /**\r\n     * The thread status is closed.\r\n     */\r\n    CommentThreadStatus[CommentThreadStatus[\"Closed\"] = 4] = \"Closed\";\r\n    /**\r\n     * The thread status is resolved as by design.\r\n     */\r\n    CommentThreadStatus[CommentThreadStatus[\"ByDesign\"] = 5] = \"ByDesign\";\r\n    /**\r\n     * The thread status is pending.\r\n     */\r\n    CommentThreadStatus[CommentThreadStatus[\"Pending\"] = 6] = \"Pending\";\r\n})(CommentThreadStatus = exports.CommentThreadStatus || (exports.CommentThreadStatus = {}));\r\n/**\r\n * The type of a comment.\r\n */\r\nvar CommentType;\r\n(function (CommentType) {\r\n    /**\r\n     * The comment type is not known.\r\n     */\r\n    CommentType[CommentType[\"Unknown\"] = 0] = \"Unknown\";\r\n    /**\r\n     * This is a regular user comment.\r\n     */\r\n    CommentType[CommentType[\"Text\"] = 1] = \"Text\";\r\n    /**\r\n     * The comment comes as a result of a code change.\r\n     */\r\n    CommentType[CommentType[\"CodeChange\"] = 2] = \"CodeChange\";\r\n    /**\r\n     * The comment represents a system message.\r\n     */\r\n    CommentType[CommentType[\"System\"] = 3] = \"System\";\r\n})(CommentType = exports.CommentType || (exports.CommentType = {}));\r\n/**\r\n * Current status of the asynchronous operation.\r\n */\r\nvar GitAsyncOperationStatus;\r\n(function (GitAsyncOperationStatus) {\r\n    /**\r\n     * The operation is waiting in a queue and has not yet started.\r\n     */\r\n    GitAsyncOperationStatus[GitAsyncOperationStatus[\"Queued\"] = 1] = \"Queued\";\r\n    /**\r\n     * The operation is currently in progress.\r\n     */\r\n    GitAsyncOperationStatus[GitAsyncOperationStatus[\"InProgress\"] = 2] = \"InProgress\";\r\n    /**\r\n     * The operation has completed.\r\n     */\r\n    GitAsyncOperationStatus[GitAsyncOperationStatus[\"Completed\"] = 3] = \"Completed\";\r\n    /**\r\n     * The operation has failed. Check for an error message.\r\n     */\r\n    GitAsyncOperationStatus[GitAsyncOperationStatus[\"Failed\"] = 4] = \"Failed\";\r\n    /**\r\n     * The operation has been abandoned.\r\n     */\r\n    GitAsyncOperationStatus[GitAsyncOperationStatus[\"Abandoned\"] = 5] = \"Abandoned\";\r\n})(GitAsyncOperationStatus = exports.GitAsyncOperationStatus || (exports.GitAsyncOperationStatus = {}));\r\nvar GitAsyncRefOperationFailureStatus;\r\n(function (GitAsyncRefOperationFailureStatus) {\r\n    /**\r\n     * No status\r\n     */\r\n    GitAsyncRefOperationFailureStatus[GitAsyncRefOperationFailureStatus[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Indicates that the ref update request could not be completed because the ref name presented in the request was not valid.\r\n     */\r\n    GitAsyncRefOperationFailureStatus[GitAsyncRefOperationFailureStatus[\"InvalidRefName\"] = 1] = \"InvalidRefName\";\r\n    /**\r\n     * The ref update could not be completed because, in case-insensitive mode, the ref name conflicts with an existing, differently-cased ref name.\r\n     */\r\n    GitAsyncRefOperationFailureStatus[GitAsyncRefOperationFailureStatus[\"RefNameConflict\"] = 2] = \"RefNameConflict\";\r\n    /**\r\n     * The ref update request could not be completed because the user lacks the permission to create a branch\r\n     */\r\n    GitAsyncRefOperationFailureStatus[GitAsyncRefOperationFailureStatus[\"CreateBranchPermissionRequired\"] = 3] = \"CreateBranchPermissionRequired\";\r\n    /**\r\n     * The ref update request could not be completed because the user lacks write permissions required to write this ref\r\n     */\r\n    GitAsyncRefOperationFailureStatus[GitAsyncRefOperationFailureStatus[\"WritePermissionRequired\"] = 4] = \"WritePermissionRequired\";\r\n    /**\r\n     * Target branch was deleted after Git async operation started\r\n     */\r\n    GitAsyncRefOperationFailureStatus[GitAsyncRefOperationFailureStatus[\"TargetBranchDeleted\"] = 5] = \"TargetBranchDeleted\";\r\n    /**\r\n     * Git object is too large to materialize into memory\r\n     */\r\n    GitAsyncRefOperationFailureStatus[GitAsyncRefOperationFailureStatus[\"GitObjectTooLarge\"] = 6] = \"GitObjectTooLarge\";\r\n    /**\r\n     * Identity who authorized the operation was not found\r\n     */\r\n    GitAsyncRefOperationFailureStatus[GitAsyncRefOperationFailureStatus[\"OperationIndentityNotFound\"] = 7] = \"OperationIndentityNotFound\";\r\n    /**\r\n     * Async operation was not found\r\n     */\r\n    GitAsyncRefOperationFailureStatus[GitAsyncRefOperationFailureStatus[\"AsyncOperationNotFound\"] = 8] = \"AsyncOperationNotFound\";\r\n    /**\r\n     * Unexpected failure\r\n     */\r\n    GitAsyncRefOperationFailureStatus[GitAsyncRefOperationFailureStatus[\"Other\"] = 9] = \"Other\";\r\n    /**\r\n     * Initiator of async operation has signature with empty name or email\r\n     */\r\n    GitAsyncRefOperationFailureStatus[GitAsyncRefOperationFailureStatus[\"EmptyCommitterSignature\"] = 10] = \"EmptyCommitterSignature\";\r\n})(GitAsyncRefOperationFailureStatus = exports.GitAsyncRefOperationFailureStatus || (exports.GitAsyncRefOperationFailureStatus = {}));\r\n/**\r\n * The type of a merge conflict.\r\n */\r\nvar GitConflictType;\r\n(function (GitConflictType) {\r\n    /**\r\n     * No conflict\r\n     */\r\n    GitConflictType[GitConflictType[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Added on source and target; content differs\r\n     */\r\n    GitConflictType[GitConflictType[\"AddAdd\"] = 1] = \"AddAdd\";\r\n    /**\r\n     * Added on source and rename destination on target\r\n     */\r\n    GitConflictType[GitConflictType[\"AddRename\"] = 2] = \"AddRename\";\r\n    /**\r\n     * Deleted on source and edited on target\r\n     */\r\n    GitConflictType[GitConflictType[\"DeleteEdit\"] = 3] = \"DeleteEdit\";\r\n    /**\r\n     * Deleted on source and renamed on target\r\n     */\r\n    GitConflictType[GitConflictType[\"DeleteRename\"] = 4] = \"DeleteRename\";\r\n    /**\r\n     * Path is a directory on source and a file on target\r\n     */\r\n    GitConflictType[GitConflictType[\"DirectoryFile\"] = 5] = \"DirectoryFile\";\r\n    /**\r\n     * Children of directory which has DirectoryFile or FileDirectory conflict\r\n     */\r\n    GitConflictType[GitConflictType[\"DirectoryChild\"] = 6] = \"DirectoryChild\";\r\n    /**\r\n     * Edited on source and deleted on target\r\n     */\r\n    GitConflictType[GitConflictType[\"EditDelete\"] = 7] = \"EditDelete\";\r\n    /**\r\n     * Edited on source and target; content differs\r\n     */\r\n    GitConflictType[GitConflictType[\"EditEdit\"] = 8] = \"EditEdit\";\r\n    /**\r\n     * Path is a file on source and a directory on target\r\n     */\r\n    GitConflictType[GitConflictType[\"FileDirectory\"] = 9] = \"FileDirectory\";\r\n    /**\r\n     * Same file renamed on both source and target; destination paths differ\r\n     */\r\n    GitConflictType[GitConflictType[\"Rename1to2\"] = 10] = \"Rename1to2\";\r\n    /**\r\n     * Different files renamed to same destination path on both source and target\r\n     */\r\n    GitConflictType[GitConflictType[\"Rename2to1\"] = 11] = \"Rename2to1\";\r\n    /**\r\n     * Rename destination on source and new file on target\r\n     */\r\n    GitConflictType[GitConflictType[\"RenameAdd\"] = 12] = \"RenameAdd\";\r\n    /**\r\n     * Renamed on source and deleted on target\r\n     */\r\n    GitConflictType[GitConflictType[\"RenameDelete\"] = 13] = \"RenameDelete\";\r\n    /**\r\n     * Rename destination on both source and target; content differs\r\n     */\r\n    GitConflictType[GitConflictType[\"RenameRename\"] = 14] = \"RenameRename\";\r\n})(GitConflictType = exports.GitConflictType || (exports.GitConflictType = {}));\r\n/**\r\n * Represents the possible outcomes from a request to update a pull request conflict\r\n */\r\nvar GitConflictUpdateStatus;\r\n(function (GitConflictUpdateStatus) {\r\n    /**\r\n     * Indicates that pull request conflict update request was completed successfully\r\n     */\r\n    GitConflictUpdateStatus[GitConflictUpdateStatus[\"Succeeded\"] = 0] = \"Succeeded\";\r\n    /**\r\n     * Indicates that the update request did not fit the expected data contract\r\n     */\r\n    GitConflictUpdateStatus[GitConflictUpdateStatus[\"BadRequest\"] = 1] = \"BadRequest\";\r\n    /**\r\n     * Indicates that the requested resolution was not valid\r\n     */\r\n    GitConflictUpdateStatus[GitConflictUpdateStatus[\"InvalidResolution\"] = 2] = \"InvalidResolution\";\r\n    /**\r\n     * Indicates that the conflict in the update request was not a supported conflict type\r\n     */\r\n    GitConflictUpdateStatus[GitConflictUpdateStatus[\"UnsupportedConflictType\"] = 3] = \"UnsupportedConflictType\";\r\n    /**\r\n     * Indicates that the conflict could not be found\r\n     */\r\n    GitConflictUpdateStatus[GitConflictUpdateStatus[\"NotFound\"] = 4] = \"NotFound\";\r\n})(GitConflictUpdateStatus = exports.GitConflictUpdateStatus || (exports.GitConflictUpdateStatus = {}));\r\n/**\r\n * Accepted types of version\r\n */\r\nvar GitHistoryMode;\r\n(function (GitHistoryMode) {\r\n    /**\r\n     * The history mode used by `git log`. This is the default.\r\n     */\r\n    GitHistoryMode[GitHistoryMode[\"SimplifiedHistory\"] = 0] = \"SimplifiedHistory\";\r\n    /**\r\n     * The history mode used by `git log --first-parent`\r\n     */\r\n    GitHistoryMode[GitHistoryMode[\"FirstParent\"] = 1] = \"FirstParent\";\r\n    /**\r\n     * The history mode used by `git log --full-history`\r\n     */\r\n    GitHistoryMode[GitHistoryMode[\"FullHistory\"] = 2] = \"FullHistory\";\r\n    /**\r\n     * The history mode used by `git log --full-history --simplify-merges`\r\n     */\r\n    GitHistoryMode[GitHistoryMode[\"FullHistorySimplifyMerges\"] = 3] = \"FullHistorySimplifyMerges\";\r\n})(GitHistoryMode = exports.GitHistoryMode || (exports.GitHistoryMode = {}));\r\nvar GitObjectType;\r\n(function (GitObjectType) {\r\n    GitObjectType[GitObjectType[\"Bad\"] = 0] = \"Bad\";\r\n    GitObjectType[GitObjectType[\"Commit\"] = 1] = \"Commit\";\r\n    GitObjectType[GitObjectType[\"Tree\"] = 2] = \"Tree\";\r\n    GitObjectType[GitObjectType[\"Blob\"] = 3] = \"Blob\";\r\n    GitObjectType[GitObjectType[\"Tag\"] = 4] = \"Tag\";\r\n    GitObjectType[GitObjectType[\"Ext2\"] = 5] = \"Ext2\";\r\n    GitObjectType[GitObjectType[\"OfsDelta\"] = 6] = \"OfsDelta\";\r\n    GitObjectType[GitObjectType[\"RefDelta\"] = 7] = \"RefDelta\";\r\n})(GitObjectType = exports.GitObjectType || (exports.GitObjectType = {}));\r\nvar GitPathActions;\r\n(function (GitPathActions) {\r\n    GitPathActions[GitPathActions[\"None\"] = 0] = \"None\";\r\n    GitPathActions[GitPathActions[\"Edit\"] = 1] = \"Edit\";\r\n    GitPathActions[GitPathActions[\"Delete\"] = 2] = \"Delete\";\r\n    GitPathActions[GitPathActions[\"Add\"] = 3] = \"Add\";\r\n    GitPathActions[GitPathActions[\"Rename\"] = 4] = \"Rename\";\r\n})(GitPathActions = exports.GitPathActions || (exports.GitPathActions = {}));\r\n/**\r\n * Enumeration of possible merge strategies which can be used to complete a pull request.\r\n */\r\nvar GitPullRequestMergeStrategy;\r\n(function (GitPullRequestMergeStrategy) {\r\n    /**\r\n     * A two-parent, no-fast-forward merge. The source branch is unchanged. This is the default behavior.\r\n     */\r\n    GitPullRequestMergeStrategy[GitPullRequestMergeStrategy[\"NoFastForward\"] = 1] = \"NoFastForward\";\r\n    /**\r\n     * Put all changes from the pull request into a single-parent commit.\r\n     */\r\n    GitPullRequestMergeStrategy[GitPullRequestMergeStrategy[\"Squash\"] = 2] = \"Squash\";\r\n    /**\r\n     * Rebase the source branch on top of the target branch HEAD commit, and fast-forward the target branch. The source branch is updated during the rebase operation.\r\n     */\r\n    GitPullRequestMergeStrategy[GitPullRequestMergeStrategy[\"Rebase\"] = 3] = \"Rebase\";\r\n    /**\r\n     * Rebase the source branch on top of the target branch HEAD commit, and create a two-parent, no-fast-forward merge. The source branch is updated during the rebase operation.\r\n     */\r\n    GitPullRequestMergeStrategy[GitPullRequestMergeStrategy[\"RebaseMerge\"] = 4] = \"RebaseMerge\";\r\n})(GitPullRequestMergeStrategy = exports.GitPullRequestMergeStrategy || (exports.GitPullRequestMergeStrategy = {}));\r\n/**\r\n * Accepted types of pull request queries.\r\n */\r\nvar GitPullRequestQueryType;\r\n(function (GitPullRequestQueryType) {\r\n    /**\r\n     * No query type set.\r\n     */\r\n    GitPullRequestQueryType[GitPullRequestQueryType[\"NotSet\"] = 0] = \"NotSet\";\r\n    /**\r\n     * Search for pull requests that created the supplied merge commits.\r\n     */\r\n    GitPullRequestQueryType[GitPullRequestQueryType[\"LastMergeCommit\"] = 1] = \"LastMergeCommit\";\r\n    /**\r\n     * Search for pull requests that merged the supplied commits.\r\n     */\r\n    GitPullRequestQueryType[GitPullRequestQueryType[\"Commit\"] = 2] = \"Commit\";\r\n})(GitPullRequestQueryType = exports.GitPullRequestQueryType || (exports.GitPullRequestQueryType = {}));\r\nvar GitPullRequestReviewFileType;\r\n(function (GitPullRequestReviewFileType) {\r\n    GitPullRequestReviewFileType[GitPullRequestReviewFileType[\"ChangeEntry\"] = 0] = \"ChangeEntry\";\r\n    GitPullRequestReviewFileType[GitPullRequestReviewFileType[\"Attachment\"] = 1] = \"Attachment\";\r\n})(GitPullRequestReviewFileType = exports.GitPullRequestReviewFileType || (exports.GitPullRequestReviewFileType = {}));\r\n/**\r\n * Search type on ref name\r\n */\r\nvar GitRefSearchType;\r\n(function (GitRefSearchType) {\r\n    GitRefSearchType[GitRefSearchType[\"Exact\"] = 0] = \"Exact\";\r\n    GitRefSearchType[GitRefSearchType[\"StartsWith\"] = 1] = \"StartsWith\";\r\n    GitRefSearchType[GitRefSearchType[\"Contains\"] = 2] = \"Contains\";\r\n})(GitRefSearchType = exports.GitRefSearchType || (exports.GitRefSearchType = {}));\r\n/**\r\n * Enumerates the modes under which ref updates can be written to their repositories.\r\n */\r\nvar GitRefUpdateMode;\r\n(function (GitRefUpdateMode) {\r\n    /**\r\n     * Indicates the Git protocol model where any refs that can be updated will be updated, but any failures will not prevent other updates from succeeding.\r\n     */\r\n    GitRefUpdateMode[GitRefUpdateMode[\"BestEffort\"] = 0] = \"BestEffort\";\r\n    /**\r\n     * Indicates that all ref updates must succeed or none will succeed. All ref updates will be atomically written. If any failure is encountered, previously successful updates will be rolled back and the entire operation will fail.\r\n     */\r\n    GitRefUpdateMode[GitRefUpdateMode[\"AllOrNone\"] = 1] = \"AllOrNone\";\r\n})(GitRefUpdateMode = exports.GitRefUpdateMode || (exports.GitRefUpdateMode = {}));\r\n/**\r\n * Represents the possible outcomes from a request to update a ref in a repository.\r\n */\r\nvar GitRefUpdateStatus;\r\n(function (GitRefUpdateStatus) {\r\n    /**\r\n     * Indicates that the ref update request was completed successfully.\r\n     */\r\n    GitRefUpdateStatus[GitRefUpdateStatus[\"Succeeded\"] = 0] = \"Succeeded\";\r\n    /**\r\n     * Indicates that the ref update request could not be completed because part of the graph would be disconnected by this change, and the caller does not have ForcePush permission on the repository.\r\n     */\r\n    GitRefUpdateStatus[GitRefUpdateStatus[\"ForcePushRequired\"] = 1] = \"ForcePushRequired\";\r\n    /**\r\n     * Indicates that the ref update request could not be completed because the old object ID presented in the request was not the object ID of the ref when the database attempted the update. The most likely scenario is that the caller lost a race to update the ref.\r\n     */\r\n    GitRefUpdateStatus[GitRefUpdateStatus[\"StaleOldObjectId\"] = 2] = \"StaleOldObjectId\";\r\n    /**\r\n     * Indicates that the ref update request could not be completed because the ref name presented in the request was not valid.\r\n     */\r\n    GitRefUpdateStatus[GitRefUpdateStatus[\"InvalidRefName\"] = 3] = \"InvalidRefName\";\r\n    /**\r\n     * The request was not processed\r\n     */\r\n    GitRefUpdateStatus[GitRefUpdateStatus[\"Unprocessed\"] = 4] = \"Unprocessed\";\r\n    /**\r\n     * The ref update request could not be completed because the new object ID for the ref could not be resolved to a commit object (potentially through any number of tags)\r\n     */\r\n    GitRefUpdateStatus[GitRefUpdateStatus[\"UnresolvableToCommit\"] = 5] = \"UnresolvableToCommit\";\r\n    /**\r\n     * The ref update request could not be completed because the user lacks write permissions required to write this ref\r\n     */\r\n    GitRefUpdateStatus[GitRefUpdateStatus[\"WritePermissionRequired\"] = 6] = \"WritePermissionRequired\";\r\n    /**\r\n     * The ref update request could not be completed because the user lacks note creation permissions required to write this note\r\n     */\r\n    GitRefUpdateStatus[GitRefUpdateStatus[\"ManageNotePermissionRequired\"] = 7] = \"ManageNotePermissionRequired\";\r\n    /**\r\n     * The ref update request could not be completed because the user lacks the permission to create a branch\r\n     */\r\n    GitRefUpdateStatus[GitRefUpdateStatus[\"CreateBranchPermissionRequired\"] = 8] = \"CreateBranchPermissionRequired\";\r\n    /**\r\n     * The ref update request could not be completed because the user lacks the permission to create a tag\r\n     */\r\n    GitRefUpdateStatus[GitRefUpdateStatus[\"CreateTagPermissionRequired\"] = 9] = \"CreateTagPermissionRequired\";\r\n    /**\r\n     * The ref update could not be completed because it was rejected by the plugin.\r\n     */\r\n    GitRefUpdateStatus[GitRefUpdateStatus[\"RejectedByPlugin\"] = 10] = \"RejectedByPlugin\";\r\n    /**\r\n     * The ref update could not be completed because the ref is locked by another user.\r\n     */\r\n    GitRefUpdateStatus[GitRefUpdateStatus[\"Locked\"] = 11] = \"Locked\";\r\n    /**\r\n     * The ref update could not be completed because, in case-insensitive mode, the ref name conflicts with an existing, differently-cased ref name.\r\n     */\r\n    GitRefUpdateStatus[GitRefUpdateStatus[\"RefNameConflict\"] = 12] = \"RefNameConflict\";\r\n    /**\r\n     * The ref update could not be completed because it was rejected by policy.\r\n     */\r\n    GitRefUpdateStatus[GitRefUpdateStatus[\"RejectedByPolicy\"] = 13] = \"RejectedByPolicy\";\r\n    /**\r\n     * Indicates that the ref update request was completed successfully, but the ref doesn't actually exist so no changes were made.  This should only happen during deletes.\r\n     */\r\n    GitRefUpdateStatus[GitRefUpdateStatus[\"SucceededNonExistentRef\"] = 14] = \"SucceededNonExistentRef\";\r\n    /**\r\n     * Indicates that the ref update request was completed successfully, but the passed-in ref was corrupt - as in, the old object ID was bad.  This should only happen during deletes.\r\n     */\r\n    GitRefUpdateStatus[GitRefUpdateStatus[\"SucceededCorruptRef\"] = 15] = \"SucceededCorruptRef\";\r\n})(GitRefUpdateStatus = exports.GitRefUpdateStatus || (exports.GitRefUpdateStatus = {}));\r\n/**\r\n * The type of a merge conflict.\r\n */\r\nvar GitResolutionError;\r\n(function (GitResolutionError) {\r\n    /**\r\n     * No error\r\n     */\r\n    GitResolutionError[GitResolutionError[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * User set a blob id for resolving a content merge, but blob was not found in repo during application\r\n     */\r\n    GitResolutionError[GitResolutionError[\"MergeContentNotFound\"] = 1] = \"MergeContentNotFound\";\r\n    /**\r\n     * Attempted to resolve a conflict by moving a file to another path, but path was already in use\r\n     */\r\n    GitResolutionError[GitResolutionError[\"PathInUse\"] = 2] = \"PathInUse\";\r\n    /**\r\n     * No error\r\n     */\r\n    GitResolutionError[GitResolutionError[\"InvalidPath\"] = 3] = \"InvalidPath\";\r\n    /**\r\n     * GitResolutionAction was set to an unrecognized value\r\n     */\r\n    GitResolutionError[GitResolutionError[\"UnknownAction\"] = 4] = \"UnknownAction\";\r\n    /**\r\n     * GitResolutionMergeType was set to an unrecognized value\r\n     */\r\n    GitResolutionError[GitResolutionError[\"UnknownMergeType\"] = 5] = \"UnknownMergeType\";\r\n    /**\r\n     * Any error for which a more specific code doesn't apply\r\n     */\r\n    GitResolutionError[GitResolutionError[\"OtherError\"] = 255] = \"OtherError\";\r\n})(GitResolutionError = exports.GitResolutionError || (exports.GitResolutionError = {}));\r\nvar GitResolutionMergeType;\r\n(function (GitResolutionMergeType) {\r\n    GitResolutionMergeType[GitResolutionMergeType[\"Undecided\"] = 0] = \"Undecided\";\r\n    GitResolutionMergeType[GitResolutionMergeType[\"TakeSourceContent\"] = 1] = \"TakeSourceContent\";\r\n    GitResolutionMergeType[GitResolutionMergeType[\"TakeTargetContent\"] = 2] = \"TakeTargetContent\";\r\n    GitResolutionMergeType[GitResolutionMergeType[\"AutoMerged\"] = 3] = \"AutoMerged\";\r\n    GitResolutionMergeType[GitResolutionMergeType[\"UserMerged\"] = 4] = \"UserMerged\";\r\n})(GitResolutionMergeType = exports.GitResolutionMergeType || (exports.GitResolutionMergeType = {}));\r\nvar GitResolutionPathConflictAction;\r\n(function (GitResolutionPathConflictAction) {\r\n    GitResolutionPathConflictAction[GitResolutionPathConflictAction[\"Undecided\"] = 0] = \"Undecided\";\r\n    GitResolutionPathConflictAction[GitResolutionPathConflictAction[\"KeepSourceRenameTarget\"] = 1] = \"KeepSourceRenameTarget\";\r\n    GitResolutionPathConflictAction[GitResolutionPathConflictAction[\"KeepSourceDeleteTarget\"] = 2] = \"KeepSourceDeleteTarget\";\r\n    GitResolutionPathConflictAction[GitResolutionPathConflictAction[\"KeepTargetRenameSource\"] = 3] = \"KeepTargetRenameSource\";\r\n    GitResolutionPathConflictAction[GitResolutionPathConflictAction[\"KeepTargetDeleteSource\"] = 4] = \"KeepTargetDeleteSource\";\r\n})(GitResolutionPathConflictAction = exports.GitResolutionPathConflictAction || (exports.GitResolutionPathConflictAction = {}));\r\nvar GitResolutionRename1to2Action;\r\n(function (GitResolutionRename1to2Action) {\r\n    GitResolutionRename1to2Action[GitResolutionRename1to2Action[\"Undecided\"] = 0] = \"Undecided\";\r\n    GitResolutionRename1to2Action[GitResolutionRename1to2Action[\"KeepSourcePath\"] = 1] = \"KeepSourcePath\";\r\n    GitResolutionRename1to2Action[GitResolutionRename1to2Action[\"KeepTargetPath\"] = 2] = \"KeepTargetPath\";\r\n    GitResolutionRename1to2Action[GitResolutionRename1to2Action[\"KeepBothFiles\"] = 3] = \"KeepBothFiles\";\r\n})(GitResolutionRename1to2Action = exports.GitResolutionRename1to2Action || (exports.GitResolutionRename1to2Action = {}));\r\n/**\r\n * Resolution status of a conflict.\r\n */\r\nvar GitResolutionStatus;\r\n(function (GitResolutionStatus) {\r\n    GitResolutionStatus[GitResolutionStatus[\"Unresolved\"] = 0] = \"Unresolved\";\r\n    GitResolutionStatus[GitResolutionStatus[\"PartiallyResolved\"] = 1] = \"PartiallyResolved\";\r\n    GitResolutionStatus[GitResolutionStatus[\"Resolved\"] = 2] = \"Resolved\";\r\n})(GitResolutionStatus = exports.GitResolutionStatus || (exports.GitResolutionStatus = {}));\r\nvar GitResolutionWhichAction;\r\n(function (GitResolutionWhichAction) {\r\n    GitResolutionWhichAction[GitResolutionWhichAction[\"Undecided\"] = 0] = \"Undecided\";\r\n    GitResolutionWhichAction[GitResolutionWhichAction[\"PickSourceAction\"] = 1] = \"PickSourceAction\";\r\n    GitResolutionWhichAction[GitResolutionWhichAction[\"PickTargetAction\"] = 2] = \"PickTargetAction\";\r\n})(GitResolutionWhichAction = exports.GitResolutionWhichAction || (exports.GitResolutionWhichAction = {}));\r\n/**\r\n * State of the status.\r\n */\r\nvar GitStatusState;\r\n(function (GitStatusState) {\r\n    /**\r\n     * Status state not set. Default state.\r\n     */\r\n    GitStatusState[GitStatusState[\"NotSet\"] = 0] = \"NotSet\";\r\n    /**\r\n     * Status pending.\r\n     */\r\n    GitStatusState[GitStatusState[\"Pending\"] = 1] = \"Pending\";\r\n    /**\r\n     * Status succeeded.\r\n     */\r\n    GitStatusState[GitStatusState[\"Succeeded\"] = 2] = \"Succeeded\";\r\n    /**\r\n     * Status failed.\r\n     */\r\n    GitStatusState[GitStatusState[\"Failed\"] = 3] = \"Failed\";\r\n    /**\r\n     * Status with an error.\r\n     */\r\n    GitStatusState[GitStatusState[\"Error\"] = 4] = \"Error\";\r\n    /**\r\n     * Status is not applicable to the target object.\r\n     */\r\n    GitStatusState[GitStatusState[\"NotApplicable\"] = 5] = \"NotApplicable\";\r\n    /**\r\n     * Status Partially Succeeded, build finished with warnings.\r\n     */\r\n    GitStatusState[GitStatusState[\"PartiallySucceeded\"] = 6] = \"PartiallySucceeded\";\r\n})(GitStatusState = exports.GitStatusState || (exports.GitStatusState = {}));\r\n/**\r\n * Accepted types of version options\r\n */\r\nvar GitVersionOptions;\r\n(function (GitVersionOptions) {\r\n    /**\r\n     * Not specified\r\n     */\r\n    GitVersionOptions[GitVersionOptions[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Commit that changed item prior to the current version\r\n     */\r\n    GitVersionOptions[GitVersionOptions[\"PreviousChange\"] = 1] = \"PreviousChange\";\r\n    /**\r\n     * First parent of commit (HEAD^)\r\n     */\r\n    GitVersionOptions[GitVersionOptions[\"FirstParent\"] = 2] = \"FirstParent\";\r\n})(GitVersionOptions = exports.GitVersionOptions || (exports.GitVersionOptions = {}));\r\n/**\r\n * Accepted types of version\r\n */\r\nvar GitVersionType;\r\n(function (GitVersionType) {\r\n    /**\r\n     * Interpret the version as a branch name\r\n     */\r\n    GitVersionType[GitVersionType[\"Branch\"] = 0] = \"Branch\";\r\n    /**\r\n     * Interpret the version as a tag name\r\n     */\r\n    GitVersionType[GitVersionType[\"Tag\"] = 1] = \"Tag\";\r\n    /**\r\n     * Interpret the version as a commit ID (SHA1)\r\n     */\r\n    GitVersionType[GitVersionType[\"Commit\"] = 2] = \"Commit\";\r\n})(GitVersionType = exports.GitVersionType || (exports.GitVersionType = {}));\r\nvar ItemContentType;\r\n(function (ItemContentType) {\r\n    ItemContentType[ItemContentType[\"RawText\"] = 0] = \"RawText\";\r\n    ItemContentType[ItemContentType[\"Base64Encoded\"] = 1] = \"Base64Encoded\";\r\n})(ItemContentType = exports.ItemContentType || (exports.ItemContentType = {}));\r\n/**\r\n * The reason for which the pull request iteration was created.\r\n */\r\nvar IterationReason;\r\n(function (IterationReason) {\r\n    IterationReason[IterationReason[\"Push\"] = 0] = \"Push\";\r\n    IterationReason[IterationReason[\"ForcePush\"] = 1] = \"ForcePush\";\r\n    IterationReason[IterationReason[\"Create\"] = 2] = \"Create\";\r\n    IterationReason[IterationReason[\"Rebase\"] = 4] = \"Rebase\";\r\n    IterationReason[IterationReason[\"Unknown\"] = 8] = \"Unknown\";\r\n    IterationReason[IterationReason[\"Retarget\"] = 16] = \"Retarget\";\r\n    IterationReason[IterationReason[\"ResolveConflicts\"] = 32] = \"ResolveConflicts\";\r\n})(IterationReason = exports.IterationReason || (exports.IterationReason = {}));\r\n/**\r\n * Type of change for a line diff block\r\n */\r\nvar LineDiffBlockChangeType;\r\n(function (LineDiffBlockChangeType) {\r\n    /**\r\n     * No change - both the blocks are identical\r\n     */\r\n    LineDiffBlockChangeType[LineDiffBlockChangeType[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Lines were added to the block in the modified file\r\n     */\r\n    LineDiffBlockChangeType[LineDiffBlockChangeType[\"Add\"] = 1] = \"Add\";\r\n    /**\r\n     * Lines were deleted from the block in the original file\r\n     */\r\n    LineDiffBlockChangeType[LineDiffBlockChangeType[\"Delete\"] = 2] = \"Delete\";\r\n    /**\r\n     * Lines were modified\r\n     */\r\n    LineDiffBlockChangeType[LineDiffBlockChangeType[\"Edit\"] = 3] = \"Edit\";\r\n})(LineDiffBlockChangeType = exports.LineDiffBlockChangeType || (exports.LineDiffBlockChangeType = {}));\r\n/**\r\n * The status of a pull request merge.\r\n */\r\nvar PullRequestAsyncStatus;\r\n(function (PullRequestAsyncStatus) {\r\n    /**\r\n     * Status is not set. Default state.\r\n     */\r\n    PullRequestAsyncStatus[PullRequestAsyncStatus[\"NotSet\"] = 0] = \"NotSet\";\r\n    /**\r\n     * Pull request merge is queued.\r\n     */\r\n    PullRequestAsyncStatus[PullRequestAsyncStatus[\"Queued\"] = 1] = \"Queued\";\r\n    /**\r\n     * Pull request merge failed due to conflicts.\r\n     */\r\n    PullRequestAsyncStatus[PullRequestAsyncStatus[\"Conflicts\"] = 2] = \"Conflicts\";\r\n    /**\r\n     * Pull request merge succeeded.\r\n     */\r\n    PullRequestAsyncStatus[PullRequestAsyncStatus[\"Succeeded\"] = 3] = \"Succeeded\";\r\n    /**\r\n     * Pull request merge rejected by policy.\r\n     */\r\n    PullRequestAsyncStatus[PullRequestAsyncStatus[\"RejectedByPolicy\"] = 4] = \"RejectedByPolicy\";\r\n    /**\r\n     * Pull request merge failed.\r\n     */\r\n    PullRequestAsyncStatus[PullRequestAsyncStatus[\"Failure\"] = 5] = \"Failure\";\r\n})(PullRequestAsyncStatus = exports.PullRequestAsyncStatus || (exports.PullRequestAsyncStatus = {}));\r\n/**\r\n * The specific type of a pull request merge failure.\r\n */\r\nvar PullRequestMergeFailureType;\r\n(function (PullRequestMergeFailureType) {\r\n    /**\r\n     * Type is not set. Default type.\r\n     */\r\n    PullRequestMergeFailureType[PullRequestMergeFailureType[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Pull request merge failure type unknown.\r\n     */\r\n    PullRequestMergeFailureType[PullRequestMergeFailureType[\"Unknown\"] = 1] = \"Unknown\";\r\n    /**\r\n     * Pull request merge failed due to case mismatch.\r\n     */\r\n    PullRequestMergeFailureType[PullRequestMergeFailureType[\"CaseSensitive\"] = 2] = \"CaseSensitive\";\r\n    /**\r\n     * Pull request merge failed due to an object being too large.\r\n     */\r\n    PullRequestMergeFailureType[PullRequestMergeFailureType[\"ObjectTooLarge\"] = 3] = \"ObjectTooLarge\";\r\n})(PullRequestMergeFailureType = exports.PullRequestMergeFailureType || (exports.PullRequestMergeFailureType = {}));\r\n/**\r\n * Status of a pull request.\r\n */\r\nvar PullRequestStatus;\r\n(function (PullRequestStatus) {\r\n    /**\r\n     * Status not set. Default state.\r\n     */\r\n    PullRequestStatus[PullRequestStatus[\"NotSet\"] = 0] = \"NotSet\";\r\n    /**\r\n     * Pull request is active.\r\n     */\r\n    PullRequestStatus[PullRequestStatus[\"Active\"] = 1] = \"Active\";\r\n    /**\r\n     * Pull request is abandoned.\r\n     */\r\n    PullRequestStatus[PullRequestStatus[\"Abandoned\"] = 2] = \"Abandoned\";\r\n    /**\r\n     * Pull request is completed.\r\n     */\r\n    PullRequestStatus[PullRequestStatus[\"Completed\"] = 3] = \"Completed\";\r\n    /**\r\n     * Used in pull request search criteria to include all statuses.\r\n     */\r\n    PullRequestStatus[PullRequestStatus[\"All\"] = 4] = \"All\";\r\n})(PullRequestStatus = exports.PullRequestStatus || (exports.PullRequestStatus = {}));\r\n/**\r\n * Specifies the desired type of time range for pull requests queries.\r\n */\r\nvar PullRequestTimeRangeType;\r\n(function (PullRequestTimeRangeType) {\r\n    /**\r\n     * The date when the pull request was created.\r\n     */\r\n    PullRequestTimeRangeType[PullRequestTimeRangeType[\"Created\"] = 1] = \"Created\";\r\n    /**\r\n     * The date when the pull request was closed (completed, abandoned, or merged externally).\r\n     */\r\n    PullRequestTimeRangeType[PullRequestTimeRangeType[\"Closed\"] = 2] = \"Closed\";\r\n})(PullRequestTimeRangeType = exports.PullRequestTimeRangeType || (exports.PullRequestTimeRangeType = {}));\r\nvar RefFavoriteType;\r\n(function (RefFavoriteType) {\r\n    RefFavoriteType[RefFavoriteType[\"Invalid\"] = 0] = \"Invalid\";\r\n    RefFavoriteType[RefFavoriteType[\"Folder\"] = 1] = \"Folder\";\r\n    RefFavoriteType[RefFavoriteType[\"Ref\"] = 2] = \"Ref\";\r\n})(RefFavoriteType = exports.RefFavoriteType || (exports.RefFavoriteType = {}));\r\n/**\r\n * Enumeration that represents the types of IDEs supported.\r\n */\r\nvar SupportedIdeType;\r\n(function (SupportedIdeType) {\r\n    SupportedIdeType[SupportedIdeType[\"Unknown\"] = 0] = \"Unknown\";\r\n    SupportedIdeType[SupportedIdeType[\"AndroidStudio\"] = 1] = \"AndroidStudio\";\r\n    SupportedIdeType[SupportedIdeType[\"AppCode\"] = 2] = \"AppCode\";\r\n    SupportedIdeType[SupportedIdeType[\"CLion\"] = 3] = \"CLion\";\r\n    SupportedIdeType[SupportedIdeType[\"DataGrip\"] = 4] = \"DataGrip\";\r\n    SupportedIdeType[SupportedIdeType[\"Eclipse\"] = 13] = \"Eclipse\";\r\n    SupportedIdeType[SupportedIdeType[\"IntelliJ\"] = 5] = \"IntelliJ\";\r\n    SupportedIdeType[SupportedIdeType[\"MPS\"] = 6] = \"MPS\";\r\n    SupportedIdeType[SupportedIdeType[\"PhpStorm\"] = 7] = \"PhpStorm\";\r\n    SupportedIdeType[SupportedIdeType[\"PyCharm\"] = 8] = \"PyCharm\";\r\n    SupportedIdeType[SupportedIdeType[\"RubyMine\"] = 9] = \"RubyMine\";\r\n    SupportedIdeType[SupportedIdeType[\"Tower\"] = 10] = \"Tower\";\r\n    SupportedIdeType[SupportedIdeType[\"VisualStudio\"] = 11] = \"VisualStudio\";\r\n    SupportedIdeType[SupportedIdeType[\"VSCode\"] = 14] = \"VSCode\";\r\n    SupportedIdeType[SupportedIdeType[\"WebStorm\"] = 12] = \"WebStorm\";\r\n})(SupportedIdeType = exports.SupportedIdeType || (exports.SupportedIdeType = {}));\r\n/**\r\n * Options for Version handling.\r\n */\r\nvar TfvcVersionOption;\r\n(function (TfvcVersionOption) {\r\n    /**\r\n     * None.\r\n     */\r\n    TfvcVersionOption[TfvcVersionOption[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Return the previous version.\r\n     */\r\n    TfvcVersionOption[TfvcVersionOption[\"Previous\"] = 1] = \"Previous\";\r\n    /**\r\n     * Only usuable with versiontype MergeSource and integer versions, uses RenameSource identifier instead of Merge identifier.\r\n     */\r\n    TfvcVersionOption[TfvcVersionOption[\"UseRename\"] = 2] = \"UseRename\";\r\n})(TfvcVersionOption = exports.TfvcVersionOption || (exports.TfvcVersionOption = {}));\r\n/**\r\n * Type of Version object\r\n */\r\nvar TfvcVersionType;\r\n(function (TfvcVersionType) {\r\n    /**\r\n     * Version is treated as a ChangesetId.\r\n     */\r\n    TfvcVersionType[TfvcVersionType[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Version is treated as a ChangesetId.\r\n     */\r\n    TfvcVersionType[TfvcVersionType[\"Changeset\"] = 1] = \"Changeset\";\r\n    /**\r\n     * Version is treated as a Shelveset name and owner.\r\n     */\r\n    TfvcVersionType[TfvcVersionType[\"Shelveset\"] = 2] = \"Shelveset\";\r\n    /**\r\n     * Version is treated as a Change.\r\n     */\r\n    TfvcVersionType[TfvcVersionType[\"Change\"] = 3] = \"Change\";\r\n    /**\r\n     * Version is treated as a Date.\r\n     */\r\n    TfvcVersionType[TfvcVersionType[\"Date\"] = 4] = \"Date\";\r\n    /**\r\n     * If Version is defined the Latest of that Version will be used, if no version is defined the latest ChangesetId will be used.\r\n     */\r\n    TfvcVersionType[TfvcVersionType[\"Latest\"] = 5] = \"Latest\";\r\n    /**\r\n     * Version will be treated as a Tip, if no version is defined latest will be used.\r\n     */\r\n    TfvcVersionType[TfvcVersionType[\"Tip\"] = 6] = \"Tip\";\r\n    /**\r\n     * Version will be treated as a MergeSource.\r\n     */\r\n    TfvcVersionType[TfvcVersionType[\"MergeSource\"] = 7] = \"MergeSource\";\r\n})(TfvcVersionType = exports.TfvcVersionType || (exports.TfvcVersionType = {}));\r\nvar VersionControlChangeType;\r\n(function (VersionControlChangeType) {\r\n    VersionControlChangeType[VersionControlChangeType[\"None\"] = 0] = \"None\";\r\n    VersionControlChangeType[VersionControlChangeType[\"Add\"] = 1] = \"Add\";\r\n    VersionControlChangeType[VersionControlChangeType[\"Edit\"] = 2] = \"Edit\";\r\n    VersionControlChangeType[VersionControlChangeType[\"Encoding\"] = 4] = \"Encoding\";\r\n    VersionControlChangeType[VersionControlChangeType[\"Rename\"] = 8] = \"Rename\";\r\n    VersionControlChangeType[VersionControlChangeType[\"Delete\"] = 16] = \"Delete\";\r\n    VersionControlChangeType[VersionControlChangeType[\"Undelete\"] = 32] = \"Undelete\";\r\n    VersionControlChangeType[VersionControlChangeType[\"Branch\"] = 64] = \"Branch\";\r\n    VersionControlChangeType[VersionControlChangeType[\"Merge\"] = 128] = \"Merge\";\r\n    VersionControlChangeType[VersionControlChangeType[\"Lock\"] = 256] = \"Lock\";\r\n    VersionControlChangeType[VersionControlChangeType[\"Rollback\"] = 512] = \"Rollback\";\r\n    VersionControlChangeType[VersionControlChangeType[\"SourceRename\"] = 1024] = \"SourceRename\";\r\n    VersionControlChangeType[VersionControlChangeType[\"TargetRename\"] = 2048] = \"TargetRename\";\r\n    VersionControlChangeType[VersionControlChangeType[\"Property\"] = 4096] = \"Property\";\r\n    VersionControlChangeType[VersionControlChangeType[\"All\"] = 8191] = \"All\";\r\n})(VersionControlChangeType = exports.VersionControlChangeType || (exports.VersionControlChangeType = {}));\r\nvar VersionControlRecursionType;\r\n(function (VersionControlRecursionType) {\r\n    /**\r\n     * Only return the specified item.\r\n     */\r\n    VersionControlRecursionType[VersionControlRecursionType[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Return the specified item and its direct children.\r\n     */\r\n    VersionControlRecursionType[VersionControlRecursionType[\"OneLevel\"] = 1] = \"OneLevel\";\r\n    /**\r\n     * Return the specified item and its direct children, as well as recursive chains of nested child folders that only contain a single folder.\r\n     */\r\n    VersionControlRecursionType[VersionControlRecursionType[\"OneLevelPlusNestedEmptyFolders\"] = 4] = \"OneLevelPlusNestedEmptyFolders\";\r\n    /**\r\n     * Return specified item and all descendants\r\n     */\r\n    VersionControlRecursionType[VersionControlRecursionType[\"Full\"] = 120] = \"Full\";\r\n})(VersionControlRecursionType = exports.VersionControlRecursionType || (exports.VersionControlRecursionType = {}));\r\nexports.TypeInfo = {\r\n    AdvSecEnablementStatus: {},\r\n    Attachment: {},\r\n    BillableCommitterDetail: {},\r\n    Change: {},\r\n    ChangeList: {},\r\n    Comment: {},\r\n    CommentThread: {},\r\n    CommentThreadStatus: {\r\n        enumValues: {\r\n            \"unknown\": 0,\r\n            \"active\": 1,\r\n            \"fixed\": 2,\r\n            \"wontFix\": 3,\r\n            \"closed\": 4,\r\n            \"byDesign\": 5,\r\n            \"pending\": 6\r\n        }\r\n    },\r\n    CommentType: {\r\n        enumValues: {\r\n            \"unknown\": 0,\r\n            \"text\": 1,\r\n            \"codeChange\": 2,\r\n            \"system\": 3\r\n        }\r\n    },\r\n    FileDiff: {},\r\n    GitAnnotatedTag: {},\r\n    GitAsyncOperationStatus: {\r\n        enumValues: {\r\n            \"queued\": 1,\r\n            \"inProgress\": 2,\r\n            \"completed\": 3,\r\n            \"failed\": 4,\r\n            \"abandoned\": 5\r\n        }\r\n    },\r\n    GitAsyncRefOperation: {},\r\n    GitAsyncRefOperationDetail: {},\r\n    GitAsyncRefOperationFailureStatus: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"invalidRefName\": 1,\r\n            \"refNameConflict\": 2,\r\n            \"createBranchPermissionRequired\": 3,\r\n            \"writePermissionRequired\": 4,\r\n            \"targetBranchDeleted\": 5,\r\n            \"gitObjectTooLarge\": 6,\r\n            \"operationIndentityNotFound\": 7,\r\n            \"asyncOperationNotFound\": 8,\r\n            \"other\": 9,\r\n            \"emptyCommitterSignature\": 10\r\n        }\r\n    },\r\n    GitAsyncRefOperationParameters: {},\r\n    GitAsyncRefOperationSource: {},\r\n    GitBaseVersionDescriptor: {},\r\n    GitBranchStats: {},\r\n    GitChange: {},\r\n    GitCherryPick: {},\r\n    GitCommit: {},\r\n    GitCommitChanges: {},\r\n    GitCommitDiffs: {},\r\n    GitCommitRef: {},\r\n    GitCommitToCreate: {},\r\n    GitConflict: {},\r\n    GitConflictAddAdd: {},\r\n    GitConflictAddRename: {},\r\n    GitConflictDeleteEdit: {},\r\n    GitConflictDeleteRename: {},\r\n    GitConflictDirectoryFile: {},\r\n    GitConflictEditDelete: {},\r\n    GitConflictEditEdit: {},\r\n    GitConflictFileDirectory: {},\r\n    GitConflictRename1to2: {},\r\n    GitConflictRename2to1: {},\r\n    GitConflictRenameAdd: {},\r\n    GitConflictRenameDelete: {},\r\n    GitConflictRenameRename: {},\r\n    GitConflictType: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"addAdd\": 1,\r\n            \"addRename\": 2,\r\n            \"deleteEdit\": 3,\r\n            \"deleteRename\": 4,\r\n            \"directoryFile\": 5,\r\n            \"directoryChild\": 6,\r\n            \"editDelete\": 7,\r\n            \"editEdit\": 8,\r\n            \"fileDirectory\": 9,\r\n            \"rename1to2\": 10,\r\n            \"rename2to1\": 11,\r\n            \"renameAdd\": 12,\r\n            \"renameDelete\": 13,\r\n            \"renameRename\": 14\r\n        }\r\n    },\r\n    GitConflictUpdateResult: {},\r\n    GitConflictUpdateStatus: {\r\n        enumValues: {\r\n            \"succeeded\": 0,\r\n            \"badRequest\": 1,\r\n            \"invalidResolution\": 2,\r\n            \"unsupportedConflictType\": 3,\r\n            \"notFound\": 4\r\n        }\r\n    },\r\n    GitDeletedRepository: {},\r\n    GitForkRef: {},\r\n    GitForkSyncRequest: {},\r\n    GitForkTeamProjectReference: {},\r\n    GitHistoryMode: {\r\n        enumValues: {\r\n            \"simplifiedHistory\": 0,\r\n            \"firstParent\": 1,\r\n            \"fullHistory\": 2,\r\n            \"fullHistorySimplifyMerges\": 3\r\n        }\r\n    },\r\n    GitImportFailedEvent: {},\r\n    GitImportRequest: {},\r\n    GitImportSucceededEvent: {},\r\n    GitItem: {},\r\n    GitItemDescriptor: {},\r\n    GitItemRequestData: {},\r\n    GitLastChangeTreeItems: {},\r\n    GitMerge: {},\r\n    GitObject: {},\r\n    GitObjectType: {\r\n        enumValues: {\r\n            \"bad\": 0,\r\n            \"commit\": 1,\r\n            \"tree\": 2,\r\n            \"blob\": 3,\r\n            \"tag\": 4,\r\n            \"ext2\": 5,\r\n            \"ofsDelta\": 6,\r\n            \"refDelta\": 7\r\n        }\r\n    },\r\n    GitPathAction: {},\r\n    GitPathActions: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"edit\": 1,\r\n            \"delete\": 2,\r\n            \"add\": 3,\r\n            \"rename\": 4\r\n        }\r\n    },\r\n    GitPathToItemsCollection: {},\r\n    GitPolicyConfigurationResponse: {},\r\n    GitPullRequest: {},\r\n    GitPullRequestChange: {},\r\n    GitPullRequestCommentThread: {},\r\n    GitPullRequestCompletionOptions: {},\r\n    GitPullRequestIteration: {},\r\n    GitPullRequestIterationChanges: {},\r\n    GitPullRequestMergeStrategy: {\r\n        enumValues: {\r\n            \"noFastForward\": 1,\r\n            \"squash\": 2,\r\n            \"rebase\": 3,\r\n            \"rebaseMerge\": 4\r\n        }\r\n    },\r\n    GitPullRequestQuery: {},\r\n    GitPullRequestQueryInput: {},\r\n    GitPullRequestQueryType: {\r\n        enumValues: {\r\n            \"notSet\": 0,\r\n            \"lastMergeCommit\": 1,\r\n            \"commit\": 2\r\n        }\r\n    },\r\n    GitPullRequestReviewFileType: {\r\n        enumValues: {\r\n            \"changeEntry\": 0,\r\n            \"attachment\": 1\r\n        }\r\n    },\r\n    GitPullRequestSearchCriteria: {},\r\n    GitPullRequestStatus: {},\r\n    GitPush: {},\r\n    GitPushEventData: {},\r\n    GitPushRef: {},\r\n    GitPushSearchCriteria: {},\r\n    GitQueryBranchStatsCriteria: {},\r\n    GitQueryCommitsCriteria: {},\r\n    GitQueryRefsCriteria: {},\r\n    GitRef: {},\r\n    GitRefFavorite: {},\r\n    GitRefSearchType: {\r\n        enumValues: {\r\n            \"exact\": 0,\r\n            \"startsWith\": 1,\r\n            \"contains\": 2\r\n        }\r\n    },\r\n    GitRefUpdateMode: {\r\n        enumValues: {\r\n            \"bestEffort\": 0,\r\n            \"allOrNone\": 1\r\n        }\r\n    },\r\n    GitRefUpdateResult: {},\r\n    GitRefUpdateStatus: {\r\n        enumValues: {\r\n            \"succeeded\": 0,\r\n            \"forcePushRequired\": 1,\r\n            \"staleOldObjectId\": 2,\r\n            \"invalidRefName\": 3,\r\n            \"unprocessed\": 4,\r\n            \"unresolvableToCommit\": 5,\r\n            \"writePermissionRequired\": 6,\r\n            \"manageNotePermissionRequired\": 7,\r\n            \"createBranchPermissionRequired\": 8,\r\n            \"createTagPermissionRequired\": 9,\r\n            \"rejectedByPlugin\": 10,\r\n            \"locked\": 11,\r\n            \"refNameConflict\": 12,\r\n            \"rejectedByPolicy\": 13,\r\n            \"succeededNonExistentRef\": 14,\r\n            \"succeededCorruptRef\": 15\r\n        }\r\n    },\r\n    GitRepository: {},\r\n    GitRepositoryCreateOptions: {},\r\n    GitRepositoryRef: {},\r\n    GitResolutionError: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"mergeContentNotFound\": 1,\r\n            \"pathInUse\": 2,\r\n            \"invalidPath\": 3,\r\n            \"unknownAction\": 4,\r\n            \"unknownMergeType\": 5,\r\n            \"otherError\": 255\r\n        }\r\n    },\r\n    GitResolutionMergeContent: {},\r\n    GitResolutionMergeType: {\r\n        enumValues: {\r\n            \"undecided\": 0,\r\n            \"takeSourceContent\": 1,\r\n            \"takeTargetContent\": 2,\r\n            \"autoMerged\": 3,\r\n            \"userMerged\": 4\r\n        }\r\n    },\r\n    GitResolutionPathConflict: {},\r\n    GitResolutionPathConflictAction: {\r\n        enumValues: {\r\n            \"undecided\": 0,\r\n            \"keepSourceRenameTarget\": 1,\r\n            \"keepSourceDeleteTarget\": 2,\r\n            \"keepTargetRenameSource\": 3,\r\n            \"keepTargetDeleteSource\": 4\r\n        }\r\n    },\r\n    GitResolutionPickOneAction: {},\r\n    GitResolutionRename1to2: {},\r\n    GitResolutionRename1to2Action: {\r\n        enumValues: {\r\n            \"undecided\": 0,\r\n            \"keepSourcePath\": 1,\r\n            \"keepTargetPath\": 2,\r\n            \"keepBothFiles\": 3\r\n        }\r\n    },\r\n    GitResolutionStatus: {\r\n        enumValues: {\r\n            \"unresolved\": 0,\r\n            \"partiallyResolved\": 1,\r\n            \"resolved\": 2\r\n        }\r\n    },\r\n    GitResolutionWhichAction: {\r\n        enumValues: {\r\n            \"undecided\": 0,\r\n            \"pickSourceAction\": 1,\r\n            \"pickTargetAction\": 2\r\n        }\r\n    },\r\n    GitRevert: {},\r\n    GitStatus: {},\r\n    GitStatusState: {\r\n        enumValues: {\r\n            \"notSet\": 0,\r\n            \"pending\": 1,\r\n            \"succeeded\": 2,\r\n            \"failed\": 3,\r\n            \"error\": 4,\r\n            \"notApplicable\": 5,\r\n            \"partiallySucceeded\": 6\r\n        }\r\n    },\r\n    GitTargetVersionDescriptor: {},\r\n    GitTreeDiff: {},\r\n    GitTreeDiffEntry: {},\r\n    GitTreeDiffResponse: {},\r\n    GitTreeEntryRef: {},\r\n    GitTreeRef: {},\r\n    GitUserDate: {},\r\n    GitVersionDescriptor: {},\r\n    GitVersionOptions: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"previousChange\": 1,\r\n            \"firstParent\": 2\r\n        }\r\n    },\r\n    GitVersionType: {\r\n        enumValues: {\r\n            \"branch\": 0,\r\n            \"tag\": 1,\r\n            \"commit\": 2\r\n        }\r\n    },\r\n    HistoryEntry: {},\r\n    IncludedGitCommit: {},\r\n    ItemContent: {},\r\n    ItemContentType: {\r\n        enumValues: {\r\n            \"rawText\": 0,\r\n            \"base64Encoded\": 1\r\n        }\r\n    },\r\n    ItemDetailsOptions: {},\r\n    IterationReason: {\r\n        enumValues: {\r\n            \"push\": 0,\r\n            \"forcePush\": 1,\r\n            \"create\": 2,\r\n            \"rebase\": 4,\r\n            \"unknown\": 8,\r\n            \"retarget\": 16,\r\n            \"resolveConflicts\": 32\r\n        }\r\n    },\r\n    LineDiffBlock: {},\r\n    LineDiffBlockChangeType: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"add\": 1,\r\n            \"delete\": 2,\r\n            \"edit\": 3\r\n        }\r\n    },\r\n    PullRequestAsyncStatus: {\r\n        enumValues: {\r\n            \"notSet\": 0,\r\n            \"queued\": 1,\r\n            \"conflicts\": 2,\r\n            \"succeeded\": 3,\r\n            \"rejectedByPolicy\": 4,\r\n            \"failure\": 5\r\n        }\r\n    },\r\n    PullRequestMergeFailureType: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"unknown\": 1,\r\n            \"caseSensitive\": 2,\r\n            \"objectTooLarge\": 3\r\n        }\r\n    },\r\n    PullRequestStatus: {\r\n        enumValues: {\r\n            \"notSet\": 0,\r\n            \"active\": 1,\r\n            \"abandoned\": 2,\r\n            \"completed\": 3,\r\n            \"all\": 4\r\n        }\r\n    },\r\n    PullRequestTimeRangeType: {\r\n        enumValues: {\r\n            \"created\": 1,\r\n            \"closed\": 2\r\n        }\r\n    },\r\n    RefFavoriteType: {\r\n        enumValues: {\r\n            \"invalid\": 0,\r\n            \"folder\": 1,\r\n            \"ref\": 2\r\n        }\r\n    },\r\n    SupportedIde: {},\r\n    SupportedIdeType: {\r\n        enumValues: {\r\n            \"unknown\": 0,\r\n            \"androidStudio\": 1,\r\n            \"appCode\": 2,\r\n            \"cLion\": 3,\r\n            \"dataGrip\": 4,\r\n            \"eclipse\": 13,\r\n            \"intelliJ\": 5,\r\n            \"mps\": 6,\r\n            \"phpStorm\": 7,\r\n            \"pyCharm\": 8,\r\n            \"rubyMine\": 9,\r\n            \"tower\": 10,\r\n            \"visualStudio\": 11,\r\n            \"vsCode\": 14,\r\n            \"webStorm\": 12\r\n        }\r\n    },\r\n    TfvcBranch: {},\r\n    TfvcBranchRef: {},\r\n    TfvcChange: {},\r\n    TfvcChangeset: {},\r\n    TfvcChangesetRef: {},\r\n    TfvcCheckinEventData: {},\r\n    TfvcHistoryEntry: {},\r\n    TfvcItem: {},\r\n    TfvcItemDescriptor: {},\r\n    TfvcItemPreviousHash: {},\r\n    TfvcItemRequestData: {},\r\n    TfvcLabel: {},\r\n    TfvcLabelRef: {},\r\n    TfvcShelveset: {},\r\n    TfvcShelvesetRef: {},\r\n    TfvcVersionDescriptor: {},\r\n    TfvcVersionOption: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"previous\": 1,\r\n            \"useRename\": 2\r\n        }\r\n    },\r\n    TfvcVersionType: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"changeset\": 1,\r\n            \"shelveset\": 2,\r\n            \"change\": 3,\r\n            \"date\": 4,\r\n            \"latest\": 5,\r\n            \"tip\": 6,\r\n            \"mergeSource\": 7\r\n        }\r\n    },\r\n    UpdateRefsRequest: {},\r\n    VersionControlChangeType: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"add\": 1,\r\n            \"edit\": 2,\r\n            \"encoding\": 4,\r\n            \"rename\": 8,\r\n            \"delete\": 16,\r\n            \"undelete\": 32,\r\n            \"branch\": 64,\r\n            \"merge\": 128,\r\n            \"lock\": 256,\r\n            \"rollback\": 512,\r\n            \"sourceRename\": 1024,\r\n            \"targetRename\": 2048,\r\n            \"property\": 4096,\r\n            \"all\": 8191\r\n        }\r\n    },\r\n    VersionControlProjectInfo: {},\r\n    VersionControlRecursionType: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"oneLevel\": 1,\r\n            \"oneLevelPlusNestedEmptyFolders\": 4,\r\n            \"full\": 120\r\n        }\r\n    },\r\n};\r\nexports.TypeInfo.AdvSecEnablementStatus.fields = {\r\n    changedOnDate: {\r\n        isDate: true,\r\n    },\r\n    enabledChangedOnDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.Attachment.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.BillableCommitterDetail.fields = {\r\n    commitTime: {\r\n        isDate: true,\r\n    },\r\n    pushedTime: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.Change.fields = {\r\n    changeType: {\r\n        enumType: exports.TypeInfo.VersionControlChangeType\r\n    },\r\n    newContent: {\r\n        typeInfo: exports.TypeInfo.ItemContent\r\n    }\r\n};\r\nexports.TypeInfo.ChangeList.fields = {\r\n    changeCounts: {\r\n        isDictionary: true,\r\n        dictionaryKeyEnumType: exports.TypeInfo.VersionControlChangeType,\r\n    },\r\n    creationDate: {\r\n        isDate: true,\r\n    },\r\n    sortDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.Comment.fields = {\r\n    commentType: {\r\n        enumType: exports.TypeInfo.CommentType\r\n    },\r\n    lastContentUpdatedDate: {\r\n        isDate: true,\r\n    },\r\n    lastUpdatedDate: {\r\n        isDate: true,\r\n    },\r\n    publishedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.CommentThread.fields = {\r\n    comments: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.Comment\r\n    },\r\n    lastUpdatedDate: {\r\n        isDate: true,\r\n    },\r\n    publishedDate: {\r\n        isDate: true,\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.CommentThreadStatus\r\n    }\r\n};\r\nexports.TypeInfo.FileDiff.fields = {\r\n    lineDiffBlocks: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.LineDiffBlock\r\n    }\r\n};\r\nexports.TypeInfo.GitAnnotatedTag.fields = {\r\n    taggedBy: {\r\n        typeInfo: exports.TypeInfo.GitUserDate\r\n    },\r\n    taggedObject: {\r\n        typeInfo: exports.TypeInfo.GitObject\r\n    }\r\n};\r\nexports.TypeInfo.GitAsyncRefOperation.fields = {\r\n    detailedStatus: {\r\n        typeInfo: exports.TypeInfo.GitAsyncRefOperationDetail\r\n    },\r\n    parameters: {\r\n        typeInfo: exports.TypeInfo.GitAsyncRefOperationParameters\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.GitAsyncOperationStatus\r\n    }\r\n};\r\nexports.TypeInfo.GitAsyncRefOperationDetail.fields = {\r\n    status: {\r\n        enumType: exports.TypeInfo.GitAsyncRefOperationFailureStatus\r\n    }\r\n};\r\nexports.TypeInfo.GitAsyncRefOperationParameters.fields = {\r\n    repository: {\r\n        typeInfo: exports.TypeInfo.GitRepository\r\n    },\r\n    source: {\r\n        typeInfo: exports.TypeInfo.GitAsyncRefOperationSource\r\n    }\r\n};\r\nexports.TypeInfo.GitAsyncRefOperationSource.fields = {\r\n    commitList: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    }\r\n};\r\nexports.TypeInfo.GitBaseVersionDescriptor.fields = {\r\n    baseVersionOptions: {\r\n        enumType: exports.TypeInfo.GitVersionOptions\r\n    },\r\n    baseVersionType: {\r\n        enumType: exports.TypeInfo.GitVersionType\r\n    },\r\n    versionOptions: {\r\n        enumType: exports.TypeInfo.GitVersionOptions\r\n    },\r\n    versionType: {\r\n        enumType: exports.TypeInfo.GitVersionType\r\n    }\r\n};\r\nexports.TypeInfo.GitBranchStats.fields = {\r\n    commit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    }\r\n};\r\nexports.TypeInfo.GitChange.fields = {\r\n    changeType: {\r\n        enumType: exports.TypeInfo.VersionControlChangeType\r\n    },\r\n    newContent: {\r\n        typeInfo: exports.TypeInfo.ItemContent\r\n    }\r\n};\r\nexports.TypeInfo.GitCherryPick.fields = {\r\n    detailedStatus: {\r\n        typeInfo: exports.TypeInfo.GitAsyncRefOperationDetail\r\n    },\r\n    parameters: {\r\n        typeInfo: exports.TypeInfo.GitAsyncRefOperationParameters\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.GitAsyncOperationStatus\r\n    }\r\n};\r\nexports.TypeInfo.GitCommit.fields = {\r\n    author: {\r\n        typeInfo: exports.TypeInfo.GitUserDate\r\n    },\r\n    changes: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.GitChange\r\n    },\r\n    committer: {\r\n        typeInfo: exports.TypeInfo.GitUserDate\r\n    },\r\n    push: {\r\n        typeInfo: exports.TypeInfo.GitPushRef\r\n    },\r\n    statuses: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.GitStatus\r\n    }\r\n};\r\nexports.TypeInfo.GitCommitChanges.fields = {\r\n    changes: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.GitChange\r\n    }\r\n};\r\nexports.TypeInfo.GitCommitDiffs.fields = {\r\n    changeCounts: {\r\n        isDictionary: true,\r\n        dictionaryKeyEnumType: exports.TypeInfo.VersionControlChangeType,\r\n    },\r\n    changes: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.GitChange\r\n    }\r\n};\r\nexports.TypeInfo.GitCommitRef.fields = {\r\n    author: {\r\n        typeInfo: exports.TypeInfo.GitUserDate\r\n    },\r\n    changes: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.GitChange\r\n    },\r\n    committer: {\r\n        typeInfo: exports.TypeInfo.GitUserDate\r\n    },\r\n    push: {\r\n        typeInfo: exports.TypeInfo.GitPushRef\r\n    },\r\n    statuses: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.GitStatus\r\n    }\r\n};\r\nexports.TypeInfo.GitCommitToCreate.fields = {\r\n    baseRef: {\r\n        typeInfo: exports.TypeInfo.GitRef\r\n    },\r\n    pathActions: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.GitPathAction\r\n    }\r\n};\r\nexports.TypeInfo.GitConflict.fields = {\r\n    conflictType: {\r\n        enumType: exports.TypeInfo.GitConflictType\r\n    },\r\n    mergeBaseCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeSourceCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeTargetCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    resolutionError: {\r\n        enumType: exports.TypeInfo.GitResolutionError\r\n    },\r\n    resolutionStatus: {\r\n        enumType: exports.TypeInfo.GitResolutionStatus\r\n    },\r\n    resolvedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.GitConflictAddAdd.fields = {\r\n    conflictType: {\r\n        enumType: exports.TypeInfo.GitConflictType\r\n    },\r\n    mergeBaseCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeSourceCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeTargetCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    resolution: {\r\n        typeInfo: exports.TypeInfo.GitResolutionMergeContent\r\n    },\r\n    resolutionError: {\r\n        enumType: exports.TypeInfo.GitResolutionError\r\n    },\r\n    resolutionStatus: {\r\n        enumType: exports.TypeInfo.GitResolutionStatus\r\n    },\r\n    resolvedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.GitConflictAddRename.fields = {\r\n    conflictType: {\r\n        enumType: exports.TypeInfo.GitConflictType\r\n    },\r\n    mergeBaseCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeSourceCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeTargetCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    resolution: {\r\n        typeInfo: exports.TypeInfo.GitResolutionPathConflict\r\n    },\r\n    resolutionError: {\r\n        enumType: exports.TypeInfo.GitResolutionError\r\n    },\r\n    resolutionStatus: {\r\n        enumType: exports.TypeInfo.GitResolutionStatus\r\n    },\r\n    resolvedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.GitConflictDeleteEdit.fields = {\r\n    conflictType: {\r\n        enumType: exports.TypeInfo.GitConflictType\r\n    },\r\n    mergeBaseCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeSourceCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeTargetCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    resolution: {\r\n        typeInfo: exports.TypeInfo.GitResolutionPickOneAction\r\n    },\r\n    resolutionError: {\r\n        enumType: exports.TypeInfo.GitResolutionError\r\n    },\r\n    resolutionStatus: {\r\n        enumType: exports.TypeInfo.GitResolutionStatus\r\n    },\r\n    resolvedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.GitConflictDeleteRename.fields = {\r\n    conflictType: {\r\n        enumType: exports.TypeInfo.GitConflictType\r\n    },\r\n    mergeBaseCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeSourceCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeTargetCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    resolution: {\r\n        typeInfo: exports.TypeInfo.GitResolutionPickOneAction\r\n    },\r\n    resolutionError: {\r\n        enumType: exports.TypeInfo.GitResolutionError\r\n    },\r\n    resolutionStatus: {\r\n        enumType: exports.TypeInfo.GitResolutionStatus\r\n    },\r\n    resolvedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.GitConflictDirectoryFile.fields = {\r\n    conflictType: {\r\n        enumType: exports.TypeInfo.GitConflictType\r\n    },\r\n    mergeBaseCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeSourceCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeTargetCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    resolution: {\r\n        typeInfo: exports.TypeInfo.GitResolutionPathConflict\r\n    },\r\n    resolutionError: {\r\n        enumType: exports.TypeInfo.GitResolutionError\r\n    },\r\n    resolutionStatus: {\r\n        enumType: exports.TypeInfo.GitResolutionStatus\r\n    },\r\n    resolvedDate: {\r\n        isDate: true,\r\n    },\r\n    sourceTree: {\r\n        typeInfo: exports.TypeInfo.GitTreeRef\r\n    }\r\n};\r\nexports.TypeInfo.GitConflictEditDelete.fields = {\r\n    conflictType: {\r\n        enumType: exports.TypeInfo.GitConflictType\r\n    },\r\n    mergeBaseCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeSourceCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeTargetCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    resolution: {\r\n        typeInfo: exports.TypeInfo.GitResolutionPickOneAction\r\n    },\r\n    resolutionError: {\r\n        enumType: exports.TypeInfo.GitResolutionError\r\n    },\r\n    resolutionStatus: {\r\n        enumType: exports.TypeInfo.GitResolutionStatus\r\n    },\r\n    resolvedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.GitConflictEditEdit.fields = {\r\n    conflictType: {\r\n        enumType: exports.TypeInfo.GitConflictType\r\n    },\r\n    mergeBaseCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeSourceCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeTargetCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    resolution: {\r\n        typeInfo: exports.TypeInfo.GitResolutionMergeContent\r\n    },\r\n    resolutionError: {\r\n        enumType: exports.TypeInfo.GitResolutionError\r\n    },\r\n    resolutionStatus: {\r\n        enumType: exports.TypeInfo.GitResolutionStatus\r\n    },\r\n    resolvedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.GitConflictFileDirectory.fields = {\r\n    conflictType: {\r\n        enumType: exports.TypeInfo.GitConflictType\r\n    },\r\n    mergeBaseCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeSourceCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeTargetCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    resolution: {\r\n        typeInfo: exports.TypeInfo.GitResolutionPathConflict\r\n    },\r\n    resolutionError: {\r\n        enumType: exports.TypeInfo.GitResolutionError\r\n    },\r\n    resolutionStatus: {\r\n        enumType: exports.TypeInfo.GitResolutionStatus\r\n    },\r\n    resolvedDate: {\r\n        isDate: true,\r\n    },\r\n    targetTree: {\r\n        typeInfo: exports.TypeInfo.GitTreeRef\r\n    }\r\n};\r\nexports.TypeInfo.GitConflictRename1to2.fields = {\r\n    conflictType: {\r\n        enumType: exports.TypeInfo.GitConflictType\r\n    },\r\n    mergeBaseCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeSourceCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeTargetCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    resolution: {\r\n        typeInfo: exports.TypeInfo.GitResolutionRename1to2\r\n    },\r\n    resolutionError: {\r\n        enumType: exports.TypeInfo.GitResolutionError\r\n    },\r\n    resolutionStatus: {\r\n        enumType: exports.TypeInfo.GitResolutionStatus\r\n    },\r\n    resolvedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.GitConflictRename2to1.fields = {\r\n    conflictType: {\r\n        enumType: exports.TypeInfo.GitConflictType\r\n    },\r\n    mergeBaseCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeSourceCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeTargetCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    resolution: {\r\n        typeInfo: exports.TypeInfo.GitResolutionPathConflict\r\n    },\r\n    resolutionError: {\r\n        enumType: exports.TypeInfo.GitResolutionError\r\n    },\r\n    resolutionStatus: {\r\n        enumType: exports.TypeInfo.GitResolutionStatus\r\n    },\r\n    resolvedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.GitConflictRenameAdd.fields = {\r\n    conflictType: {\r\n        enumType: exports.TypeInfo.GitConflictType\r\n    },\r\n    mergeBaseCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeSourceCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeTargetCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    resolution: {\r\n        typeInfo: exports.TypeInfo.GitResolutionPathConflict\r\n    },\r\n    resolutionError: {\r\n        enumType: exports.TypeInfo.GitResolutionError\r\n    },\r\n    resolutionStatus: {\r\n        enumType: exports.TypeInfo.GitResolutionStatus\r\n    },\r\n    resolvedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.GitConflictRenameDelete.fields = {\r\n    conflictType: {\r\n        enumType: exports.TypeInfo.GitConflictType\r\n    },\r\n    mergeBaseCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeSourceCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeTargetCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    resolution: {\r\n        typeInfo: exports.TypeInfo.GitResolutionPickOneAction\r\n    },\r\n    resolutionError: {\r\n        enumType: exports.TypeInfo.GitResolutionError\r\n    },\r\n    resolutionStatus: {\r\n        enumType: exports.TypeInfo.GitResolutionStatus\r\n    },\r\n    resolvedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.GitConflictRenameRename.fields = {\r\n    conflictType: {\r\n        enumType: exports.TypeInfo.GitConflictType\r\n    },\r\n    mergeBaseCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeSourceCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeTargetCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    resolution: {\r\n        typeInfo: exports.TypeInfo.GitResolutionMergeContent\r\n    },\r\n    resolutionError: {\r\n        enumType: exports.TypeInfo.GitResolutionError\r\n    },\r\n    resolutionStatus: {\r\n        enumType: exports.TypeInfo.GitResolutionStatus\r\n    },\r\n    resolvedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.GitConflictUpdateResult.fields = {\r\n    updatedConflict: {\r\n        typeInfo: exports.TypeInfo.GitConflict\r\n    },\r\n    updateStatus: {\r\n        enumType: exports.TypeInfo.GitConflictUpdateStatus\r\n    }\r\n};\r\nexports.TypeInfo.GitDeletedRepository.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    },\r\n    deletedDate: {\r\n        isDate: true,\r\n    },\r\n    project: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    }\r\n};\r\nexports.TypeInfo.GitForkRef.fields = {\r\n    repository: {\r\n        typeInfo: exports.TypeInfo.GitRepository\r\n    },\r\n    statuses: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.GitStatus\r\n    }\r\n};\r\nexports.TypeInfo.GitForkSyncRequest.fields = {\r\n    status: {\r\n        enumType: exports.TypeInfo.GitAsyncOperationStatus\r\n    }\r\n};\r\nexports.TypeInfo.GitForkTeamProjectReference.fields = {\r\n    lastUpdateTime: {\r\n        isDate: true,\r\n    },\r\n    visibility: {\r\n        enumType: TfsCoreInterfaces.TypeInfo.ProjectVisibility\r\n    }\r\n};\r\nexports.TypeInfo.GitImportFailedEvent.fields = {\r\n    targetRepository: {\r\n        typeInfo: exports.TypeInfo.GitRepository\r\n    }\r\n};\r\nexports.TypeInfo.GitImportRequest.fields = {\r\n    repository: {\r\n        typeInfo: exports.TypeInfo.GitRepository\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.GitAsyncOperationStatus\r\n    }\r\n};\r\nexports.TypeInfo.GitImportSucceededEvent.fields = {\r\n    targetRepository: {\r\n        typeInfo: exports.TypeInfo.GitRepository\r\n    }\r\n};\r\nexports.TypeInfo.GitItem.fields = {\r\n    gitObjectType: {\r\n        enumType: exports.TypeInfo.GitObjectType\r\n    },\r\n    latestProcessedChange: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    }\r\n};\r\nexports.TypeInfo.GitItemDescriptor.fields = {\r\n    recursionLevel: {\r\n        enumType: exports.TypeInfo.VersionControlRecursionType\r\n    },\r\n    versionOptions: {\r\n        enumType: exports.TypeInfo.GitVersionOptions\r\n    },\r\n    versionType: {\r\n        enumType: exports.TypeInfo.GitVersionType\r\n    }\r\n};\r\nexports.TypeInfo.GitItemRequestData.fields = {\r\n    itemDescriptors: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.GitItemDescriptor\r\n    }\r\n};\r\nexports.TypeInfo.GitLastChangeTreeItems.fields = {\r\n    commits: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    lastExploredTime: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.GitMerge.fields = {\r\n    status: {\r\n        enumType: exports.TypeInfo.GitAsyncOperationStatus\r\n    }\r\n};\r\nexports.TypeInfo.GitObject.fields = {\r\n    objectType: {\r\n        enumType: exports.TypeInfo.GitObjectType\r\n    }\r\n};\r\nexports.TypeInfo.GitPathAction.fields = {\r\n    action: {\r\n        enumType: exports.TypeInfo.GitPathActions\r\n    }\r\n};\r\nexports.TypeInfo.GitPathToItemsCollection.fields = {\r\n    items: {\r\n        isDictionary: true,\r\n        dictionaryValueFieldInfo: {\r\n            isArray: true,\r\n            typeInfo: exports.TypeInfo.GitItem\r\n        }\r\n    }\r\n};\r\nexports.TypeInfo.GitPolicyConfigurationResponse.fields = {\r\n    policyConfigurations: {\r\n        isArray: true,\r\n        typeInfo: PolicyInterfaces.TypeInfo.PolicyConfiguration\r\n    }\r\n};\r\nexports.TypeInfo.GitPullRequest.fields = {\r\n    closedDate: {\r\n        isDate: true,\r\n    },\r\n    commits: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    completionOptions: {\r\n        typeInfo: exports.TypeInfo.GitPullRequestCompletionOptions\r\n    },\r\n    completionQueueTime: {\r\n        isDate: true,\r\n    },\r\n    creationDate: {\r\n        isDate: true,\r\n    },\r\n    forkSource: {\r\n        typeInfo: exports.TypeInfo.GitForkRef\r\n    },\r\n    lastMergeCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    lastMergeSourceCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    lastMergeTargetCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    mergeFailureType: {\r\n        enumType: exports.TypeInfo.PullRequestMergeFailureType\r\n    },\r\n    mergeStatus: {\r\n        enumType: exports.TypeInfo.PullRequestAsyncStatus\r\n    },\r\n    repository: {\r\n        typeInfo: exports.TypeInfo.GitRepository\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.PullRequestStatus\r\n    }\r\n};\r\nexports.TypeInfo.GitPullRequestChange.fields = {\r\n    changeType: {\r\n        enumType: exports.TypeInfo.VersionControlChangeType\r\n    },\r\n    newContent: {\r\n        typeInfo: exports.TypeInfo.ItemContent\r\n    }\r\n};\r\nexports.TypeInfo.GitPullRequestCommentThread.fields = {\r\n    comments: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.Comment\r\n    },\r\n    lastUpdatedDate: {\r\n        isDate: true,\r\n    },\r\n    publishedDate: {\r\n        isDate: true,\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.CommentThreadStatus\r\n    }\r\n};\r\nexports.TypeInfo.GitPullRequestCompletionOptions.fields = {\r\n    mergeStrategy: {\r\n        enumType: exports.TypeInfo.GitPullRequestMergeStrategy\r\n    }\r\n};\r\nexports.TypeInfo.GitPullRequestIteration.fields = {\r\n    changeList: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.GitPullRequestChange\r\n    },\r\n    commits: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    commonRefCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    createdDate: {\r\n        isDate: true,\r\n    },\r\n    push: {\r\n        typeInfo: exports.TypeInfo.GitPushRef\r\n    },\r\n    reason: {\r\n        enumType: exports.TypeInfo.IterationReason\r\n    },\r\n    sourceRefCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    targetRefCommit: {\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    updatedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.GitPullRequestIterationChanges.fields = {\r\n    changeEntries: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.GitPullRequestChange\r\n    }\r\n};\r\nexports.TypeInfo.GitPullRequestQuery.fields = {\r\n    queries: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.GitPullRequestQueryInput\r\n    },\r\n};\r\nexports.TypeInfo.GitPullRequestQueryInput.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.GitPullRequestQueryType\r\n    }\r\n};\r\nexports.TypeInfo.GitPullRequestSearchCriteria.fields = {\r\n    maxTime: {\r\n        isDate: true,\r\n    },\r\n    minTime: {\r\n        isDate: true,\r\n    },\r\n    queryTimeRangeType: {\r\n        enumType: exports.TypeInfo.PullRequestTimeRangeType\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.PullRequestStatus\r\n    }\r\n};\r\nexports.TypeInfo.GitPullRequestStatus.fields = {\r\n    creationDate: {\r\n        isDate: true,\r\n    },\r\n    state: {\r\n        enumType: exports.TypeInfo.GitStatusState\r\n    },\r\n    updatedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.GitPush.fields = {\r\n    commits: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.GitCommitRef\r\n    },\r\n    date: {\r\n        isDate: true,\r\n    },\r\n    repository: {\r\n        typeInfo: exports.TypeInfo.GitRepository\r\n    }\r\n};\r\nexports.TypeInfo.GitPushEventData.fields = {\r\n    commits: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.GitCommit\r\n    },\r\n    repository: {\r\n        typeInfo: exports.TypeInfo.GitRepository\r\n    }\r\n};\r\nexports.TypeInfo.GitPushRef.fields = {\r\n    date: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.GitPushSearchCriteria.fields = {\r\n    fromDate: {\r\n        isDate: true,\r\n    },\r\n    toDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.GitQueryBranchStatsCriteria.fields = {\r\n    baseCommit: {\r\n        typeInfo: exports.TypeInfo.GitVersionDescriptor\r\n    },\r\n    targetCommits: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.GitVersionDescriptor\r\n    }\r\n};\r\nexports.TypeInfo.GitQueryCommitsCriteria.fields = {\r\n    compareVersion: {\r\n        typeInfo: exports.TypeInfo.GitVersionDescriptor\r\n    },\r\n    historyMode: {\r\n        enumType: exports.TypeInfo.GitHistoryMode\r\n    },\r\n    itemVersion: {\r\n        typeInfo: exports.TypeInfo.GitVersionDescriptor\r\n    }\r\n};\r\nexports.TypeInfo.GitQueryRefsCriteria.fields = {\r\n    searchType: {\r\n        enumType: exports.TypeInfo.GitRefSearchType\r\n    }\r\n};\r\nexports.TypeInfo.GitRef.fields = {\r\n    statuses: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.GitStatus\r\n    }\r\n};\r\nexports.TypeInfo.GitRefFavorite.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.RefFavoriteType\r\n    }\r\n};\r\nexports.TypeInfo.GitRefUpdateResult.fields = {\r\n    updateStatus: {\r\n        enumType: exports.TypeInfo.GitRefUpdateStatus\r\n    }\r\n};\r\nexports.TypeInfo.GitRepository.fields = {\r\n    parentRepository: {\r\n        typeInfo: exports.TypeInfo.GitRepositoryRef\r\n    },\r\n    project: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    }\r\n};\r\nexports.TypeInfo.GitRepositoryCreateOptions.fields = {\r\n    parentRepository: {\r\n        typeInfo: exports.TypeInfo.GitRepositoryRef\r\n    },\r\n    project: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    }\r\n};\r\nexports.TypeInfo.GitRepositoryRef.fields = {\r\n    project: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    }\r\n};\r\nexports.TypeInfo.GitResolutionMergeContent.fields = {\r\n    mergeType: {\r\n        enumType: exports.TypeInfo.GitResolutionMergeType\r\n    }\r\n};\r\nexports.TypeInfo.GitResolutionPathConflict.fields = {\r\n    action: {\r\n        enumType: exports.TypeInfo.GitResolutionPathConflictAction\r\n    }\r\n};\r\nexports.TypeInfo.GitResolutionPickOneAction.fields = {\r\n    action: {\r\n        enumType: exports.TypeInfo.GitResolutionWhichAction\r\n    }\r\n};\r\nexports.TypeInfo.GitResolutionRename1to2.fields = {\r\n    action: {\r\n        enumType: exports.TypeInfo.GitResolutionRename1to2Action\r\n    },\r\n    mergeType: {\r\n        enumType: exports.TypeInfo.GitResolutionMergeType\r\n    }\r\n};\r\nexports.TypeInfo.GitRevert.fields = {\r\n    detailedStatus: {\r\n        typeInfo: exports.TypeInfo.GitAsyncRefOperationDetail\r\n    },\r\n    parameters: {\r\n        typeInfo: exports.TypeInfo.GitAsyncRefOperationParameters\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.GitAsyncOperationStatus\r\n    }\r\n};\r\nexports.TypeInfo.GitStatus.fields = {\r\n    creationDate: {\r\n        isDate: true,\r\n    },\r\n    state: {\r\n        enumType: exports.TypeInfo.GitStatusState\r\n    },\r\n    updatedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.GitTargetVersionDescriptor.fields = {\r\n    targetVersionOptions: {\r\n        enumType: exports.TypeInfo.GitVersionOptions\r\n    },\r\n    targetVersionType: {\r\n        enumType: exports.TypeInfo.GitVersionType\r\n    },\r\n    versionOptions: {\r\n        enumType: exports.TypeInfo.GitVersionOptions\r\n    },\r\n    versionType: {\r\n        enumType: exports.TypeInfo.GitVersionType\r\n    }\r\n};\r\nexports.TypeInfo.GitTreeDiff.fields = {\r\n    diffEntries: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.GitTreeDiffEntry\r\n    }\r\n};\r\nexports.TypeInfo.GitTreeDiffEntry.fields = {\r\n    changeType: {\r\n        enumType: exports.TypeInfo.VersionControlChangeType\r\n    },\r\n    objectType: {\r\n        enumType: exports.TypeInfo.GitObjectType\r\n    }\r\n};\r\nexports.TypeInfo.GitTreeDiffResponse.fields = {\r\n    treeDiff: {\r\n        typeInfo: exports.TypeInfo.GitTreeDiff\r\n    }\r\n};\r\nexports.TypeInfo.GitTreeEntryRef.fields = {\r\n    gitObjectType: {\r\n        enumType: exports.TypeInfo.GitObjectType\r\n    }\r\n};\r\nexports.TypeInfo.GitTreeRef.fields = {\r\n    treeEntries: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.GitTreeEntryRef\r\n    }\r\n};\r\nexports.TypeInfo.GitUserDate.fields = {\r\n    date: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.GitVersionDescriptor.fields = {\r\n    versionOptions: {\r\n        enumType: exports.TypeInfo.GitVersionOptions\r\n    },\r\n    versionType: {\r\n        enumType: exports.TypeInfo.GitVersionType\r\n    }\r\n};\r\nexports.TypeInfo.HistoryEntry.fields = {\r\n    itemChangeType: {\r\n        enumType: exports.TypeInfo.VersionControlChangeType\r\n    }\r\n};\r\nexports.TypeInfo.IncludedGitCommit.fields = {\r\n    commitTime: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.ItemContent.fields = {\r\n    contentType: {\r\n        enumType: exports.TypeInfo.ItemContentType\r\n    }\r\n};\r\nexports.TypeInfo.ItemDetailsOptions.fields = {\r\n    recursionLevel: {\r\n        enumType: exports.TypeInfo.VersionControlRecursionType\r\n    }\r\n};\r\nexports.TypeInfo.LineDiffBlock.fields = {\r\n    changeType: {\r\n        enumType: exports.TypeInfo.LineDiffBlockChangeType\r\n    }\r\n};\r\nexports.TypeInfo.SupportedIde.fields = {\r\n    ideType: {\r\n        enumType: exports.TypeInfo.SupportedIdeType\r\n    }\r\n};\r\nexports.TypeInfo.TfvcBranch.fields = {\r\n    children: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TfvcBranch\r\n    },\r\n    createdDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TfvcBranchRef.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TfvcChange.fields = {\r\n    changeType: {\r\n        enumType: exports.TypeInfo.VersionControlChangeType\r\n    },\r\n    newContent: {\r\n        typeInfo: exports.TypeInfo.ItemContent\r\n    }\r\n};\r\nexports.TypeInfo.TfvcChangeset.fields = {\r\n    changes: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TfvcChange\r\n    },\r\n    createdDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TfvcChangesetRef.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TfvcCheckinEventData.fields = {\r\n    changeset: {\r\n        typeInfo: exports.TypeInfo.TfvcChangeset\r\n    },\r\n    project: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    }\r\n};\r\nexports.TypeInfo.TfvcHistoryEntry.fields = {\r\n    itemChangeType: {\r\n        enumType: exports.TypeInfo.VersionControlChangeType\r\n    }\r\n};\r\nexports.TypeInfo.TfvcItem.fields = {\r\n    changeDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TfvcItemDescriptor.fields = {\r\n    recursionLevel: {\r\n        enumType: exports.TypeInfo.VersionControlRecursionType\r\n    },\r\n    versionOption: {\r\n        enumType: exports.TypeInfo.TfvcVersionOption\r\n    },\r\n    versionType: {\r\n        enumType: exports.TypeInfo.TfvcVersionType\r\n    }\r\n};\r\nexports.TypeInfo.TfvcItemPreviousHash.fields = {\r\n    changeDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TfvcItemRequestData.fields = {\r\n    itemDescriptors: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TfvcItemDescriptor\r\n    }\r\n};\r\nexports.TypeInfo.TfvcLabel.fields = {\r\n    items: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TfvcItem\r\n    },\r\n    modifiedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TfvcLabelRef.fields = {\r\n    modifiedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TfvcShelveset.fields = {\r\n    changes: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TfvcChange\r\n    },\r\n    createdDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TfvcShelvesetRef.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TfvcVersionDescriptor.fields = {\r\n    versionOption: {\r\n        enumType: exports.TypeInfo.TfvcVersionOption\r\n    },\r\n    versionType: {\r\n        enumType: exports.TypeInfo.TfvcVersionType\r\n    }\r\n};\r\nexports.TypeInfo.UpdateRefsRequest.fields = {\r\n    updateMode: {\r\n        enumType: exports.TypeInfo.GitRefUpdateMode\r\n    }\r\n};\r\nexports.TypeInfo.VersionControlProjectInfo.fields = {\r\n    defaultSourceControlType: {\r\n        enumType: TfsCoreInterfaces.TypeInfo.SourceControlTypes\r\n    },\r\n    project: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    }\r\n};\r\n","/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst VSSInterfaces = require(\"../interfaces/common/VSSInterfaces\");\r\nvar InheritLevel;\r\n(function (InheritLevel) {\r\n    InheritLevel[InheritLevel[\"None\"] = 0] = \"None\";\r\n    InheritLevel[InheritLevel[\"Deployment\"] = 1] = \"Deployment\";\r\n    InheritLevel[InheritLevel[\"Account\"] = 2] = \"Account\";\r\n    InheritLevel[InheritLevel[\"Collection\"] = 4] = \"Collection\";\r\n    InheritLevel[InheritLevel[\"All\"] = 7] = \"All\";\r\n})(InheritLevel = exports.InheritLevel || (exports.InheritLevel = {}));\r\nvar RelativeToSetting;\r\n(function (RelativeToSetting) {\r\n    RelativeToSetting[RelativeToSetting[\"Context\"] = 0] = \"Context\";\r\n    RelativeToSetting[RelativeToSetting[\"WebApplication\"] = 2] = \"WebApplication\";\r\n    RelativeToSetting[RelativeToSetting[\"FullyQualified\"] = 3] = \"FullyQualified\";\r\n})(RelativeToSetting = exports.RelativeToSetting || (exports.RelativeToSetting = {}));\r\nvar ServiceStatus;\r\n(function (ServiceStatus) {\r\n    ServiceStatus[ServiceStatus[\"Assigned\"] = 0] = \"Assigned\";\r\n    ServiceStatus[ServiceStatus[\"Active\"] = 1] = \"Active\";\r\n    ServiceStatus[ServiceStatus[\"Moving\"] = 2] = \"Moving\";\r\n})(ServiceStatus = exports.ServiceStatus || (exports.ServiceStatus = {}));\r\nexports.TypeInfo = {\r\n    ConnectionData: {},\r\n    InheritLevel: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"deployment\": 1,\r\n            \"account\": 2,\r\n            \"collection\": 4,\r\n            \"all\": 7\r\n        }\r\n    },\r\n    LocationServiceData: {},\r\n    RelativeToSetting: {\r\n        enumValues: {\r\n            \"context\": 0,\r\n            \"webApplication\": 2,\r\n            \"fullyQualified\": 3\r\n        }\r\n    },\r\n    ServiceDefinition: {},\r\n    ServiceStatus: {\r\n        enumValues: {\r\n            \"assigned\": 0,\r\n            \"active\": 1,\r\n            \"moving\": 2\r\n        }\r\n    },\r\n};\r\nexports.TypeInfo.ConnectionData.fields = {\r\n    deploymentType: {\r\n        enumType: VSSInterfaces.TypeInfo.DeploymentFlags\r\n    },\r\n    lastUserAccess: {\r\n        isDate: true,\r\n    },\r\n    locationServiceData: {\r\n        typeInfo: exports.TypeInfo.LocationServiceData\r\n    }\r\n};\r\nexports.TypeInfo.LocationServiceData.fields = {\r\n    serviceDefinitions: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ServiceDefinition\r\n    }\r\n};\r\nexports.TypeInfo.ServiceDefinition.fields = {\r\n    inheritLevel: {\r\n        enumType: exports.TypeInfo.InheritLevel\r\n    },\r\n    relativeToSetting: {\r\n        enumType: exports.TypeInfo.RelativeToSetting\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.ServiceStatus\r\n    }\r\n};\r\n","/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar BillingMode;\r\n(function (BillingMode) {\r\n    /**\r\n     * None implies the organization is not billable because no Azure Subscription has been set.\r\n     */\r\n    BillingMode[BillingMode[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * When an organization is the only organization mapped to an Azure Subscription.\r\n     */\r\n    BillingMode[BillingMode[\"SingleOrg\"] = 1] = \"SingleOrg\";\r\n    /**\r\n     * When an organization is mapped to an Azure Subscription to which at least one other org is mapped.\r\n     */\r\n    BillingMode[BillingMode[\"MultiOrg\"] = 2] = \"MultiOrg\";\r\n})(BillingMode = exports.BillingMode || (exports.BillingMode = {}));\r\nexports.TypeInfo = {\r\n    AdvSecEnablementSettings: {},\r\n    AdvSecEnablementStatus: {},\r\n    BillableCommitterDetails: {},\r\n    BillingInfo: {},\r\n    BillingMode: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"singleOrg\": 1,\r\n            \"multiOrg\": 2\r\n        }\r\n    },\r\n    MeterUsage: {},\r\n};\r\nexports.TypeInfo.AdvSecEnablementSettings.fields = {\r\n    reposEnablementStatus: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.AdvSecEnablementStatus\r\n    }\r\n};\r\nexports.TypeInfo.AdvSecEnablementStatus.fields = {\r\n    advSecEnablementLastChangedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.BillableCommitterDetails.fields = {\r\n    commitTime: {\r\n        isDate: true,\r\n    },\r\n    pushedTime: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.BillingInfo.fields = {\r\n    advSecEnabledChangedOnDate: {\r\n        isDate: true,\r\n    },\r\n    advSecEnabledFirstChangedOnDate: {\r\n        isDate: true,\r\n    },\r\n    billingMode: {\r\n        enumType: exports.TypeInfo.BillingMode\r\n    }\r\n};\r\nexports.TypeInfo.MeterUsage.fields = {\r\n    billingDate: {\r\n        isDate: true,\r\n    }\r\n};\r\n","/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Default delivery preference for group subscribers. Indicates how the subscriber should be notified.\r\n */\r\nvar DefaultGroupDeliveryPreference;\r\n(function (DefaultGroupDeliveryPreference) {\r\n    /**\r\n     * Do not send notifications by default. Note: notifications can still be delivered to subscribers, for example via a custom subscription.\r\n     */\r\n    DefaultGroupDeliveryPreference[DefaultGroupDeliveryPreference[\"NoDelivery\"] = -1] = \"NoDelivery\";\r\n    /**\r\n     * Deliver notifications to each member of the group representing the subscriber. Only applicable when the subscriber is a group.\r\n     */\r\n    DefaultGroupDeliveryPreference[DefaultGroupDeliveryPreference[\"EachMember\"] = 2] = \"EachMember\";\r\n})(DefaultGroupDeliveryPreference = exports.DefaultGroupDeliveryPreference || (exports.DefaultGroupDeliveryPreference = {}));\r\n/**\r\n * Describes the subscription evaluation operation status.\r\n */\r\nvar EvaluationOperationStatus;\r\n(function (EvaluationOperationStatus) {\r\n    /**\r\n     * The operation object does not have the status set.\r\n     */\r\n    EvaluationOperationStatus[EvaluationOperationStatus[\"NotSet\"] = 0] = \"NotSet\";\r\n    /**\r\n     * The operation has been queued.\r\n     */\r\n    EvaluationOperationStatus[EvaluationOperationStatus[\"Queued\"] = 1] = \"Queued\";\r\n    /**\r\n     * The operation is in progress.\r\n     */\r\n    EvaluationOperationStatus[EvaluationOperationStatus[\"InProgress\"] = 2] = \"InProgress\";\r\n    /**\r\n     * The operation was cancelled by the user.\r\n     */\r\n    EvaluationOperationStatus[EvaluationOperationStatus[\"Cancelled\"] = 3] = \"Cancelled\";\r\n    /**\r\n     * The operation completed successfully.\r\n     */\r\n    EvaluationOperationStatus[EvaluationOperationStatus[\"Succeeded\"] = 4] = \"Succeeded\";\r\n    /**\r\n     * The operation completed with a failure.\r\n     */\r\n    EvaluationOperationStatus[EvaluationOperationStatus[\"Failed\"] = 5] = \"Failed\";\r\n    /**\r\n     * The operation timed out.\r\n     */\r\n    EvaluationOperationStatus[EvaluationOperationStatus[\"TimedOut\"] = 6] = \"TimedOut\";\r\n    /**\r\n     * The operation could not be found.\r\n     */\r\n    EvaluationOperationStatus[EvaluationOperationStatus[\"NotFound\"] = 7] = \"NotFound\";\r\n})(EvaluationOperationStatus = exports.EvaluationOperationStatus || (exports.EvaluationOperationStatus = {}));\r\n/**\r\n * Set of flags used to determine which set of information is retrieved when querying for event publishers\r\n */\r\nvar EventPublisherQueryFlags;\r\n(function (EventPublisherQueryFlags) {\r\n    EventPublisherQueryFlags[EventPublisherQueryFlags[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Include event types from the remote services too\r\n     */\r\n    EventPublisherQueryFlags[EventPublisherQueryFlags[\"IncludeRemoteServices\"] = 2] = \"IncludeRemoteServices\";\r\n})(EventPublisherQueryFlags = exports.EventPublisherQueryFlags || (exports.EventPublisherQueryFlags = {}));\r\n/**\r\n * Set of flags used to determine which set of information is retrieved when querying for eventtypes\r\n */\r\nvar EventTypeQueryFlags;\r\n(function (EventTypeQueryFlags) {\r\n    EventTypeQueryFlags[EventTypeQueryFlags[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * IncludeFields will include all fields and their types\r\n     */\r\n    EventTypeQueryFlags[EventTypeQueryFlags[\"IncludeFields\"] = 1] = \"IncludeFields\";\r\n})(EventTypeQueryFlags = exports.EventTypeQueryFlags || (exports.EventTypeQueryFlags = {}));\r\nvar NotificationOperation;\r\n(function (NotificationOperation) {\r\n    NotificationOperation[NotificationOperation[\"None\"] = 0] = \"None\";\r\n    NotificationOperation[NotificationOperation[\"SuspendUnprocessed\"] = 1] = \"SuspendUnprocessed\";\r\n})(NotificationOperation = exports.NotificationOperation || (exports.NotificationOperation = {}));\r\nvar NotificationReasonType;\r\n(function (NotificationReasonType) {\r\n    NotificationReasonType[NotificationReasonType[\"Unknown\"] = 0] = \"Unknown\";\r\n    NotificationReasonType[NotificationReasonType[\"Follows\"] = 1] = \"Follows\";\r\n    NotificationReasonType[NotificationReasonType[\"Personal\"] = 2] = \"Personal\";\r\n    NotificationReasonType[NotificationReasonType[\"PersonalAlias\"] = 3] = \"PersonalAlias\";\r\n    NotificationReasonType[NotificationReasonType[\"DirectMember\"] = 4] = \"DirectMember\";\r\n    NotificationReasonType[NotificationReasonType[\"IndirectMember\"] = 5] = \"IndirectMember\";\r\n    NotificationReasonType[NotificationReasonType[\"GroupAlias\"] = 6] = \"GroupAlias\";\r\n    NotificationReasonType[NotificationReasonType[\"SubscriptionAlias\"] = 7] = \"SubscriptionAlias\";\r\n    NotificationReasonType[NotificationReasonType[\"SingleRole\"] = 8] = \"SingleRole\";\r\n    NotificationReasonType[NotificationReasonType[\"DirectMemberGroupRole\"] = 9] = \"DirectMemberGroupRole\";\r\n    NotificationReasonType[NotificationReasonType[\"InDirectMemberGroupRole\"] = 10] = \"InDirectMemberGroupRole\";\r\n    NotificationReasonType[NotificationReasonType[\"AliasMemberGroupRole\"] = 11] = \"AliasMemberGroupRole\";\r\n})(NotificationReasonType = exports.NotificationReasonType || (exports.NotificationReasonType = {}));\r\nvar NotificationStatisticType;\r\n(function (NotificationStatisticType) {\r\n    NotificationStatisticType[NotificationStatisticType[\"NotificationBySubscription\"] = 0] = \"NotificationBySubscription\";\r\n    NotificationStatisticType[NotificationStatisticType[\"EventsByEventType\"] = 1] = \"EventsByEventType\";\r\n    NotificationStatisticType[NotificationStatisticType[\"NotificationByEventType\"] = 2] = \"NotificationByEventType\";\r\n    NotificationStatisticType[NotificationStatisticType[\"EventsByEventTypePerUser\"] = 3] = \"EventsByEventTypePerUser\";\r\n    NotificationStatisticType[NotificationStatisticType[\"NotificationByEventTypePerUser\"] = 4] = \"NotificationByEventTypePerUser\";\r\n    NotificationStatisticType[NotificationStatisticType[\"Events\"] = 5] = \"Events\";\r\n    NotificationStatisticType[NotificationStatisticType[\"Notifications\"] = 6] = \"Notifications\";\r\n    NotificationStatisticType[NotificationStatisticType[\"NotificationFailureBySubscription\"] = 7] = \"NotificationFailureBySubscription\";\r\n    NotificationStatisticType[NotificationStatisticType[\"UnprocessedRangeStart\"] = 100] = \"UnprocessedRangeStart\";\r\n    NotificationStatisticType[NotificationStatisticType[\"UnprocessedEventsByPublisher\"] = 101] = \"UnprocessedEventsByPublisher\";\r\n    NotificationStatisticType[NotificationStatisticType[\"UnprocessedEventDelayByPublisher\"] = 102] = \"UnprocessedEventDelayByPublisher\";\r\n    NotificationStatisticType[NotificationStatisticType[\"UnprocessedNotificationsByChannelByPublisher\"] = 103] = \"UnprocessedNotificationsByChannelByPublisher\";\r\n    NotificationStatisticType[NotificationStatisticType[\"UnprocessedNotificationDelayByChannelByPublisher\"] = 104] = \"UnprocessedNotificationDelayByChannelByPublisher\";\r\n    NotificationStatisticType[NotificationStatisticType[\"DelayRangeStart\"] = 200] = \"DelayRangeStart\";\r\n    NotificationStatisticType[NotificationStatisticType[\"TotalPipelineTime\"] = 201] = \"TotalPipelineTime\";\r\n    NotificationStatisticType[NotificationStatisticType[\"NotificationPipelineTime\"] = 202] = \"NotificationPipelineTime\";\r\n    NotificationStatisticType[NotificationStatisticType[\"EventPipelineTime\"] = 203] = \"EventPipelineTime\";\r\n    NotificationStatisticType[NotificationStatisticType[\"HourlyRangeStart\"] = 1000] = \"HourlyRangeStart\";\r\n    NotificationStatisticType[NotificationStatisticType[\"HourlyNotificationBySubscription\"] = 1001] = \"HourlyNotificationBySubscription\";\r\n    NotificationStatisticType[NotificationStatisticType[\"HourlyEventsByEventTypePerUser\"] = 1002] = \"HourlyEventsByEventTypePerUser\";\r\n    NotificationStatisticType[NotificationStatisticType[\"HourlyEvents\"] = 1003] = \"HourlyEvents\";\r\n    NotificationStatisticType[NotificationStatisticType[\"HourlyNotifications\"] = 1004] = \"HourlyNotifications\";\r\n    NotificationStatisticType[NotificationStatisticType[\"HourlyUnprocessedEventsByPublisher\"] = 1101] = \"HourlyUnprocessedEventsByPublisher\";\r\n    NotificationStatisticType[NotificationStatisticType[\"HourlyUnprocessedEventDelayByPublisher\"] = 1102] = \"HourlyUnprocessedEventDelayByPublisher\";\r\n    NotificationStatisticType[NotificationStatisticType[\"HourlyUnprocessedNotificationsByChannelByPublisher\"] = 1103] = \"HourlyUnprocessedNotificationsByChannelByPublisher\";\r\n    NotificationStatisticType[NotificationStatisticType[\"HourlyUnprocessedNotificationDelayByChannelByPublisher\"] = 1104] = \"HourlyUnprocessedNotificationDelayByChannelByPublisher\";\r\n    NotificationStatisticType[NotificationStatisticType[\"HourlyTotalPipelineTime\"] = 1201] = \"HourlyTotalPipelineTime\";\r\n    NotificationStatisticType[NotificationStatisticType[\"HourlyNotificationPipelineTime\"] = 1202] = \"HourlyNotificationPipelineTime\";\r\n    NotificationStatisticType[NotificationStatisticType[\"HourlyEventPipelineTime\"] = 1203] = \"HourlyEventPipelineTime\";\r\n})(NotificationStatisticType = exports.NotificationStatisticType || (exports.NotificationStatisticType = {}));\r\n/**\r\n * Delivery preference for a subscriber. Indicates how the subscriber should be notified.\r\n */\r\nvar NotificationSubscriberDeliveryPreference;\r\n(function (NotificationSubscriberDeliveryPreference) {\r\n    /**\r\n     * Do not send notifications by default. Note: notifications can still be delivered to this subscriber, for example via a custom subscription.\r\n     */\r\n    NotificationSubscriberDeliveryPreference[NotificationSubscriberDeliveryPreference[\"NoDelivery\"] = -1] = \"NoDelivery\";\r\n    /**\r\n     * Deliver notifications to the subscriber's preferred email address.\r\n     */\r\n    NotificationSubscriberDeliveryPreference[NotificationSubscriberDeliveryPreference[\"PreferredEmailAddress\"] = 1] = \"PreferredEmailAddress\";\r\n    /**\r\n     * Deliver notifications to each member of the group representing the subscriber. Only applicable when the subscriber is a group.\r\n     */\r\n    NotificationSubscriberDeliveryPreference[NotificationSubscriberDeliveryPreference[\"EachMember\"] = 2] = \"EachMember\";\r\n    /**\r\n     * Use default\r\n     */\r\n    NotificationSubscriberDeliveryPreference[NotificationSubscriberDeliveryPreference[\"UseDefault\"] = 3] = \"UseDefault\";\r\n})(NotificationSubscriberDeliveryPreference = exports.NotificationSubscriberDeliveryPreference || (exports.NotificationSubscriberDeliveryPreference = {}));\r\nvar SubscriberFlags;\r\n(function (SubscriberFlags) {\r\n    SubscriberFlags[SubscriberFlags[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Subscriber's delivery preferences could be updated\r\n     */\r\n    SubscriberFlags[SubscriberFlags[\"DeliveryPreferencesEditable\"] = 2] = \"DeliveryPreferencesEditable\";\r\n    /**\r\n     * Subscriber's delivery preferences supports email delivery\r\n     */\r\n    SubscriberFlags[SubscriberFlags[\"SupportsPreferredEmailAddressDelivery\"] = 4] = \"SupportsPreferredEmailAddressDelivery\";\r\n    /**\r\n     * Subscriber's delivery preferences supports individual members delivery(group expansion)\r\n     */\r\n    SubscriberFlags[SubscriberFlags[\"SupportsEachMemberDelivery\"] = 8] = \"SupportsEachMemberDelivery\";\r\n    /**\r\n     * Subscriber's delivery preferences supports no delivery\r\n     */\r\n    SubscriberFlags[SubscriberFlags[\"SupportsNoDelivery\"] = 16] = \"SupportsNoDelivery\";\r\n    /**\r\n     * Subscriber is a user\r\n     */\r\n    SubscriberFlags[SubscriberFlags[\"IsUser\"] = 32] = \"IsUser\";\r\n    /**\r\n     * Subscriber is a group\r\n     */\r\n    SubscriberFlags[SubscriberFlags[\"IsGroup\"] = 64] = \"IsGroup\";\r\n    /**\r\n     * Subscriber is a team\r\n     */\r\n    SubscriberFlags[SubscriberFlags[\"IsTeam\"] = 128] = \"IsTeam\";\r\n})(SubscriberFlags = exports.SubscriberFlags || (exports.SubscriberFlags = {}));\r\nvar SubscriptionFieldType;\r\n(function (SubscriptionFieldType) {\r\n    SubscriptionFieldType[SubscriptionFieldType[\"String\"] = 1] = \"String\";\r\n    SubscriptionFieldType[SubscriptionFieldType[\"Integer\"] = 2] = \"Integer\";\r\n    SubscriptionFieldType[SubscriptionFieldType[\"DateTime\"] = 3] = \"DateTime\";\r\n    SubscriptionFieldType[SubscriptionFieldType[\"PlainText\"] = 5] = \"PlainText\";\r\n    SubscriptionFieldType[SubscriptionFieldType[\"Html\"] = 7] = \"Html\";\r\n    SubscriptionFieldType[SubscriptionFieldType[\"TreePath\"] = 8] = \"TreePath\";\r\n    SubscriptionFieldType[SubscriptionFieldType[\"History\"] = 9] = \"History\";\r\n    SubscriptionFieldType[SubscriptionFieldType[\"Double\"] = 10] = \"Double\";\r\n    SubscriptionFieldType[SubscriptionFieldType[\"Guid\"] = 11] = \"Guid\";\r\n    SubscriptionFieldType[SubscriptionFieldType[\"Boolean\"] = 12] = \"Boolean\";\r\n    SubscriptionFieldType[SubscriptionFieldType[\"Identity\"] = 13] = \"Identity\";\r\n    SubscriptionFieldType[SubscriptionFieldType[\"PicklistInteger\"] = 14] = \"PicklistInteger\";\r\n    SubscriptionFieldType[SubscriptionFieldType[\"PicklistString\"] = 15] = \"PicklistString\";\r\n    SubscriptionFieldType[SubscriptionFieldType[\"PicklistDouble\"] = 16] = \"PicklistDouble\";\r\n    SubscriptionFieldType[SubscriptionFieldType[\"TeamProject\"] = 17] = \"TeamProject\";\r\n})(SubscriptionFieldType = exports.SubscriptionFieldType || (exports.SubscriptionFieldType = {}));\r\n/**\r\n * Read-only indicators that further describe the subscription.\r\n */\r\nvar SubscriptionFlags;\r\n(function (SubscriptionFlags) {\r\n    /**\r\n     * None\r\n     */\r\n    SubscriptionFlags[SubscriptionFlags[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Subscription's subscriber is a group, not a user\r\n     */\r\n    SubscriptionFlags[SubscriptionFlags[\"GroupSubscription\"] = 1] = \"GroupSubscription\";\r\n    /**\r\n     * Subscription is contributed and not persisted. This means certain fields of the subscription, like Filter, are read-only.\r\n     */\r\n    SubscriptionFlags[SubscriptionFlags[\"ContributedSubscription\"] = 2] = \"ContributedSubscription\";\r\n    /**\r\n     * A user that is member of the subscription's subscriber group can opt in/out of the subscription.\r\n     */\r\n    SubscriptionFlags[SubscriptionFlags[\"CanOptOut\"] = 4] = \"CanOptOut\";\r\n    /**\r\n     * If the subscriber is a group, is it a team.\r\n     */\r\n    SubscriptionFlags[SubscriptionFlags[\"TeamSubscription\"] = 8] = \"TeamSubscription\";\r\n    /**\r\n     * For role based subscriptions, there is an expectation that there will always be at least one actor that matches\r\n     */\r\n    SubscriptionFlags[SubscriptionFlags[\"OneActorMatches\"] = 16] = \"OneActorMatches\";\r\n})(SubscriptionFlags = exports.SubscriptionFlags || (exports.SubscriptionFlags = {}));\r\n/**\r\n * The permissions that a user has to a certain subscription\r\n */\r\nvar SubscriptionPermissions;\r\n(function (SubscriptionPermissions) {\r\n    /**\r\n     * None\r\n     */\r\n    SubscriptionPermissions[SubscriptionPermissions[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * full view of description, filters, etc. Not limited.\r\n     */\r\n    SubscriptionPermissions[SubscriptionPermissions[\"View\"] = 1] = \"View\";\r\n    /**\r\n     * update subscription\r\n     */\r\n    SubscriptionPermissions[SubscriptionPermissions[\"Edit\"] = 2] = \"Edit\";\r\n    /**\r\n     * delete subscription\r\n     */\r\n    SubscriptionPermissions[SubscriptionPermissions[\"Delete\"] = 4] = \"Delete\";\r\n})(SubscriptionPermissions = exports.SubscriptionPermissions || (exports.SubscriptionPermissions = {}));\r\n/**\r\n * Flags that influence the result set of a subscription query.\r\n */\r\nvar SubscriptionQueryFlags;\r\n(function (SubscriptionQueryFlags) {\r\n    SubscriptionQueryFlags[SubscriptionQueryFlags[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Include subscriptions with invalid subscribers.\r\n     */\r\n    SubscriptionQueryFlags[SubscriptionQueryFlags[\"IncludeInvalidSubscriptions\"] = 2] = \"IncludeInvalidSubscriptions\";\r\n    /**\r\n     * Include subscriptions marked for deletion.\r\n     */\r\n    SubscriptionQueryFlags[SubscriptionQueryFlags[\"IncludeDeletedSubscriptions\"] = 4] = \"IncludeDeletedSubscriptions\";\r\n    /**\r\n     * Include the full filter details with each subscription.\r\n     */\r\n    SubscriptionQueryFlags[SubscriptionQueryFlags[\"IncludeFilterDetails\"] = 8] = \"IncludeFilterDetails\";\r\n    /**\r\n     * For a subscription the caller does not have permission to view, return basic (non-confidential) information.\r\n     */\r\n    SubscriptionQueryFlags[SubscriptionQueryFlags[\"AlwaysReturnBasicInformation\"] = 16] = \"AlwaysReturnBasicInformation\";\r\n    /**\r\n     * Include system subscriptions.\r\n     */\r\n    SubscriptionQueryFlags[SubscriptionQueryFlags[\"IncludeSystemSubscriptions\"] = 32] = \"IncludeSystemSubscriptions\";\r\n})(SubscriptionQueryFlags = exports.SubscriptionQueryFlags || (exports.SubscriptionQueryFlags = {}));\r\n/**\r\n * Subscription status values. A value greater than or equal to zero indicates the subscription is enabled. A negative value indicates the subscription is disabled.\r\n */\r\nvar SubscriptionStatus;\r\n(function (SubscriptionStatus) {\r\n    /**\r\n     * Subscription is disabled because it generated a high volume of notifications.\r\n     */\r\n    SubscriptionStatus[SubscriptionStatus[\"JailedByNotificationsVolume\"] = -200] = \"JailedByNotificationsVolume\";\r\n    /**\r\n     * Subscription is disabled and will be deleted.\r\n     */\r\n    SubscriptionStatus[SubscriptionStatus[\"PendingDeletion\"] = -100] = \"PendingDeletion\";\r\n    /**\r\n     * Subscription is disabled because of an Argument Exception while processing the subscription\r\n     */\r\n    SubscriptionStatus[SubscriptionStatus[\"DisabledArgumentException\"] = -12] = \"DisabledArgumentException\";\r\n    /**\r\n     * Subscription is disabled because the project is invalid\r\n     */\r\n    SubscriptionStatus[SubscriptionStatus[\"DisabledProjectInvalid\"] = -11] = \"DisabledProjectInvalid\";\r\n    /**\r\n     * Subscription is disabled because the identity does not have the appropriate permissions\r\n     */\r\n    SubscriptionStatus[SubscriptionStatus[\"DisabledMissingPermissions\"] = -10] = \"DisabledMissingPermissions\";\r\n    /**\r\n     * Subscription is disabled service due to failures.\r\n     */\r\n    SubscriptionStatus[SubscriptionStatus[\"DisabledFromProbation\"] = -9] = \"DisabledFromProbation\";\r\n    /**\r\n     * Subscription is disabled because the identity is no longer active\r\n     */\r\n    SubscriptionStatus[SubscriptionStatus[\"DisabledInactiveIdentity\"] = -8] = \"DisabledInactiveIdentity\";\r\n    /**\r\n     * Subscription is disabled because message queue is not supported.\r\n     */\r\n    SubscriptionStatus[SubscriptionStatus[\"DisabledMessageQueueNotSupported\"] = -7] = \"DisabledMessageQueueNotSupported\";\r\n    /**\r\n     * Subscription is disabled because its subscriber is unknown.\r\n     */\r\n    SubscriptionStatus[SubscriptionStatus[\"DisabledMissingIdentity\"] = -6] = \"DisabledMissingIdentity\";\r\n    /**\r\n     * Subscription is disabled because it has an invalid role expression.\r\n     */\r\n    SubscriptionStatus[SubscriptionStatus[\"DisabledInvalidRoleExpression\"] = -5] = \"DisabledInvalidRoleExpression\";\r\n    /**\r\n     * Subscription is disabled because it has an invalid filter expression.\r\n     */\r\n    SubscriptionStatus[SubscriptionStatus[\"DisabledInvalidPathClause\"] = -4] = \"DisabledInvalidPathClause\";\r\n    /**\r\n     * Subscription is disabled because it is a duplicate of a default subscription.\r\n     */\r\n    SubscriptionStatus[SubscriptionStatus[\"DisabledAsDuplicateOfDefault\"] = -3] = \"DisabledAsDuplicateOfDefault\";\r\n    /**\r\n     * Subscription is disabled by an administrator, not the subscription's subscriber.\r\n     */\r\n    SubscriptionStatus[SubscriptionStatus[\"DisabledByAdmin\"] = -2] = \"DisabledByAdmin\";\r\n    /**\r\n     * Subscription is disabled, typically by the owner of the subscription, and will not produce any notifications.\r\n     */\r\n    SubscriptionStatus[SubscriptionStatus[\"Disabled\"] = -1] = \"Disabled\";\r\n    /**\r\n     * Subscription is active.\r\n     */\r\n    SubscriptionStatus[SubscriptionStatus[\"Enabled\"] = 0] = \"Enabled\";\r\n    /**\r\n     * Subscription is active, but is on probation due to failed deliveries or other issues with the subscription.\r\n     */\r\n    SubscriptionStatus[SubscriptionStatus[\"EnabledOnProbation\"] = 1] = \"EnabledOnProbation\";\r\n})(SubscriptionStatus = exports.SubscriptionStatus || (exports.SubscriptionStatus = {}));\r\n/**\r\n * Set of flags used to determine which set of templates is retrieved when querying for subscription templates\r\n */\r\nvar SubscriptionTemplateQueryFlags;\r\n(function (SubscriptionTemplateQueryFlags) {\r\n    SubscriptionTemplateQueryFlags[SubscriptionTemplateQueryFlags[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Include user templates\r\n     */\r\n    SubscriptionTemplateQueryFlags[SubscriptionTemplateQueryFlags[\"IncludeUser\"] = 1] = \"IncludeUser\";\r\n    /**\r\n     * Include group templates\r\n     */\r\n    SubscriptionTemplateQueryFlags[SubscriptionTemplateQueryFlags[\"IncludeGroup\"] = 2] = \"IncludeGroup\";\r\n    /**\r\n     * Include user and group templates\r\n     */\r\n    SubscriptionTemplateQueryFlags[SubscriptionTemplateQueryFlags[\"IncludeUserAndGroup\"] = 4] = \"IncludeUserAndGroup\";\r\n    /**\r\n     * Include the event type details like the fields and operators\r\n     */\r\n    SubscriptionTemplateQueryFlags[SubscriptionTemplateQueryFlags[\"IncludeEventTypeInformation\"] = 22] = \"IncludeEventTypeInformation\";\r\n})(SubscriptionTemplateQueryFlags = exports.SubscriptionTemplateQueryFlags || (exports.SubscriptionTemplateQueryFlags = {}));\r\nvar SubscriptionTemplateType;\r\n(function (SubscriptionTemplateType) {\r\n    SubscriptionTemplateType[SubscriptionTemplateType[\"User\"] = 0] = \"User\";\r\n    SubscriptionTemplateType[SubscriptionTemplateType[\"Team\"] = 1] = \"Team\";\r\n    SubscriptionTemplateType[SubscriptionTemplateType[\"Both\"] = 2] = \"Both\";\r\n    SubscriptionTemplateType[SubscriptionTemplateType[\"None\"] = 3] = \"None\";\r\n})(SubscriptionTemplateType = exports.SubscriptionTemplateType || (exports.SubscriptionTemplateType = {}));\r\nexports.TypeInfo = {\r\n    ActorNotificationReason: {},\r\n    BatchNotificationOperation: {},\r\n    DefaultGroupDeliveryPreference: {\r\n        enumValues: {\r\n            \"noDelivery\": -1,\r\n            \"eachMember\": 2\r\n        }\r\n    },\r\n    EvaluationOperationStatus: {\r\n        enumValues: {\r\n            \"notSet\": 0,\r\n            \"queued\": 1,\r\n            \"inProgress\": 2,\r\n            \"cancelled\": 3,\r\n            \"succeeded\": 4,\r\n            \"failed\": 5,\r\n            \"timedOut\": 6,\r\n            \"notFound\": 7\r\n        }\r\n    },\r\n    EventBacklogStatus: {},\r\n    EventProcessingLog: {},\r\n    EventPublisherQueryFlags: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"includeRemoteServices\": 2\r\n        }\r\n    },\r\n    EventTypeQueryFlags: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"includeFields\": 1\r\n        }\r\n    },\r\n    INotificationDiagnosticLog: {},\r\n    NotificationAdminSettings: {},\r\n    NotificationAdminSettingsUpdateParameters: {},\r\n    NotificationBacklogStatus: {},\r\n    NotificationDeliveryLog: {},\r\n    NotificationDiagnosticLog: {},\r\n    NotificationEventBacklogStatus: {},\r\n    NotificationEventField: {},\r\n    NotificationEventFieldType: {},\r\n    NotificationEventType: {},\r\n    NotificationJobDiagnosticLog: {},\r\n    NotificationOperation: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"suspendUnprocessed\": 1\r\n        }\r\n    },\r\n    NotificationReason: {},\r\n    NotificationReasonType: {\r\n        enumValues: {\r\n            \"unknown\": 0,\r\n            \"follows\": 1,\r\n            \"personal\": 2,\r\n            \"personalAlias\": 3,\r\n            \"directMember\": 4,\r\n            \"indirectMember\": 5,\r\n            \"groupAlias\": 6,\r\n            \"subscriptionAlias\": 7,\r\n            \"singleRole\": 8,\r\n            \"directMemberGroupRole\": 9,\r\n            \"inDirectMemberGroupRole\": 10,\r\n            \"aliasMemberGroupRole\": 11\r\n        }\r\n    },\r\n    NotificationStatistic: {},\r\n    NotificationStatisticsQuery: {},\r\n    NotificationStatisticsQueryConditions: {},\r\n    NotificationStatisticType: {\r\n        enumValues: {\r\n            \"notificationBySubscription\": 0,\r\n            \"eventsByEventType\": 1,\r\n            \"notificationByEventType\": 2,\r\n            \"eventsByEventTypePerUser\": 3,\r\n            \"notificationByEventTypePerUser\": 4,\r\n            \"events\": 5,\r\n            \"notifications\": 6,\r\n            \"notificationFailureBySubscription\": 7,\r\n            \"unprocessedRangeStart\": 100,\r\n            \"unprocessedEventsByPublisher\": 101,\r\n            \"unprocessedEventDelayByPublisher\": 102,\r\n            \"unprocessedNotificationsByChannelByPublisher\": 103,\r\n            \"unprocessedNotificationDelayByChannelByPublisher\": 104,\r\n            \"delayRangeStart\": 200,\r\n            \"totalPipelineTime\": 201,\r\n            \"notificationPipelineTime\": 202,\r\n            \"eventPipelineTime\": 203,\r\n            \"hourlyRangeStart\": 1000,\r\n            \"hourlyNotificationBySubscription\": 1001,\r\n            \"hourlyEventsByEventTypePerUser\": 1002,\r\n            \"hourlyEvents\": 1003,\r\n            \"hourlyNotifications\": 1004,\r\n            \"hourlyUnprocessedEventsByPublisher\": 1101,\r\n            \"hourlyUnprocessedEventDelayByPublisher\": 1102,\r\n            \"hourlyUnprocessedNotificationsByChannelByPublisher\": 1103,\r\n            \"hourlyUnprocessedNotificationDelayByChannelByPublisher\": 1104,\r\n            \"hourlyTotalPipelineTime\": 1201,\r\n            \"hourlyNotificationPipelineTime\": 1202,\r\n            \"hourlyEventPipelineTime\": 1203\r\n        }\r\n    },\r\n    NotificationSubscriber: {},\r\n    NotificationSubscriberDeliveryPreference: {\r\n        enumValues: {\r\n            \"noDelivery\": -1,\r\n            \"preferredEmailAddress\": 1,\r\n            \"eachMember\": 2,\r\n            \"useDefault\": 3\r\n        }\r\n    },\r\n    NotificationSubscriberUpdateParameters: {},\r\n    NotificationSubscription: {},\r\n    NotificationSubscriptionTemplate: {},\r\n    NotificationSubscriptionUpdateParameters: {},\r\n    SubscriberFlags: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"deliveryPreferencesEditable\": 2,\r\n            \"supportsPreferredEmailAddressDelivery\": 4,\r\n            \"supportsEachMemberDelivery\": 8,\r\n            \"supportsNoDelivery\": 16,\r\n            \"isUser\": 32,\r\n            \"isGroup\": 64,\r\n            \"isTeam\": 128\r\n        }\r\n    },\r\n    SubscriptionDiagnostics: {},\r\n    SubscriptionEvaluationRequest: {},\r\n    SubscriptionEvaluationResult: {},\r\n    SubscriptionFieldType: {\r\n        enumValues: {\r\n            \"string\": 1,\r\n            \"integer\": 2,\r\n            \"dateTime\": 3,\r\n            \"plainText\": 5,\r\n            \"html\": 7,\r\n            \"treePath\": 8,\r\n            \"history\": 9,\r\n            \"double\": 10,\r\n            \"guid\": 11,\r\n            \"boolean\": 12,\r\n            \"identity\": 13,\r\n            \"picklistInteger\": 14,\r\n            \"picklistString\": 15,\r\n            \"picklistDouble\": 16,\r\n            \"teamProject\": 17\r\n        }\r\n    },\r\n    SubscriptionFlags: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"groupSubscription\": 1,\r\n            \"contributedSubscription\": 2,\r\n            \"canOptOut\": 4,\r\n            \"teamSubscription\": 8,\r\n            \"oneActorMatches\": 16\r\n        }\r\n    },\r\n    SubscriptionPermissions: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"view\": 1,\r\n            \"edit\": 2,\r\n            \"delete\": 4\r\n        }\r\n    },\r\n    SubscriptionQuery: {},\r\n    SubscriptionQueryCondition: {},\r\n    SubscriptionQueryFlags: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"includeInvalidSubscriptions\": 2,\r\n            \"includeDeletedSubscriptions\": 4,\r\n            \"includeFilterDetails\": 8,\r\n            \"alwaysReturnBasicInformation\": 16,\r\n            \"includeSystemSubscriptions\": 32\r\n        }\r\n    },\r\n    SubscriptionStatus: {\r\n        enumValues: {\r\n            \"jailedByNotificationsVolume\": -200,\r\n            \"pendingDeletion\": -100,\r\n            \"disabledArgumentException\": -12,\r\n            \"disabledProjectInvalid\": -11,\r\n            \"disabledMissingPermissions\": -10,\r\n            \"disabledFromProbation\": -9,\r\n            \"disabledInactiveIdentity\": -8,\r\n            \"disabledMessageQueueNotSupported\": -7,\r\n            \"disabledMissingIdentity\": -6,\r\n            \"disabledInvalidRoleExpression\": -5,\r\n            \"disabledInvalidPathClause\": -4,\r\n            \"disabledAsDuplicateOfDefault\": -3,\r\n            \"disabledByAdmin\": -2,\r\n            \"disabled\": -1,\r\n            \"enabled\": 0,\r\n            \"enabledOnProbation\": 1\r\n        }\r\n    },\r\n    SubscriptionTemplateQueryFlags: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"includeUser\": 1,\r\n            \"includeGroup\": 2,\r\n            \"includeUserAndGroup\": 4,\r\n            \"includeEventTypeInformation\": 22\r\n        }\r\n    },\r\n    SubscriptionTemplateType: {\r\n        enumValues: {\r\n            \"user\": 0,\r\n            \"team\": 1,\r\n            \"both\": 2,\r\n            \"none\": 3\r\n        }\r\n    },\r\n    SubscriptionTraceDiagnosticLog: {},\r\n    SubscriptionTraceEventProcessingLog: {},\r\n    SubscriptionTraceNotificationDeliveryLog: {},\r\n    SubscriptionTracing: {},\r\n};\r\nexports.TypeInfo.ActorNotificationReason.fields = {\r\n    notificationReasonType: {\r\n        enumType: exports.TypeInfo.NotificationReasonType\r\n    }\r\n};\r\nexports.TypeInfo.BatchNotificationOperation.fields = {\r\n    notificationOperation: {\r\n        enumType: exports.TypeInfo.NotificationOperation\r\n    }\r\n};\r\nexports.TypeInfo.EventBacklogStatus.fields = {\r\n    captureTime: {\r\n        isDate: true,\r\n    },\r\n    lastEventBatchStartTime: {\r\n        isDate: true,\r\n    },\r\n    lastEventProcessedTime: {\r\n        isDate: true,\r\n    },\r\n    lastJobBatchStartTime: {\r\n        isDate: true,\r\n    },\r\n    lastJobProcessedTime: {\r\n        isDate: true,\r\n    },\r\n    oldestPendingEventTime: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.EventProcessingLog.fields = {\r\n    endTime: {\r\n        isDate: true,\r\n    },\r\n    startTime: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.INotificationDiagnosticLog.fields = {\r\n    endTime: {\r\n        isDate: true,\r\n    },\r\n    startTime: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.NotificationAdminSettings.fields = {\r\n    defaultGroupDeliveryPreference: {\r\n        enumType: exports.TypeInfo.DefaultGroupDeliveryPreference\r\n    }\r\n};\r\nexports.TypeInfo.NotificationAdminSettingsUpdateParameters.fields = {\r\n    defaultGroupDeliveryPreference: {\r\n        enumType: exports.TypeInfo.DefaultGroupDeliveryPreference\r\n    }\r\n};\r\nexports.TypeInfo.NotificationBacklogStatus.fields = {\r\n    captureTime: {\r\n        isDate: true,\r\n    },\r\n    lastJobBatchStartTime: {\r\n        isDate: true,\r\n    },\r\n    lastJobProcessedTime: {\r\n        isDate: true,\r\n    },\r\n    lastNotificationBatchStartTime: {\r\n        isDate: true,\r\n    },\r\n    lastNotificationProcessedTime: {\r\n        isDate: true,\r\n    },\r\n    oldestPendingNotificationTime: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.NotificationDeliveryLog.fields = {\r\n    endTime: {\r\n        isDate: true,\r\n    },\r\n    startTime: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.NotificationDiagnosticLog.fields = {\r\n    endTime: {\r\n        isDate: true,\r\n    },\r\n    startTime: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.NotificationEventBacklogStatus.fields = {\r\n    eventBacklogStatus: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.EventBacklogStatus\r\n    },\r\n    notificationBacklogStatus: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.NotificationBacklogStatus\r\n    }\r\n};\r\nexports.TypeInfo.NotificationEventField.fields = {\r\n    fieldType: {\r\n        typeInfo: exports.TypeInfo.NotificationEventFieldType\r\n    }\r\n};\r\nexports.TypeInfo.NotificationEventFieldType.fields = {\r\n    subscriptionFieldType: {\r\n        enumType: exports.TypeInfo.SubscriptionFieldType\r\n    }\r\n};\r\nexports.TypeInfo.NotificationEventType.fields = {\r\n    fields: {\r\n        isDictionary: true,\r\n        dictionaryValueTypeInfo: exports.TypeInfo.NotificationEventField\r\n    }\r\n};\r\nexports.TypeInfo.NotificationJobDiagnosticLog.fields = {\r\n    endTime: {\r\n        isDate: true,\r\n    },\r\n    startTime: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.NotificationReason.fields = {\r\n    notificationReasonType: {\r\n        enumType: exports.TypeInfo.NotificationReasonType\r\n    }\r\n};\r\nexports.TypeInfo.NotificationStatistic.fields = {\r\n    date: {\r\n        isDate: true,\r\n    },\r\n    type: {\r\n        enumType: exports.TypeInfo.NotificationStatisticType\r\n    }\r\n};\r\nexports.TypeInfo.NotificationStatisticsQuery.fields = {\r\n    conditions: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.NotificationStatisticsQueryConditions\r\n    }\r\n};\r\nexports.TypeInfo.NotificationStatisticsQueryConditions.fields = {\r\n    endDate: {\r\n        isDate: true,\r\n    },\r\n    startDate: {\r\n        isDate: true,\r\n    },\r\n    type: {\r\n        enumType: exports.TypeInfo.NotificationStatisticType\r\n    }\r\n};\r\nexports.TypeInfo.NotificationSubscriber.fields = {\r\n    deliveryPreference: {\r\n        enumType: exports.TypeInfo.NotificationSubscriberDeliveryPreference\r\n    },\r\n    flags: {\r\n        enumType: exports.TypeInfo.SubscriberFlags\r\n    }\r\n};\r\nexports.TypeInfo.NotificationSubscriberUpdateParameters.fields = {\r\n    deliveryPreference: {\r\n        enumType: exports.TypeInfo.NotificationSubscriberDeliveryPreference\r\n    }\r\n};\r\nexports.TypeInfo.NotificationSubscription.fields = {\r\n    diagnostics: {\r\n        typeInfo: exports.TypeInfo.SubscriptionDiagnostics\r\n    },\r\n    flags: {\r\n        enumType: exports.TypeInfo.SubscriptionFlags\r\n    },\r\n    modifiedDate: {\r\n        isDate: true,\r\n    },\r\n    permissions: {\r\n        enumType: exports.TypeInfo.SubscriptionPermissions\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.SubscriptionStatus\r\n    }\r\n};\r\nexports.TypeInfo.NotificationSubscriptionTemplate.fields = {\r\n    notificationEventInformation: {\r\n        typeInfo: exports.TypeInfo.NotificationEventType\r\n    },\r\n    type: {\r\n        enumType: exports.TypeInfo.SubscriptionTemplateType\r\n    }\r\n};\r\nexports.TypeInfo.NotificationSubscriptionUpdateParameters.fields = {\r\n    status: {\r\n        enumType: exports.TypeInfo.SubscriptionStatus\r\n    }\r\n};\r\nexports.TypeInfo.SubscriptionDiagnostics.fields = {\r\n    deliveryResults: {\r\n        typeInfo: exports.TypeInfo.SubscriptionTracing\r\n    },\r\n    deliveryTracing: {\r\n        typeInfo: exports.TypeInfo.SubscriptionTracing\r\n    },\r\n    evaluationTracing: {\r\n        typeInfo: exports.TypeInfo.SubscriptionTracing\r\n    }\r\n};\r\nexports.TypeInfo.SubscriptionEvaluationRequest.fields = {\r\n    minEventsCreatedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.SubscriptionEvaluationResult.fields = {\r\n    evaluationJobStatus: {\r\n        enumType: exports.TypeInfo.EvaluationOperationStatus\r\n    }\r\n};\r\nexports.TypeInfo.SubscriptionQuery.fields = {\r\n    conditions: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.SubscriptionQueryCondition\r\n    },\r\n    queryFlags: {\r\n        enumType: exports.TypeInfo.SubscriptionQueryFlags\r\n    }\r\n};\r\nexports.TypeInfo.SubscriptionQueryCondition.fields = {\r\n    flags: {\r\n        enumType: exports.TypeInfo.SubscriptionFlags\r\n    }\r\n};\r\nexports.TypeInfo.SubscriptionTraceDiagnosticLog.fields = {\r\n    endTime: {\r\n        isDate: true,\r\n    },\r\n    startTime: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.SubscriptionTraceEventProcessingLog.fields = {\r\n    endTime: {\r\n        isDate: true,\r\n    },\r\n    startTime: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.SubscriptionTraceNotificationDeliveryLog.fields = {\r\n    endTime: {\r\n        isDate: true,\r\n    },\r\n    startTime: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.SubscriptionTracing.fields = {\r\n    endDate: {\r\n        isDate: true,\r\n    },\r\n    startDate: {\r\n        isDate: true,\r\n    }\r\n};\r\n","/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Status of a policy which is running against a specific pull request.\r\n */\r\nvar PolicyEvaluationStatus;\r\n(function (PolicyEvaluationStatus) {\r\n    /**\r\n     * The policy is either queued to run, or is waiting for some event before progressing.\r\n     */\r\n    PolicyEvaluationStatus[PolicyEvaluationStatus[\"Queued\"] = 0] = \"Queued\";\r\n    /**\r\n     * The policy is currently running.\r\n     */\r\n    PolicyEvaluationStatus[PolicyEvaluationStatus[\"Running\"] = 1] = \"Running\";\r\n    /**\r\n     * The policy has been fulfilled for this pull request.\r\n     */\r\n    PolicyEvaluationStatus[PolicyEvaluationStatus[\"Approved\"] = 2] = \"Approved\";\r\n    /**\r\n     * The policy has rejected this pull request.\r\n     */\r\n    PolicyEvaluationStatus[PolicyEvaluationStatus[\"Rejected\"] = 3] = \"Rejected\";\r\n    /**\r\n     * The policy does not apply to this pull request.\r\n     */\r\n    PolicyEvaluationStatus[PolicyEvaluationStatus[\"NotApplicable\"] = 4] = \"NotApplicable\";\r\n    /**\r\n     * The policy has encountered an unexpected error.\r\n     */\r\n    PolicyEvaluationStatus[PolicyEvaluationStatus[\"Broken\"] = 5] = \"Broken\";\r\n})(PolicyEvaluationStatus = exports.PolicyEvaluationStatus || (exports.PolicyEvaluationStatus = {}));\r\nexports.TypeInfo = {\r\n    PolicyConfiguration: {},\r\n    PolicyEvaluationRecord: {},\r\n    PolicyEvaluationStatus: {\r\n        enumValues: {\r\n            \"queued\": 0,\r\n            \"running\": 1,\r\n            \"approved\": 2,\r\n            \"rejected\": 3,\r\n            \"notApplicable\": 4,\r\n            \"broken\": 5\r\n        }\r\n    },\r\n};\r\nexports.TypeInfo.PolicyConfiguration.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.PolicyEvaluationRecord.fields = {\r\n    completedDate: {\r\n        isDate: true,\r\n    },\r\n    configuration: {\r\n        typeInfo: exports.TypeInfo.PolicyConfiguration\r\n    },\r\n    startedDate: {\r\n        isDate: true,\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.PolicyEvaluationStatus\r\n    }\r\n};\r\n","/*\r\n* ---------------------------------------------------------\r\n* Copyright(C) Microsoft Corporation. All rights reserved.\r\n* ---------------------------------------------------------\r\n*\r\n* ---------------------------------------------------------\r\n* Generated file, DO NOT EDIT\r\n* ---------------------------------------------------------\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AvatarSize;\r\n(function (AvatarSize) {\r\n    AvatarSize[AvatarSize[\"Small\"] = 0] = \"Small\";\r\n    AvatarSize[AvatarSize[\"Medium\"] = 1] = \"Medium\";\r\n    AvatarSize[AvatarSize[\"Large\"] = 2] = \"Large\";\r\n})(AvatarSize = exports.AvatarSize || (exports.AvatarSize = {}));\r\nexports.TypeInfo = {\r\n    AttributeDescriptor: {\r\n        fields: null\r\n    },\r\n    AttributesContainer: {\r\n        fields: null\r\n    },\r\n    Avatar: {\r\n        fields: null\r\n    },\r\n    AvatarSize: {\r\n        enumValues: {\r\n            \"small\": 0,\r\n            \"medium\": 1,\r\n            \"large\": 2,\r\n        }\r\n    },\r\n    CoreProfileAttribute: {\r\n        fields: null\r\n    },\r\n    Country: {\r\n        fields: null\r\n    },\r\n    CreateProfileContext: {\r\n        fields: null\r\n    },\r\n    GeoRegion: {\r\n        fields: null\r\n    },\r\n    Profile: {\r\n        fields: null\r\n    },\r\n    ProfileAttribute: {\r\n        fields: null\r\n    },\r\n    ProfileAttributeBase: {\r\n        fields: null\r\n    },\r\n    ProfileRegion: {\r\n        fields: null\r\n    },\r\n    ProfileRegions: {\r\n        fields: null\r\n    },\r\n};\r\nexports.TypeInfo.AttributeDescriptor.fields = {};\r\nexports.TypeInfo.AttributesContainer.fields = {\r\n    attributes: {},\r\n};\r\nexports.TypeInfo.Avatar.fields = {\r\n    size: {\r\n        enumType: exports.TypeInfo.AvatarSize\r\n    },\r\n    timeStamp: {\r\n        isDate: true,\r\n    },\r\n};\r\nexports.TypeInfo.CoreProfileAttribute.fields = {\r\n    descriptor: {\r\n        typeInfo: exports.TypeInfo.AttributeDescriptor\r\n    },\r\n    timeStamp: {\r\n        isDate: true,\r\n    },\r\n};\r\nexports.TypeInfo.Country.fields = {};\r\nexports.TypeInfo.CreateProfileContext.fields = {};\r\nexports.TypeInfo.GeoRegion.fields = {};\r\nexports.TypeInfo.Profile.fields = {\r\n    applicationContainer: {\r\n        typeInfo: exports.TypeInfo.AttributesContainer\r\n    },\r\n    coreAttributes: {},\r\n    timeStamp: {\r\n        isDate: true,\r\n    },\r\n};\r\nexports.TypeInfo.ProfileAttribute.fields = {\r\n    descriptor: {\r\n        typeInfo: exports.TypeInfo.AttributeDescriptor\r\n    },\r\n    timeStamp: {\r\n        isDate: true,\r\n    },\r\n};\r\nexports.TypeInfo.ProfileAttributeBase.fields = {\r\n    descriptor: {\r\n        typeInfo: exports.TypeInfo.AttributeDescriptor\r\n    },\r\n    timeStamp: {\r\n        isDate: true,\r\n    },\r\n};\r\nexports.TypeInfo.ProfileRegion.fields = {};\r\nexports.TypeInfo.ProfileRegions.fields = {\r\n    regions: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ProfileRegion\r\n    },\r\n};\r\n","/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AggregationType;\r\n(function (AggregationType) {\r\n    AggregationType[AggregationType[\"Hourly\"] = 0] = \"Hourly\";\r\n    AggregationType[AggregationType[\"Daily\"] = 1] = \"Daily\";\r\n})(AggregationType = exports.AggregationType || (exports.AggregationType = {}));\r\nvar ResultPhase;\r\n(function (ResultPhase) {\r\n    ResultPhase[ResultPhase[\"Preliminary\"] = 0] = \"Preliminary\";\r\n    ResultPhase[ResultPhase[\"Full\"] = 1] = \"Full\";\r\n})(ResultPhase = exports.ResultPhase || (exports.ResultPhase = {}));\r\nexports.TypeInfo = {\r\n    AggregationType: {\r\n        enumValues: {\r\n            \"hourly\": 0,\r\n            \"daily\": 1\r\n        }\r\n    },\r\n    CodeChangeTrendItem: {},\r\n    ProjectActivityMetrics: {},\r\n    ProjectLanguageAnalytics: {},\r\n    RepositoryActivityMetrics: {},\r\n    RepositoryLanguageAnalytics: {},\r\n    ResultPhase: {\r\n        enumValues: {\r\n            \"preliminary\": 0,\r\n            \"full\": 1\r\n        }\r\n    },\r\n};\r\nexports.TypeInfo.CodeChangeTrendItem.fields = {\r\n    time: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.ProjectActivityMetrics.fields = {\r\n    codeChangesTrend: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.CodeChangeTrendItem\r\n    }\r\n};\r\nexports.TypeInfo.ProjectLanguageAnalytics.fields = {\r\n    repositoryLanguageAnalytics: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.RepositoryLanguageAnalytics\r\n    },\r\n    resultPhase: {\r\n        enumType: exports.TypeInfo.ResultPhase\r\n    }\r\n};\r\nexports.TypeInfo.RepositoryActivityMetrics.fields = {\r\n    codeChangesTrend: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.CodeChangeTrendItem\r\n    }\r\n};\r\nexports.TypeInfo.RepositoryLanguageAnalytics.fields = {\r\n    resultPhase: {\r\n        enumType: exports.TypeInfo.ResultPhase\r\n    },\r\n    updatedTime: {\r\n        isDate: true,\r\n    }\r\n};\r\n","/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst FormInputInterfaces = require(\"../interfaces/common/FormInputInterfaces\");\r\nvar AgentArtifactType;\r\n(function (AgentArtifactType) {\r\n    /**\r\n     * Indicates XamlBuild artifact\r\n     */\r\n    AgentArtifactType[AgentArtifactType[\"XamlBuild\"] = 0] = \"XamlBuild\";\r\n    /**\r\n     * Indicates Build artifact\r\n     */\r\n    AgentArtifactType[AgentArtifactType[\"Build\"] = 1] = \"Build\";\r\n    /**\r\n     * Indicates Jenkins artifact\r\n     */\r\n    AgentArtifactType[AgentArtifactType[\"Jenkins\"] = 2] = \"Jenkins\";\r\n    /**\r\n     * Indicates FileShare artifact\r\n     */\r\n    AgentArtifactType[AgentArtifactType[\"FileShare\"] = 3] = \"FileShare\";\r\n    /**\r\n     * Indicates Nuget artifact\r\n     */\r\n    AgentArtifactType[AgentArtifactType[\"Nuget\"] = 4] = \"Nuget\";\r\n    /**\r\n     * Indicates TfsOnPrem artifact\r\n     */\r\n    AgentArtifactType[AgentArtifactType[\"TfsOnPrem\"] = 5] = \"TfsOnPrem\";\r\n    /**\r\n     * Indicates GitHub artifact\r\n     */\r\n    AgentArtifactType[AgentArtifactType[\"GitHub\"] = 6] = \"GitHub\";\r\n    /**\r\n     * Indicates TFGit artifact\r\n     */\r\n    AgentArtifactType[AgentArtifactType[\"TFGit\"] = 7] = \"TFGit\";\r\n    /**\r\n     * Indicates ExternalTfsBuild artifact\r\n     */\r\n    AgentArtifactType[AgentArtifactType[\"ExternalTfsBuild\"] = 8] = \"ExternalTfsBuild\";\r\n    /**\r\n     * Indicates Custom artifact\r\n     */\r\n    AgentArtifactType[AgentArtifactType[\"Custom\"] = 9] = \"Custom\";\r\n    /**\r\n     * Indicates Tfvc artifact\r\n     */\r\n    AgentArtifactType[AgentArtifactType[\"Tfvc\"] = 10] = \"Tfvc\";\r\n})(AgentArtifactType = exports.AgentArtifactType || (exports.AgentArtifactType = {}));\r\nvar ApprovalExecutionOrder;\r\n(function (ApprovalExecutionOrder) {\r\n    /**\r\n     * Approvals shown before gates.\r\n     */\r\n    ApprovalExecutionOrder[ApprovalExecutionOrder[\"BeforeGates\"] = 1] = \"BeforeGates\";\r\n    /**\r\n     * Approvals shown after successful execution of gates.\r\n     */\r\n    ApprovalExecutionOrder[ApprovalExecutionOrder[\"AfterSuccessfulGates\"] = 2] = \"AfterSuccessfulGates\";\r\n    /**\r\n     * Approvals shown always after execution of gates.\r\n     */\r\n    ApprovalExecutionOrder[ApprovalExecutionOrder[\"AfterGatesAlways\"] = 4] = \"AfterGatesAlways\";\r\n})(ApprovalExecutionOrder = exports.ApprovalExecutionOrder || (exports.ApprovalExecutionOrder = {}));\r\nvar ApprovalFilters;\r\n(function (ApprovalFilters) {\r\n    /**\r\n     * No approvals or approval snapshots.\r\n     */\r\n    ApprovalFilters[ApprovalFilters[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Manual approval steps but no approval snapshots (Use with ApprovalSnapshots for snapshots).\r\n     */\r\n    ApprovalFilters[ApprovalFilters[\"ManualApprovals\"] = 1] = \"ManualApprovals\";\r\n    /**\r\n     * Automated approval steps but no approval snapshots (Use with ApprovalSnapshots for snapshots).\r\n     */\r\n    ApprovalFilters[ApprovalFilters[\"AutomatedApprovals\"] = 2] = \"AutomatedApprovals\";\r\n    /**\r\n     * No approval steps, but approval snapshots (Use with either ManualApprovals or AutomatedApprovals for approval steps).\r\n     */\r\n    ApprovalFilters[ApprovalFilters[\"ApprovalSnapshots\"] = 4] = \"ApprovalSnapshots\";\r\n    /**\r\n     * All approval steps and approval snapshots.\r\n     */\r\n    ApprovalFilters[ApprovalFilters[\"All\"] = 7] = \"All\";\r\n})(ApprovalFilters = exports.ApprovalFilters || (exports.ApprovalFilters = {}));\r\nvar ApprovalStatus;\r\n(function (ApprovalStatus) {\r\n    /**\r\n     * Indicates the approval does not have the status set.\r\n     */\r\n    ApprovalStatus[ApprovalStatus[\"Undefined\"] = 0] = \"Undefined\";\r\n    /**\r\n     * Indicates the approval is pending.\r\n     */\r\n    ApprovalStatus[ApprovalStatus[\"Pending\"] = 1] = \"Pending\";\r\n    /**\r\n     * Indicates the approval is approved.\r\n     */\r\n    ApprovalStatus[ApprovalStatus[\"Approved\"] = 2] = \"Approved\";\r\n    /**\r\n     * Indicates the approval is rejected.\r\n     */\r\n    ApprovalStatus[ApprovalStatus[\"Rejected\"] = 4] = \"Rejected\";\r\n    /**\r\n     * Indicates the approval is reassigned.\r\n     */\r\n    ApprovalStatus[ApprovalStatus[\"Reassigned\"] = 6] = \"Reassigned\";\r\n    /**\r\n     * Indicates the approval is canceled.\r\n     */\r\n    ApprovalStatus[ApprovalStatus[\"Canceled\"] = 7] = \"Canceled\";\r\n    /**\r\n     * Indicates the approval is skipped.\r\n     */\r\n    ApprovalStatus[ApprovalStatus[\"Skipped\"] = 8] = \"Skipped\";\r\n})(ApprovalStatus = exports.ApprovalStatus || (exports.ApprovalStatus = {}));\r\nvar ApprovalType;\r\n(function (ApprovalType) {\r\n    /**\r\n     * Indicates the approval type does not set.\r\n     */\r\n    ApprovalType[ApprovalType[\"Undefined\"] = 0] = \"Undefined\";\r\n    /**\r\n     * Indicates the approvals which executed before deployment.\r\n     */\r\n    ApprovalType[ApprovalType[\"PreDeploy\"] = 1] = \"PreDeploy\";\r\n    /**\r\n     * Indicates the approvals which executed after deployment.\r\n     */\r\n    ApprovalType[ApprovalType[\"PostDeploy\"] = 2] = \"PostDeploy\";\r\n    /**\r\n     * Indicates all approvals.\r\n     */\r\n    ApprovalType[ApprovalType[\"All\"] = 3] = \"All\";\r\n})(ApprovalType = exports.ApprovalType || (exports.ApprovalType = {}));\r\nvar AuditAction;\r\n(function (AuditAction) {\r\n    /**\r\n     * Indicates the audit add.\r\n     */\r\n    AuditAction[AuditAction[\"Add\"] = 1] = \"Add\";\r\n    /**\r\n     * Indicates the audit update.\r\n     */\r\n    AuditAction[AuditAction[\"Update\"] = 2] = \"Update\";\r\n    /**\r\n     * Indicates the audit delete.\r\n     */\r\n    AuditAction[AuditAction[\"Delete\"] = 3] = \"Delete\";\r\n    /**\r\n     * Indicates the audit undelete.\r\n     */\r\n    AuditAction[AuditAction[\"Undelete\"] = 4] = \"Undelete\";\r\n})(AuditAction = exports.AuditAction || (exports.AuditAction = {}));\r\nvar AuthorizationHeaderFor;\r\n(function (AuthorizationHeaderFor) {\r\n    AuthorizationHeaderFor[AuthorizationHeaderFor[\"RevalidateApproverIdentity\"] = 0] = \"RevalidateApproverIdentity\";\r\n    AuthorizationHeaderFor[AuthorizationHeaderFor[\"OnBehalfOf\"] = 1] = \"OnBehalfOf\";\r\n})(AuthorizationHeaderFor = exports.AuthorizationHeaderFor || (exports.AuthorizationHeaderFor = {}));\r\nvar ConditionType;\r\n(function (ConditionType) {\r\n    /**\r\n     * The condition type is undefined.\r\n     */\r\n    ConditionType[ConditionType[\"Undefined\"] = 0] = \"Undefined\";\r\n    /**\r\n     * The condition type is event.\r\n     */\r\n    ConditionType[ConditionType[\"Event\"] = 1] = \"Event\";\r\n    /**\r\n     * The condition type is environment state.\r\n     */\r\n    ConditionType[ConditionType[\"EnvironmentState\"] = 2] = \"EnvironmentState\";\r\n    /**\r\n     * The condition type is artifact.\r\n     */\r\n    ConditionType[ConditionType[\"Artifact\"] = 4] = \"Artifact\";\r\n})(ConditionType = exports.ConditionType || (exports.ConditionType = {}));\r\nvar DeploymentAuthorizationOwner;\r\n(function (DeploymentAuthorizationOwner) {\r\n    DeploymentAuthorizationOwner[DeploymentAuthorizationOwner[\"Automatic\"] = 0] = \"Automatic\";\r\n    DeploymentAuthorizationOwner[DeploymentAuthorizationOwner[\"DeploymentSubmitter\"] = 1] = \"DeploymentSubmitter\";\r\n    DeploymentAuthorizationOwner[DeploymentAuthorizationOwner[\"FirstPreDeploymentApprover\"] = 2] = \"FirstPreDeploymentApprover\";\r\n})(DeploymentAuthorizationOwner = exports.DeploymentAuthorizationOwner || (exports.DeploymentAuthorizationOwner = {}));\r\nvar DeploymentExpands;\r\n(function (DeploymentExpands) {\r\n    DeploymentExpands[DeploymentExpands[\"All\"] = 0] = \"All\";\r\n    DeploymentExpands[DeploymentExpands[\"DeploymentOnly\"] = 1] = \"DeploymentOnly\";\r\n    DeploymentExpands[DeploymentExpands[\"Approvals\"] = 2] = \"Approvals\";\r\n    DeploymentExpands[DeploymentExpands[\"Artifacts\"] = 4] = \"Artifacts\";\r\n})(DeploymentExpands = exports.DeploymentExpands || (exports.DeploymentExpands = {}));\r\nvar DeploymentOperationStatus;\r\n(function (DeploymentOperationStatus) {\r\n    /**\r\n     * The deployment operation status is undefined.\r\n     */\r\n    DeploymentOperationStatus[DeploymentOperationStatus[\"Undefined\"] = 0] = \"Undefined\";\r\n    /**\r\n     * The deployment operation status is queued.\r\n     */\r\n    DeploymentOperationStatus[DeploymentOperationStatus[\"Queued\"] = 1] = \"Queued\";\r\n    /**\r\n     * The deployment operation status is scheduled.\r\n     */\r\n    DeploymentOperationStatus[DeploymentOperationStatus[\"Scheduled\"] = 2] = \"Scheduled\";\r\n    /**\r\n     * The deployment operation status is pending.\r\n     */\r\n    DeploymentOperationStatus[DeploymentOperationStatus[\"Pending\"] = 4] = \"Pending\";\r\n    /**\r\n     * The deployment operation status is approved.\r\n     */\r\n    DeploymentOperationStatus[DeploymentOperationStatus[\"Approved\"] = 8] = \"Approved\";\r\n    /**\r\n     * The deployment operation status is rejected.\r\n     */\r\n    DeploymentOperationStatus[DeploymentOperationStatus[\"Rejected\"] = 16] = \"Rejected\";\r\n    /**\r\n     * The deployment operation status is deferred.\r\n     */\r\n    DeploymentOperationStatus[DeploymentOperationStatus[\"Deferred\"] = 32] = \"Deferred\";\r\n    /**\r\n     * The deployment operation status is queued for agent.\r\n     */\r\n    DeploymentOperationStatus[DeploymentOperationStatus[\"QueuedForAgent\"] = 64] = \"QueuedForAgent\";\r\n    /**\r\n     * The deployment operation status is phase in progress.\r\n     */\r\n    DeploymentOperationStatus[DeploymentOperationStatus[\"PhaseInProgress\"] = 128] = \"PhaseInProgress\";\r\n    /**\r\n     * The deployment operation status is phase succeeded.\r\n     */\r\n    DeploymentOperationStatus[DeploymentOperationStatus[\"PhaseSucceeded\"] = 256] = \"PhaseSucceeded\";\r\n    /**\r\n     * The deployment operation status is phase partially succeeded.\r\n     */\r\n    DeploymentOperationStatus[DeploymentOperationStatus[\"PhasePartiallySucceeded\"] = 512] = \"PhasePartiallySucceeded\";\r\n    /**\r\n     * The deployment operation status is phase failed.\r\n     */\r\n    DeploymentOperationStatus[DeploymentOperationStatus[\"PhaseFailed\"] = 1024] = \"PhaseFailed\";\r\n    /**\r\n     * The deployment operation status is canceled.\r\n     */\r\n    DeploymentOperationStatus[DeploymentOperationStatus[\"Canceled\"] = 2048] = \"Canceled\";\r\n    /**\r\n     * The deployment operation status is phase canceled.\r\n     */\r\n    DeploymentOperationStatus[DeploymentOperationStatus[\"PhaseCanceled\"] = 4096] = \"PhaseCanceled\";\r\n    /**\r\n     * The deployment operation status is manualintervention pending.\r\n     */\r\n    DeploymentOperationStatus[DeploymentOperationStatus[\"ManualInterventionPending\"] = 8192] = \"ManualInterventionPending\";\r\n    /**\r\n     * The deployment operation status is queued for pipeline.\r\n     */\r\n    DeploymentOperationStatus[DeploymentOperationStatus[\"QueuedForPipeline\"] = 16384] = \"QueuedForPipeline\";\r\n    /**\r\n     * The deployment operation status is cancelling.\r\n     */\r\n    DeploymentOperationStatus[DeploymentOperationStatus[\"Cancelling\"] = 32768] = \"Cancelling\";\r\n    /**\r\n     * The deployment operation status is EvaluatingGates.\r\n     */\r\n    DeploymentOperationStatus[DeploymentOperationStatus[\"EvaluatingGates\"] = 65536] = \"EvaluatingGates\";\r\n    /**\r\n     * The deployment operation status is GateFailed.\r\n     */\r\n    DeploymentOperationStatus[DeploymentOperationStatus[\"GateFailed\"] = 131072] = \"GateFailed\";\r\n    /**\r\n     * The deployment operation status is all.\r\n     */\r\n    DeploymentOperationStatus[DeploymentOperationStatus[\"All\"] = 258047] = \"All\";\r\n})(DeploymentOperationStatus = exports.DeploymentOperationStatus || (exports.DeploymentOperationStatus = {}));\r\nvar DeploymentReason;\r\n(function (DeploymentReason) {\r\n    /**\r\n     * The deployment reason is none.\r\n     */\r\n    DeploymentReason[DeploymentReason[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * The deployment reason is manual.\r\n     */\r\n    DeploymentReason[DeploymentReason[\"Manual\"] = 1] = \"Manual\";\r\n    /**\r\n     * The deployment reason is automated.\r\n     */\r\n    DeploymentReason[DeploymentReason[\"Automated\"] = 2] = \"Automated\";\r\n    /**\r\n     * The deployment reason is scheduled.\r\n     */\r\n    DeploymentReason[DeploymentReason[\"Scheduled\"] = 4] = \"Scheduled\";\r\n    /**\r\n     * The deployment reason is RedeployTrigger.\r\n     */\r\n    DeploymentReason[DeploymentReason[\"RedeployTrigger\"] = 8] = \"RedeployTrigger\";\r\n})(DeploymentReason = exports.DeploymentReason || (exports.DeploymentReason = {}));\r\nvar DeploymentsQueryType;\r\n(function (DeploymentsQueryType) {\r\n    DeploymentsQueryType[DeploymentsQueryType[\"Regular\"] = 1] = \"Regular\";\r\n    DeploymentsQueryType[DeploymentsQueryType[\"FailingSince\"] = 2] = \"FailingSince\";\r\n})(DeploymentsQueryType = exports.DeploymentsQueryType || (exports.DeploymentsQueryType = {}));\r\nvar DeploymentStatus;\r\n(function (DeploymentStatus) {\r\n    /**\r\n     * The deployment status is undefined.\r\n     */\r\n    DeploymentStatus[DeploymentStatus[\"Undefined\"] = 0] = \"Undefined\";\r\n    /**\r\n     * The deployment status is not deployed.\r\n     */\r\n    DeploymentStatus[DeploymentStatus[\"NotDeployed\"] = 1] = \"NotDeployed\";\r\n    /**\r\n     * The deployment status is in progress.\r\n     */\r\n    DeploymentStatus[DeploymentStatus[\"InProgress\"] = 2] = \"InProgress\";\r\n    /**\r\n     * The deployment status is succeeded.\r\n     */\r\n    DeploymentStatus[DeploymentStatus[\"Succeeded\"] = 4] = \"Succeeded\";\r\n    /**\r\n     * The deployment status is partiallysucceeded.\r\n     */\r\n    DeploymentStatus[DeploymentStatus[\"PartiallySucceeded\"] = 8] = \"PartiallySucceeded\";\r\n    /**\r\n     * The deployment status is failed.\r\n     */\r\n    DeploymentStatus[DeploymentStatus[\"Failed\"] = 16] = \"Failed\";\r\n    /**\r\n     * The deployment status is all.\r\n     */\r\n    DeploymentStatus[DeploymentStatus[\"All\"] = 31] = \"All\";\r\n})(DeploymentStatus = exports.DeploymentStatus || (exports.DeploymentStatus = {}));\r\nvar DeployPhaseStatus;\r\n(function (DeployPhaseStatus) {\r\n    /**\r\n     * Phase status not set.\r\n     */\r\n    DeployPhaseStatus[DeployPhaseStatus[\"Undefined\"] = 0] = \"Undefined\";\r\n    /**\r\n     * Phase execution not started.\r\n     */\r\n    DeployPhaseStatus[DeployPhaseStatus[\"NotStarted\"] = 1] = \"NotStarted\";\r\n    /**\r\n     * Phase execution in progress.\r\n     */\r\n    DeployPhaseStatus[DeployPhaseStatus[\"InProgress\"] = 2] = \"InProgress\";\r\n    /**\r\n     * Phase execution partially succeeded.\r\n     */\r\n    DeployPhaseStatus[DeployPhaseStatus[\"PartiallySucceeded\"] = 4] = \"PartiallySucceeded\";\r\n    /**\r\n     * Phase execution succeeded.\r\n     */\r\n    DeployPhaseStatus[DeployPhaseStatus[\"Succeeded\"] = 8] = \"Succeeded\";\r\n    /**\r\n     * Phase execution failed.\r\n     */\r\n    DeployPhaseStatus[DeployPhaseStatus[\"Failed\"] = 16] = \"Failed\";\r\n    /**\r\n     * Phase execution canceled.\r\n     */\r\n    DeployPhaseStatus[DeployPhaseStatus[\"Canceled\"] = 32] = \"Canceled\";\r\n    /**\r\n     * Phase execution skipped.\r\n     */\r\n    DeployPhaseStatus[DeployPhaseStatus[\"Skipped\"] = 64] = \"Skipped\";\r\n    /**\r\n     * Phase is in cancelling state.\r\n     */\r\n    DeployPhaseStatus[DeployPhaseStatus[\"Cancelling\"] = 128] = \"Cancelling\";\r\n})(DeployPhaseStatus = exports.DeployPhaseStatus || (exports.DeployPhaseStatus = {}));\r\nvar DeployPhaseTypes;\r\n(function (DeployPhaseTypes) {\r\n    /**\r\n     * Phase type not defined. Don't use this.\r\n     */\r\n    DeployPhaseTypes[DeployPhaseTypes[\"Undefined\"] = 0] = \"Undefined\";\r\n    /**\r\n     * Phase type which contains tasks executed on agent.\r\n     */\r\n    DeployPhaseTypes[DeployPhaseTypes[\"AgentBasedDeployment\"] = 1] = \"AgentBasedDeployment\";\r\n    /**\r\n     * Phase type which contains tasks executed by server.\r\n     */\r\n    DeployPhaseTypes[DeployPhaseTypes[\"RunOnServer\"] = 2] = \"RunOnServer\";\r\n    /**\r\n     * Phase type which contains tasks executed on deployment group machines.\r\n     */\r\n    DeployPhaseTypes[DeployPhaseTypes[\"MachineGroupBasedDeployment\"] = 4] = \"MachineGroupBasedDeployment\";\r\n    /**\r\n     * Phase type which contains tasks which acts as Gates for the deployment to go forward.\r\n     */\r\n    DeployPhaseTypes[DeployPhaseTypes[\"DeploymentGates\"] = 8] = \"DeploymentGates\";\r\n})(DeployPhaseTypes = exports.DeployPhaseTypes || (exports.DeployPhaseTypes = {}));\r\nvar EnvironmentStatus;\r\n(function (EnvironmentStatus) {\r\n    /**\r\n     * Environment status not set.\r\n     */\r\n    EnvironmentStatus[EnvironmentStatus[\"Undefined\"] = 0] = \"Undefined\";\r\n    /**\r\n     * Environment is in not started state.\r\n     */\r\n    EnvironmentStatus[EnvironmentStatus[\"NotStarted\"] = 1] = \"NotStarted\";\r\n    /**\r\n     * Environment is in progress state.\r\n     */\r\n    EnvironmentStatus[EnvironmentStatus[\"InProgress\"] = 2] = \"InProgress\";\r\n    /**\r\n     * Environment is in succeeded state.\r\n     */\r\n    EnvironmentStatus[EnvironmentStatus[\"Succeeded\"] = 4] = \"Succeeded\";\r\n    /**\r\n     * Environment is in canceled state.\r\n     */\r\n    EnvironmentStatus[EnvironmentStatus[\"Canceled\"] = 8] = \"Canceled\";\r\n    /**\r\n     * Environment is in rejected state.\r\n     */\r\n    EnvironmentStatus[EnvironmentStatus[\"Rejected\"] = 16] = \"Rejected\";\r\n    /**\r\n     * Environment is in queued state.\r\n     */\r\n    EnvironmentStatus[EnvironmentStatus[\"Queued\"] = 32] = \"Queued\";\r\n    /**\r\n     * Environment is in scheduled state.\r\n     */\r\n    EnvironmentStatus[EnvironmentStatus[\"Scheduled\"] = 64] = \"Scheduled\";\r\n    /**\r\n     * Environment is in partially succeeded state.\r\n     */\r\n    EnvironmentStatus[EnvironmentStatus[\"PartiallySucceeded\"] = 128] = \"PartiallySucceeded\";\r\n})(EnvironmentStatus = exports.EnvironmentStatus || (exports.EnvironmentStatus = {}));\r\nvar EnvironmentTriggerType;\r\n(function (EnvironmentTriggerType) {\r\n    /**\r\n     * Environment trigger type undefined.\r\n     */\r\n    EnvironmentTriggerType[EnvironmentTriggerType[\"Undefined\"] = 0] = \"Undefined\";\r\n    /**\r\n     * Environment trigger type is deployment group redeploy.\r\n     */\r\n    EnvironmentTriggerType[EnvironmentTriggerType[\"DeploymentGroupRedeploy\"] = 1] = \"DeploymentGroupRedeploy\";\r\n    /**\r\n     * Environment trigger type is Rollback.\r\n     */\r\n    EnvironmentTriggerType[EnvironmentTriggerType[\"RollbackRedeploy\"] = 2] = \"RollbackRedeploy\";\r\n})(EnvironmentTriggerType = exports.EnvironmentTriggerType || (exports.EnvironmentTriggerType = {}));\r\n/**\r\n * Specifies the desired ordering of folders.\r\n */\r\nvar FolderPathQueryOrder;\r\n(function (FolderPathQueryOrder) {\r\n    /**\r\n     * No order.\r\n     */\r\n    FolderPathQueryOrder[FolderPathQueryOrder[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Order by folder name and path ascending.\r\n     */\r\n    FolderPathQueryOrder[FolderPathQueryOrder[\"Ascending\"] = 1] = \"Ascending\";\r\n    /**\r\n     * Order by folder name and path descending.\r\n     */\r\n    FolderPathQueryOrder[FolderPathQueryOrder[\"Descending\"] = 2] = \"Descending\";\r\n})(FolderPathQueryOrder = exports.FolderPathQueryOrder || (exports.FolderPathQueryOrder = {}));\r\nvar GateStatus;\r\n(function (GateStatus) {\r\n    /**\r\n     * The gate does not have the status set.\r\n     */\r\n    GateStatus[GateStatus[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * The gate is in pending state.\r\n     */\r\n    GateStatus[GateStatus[\"Pending\"] = 1] = \"Pending\";\r\n    /**\r\n     * The gate is currently in progress.\r\n     */\r\n    GateStatus[GateStatus[\"InProgress\"] = 2] = \"InProgress\";\r\n    /**\r\n     * The gate completed successfully.\r\n     */\r\n    GateStatus[GateStatus[\"Succeeded\"] = 4] = \"Succeeded\";\r\n    /**\r\n     * The gate execution failed.\r\n     */\r\n    GateStatus[GateStatus[\"Failed\"] = 8] = \"Failed\";\r\n    /**\r\n     * The gate execution cancelled.\r\n     */\r\n    GateStatus[GateStatus[\"Canceled\"] = 16] = \"Canceled\";\r\n})(GateStatus = exports.GateStatus || (exports.GateStatus = {}));\r\nvar IssueSource;\r\n(function (IssueSource) {\r\n    IssueSource[IssueSource[\"None\"] = 0] = \"None\";\r\n    IssueSource[IssueSource[\"User\"] = 1] = \"User\";\r\n    IssueSource[IssueSource[\"System\"] = 2] = \"System\";\r\n})(IssueSource = exports.IssueSource || (exports.IssueSource = {}));\r\nvar MailSectionType;\r\n(function (MailSectionType) {\r\n    MailSectionType[MailSectionType[\"Details\"] = 0] = \"Details\";\r\n    MailSectionType[MailSectionType[\"Environments\"] = 1] = \"Environments\";\r\n    MailSectionType[MailSectionType[\"Issues\"] = 2] = \"Issues\";\r\n    MailSectionType[MailSectionType[\"TestResults\"] = 3] = \"TestResults\";\r\n    MailSectionType[MailSectionType[\"WorkItems\"] = 4] = \"WorkItems\";\r\n    MailSectionType[MailSectionType[\"ReleaseInfo\"] = 5] = \"ReleaseInfo\";\r\n})(MailSectionType = exports.MailSectionType || (exports.MailSectionType = {}));\r\n/**\r\n * Describes manual intervention status\r\n */\r\nvar ManualInterventionStatus;\r\n(function (ManualInterventionStatus) {\r\n    /**\r\n     * The manual intervention does not have the status set.\r\n     */\r\n    ManualInterventionStatus[ManualInterventionStatus[\"Unknown\"] = 0] = \"Unknown\";\r\n    /**\r\n     * The manual intervention is pending.\r\n     */\r\n    ManualInterventionStatus[ManualInterventionStatus[\"Pending\"] = 1] = \"Pending\";\r\n    /**\r\n     * The manual intervention is rejected.\r\n     */\r\n    ManualInterventionStatus[ManualInterventionStatus[\"Rejected\"] = 2] = \"Rejected\";\r\n    /**\r\n     * The manual intervention is approved.\r\n     */\r\n    ManualInterventionStatus[ManualInterventionStatus[\"Approved\"] = 4] = \"Approved\";\r\n    /**\r\n     * The manual intervention is canceled.\r\n     */\r\n    ManualInterventionStatus[ManualInterventionStatus[\"Canceled\"] = 8] = \"Canceled\";\r\n})(ManualInterventionStatus = exports.ManualInterventionStatus || (exports.ManualInterventionStatus = {}));\r\nvar ParallelExecutionTypes;\r\n(function (ParallelExecutionTypes) {\r\n    ParallelExecutionTypes[ParallelExecutionTypes[\"None\"] = 0] = \"None\";\r\n    ParallelExecutionTypes[ParallelExecutionTypes[\"MultiConfiguration\"] = 1] = \"MultiConfiguration\";\r\n    ParallelExecutionTypes[ParallelExecutionTypes[\"MultiMachine\"] = 2] = \"MultiMachine\";\r\n})(ParallelExecutionTypes = exports.ParallelExecutionTypes || (exports.ParallelExecutionTypes = {}));\r\nvar PipelineProcessTypes;\r\n(function (PipelineProcessTypes) {\r\n    PipelineProcessTypes[PipelineProcessTypes[\"Designer\"] = 1] = \"Designer\";\r\n    PipelineProcessTypes[PipelineProcessTypes[\"Yaml\"] = 2] = \"Yaml\";\r\n})(PipelineProcessTypes = exports.PipelineProcessTypes || (exports.PipelineProcessTypes = {}));\r\nvar PropertySelectorType;\r\n(function (PropertySelectorType) {\r\n    /**\r\n     * Include in property selector.\r\n     */\r\n    PropertySelectorType[PropertySelectorType[\"Inclusion\"] = 0] = \"Inclusion\";\r\n    /**\r\n     * Exclude in property selector.\r\n     */\r\n    PropertySelectorType[PropertySelectorType[\"Exclusion\"] = 1] = \"Exclusion\";\r\n})(PropertySelectorType = exports.PropertySelectorType || (exports.PropertySelectorType = {}));\r\nvar PullRequestSystemType;\r\n(function (PullRequestSystemType) {\r\n    PullRequestSystemType[PullRequestSystemType[\"None\"] = 0] = \"None\";\r\n    PullRequestSystemType[PullRequestSystemType[\"TfsGit\"] = 1] = \"TfsGit\";\r\n    PullRequestSystemType[PullRequestSystemType[\"GitHub\"] = 2] = \"GitHub\";\r\n})(PullRequestSystemType = exports.PullRequestSystemType || (exports.PullRequestSystemType = {}));\r\nvar ReleaseDefinitionExpands;\r\n(function (ReleaseDefinitionExpands) {\r\n    /**\r\n     * Returns top level properties of object.\r\n     */\r\n    ReleaseDefinitionExpands[ReleaseDefinitionExpands[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Include environments in return object.\r\n     */\r\n    ReleaseDefinitionExpands[ReleaseDefinitionExpands[\"Environments\"] = 2] = \"Environments\";\r\n    /**\r\n     * Include artifacts in return object.\r\n     */\r\n    ReleaseDefinitionExpands[ReleaseDefinitionExpands[\"Artifacts\"] = 4] = \"Artifacts\";\r\n    /**\r\n     * Include triggers in return object.\r\n     */\r\n    ReleaseDefinitionExpands[ReleaseDefinitionExpands[\"Triggers\"] = 8] = \"Triggers\";\r\n    /**\r\n     * Include variables in return object.\r\n     */\r\n    ReleaseDefinitionExpands[ReleaseDefinitionExpands[\"Variables\"] = 16] = \"Variables\";\r\n    /**\r\n     * Include tags in return object.\r\n     */\r\n    ReleaseDefinitionExpands[ReleaseDefinitionExpands[\"Tags\"] = 32] = \"Tags\";\r\n    /**\r\n     * Include last release in return object.\r\n     */\r\n    ReleaseDefinitionExpands[ReleaseDefinitionExpands[\"LastRelease\"] = 64] = \"LastRelease\";\r\n})(ReleaseDefinitionExpands = exports.ReleaseDefinitionExpands || (exports.ReleaseDefinitionExpands = {}));\r\nvar ReleaseDefinitionQueryOrder;\r\n(function (ReleaseDefinitionQueryOrder) {\r\n    /**\r\n     * Return results based on release definition Id ascending order.\r\n     */\r\n    ReleaseDefinitionQueryOrder[ReleaseDefinitionQueryOrder[\"IdAscending\"] = 0] = \"IdAscending\";\r\n    /**\r\n     * Return results based on release definition Id descending order.\r\n     */\r\n    ReleaseDefinitionQueryOrder[ReleaseDefinitionQueryOrder[\"IdDescending\"] = 1] = \"IdDescending\";\r\n    /**\r\n     * Return results based on release definition name ascending order.\r\n     */\r\n    ReleaseDefinitionQueryOrder[ReleaseDefinitionQueryOrder[\"NameAscending\"] = 2] = \"NameAscending\";\r\n    /**\r\n     * Return results based on release definition name descending order.\r\n     */\r\n    ReleaseDefinitionQueryOrder[ReleaseDefinitionQueryOrder[\"NameDescending\"] = 3] = \"NameDescending\";\r\n})(ReleaseDefinitionQueryOrder = exports.ReleaseDefinitionQueryOrder || (exports.ReleaseDefinitionQueryOrder = {}));\r\nvar ReleaseDefinitionSource;\r\n(function (ReleaseDefinitionSource) {\r\n    /**\r\n     * Indicates ReleaseDefinition source not defined.\r\n     */\r\n    ReleaseDefinitionSource[ReleaseDefinitionSource[\"Undefined\"] = 0] = \"Undefined\";\r\n    /**\r\n     * Indicates ReleaseDefinition created using REST API.\r\n     */\r\n    ReleaseDefinitionSource[ReleaseDefinitionSource[\"RestApi\"] = 1] = \"RestApi\";\r\n    /**\r\n     * Indicates ReleaseDefinition created using UI.\r\n     */\r\n    ReleaseDefinitionSource[ReleaseDefinitionSource[\"UserInterface\"] = 2] = \"UserInterface\";\r\n    /**\r\n     * Indicates ReleaseDefinition created from Ibiza.\r\n     */\r\n    ReleaseDefinitionSource[ReleaseDefinitionSource[\"Ibiza\"] = 4] = \"Ibiza\";\r\n    /**\r\n     * Indicates ReleaseDefinition created from PortalExtension API.\r\n     */\r\n    ReleaseDefinitionSource[ReleaseDefinitionSource[\"PortalExtensionApi\"] = 8] = \"PortalExtensionApi\";\r\n})(ReleaseDefinitionSource = exports.ReleaseDefinitionSource || (exports.ReleaseDefinitionSource = {}));\r\nvar ReleaseEnvironmentExpands;\r\n(function (ReleaseEnvironmentExpands) {\r\n    /**\r\n     * Return top level properties of object.\r\n     */\r\n    ReleaseEnvironmentExpands[ReleaseEnvironmentExpands[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Expand environment with tasks.\r\n     */\r\n    ReleaseEnvironmentExpands[ReleaseEnvironmentExpands[\"Tasks\"] = 1] = \"Tasks\";\r\n})(ReleaseEnvironmentExpands = exports.ReleaseEnvironmentExpands || (exports.ReleaseEnvironmentExpands = {}));\r\nvar ReleaseExpands;\r\n(function (ReleaseExpands) {\r\n    ReleaseExpands[ReleaseExpands[\"None\"] = 0] = \"None\";\r\n    ReleaseExpands[ReleaseExpands[\"Environments\"] = 2] = \"Environments\";\r\n    ReleaseExpands[ReleaseExpands[\"Artifacts\"] = 4] = \"Artifacts\";\r\n    ReleaseExpands[ReleaseExpands[\"Approvals\"] = 8] = \"Approvals\";\r\n    ReleaseExpands[ReleaseExpands[\"ManualInterventions\"] = 16] = \"ManualInterventions\";\r\n    ReleaseExpands[ReleaseExpands[\"Variables\"] = 32] = \"Variables\";\r\n    ReleaseExpands[ReleaseExpands[\"Tags\"] = 64] = \"Tags\";\r\n})(ReleaseExpands = exports.ReleaseExpands || (exports.ReleaseExpands = {}));\r\nvar ReleaseQueryOrder;\r\n(function (ReleaseQueryOrder) {\r\n    /**\r\n     * Return results in descending order.\r\n     */\r\n    ReleaseQueryOrder[ReleaseQueryOrder[\"Descending\"] = 0] = \"Descending\";\r\n    /**\r\n     * Return results in ascending order.\r\n     */\r\n    ReleaseQueryOrder[ReleaseQueryOrder[\"Ascending\"] = 1] = \"Ascending\";\r\n})(ReleaseQueryOrder = exports.ReleaseQueryOrder || (exports.ReleaseQueryOrder = {}));\r\nvar ReleaseReason;\r\n(function (ReleaseReason) {\r\n    /**\r\n     * Indicates the release triggered reason not set.\r\n     */\r\n    ReleaseReason[ReleaseReason[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Indicates the release triggered manually.\r\n     */\r\n    ReleaseReason[ReleaseReason[\"Manual\"] = 1] = \"Manual\";\r\n    /**\r\n     * Indicates the release triggered by continuous integration.\r\n     */\r\n    ReleaseReason[ReleaseReason[\"ContinuousIntegration\"] = 2] = \"ContinuousIntegration\";\r\n    /**\r\n     * Indicates the release triggered by schedule.\r\n     */\r\n    ReleaseReason[ReleaseReason[\"Schedule\"] = 3] = \"Schedule\";\r\n    /**\r\n     * Indicates the release triggered by PullRequest.\r\n     */\r\n    ReleaseReason[ReleaseReason[\"PullRequest\"] = 4] = \"PullRequest\";\r\n})(ReleaseReason = exports.ReleaseReason || (exports.ReleaseReason = {}));\r\nvar ReleaseStatus;\r\n(function (ReleaseStatus) {\r\n    /**\r\n     * Release status not set.\r\n     */\r\n    ReleaseStatus[ReleaseStatus[\"Undefined\"] = 0] = \"Undefined\";\r\n    /**\r\n     * Release is in draft state.\r\n     */\r\n    ReleaseStatus[ReleaseStatus[\"Draft\"] = 1] = \"Draft\";\r\n    /**\r\n     * Release status is in active.\r\n     */\r\n    ReleaseStatus[ReleaseStatus[\"Active\"] = 2] = \"Active\";\r\n    /**\r\n     * Release status is in abandoned.\r\n     */\r\n    ReleaseStatus[ReleaseStatus[\"Abandoned\"] = 4] = \"Abandoned\";\r\n})(ReleaseStatus = exports.ReleaseStatus || (exports.ReleaseStatus = {}));\r\nvar ReleaseTriggerType;\r\n(function (ReleaseTriggerType) {\r\n    /**\r\n     * Release trigger type not set.\r\n     */\r\n    ReleaseTriggerType[ReleaseTriggerType[\"Undefined\"] = 0] = \"Undefined\";\r\n    /**\r\n     * Artifact based release trigger.\r\n     */\r\n    ReleaseTriggerType[ReleaseTriggerType[\"ArtifactSource\"] = 1] = \"ArtifactSource\";\r\n    /**\r\n     * Schedule based release trigger.\r\n     */\r\n    ReleaseTriggerType[ReleaseTriggerType[\"Schedule\"] = 2] = \"Schedule\";\r\n    /**\r\n     * Source repository based release trigger.\r\n     */\r\n    ReleaseTriggerType[ReleaseTriggerType[\"SourceRepo\"] = 3] = \"SourceRepo\";\r\n    /**\r\n     * Container image based release trigger.\r\n     */\r\n    ReleaseTriggerType[ReleaseTriggerType[\"ContainerImage\"] = 4] = \"ContainerImage\";\r\n    /**\r\n     * Package based release trigger.\r\n     */\r\n    ReleaseTriggerType[ReleaseTriggerType[\"Package\"] = 5] = \"Package\";\r\n    /**\r\n     * Pull request based release trigger.\r\n     */\r\n    ReleaseTriggerType[ReleaseTriggerType[\"PullRequest\"] = 6] = \"PullRequest\";\r\n})(ReleaseTriggerType = exports.ReleaseTriggerType || (exports.ReleaseTriggerType = {}));\r\nvar ScheduleDays;\r\n(function (ScheduleDays) {\r\n    /**\r\n     * Scheduled day not set.\r\n     */\r\n    ScheduleDays[ScheduleDays[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Scheduled on Monday.\r\n     */\r\n    ScheduleDays[ScheduleDays[\"Monday\"] = 1] = \"Monday\";\r\n    /**\r\n     * Scheduled on Tuesday.\r\n     */\r\n    ScheduleDays[ScheduleDays[\"Tuesday\"] = 2] = \"Tuesday\";\r\n    /**\r\n     * Scheduled on Wednesday.\r\n     */\r\n    ScheduleDays[ScheduleDays[\"Wednesday\"] = 4] = \"Wednesday\";\r\n    /**\r\n     * Scheduled on Thursday.\r\n     */\r\n    ScheduleDays[ScheduleDays[\"Thursday\"] = 8] = \"Thursday\";\r\n    /**\r\n     * Scheduled on Friday.\r\n     */\r\n    ScheduleDays[ScheduleDays[\"Friday\"] = 16] = \"Friday\";\r\n    /**\r\n     * Scheduled on Saturday.\r\n     */\r\n    ScheduleDays[ScheduleDays[\"Saturday\"] = 32] = \"Saturday\";\r\n    /**\r\n     * Scheduled on Sunday.\r\n     */\r\n    ScheduleDays[ScheduleDays[\"Sunday\"] = 64] = \"Sunday\";\r\n    /**\r\n     * Scheduled on all the days in week.\r\n     */\r\n    ScheduleDays[ScheduleDays[\"All\"] = 127] = \"All\";\r\n})(ScheduleDays = exports.ScheduleDays || (exports.ScheduleDays = {}));\r\nvar SenderType;\r\n(function (SenderType) {\r\n    SenderType[SenderType[\"ServiceAccount\"] = 1] = \"ServiceAccount\";\r\n    SenderType[SenderType[\"RequestingUser\"] = 2] = \"RequestingUser\";\r\n})(SenderType = exports.SenderType || (exports.SenderType = {}));\r\nvar SingleReleaseExpands;\r\n(function (SingleReleaseExpands) {\r\n    /**\r\n     * Return top level properties of object.\r\n     */\r\n    SingleReleaseExpands[SingleReleaseExpands[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Expand release with tasks.\r\n     */\r\n    SingleReleaseExpands[SingleReleaseExpands[\"Tasks\"] = 1] = \"Tasks\";\r\n})(SingleReleaseExpands = exports.SingleReleaseExpands || (exports.SingleReleaseExpands = {}));\r\nvar TaskStatus;\r\n(function (TaskStatus) {\r\n    /**\r\n     * The task does not have the status set.\r\n     */\r\n    TaskStatus[TaskStatus[\"Unknown\"] = 0] = \"Unknown\";\r\n    /**\r\n     * The task is in pending status.\r\n     */\r\n    TaskStatus[TaskStatus[\"Pending\"] = 1] = \"Pending\";\r\n    /**\r\n     * The task is currently in progress.\r\n     */\r\n    TaskStatus[TaskStatus[\"InProgress\"] = 2] = \"InProgress\";\r\n    /**\r\n     * The task completed successfully.\r\n     */\r\n    TaskStatus[TaskStatus[\"Success\"] = 3] = \"Success\";\r\n    /**\r\n     * The task execution failed.\r\n     */\r\n    TaskStatus[TaskStatus[\"Failure\"] = 4] = \"Failure\";\r\n    /**\r\n     * The task execution canceled.\r\n     */\r\n    TaskStatus[TaskStatus[\"Canceled\"] = 5] = \"Canceled\";\r\n    /**\r\n     * The task execution skipped.\r\n     */\r\n    TaskStatus[TaskStatus[\"Skipped\"] = 6] = \"Skipped\";\r\n    /**\r\n     * The task completed successfully.\r\n     */\r\n    TaskStatus[TaskStatus[\"Succeeded\"] = 7] = \"Succeeded\";\r\n    /**\r\n     * The task execution failed.\r\n     */\r\n    TaskStatus[TaskStatus[\"Failed\"] = 8] = \"Failed\";\r\n    /**\r\n     * The task execution partially succeeded.\r\n     */\r\n    TaskStatus[TaskStatus[\"PartiallySucceeded\"] = 9] = \"PartiallySucceeded\";\r\n})(TaskStatus = exports.TaskStatus || (exports.TaskStatus = {}));\r\nvar VariableGroupActionFilter;\r\n(function (VariableGroupActionFilter) {\r\n    VariableGroupActionFilter[VariableGroupActionFilter[\"None\"] = 0] = \"None\";\r\n    VariableGroupActionFilter[VariableGroupActionFilter[\"Manage\"] = 2] = \"Manage\";\r\n    VariableGroupActionFilter[VariableGroupActionFilter[\"Use\"] = 16] = \"Use\";\r\n})(VariableGroupActionFilter = exports.VariableGroupActionFilter || (exports.VariableGroupActionFilter = {}));\r\nvar YamlFileSourceTypes;\r\n(function (YamlFileSourceTypes) {\r\n    YamlFileSourceTypes[YamlFileSourceTypes[\"None\"] = 0] = \"None\";\r\n    YamlFileSourceTypes[YamlFileSourceTypes[\"TFSGit\"] = 1] = \"TFSGit\";\r\n})(YamlFileSourceTypes = exports.YamlFileSourceTypes || (exports.YamlFileSourceTypes = {}));\r\nexports.TypeInfo = {\r\n    AgentArtifactDefinition: {},\r\n    AgentArtifactType: {\r\n        enumValues: {\r\n            \"xamlBuild\": 0,\r\n            \"build\": 1,\r\n            \"jenkins\": 2,\r\n            \"fileShare\": 3,\r\n            \"nuget\": 4,\r\n            \"tfsOnPrem\": 5,\r\n            \"gitHub\": 6,\r\n            \"tfGit\": 7,\r\n            \"externalTfsBuild\": 8,\r\n            \"custom\": 9,\r\n            \"tfvc\": 10\r\n        }\r\n    },\r\n    AgentBasedDeployPhase: {},\r\n    AgentDeploymentInput: {},\r\n    ApprovalExecutionOrder: {\r\n        enumValues: {\r\n            \"beforeGates\": 1,\r\n            \"afterSuccessfulGates\": 2,\r\n            \"afterGatesAlways\": 4\r\n        }\r\n    },\r\n    ApprovalFilters: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"manualApprovals\": 1,\r\n            \"automatedApprovals\": 2,\r\n            \"approvalSnapshots\": 4,\r\n            \"all\": 7\r\n        }\r\n    },\r\n    ApprovalOptions: {},\r\n    ApprovalStatus: {\r\n        enumValues: {\r\n            \"undefined\": 0,\r\n            \"pending\": 1,\r\n            \"approved\": 2,\r\n            \"rejected\": 4,\r\n            \"reassigned\": 6,\r\n            \"canceled\": 7,\r\n            \"skipped\": 8\r\n        }\r\n    },\r\n    ApprovalType: {\r\n        enumValues: {\r\n            \"undefined\": 0,\r\n            \"preDeploy\": 1,\r\n            \"postDeploy\": 2,\r\n            \"all\": 3\r\n        }\r\n    },\r\n    ArtifactContributionDefinition: {},\r\n    ArtifactMetadata: {},\r\n    ArtifactSourceTrigger: {},\r\n    ArtifactTypeDefinition: {},\r\n    ArtifactVersion: {},\r\n    ArtifactVersionQueryResult: {},\r\n    AuditAction: {\r\n        enumValues: {\r\n            \"add\": 1,\r\n            \"update\": 2,\r\n            \"delete\": 3,\r\n            \"undelete\": 4\r\n        }\r\n    },\r\n    AuthorizationHeaderFor: {\r\n        enumValues: {\r\n            \"revalidateApproverIdentity\": 0,\r\n            \"onBehalfOf\": 1\r\n        }\r\n    },\r\n    AutoTriggerIssue: {},\r\n    AzureKeyVaultVariableGroupProviderData: {},\r\n    AzureKeyVaultVariableValue: {},\r\n    BuildVersion: {},\r\n    Change: {},\r\n    CodeRepositoryReference: {},\r\n    Condition: {},\r\n    ConditionType: {\r\n        enumValues: {\r\n            \"undefined\": 0,\r\n            \"event\": 1,\r\n            \"environmentState\": 2,\r\n            \"artifact\": 4\r\n        }\r\n    },\r\n    ContainerImageTrigger: {},\r\n    ContinuousDeploymentTriggerIssue: {},\r\n    Deployment: {},\r\n    DeploymentApprovalCompletedEvent: {},\r\n    DeploymentApprovalPendingEvent: {},\r\n    DeploymentAttempt: {},\r\n    DeploymentAuthorizationInfo: {},\r\n    DeploymentAuthorizationOwner: {\r\n        enumValues: {\r\n            \"automatic\": 0,\r\n            \"deploymentSubmitter\": 1,\r\n            \"firstPreDeploymentApprover\": 2\r\n        }\r\n    },\r\n    DeploymentCompletedEvent: {},\r\n    DeploymentExpands: {\r\n        enumValues: {\r\n            \"all\": 0,\r\n            \"deploymentOnly\": 1,\r\n            \"approvals\": 2,\r\n            \"artifacts\": 4\r\n        }\r\n    },\r\n    DeploymentJob: {},\r\n    DeploymentManualInterventionPendingEvent: {},\r\n    DeploymentOperationStatus: {\r\n        enumValues: {\r\n            \"undefined\": 0,\r\n            \"queued\": 1,\r\n            \"scheduled\": 2,\r\n            \"pending\": 4,\r\n            \"approved\": 8,\r\n            \"rejected\": 16,\r\n            \"deferred\": 32,\r\n            \"queuedForAgent\": 64,\r\n            \"phaseInProgress\": 128,\r\n            \"phaseSucceeded\": 256,\r\n            \"phasePartiallySucceeded\": 512,\r\n            \"phaseFailed\": 1024,\r\n            \"canceled\": 2048,\r\n            \"phaseCanceled\": 4096,\r\n            \"manualInterventionPending\": 8192,\r\n            \"queuedForPipeline\": 16384,\r\n            \"cancelling\": 32768,\r\n            \"evaluatingGates\": 65536,\r\n            \"gateFailed\": 131072,\r\n            \"all\": 258047\r\n        }\r\n    },\r\n    DeploymentQueryParameters: {},\r\n    DeploymentReason: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"manual\": 1,\r\n            \"automated\": 2,\r\n            \"scheduled\": 4,\r\n            \"redeployTrigger\": 8\r\n        }\r\n    },\r\n    DeploymentsQueryType: {\r\n        enumValues: {\r\n            \"regular\": 1,\r\n            \"failingSince\": 2\r\n        }\r\n    },\r\n    DeploymentStartedEvent: {},\r\n    DeploymentStatus: {\r\n        enumValues: {\r\n            \"undefined\": 0,\r\n            \"notDeployed\": 1,\r\n            \"inProgress\": 2,\r\n            \"succeeded\": 4,\r\n            \"partiallySucceeded\": 8,\r\n            \"failed\": 16,\r\n            \"all\": 31\r\n        }\r\n    },\r\n    DeployPhase: {},\r\n    DeployPhaseStatus: {\r\n        enumValues: {\r\n            \"undefined\": 0,\r\n            \"notStarted\": 1,\r\n            \"inProgress\": 2,\r\n            \"partiallySucceeded\": 4,\r\n            \"succeeded\": 8,\r\n            \"failed\": 16,\r\n            \"canceled\": 32,\r\n            \"skipped\": 64,\r\n            \"cancelling\": 128\r\n        }\r\n    },\r\n    DeployPhaseTypes: {\r\n        enumValues: {\r\n            \"undefined\": 0,\r\n            \"agentBasedDeployment\": 1,\r\n            \"runOnServer\": 2,\r\n            \"machineGroupBasedDeployment\": 4,\r\n            \"deploymentGates\": 8\r\n        }\r\n    },\r\n    EnvironmentStatus: {\r\n        enumValues: {\r\n            \"undefined\": 0,\r\n            \"notStarted\": 1,\r\n            \"inProgress\": 2,\r\n            \"succeeded\": 4,\r\n            \"canceled\": 8,\r\n            \"rejected\": 16,\r\n            \"queued\": 32,\r\n            \"scheduled\": 64,\r\n            \"partiallySucceeded\": 128\r\n        }\r\n    },\r\n    EnvironmentTrigger: {},\r\n    EnvironmentTriggerType: {\r\n        enumValues: {\r\n            \"undefined\": 0,\r\n            \"deploymentGroupRedeploy\": 1,\r\n            \"rollbackRedeploy\": 2\r\n        }\r\n    },\r\n    ExecutionInput: {},\r\n    Folder: {},\r\n    FolderPathQueryOrder: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"ascending\": 1,\r\n            \"descending\": 2\r\n        }\r\n    },\r\n    GatesDeployPhase: {},\r\n    GateStatus: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"pending\": 1,\r\n            \"inProgress\": 2,\r\n            \"succeeded\": 4,\r\n            \"failed\": 8,\r\n            \"canceled\": 16\r\n        }\r\n    },\r\n    IgnoredGate: {},\r\n    IssueSource: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"user\": 1,\r\n            \"system\": 2\r\n        }\r\n    },\r\n    MachineGroupBasedDeployPhase: {},\r\n    MailMessage: {},\r\n    MailSectionType: {\r\n        enumValues: {\r\n            \"details\": 0,\r\n            \"environments\": 1,\r\n            \"issues\": 2,\r\n            \"testResults\": 3,\r\n            \"workItems\": 4,\r\n            \"releaseInfo\": 5\r\n        }\r\n    },\r\n    ManualIntervention: {},\r\n    ManualInterventionStatus: {\r\n        enumValues: {\r\n            \"unknown\": 0,\r\n            \"pending\": 1,\r\n            \"rejected\": 2,\r\n            \"approved\": 4,\r\n            \"canceled\": 8\r\n        }\r\n    },\r\n    ManualInterventionUpdateMetadata: {},\r\n    MultiConfigInput: {},\r\n    MultiMachineInput: {},\r\n    PackageTrigger: {},\r\n    ParallelExecutionInputBase: {},\r\n    ParallelExecutionTypes: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"multiConfiguration\": 1,\r\n            \"multiMachine\": 2\r\n        }\r\n    },\r\n    PipelineProcess: {},\r\n    PipelineProcessTypes: {\r\n        enumValues: {\r\n            \"designer\": 1,\r\n            \"yaml\": 2\r\n        }\r\n    },\r\n    PropertySelector: {},\r\n    PropertySelectorType: {\r\n        enumValues: {\r\n            \"inclusion\": 0,\r\n            \"exclusion\": 1\r\n        }\r\n    },\r\n    PullRequestConfiguration: {},\r\n    PullRequestSystemType: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"tfsGit\": 1,\r\n            \"gitHub\": 2\r\n        }\r\n    },\r\n    PullRequestTrigger: {},\r\n    Release: {},\r\n    ReleaseAbandonedEvent: {},\r\n    ReleaseApproval: {},\r\n    ReleaseApprovalHistory: {},\r\n    ReleaseApprovalPendingEvent: {},\r\n    ReleaseCondition: {},\r\n    ReleaseCreatedEvent: {},\r\n    ReleaseDefinition: {},\r\n    ReleaseDefinitionApprovals: {},\r\n    ReleaseDefinitionEnvironment: {},\r\n    ReleaseDefinitionEnvironmentTemplate: {},\r\n    ReleaseDefinitionExpands: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"environments\": 2,\r\n            \"artifacts\": 4,\r\n            \"triggers\": 8,\r\n            \"variables\": 16,\r\n            \"tags\": 32,\r\n            \"lastRelease\": 64\r\n        }\r\n    },\r\n    ReleaseDefinitionQueryOrder: {\r\n        enumValues: {\r\n            \"idAscending\": 0,\r\n            \"idDescending\": 1,\r\n            \"nameAscending\": 2,\r\n            \"nameDescending\": 3\r\n        }\r\n    },\r\n    ReleaseDefinitionRevision: {},\r\n    ReleaseDefinitionSource: {\r\n        enumValues: {\r\n            \"undefined\": 0,\r\n            \"restApi\": 1,\r\n            \"userInterface\": 2,\r\n            \"ibiza\": 4,\r\n            \"portalExtensionApi\": 8\r\n        }\r\n    },\r\n    ReleaseDefinitionSummary: {},\r\n    ReleaseDeployPhase: {},\r\n    ReleaseEnvironment: {},\r\n    ReleaseEnvironmentCompletedEvent: {},\r\n    ReleaseEnvironmentExpands: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"tasks\": 1\r\n        }\r\n    },\r\n    ReleaseEnvironmentStatusUpdatedEvent: {},\r\n    ReleaseEnvironmentUpdateMetadata: {},\r\n    ReleaseExpands: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"environments\": 2,\r\n            \"artifacts\": 4,\r\n            \"approvals\": 8,\r\n            \"manualInterventions\": 16,\r\n            \"variables\": 32,\r\n            \"tags\": 64\r\n        }\r\n    },\r\n    ReleaseGates: {},\r\n    ReleaseGatesPhase: {},\r\n    ReleaseNotCreatedEvent: {},\r\n    ReleaseQueryOrder: {\r\n        enumValues: {\r\n            \"descending\": 0,\r\n            \"ascending\": 1\r\n        }\r\n    },\r\n    ReleaseReason: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"manual\": 1,\r\n            \"continuousIntegration\": 2,\r\n            \"schedule\": 3,\r\n            \"pullRequest\": 4\r\n        }\r\n    },\r\n    ReleaseReference: {},\r\n    ReleaseRevision: {},\r\n    ReleaseSchedule: {},\r\n    ReleaseStartMetadata: {},\r\n    ReleaseStatus: {\r\n        enumValues: {\r\n            \"undefined\": 0,\r\n            \"draft\": 1,\r\n            \"active\": 2,\r\n            \"abandoned\": 4\r\n        }\r\n    },\r\n    ReleaseTask: {},\r\n    ReleaseTaskAttachment: {},\r\n    ReleaseTasksUpdatedEvent: {},\r\n    ReleaseTriggerBase: {},\r\n    ReleaseTriggerType: {\r\n        enumValues: {\r\n            \"undefined\": 0,\r\n            \"artifactSource\": 1,\r\n            \"schedule\": 2,\r\n            \"sourceRepo\": 3,\r\n            \"containerImage\": 4,\r\n            \"package\": 5,\r\n            \"pullRequest\": 6\r\n        }\r\n    },\r\n    ReleaseUpdatedEvent: {},\r\n    ReleaseUpdateMetadata: {},\r\n    RunOnServerDeployPhase: {},\r\n    ScheduleDays: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"monday\": 1,\r\n            \"tuesday\": 2,\r\n            \"wednesday\": 4,\r\n            \"thursday\": 8,\r\n            \"friday\": 16,\r\n            \"saturday\": 32,\r\n            \"sunday\": 64,\r\n            \"all\": 127\r\n        }\r\n    },\r\n    ScheduledReleaseTrigger: {},\r\n    SenderType: {\r\n        enumValues: {\r\n            \"serviceAccount\": 1,\r\n            \"requestingUser\": 2\r\n        }\r\n    },\r\n    ServerDeploymentInput: {},\r\n    SingleReleaseExpands: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"tasks\": 1\r\n        }\r\n    },\r\n    SourcePullRequestVersion: {},\r\n    SourceRepoTrigger: {},\r\n    SummaryMailSection: {},\r\n    TaskStatus: {\r\n        enumValues: {\r\n            \"unknown\": 0,\r\n            \"pending\": 1,\r\n            \"inProgress\": 2,\r\n            \"success\": 3,\r\n            \"failure\": 4,\r\n            \"canceled\": 5,\r\n            \"skipped\": 6,\r\n            \"succeeded\": 7,\r\n            \"failed\": 8,\r\n            \"partiallySucceeded\": 9\r\n        }\r\n    },\r\n    VariableGroup: {},\r\n    VariableGroupActionFilter: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"manage\": 2,\r\n            \"use\": 16\r\n        }\r\n    },\r\n    YamlFileSource: {},\r\n    YamlFileSourceTypes: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"tfsGit\": 1\r\n        }\r\n    },\r\n    YamlPipelineProcess: {},\r\n};\r\nexports.TypeInfo.AgentArtifactDefinition.fields = {\r\n    artifactType: {\r\n        enumType: exports.TypeInfo.AgentArtifactType\r\n    }\r\n};\r\nexports.TypeInfo.AgentBasedDeployPhase.fields = {\r\n    deploymentInput: {\r\n        typeInfo: exports.TypeInfo.AgentDeploymentInput\r\n    },\r\n    phaseType: {\r\n        enumType: exports.TypeInfo.DeployPhaseTypes\r\n    }\r\n};\r\nexports.TypeInfo.AgentDeploymentInput.fields = {\r\n    parallelExecution: {\r\n        typeInfo: exports.TypeInfo.ExecutionInput\r\n    }\r\n};\r\nexports.TypeInfo.ApprovalOptions.fields = {\r\n    executionOrder: {\r\n        enumType: exports.TypeInfo.ApprovalExecutionOrder\r\n    }\r\n};\r\nexports.TypeInfo.ArtifactContributionDefinition.fields = {\r\n    inputDescriptors: {\r\n        isArray: true,\r\n        typeInfo: FormInputInterfaces.TypeInfo.InputDescriptor\r\n    }\r\n};\r\nexports.TypeInfo.ArtifactMetadata.fields = {\r\n    instanceReference: {\r\n        typeInfo: exports.TypeInfo.BuildVersion\r\n    }\r\n};\r\nexports.TypeInfo.ArtifactSourceTrigger.fields = {\r\n    triggerType: {\r\n        enumType: exports.TypeInfo.ReleaseTriggerType\r\n    }\r\n};\r\nexports.TypeInfo.ArtifactTypeDefinition.fields = {\r\n    inputDescriptors: {\r\n        isArray: true,\r\n        typeInfo: FormInputInterfaces.TypeInfo.InputDescriptor\r\n    }\r\n};\r\nexports.TypeInfo.ArtifactVersion.fields = {\r\n    defaultVersion: {\r\n        typeInfo: exports.TypeInfo.BuildVersion\r\n    },\r\n    versions: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.BuildVersion\r\n    }\r\n};\r\nexports.TypeInfo.ArtifactVersionQueryResult.fields = {\r\n    artifactVersions: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ArtifactVersion\r\n    }\r\n};\r\nexports.TypeInfo.AutoTriggerIssue.fields = {\r\n    issueSource: {\r\n        enumType: exports.TypeInfo.IssueSource\r\n    },\r\n    releaseTriggerType: {\r\n        enumType: exports.TypeInfo.ReleaseTriggerType\r\n    }\r\n};\r\nexports.TypeInfo.AzureKeyVaultVariableGroupProviderData.fields = {\r\n    lastRefreshedOn: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.AzureKeyVaultVariableValue.fields = {\r\n    expires: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.BuildVersion.fields = {\r\n    sourcePullRequestVersion: {\r\n        typeInfo: exports.TypeInfo.SourcePullRequestVersion\r\n    }\r\n};\r\nexports.TypeInfo.Change.fields = {\r\n    timestamp: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.CodeRepositoryReference.fields = {\r\n    systemType: {\r\n        enumType: exports.TypeInfo.PullRequestSystemType\r\n    }\r\n};\r\nexports.TypeInfo.Condition.fields = {\r\n    conditionType: {\r\n        enumType: exports.TypeInfo.ConditionType\r\n    }\r\n};\r\nexports.TypeInfo.ContainerImageTrigger.fields = {\r\n    triggerType: {\r\n        enumType: exports.TypeInfo.ReleaseTriggerType\r\n    }\r\n};\r\nexports.TypeInfo.ContinuousDeploymentTriggerIssue.fields = {\r\n    issueSource: {\r\n        enumType: exports.TypeInfo.IssueSource\r\n    },\r\n    releaseTriggerType: {\r\n        enumType: exports.TypeInfo.ReleaseTriggerType\r\n    }\r\n};\r\nexports.TypeInfo.Deployment.fields = {\r\n    completedOn: {\r\n        isDate: true,\r\n    },\r\n    conditions: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.Condition\r\n    },\r\n    deploymentStatus: {\r\n        enumType: exports.TypeInfo.DeploymentStatus\r\n    },\r\n    lastModifiedOn: {\r\n        isDate: true,\r\n    },\r\n    operationStatus: {\r\n        enumType: exports.TypeInfo.DeploymentOperationStatus\r\n    },\r\n    postDeployApprovals: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ReleaseApproval\r\n    },\r\n    preDeployApprovals: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ReleaseApproval\r\n    },\r\n    queuedOn: {\r\n        isDate: true,\r\n    },\r\n    reason: {\r\n        enumType: exports.TypeInfo.DeploymentReason\r\n    },\r\n    release: {\r\n        typeInfo: exports.TypeInfo.ReleaseReference\r\n    },\r\n    scheduledDeploymentTime: {\r\n        isDate: true,\r\n    },\r\n    startedOn: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.DeploymentApprovalCompletedEvent.fields = {\r\n    approval: {\r\n        typeInfo: exports.TypeInfo.ReleaseApproval\r\n    },\r\n    release: {\r\n        typeInfo: exports.TypeInfo.Release\r\n    }\r\n};\r\nexports.TypeInfo.DeploymentApprovalPendingEvent.fields = {\r\n    approval: {\r\n        typeInfo: exports.TypeInfo.ReleaseApproval\r\n    },\r\n    approvalOptions: {\r\n        typeInfo: exports.TypeInfo.ApprovalOptions\r\n    },\r\n    completedApprovals: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ReleaseApproval\r\n    },\r\n    deployment: {\r\n        typeInfo: exports.TypeInfo.Deployment\r\n    },\r\n    pendingApprovals: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ReleaseApproval\r\n    },\r\n    release: {\r\n        typeInfo: exports.TypeInfo.Release\r\n    }\r\n};\r\nexports.TypeInfo.DeploymentAttempt.fields = {\r\n    job: {\r\n        typeInfo: exports.TypeInfo.ReleaseTask\r\n    },\r\n    lastModifiedOn: {\r\n        isDate: true,\r\n    },\r\n    operationStatus: {\r\n        enumType: exports.TypeInfo.DeploymentOperationStatus\r\n    },\r\n    postDeploymentGates: {\r\n        typeInfo: exports.TypeInfo.ReleaseGates\r\n    },\r\n    preDeploymentGates: {\r\n        typeInfo: exports.TypeInfo.ReleaseGates\r\n    },\r\n    queuedOn: {\r\n        isDate: true,\r\n    },\r\n    reason: {\r\n        enumType: exports.TypeInfo.DeploymentReason\r\n    },\r\n    releaseDeployPhases: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ReleaseDeployPhase\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.DeploymentStatus\r\n    },\r\n    tasks: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ReleaseTask\r\n    }\r\n};\r\nexports.TypeInfo.DeploymentAuthorizationInfo.fields = {\r\n    authorizationHeaderFor: {\r\n        enumType: exports.TypeInfo.AuthorizationHeaderFor\r\n    }\r\n};\r\nexports.TypeInfo.DeploymentCompletedEvent.fields = {\r\n    deployment: {\r\n        typeInfo: exports.TypeInfo.Deployment\r\n    },\r\n    environment: {\r\n        typeInfo: exports.TypeInfo.ReleaseEnvironment\r\n    }\r\n};\r\nexports.TypeInfo.DeploymentJob.fields = {\r\n    job: {\r\n        typeInfo: exports.TypeInfo.ReleaseTask\r\n    },\r\n    tasks: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ReleaseTask\r\n    }\r\n};\r\nexports.TypeInfo.DeploymentManualInterventionPendingEvent.fields = {\r\n    approval: {\r\n        typeInfo: exports.TypeInfo.ReleaseApproval\r\n    },\r\n    deployment: {\r\n        typeInfo: exports.TypeInfo.Deployment\r\n    },\r\n    manualIntervention: {\r\n        typeInfo: exports.TypeInfo.ManualIntervention\r\n    },\r\n    release: {\r\n        typeInfo: exports.TypeInfo.Release\r\n    }\r\n};\r\nexports.TypeInfo.DeploymentQueryParameters.fields = {\r\n    deploymentStatus: {\r\n        enumType: exports.TypeInfo.DeploymentStatus\r\n    },\r\n    expands: {\r\n        enumType: exports.TypeInfo.DeploymentExpands\r\n    },\r\n    maxModifiedTime: {\r\n        isDate: true,\r\n    },\r\n    minModifiedTime: {\r\n        isDate: true,\r\n    },\r\n    operationStatus: {\r\n        enumType: exports.TypeInfo.DeploymentOperationStatus\r\n    },\r\n    queryOrder: {\r\n        enumType: exports.TypeInfo.ReleaseQueryOrder\r\n    },\r\n    queryType: {\r\n        enumType: exports.TypeInfo.DeploymentsQueryType\r\n    }\r\n};\r\nexports.TypeInfo.DeploymentStartedEvent.fields = {\r\n    environment: {\r\n        typeInfo: exports.TypeInfo.ReleaseEnvironment\r\n    },\r\n    release: {\r\n        typeInfo: exports.TypeInfo.Release\r\n    }\r\n};\r\nexports.TypeInfo.DeployPhase.fields = {\r\n    phaseType: {\r\n        enumType: exports.TypeInfo.DeployPhaseTypes\r\n    }\r\n};\r\nexports.TypeInfo.EnvironmentTrigger.fields = {\r\n    triggerType: {\r\n        enumType: exports.TypeInfo.EnvironmentTriggerType\r\n    }\r\n};\r\nexports.TypeInfo.ExecutionInput.fields = {\r\n    parallelExecutionType: {\r\n        enumType: exports.TypeInfo.ParallelExecutionTypes\r\n    }\r\n};\r\nexports.TypeInfo.Folder.fields = {\r\n    createdOn: {\r\n        isDate: true,\r\n    },\r\n    lastChangedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.GatesDeployPhase.fields = {\r\n    phaseType: {\r\n        enumType: exports.TypeInfo.DeployPhaseTypes\r\n    }\r\n};\r\nexports.TypeInfo.IgnoredGate.fields = {\r\n    lastModifiedOn: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.MachineGroupBasedDeployPhase.fields = {\r\n    phaseType: {\r\n        enumType: exports.TypeInfo.DeployPhaseTypes\r\n    }\r\n};\r\nexports.TypeInfo.MailMessage.fields = {\r\n    replyBy: {\r\n        isDate: true,\r\n    },\r\n    sections: {\r\n        isArray: true,\r\n        enumType: exports.TypeInfo.MailSectionType\r\n    },\r\n    senderType: {\r\n        enumType: exports.TypeInfo.SenderType\r\n    }\r\n};\r\nexports.TypeInfo.ManualIntervention.fields = {\r\n    createdOn: {\r\n        isDate: true,\r\n    },\r\n    modifiedOn: {\r\n        isDate: true,\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.ManualInterventionStatus\r\n    }\r\n};\r\nexports.TypeInfo.ManualInterventionUpdateMetadata.fields = {\r\n    status: {\r\n        enumType: exports.TypeInfo.ManualInterventionStatus\r\n    }\r\n};\r\nexports.TypeInfo.MultiConfigInput.fields = {\r\n    parallelExecutionType: {\r\n        enumType: exports.TypeInfo.ParallelExecutionTypes\r\n    }\r\n};\r\nexports.TypeInfo.MultiMachineInput.fields = {\r\n    parallelExecutionType: {\r\n        enumType: exports.TypeInfo.ParallelExecutionTypes\r\n    }\r\n};\r\nexports.TypeInfo.PackageTrigger.fields = {\r\n    triggerType: {\r\n        enumType: exports.TypeInfo.ReleaseTriggerType\r\n    }\r\n};\r\nexports.TypeInfo.ParallelExecutionInputBase.fields = {\r\n    parallelExecutionType: {\r\n        enumType: exports.TypeInfo.ParallelExecutionTypes\r\n    }\r\n};\r\nexports.TypeInfo.PipelineProcess.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.PipelineProcessTypes\r\n    }\r\n};\r\nexports.TypeInfo.PropertySelector.fields = {\r\n    selectorType: {\r\n        enumType: exports.TypeInfo.PropertySelectorType\r\n    }\r\n};\r\nexports.TypeInfo.PullRequestConfiguration.fields = {\r\n    codeRepositoryReference: {\r\n        typeInfo: exports.TypeInfo.CodeRepositoryReference\r\n    }\r\n};\r\nexports.TypeInfo.PullRequestTrigger.fields = {\r\n    pullRequestConfiguration: {\r\n        typeInfo: exports.TypeInfo.PullRequestConfiguration\r\n    },\r\n    triggerType: {\r\n        enumType: exports.TypeInfo.ReleaseTriggerType\r\n    }\r\n};\r\nexports.TypeInfo.Release.fields = {\r\n    createdOn: {\r\n        isDate: true,\r\n    },\r\n    environments: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ReleaseEnvironment\r\n    },\r\n    modifiedOn: {\r\n        isDate: true,\r\n    },\r\n    reason: {\r\n        enumType: exports.TypeInfo.ReleaseReason\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.ReleaseStatus\r\n    },\r\n    variableGroups: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.VariableGroup\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseAbandonedEvent.fields = {\r\n    release: {\r\n        typeInfo: exports.TypeInfo.Release\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseApproval.fields = {\r\n    approvalType: {\r\n        enumType: exports.TypeInfo.ApprovalType\r\n    },\r\n    createdOn: {\r\n        isDate: true,\r\n    },\r\n    history: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ReleaseApprovalHistory\r\n    },\r\n    modifiedOn: {\r\n        isDate: true,\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.ApprovalStatus\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseApprovalHistory.fields = {\r\n    createdOn: {\r\n        isDate: true,\r\n    },\r\n    modifiedOn: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseApprovalPendingEvent.fields = {\r\n    approval: {\r\n        typeInfo: exports.TypeInfo.ReleaseApproval\r\n    },\r\n    approvalOptions: {\r\n        typeInfo: exports.TypeInfo.ApprovalOptions\r\n    },\r\n    completedApprovals: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ReleaseApproval\r\n    },\r\n    deployment: {\r\n        typeInfo: exports.TypeInfo.Deployment\r\n    },\r\n    environments: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ReleaseEnvironment\r\n    },\r\n    pendingApprovals: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ReleaseApproval\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseCondition.fields = {\r\n    conditionType: {\r\n        enumType: exports.TypeInfo.ConditionType\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseCreatedEvent.fields = {\r\n    release: {\r\n        typeInfo: exports.TypeInfo.Release\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseDefinition.fields = {\r\n    createdOn: {\r\n        isDate: true,\r\n    },\r\n    environments: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ReleaseDefinitionEnvironment\r\n    },\r\n    lastRelease: {\r\n        typeInfo: exports.TypeInfo.ReleaseReference\r\n    },\r\n    modifiedOn: {\r\n        isDate: true,\r\n    },\r\n    pipelineProcess: {\r\n        typeInfo: exports.TypeInfo.PipelineProcess\r\n    },\r\n    source: {\r\n        enumType: exports.TypeInfo.ReleaseDefinitionSource\r\n    },\r\n    triggers: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ReleaseTriggerBase\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseDefinitionApprovals.fields = {\r\n    approvalOptions: {\r\n        typeInfo: exports.TypeInfo.ApprovalOptions\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseDefinitionEnvironment.fields = {\r\n    conditions: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.Condition\r\n    },\r\n    deployPhases: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.DeployPhase\r\n    },\r\n    environmentTriggers: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.EnvironmentTrigger\r\n    },\r\n    postDeployApprovals: {\r\n        typeInfo: exports.TypeInfo.ReleaseDefinitionApprovals\r\n    },\r\n    preDeployApprovals: {\r\n        typeInfo: exports.TypeInfo.ReleaseDefinitionApprovals\r\n    },\r\n    schedules: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ReleaseSchedule\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseDefinitionEnvironmentTemplate.fields = {\r\n    environment: {\r\n        typeInfo: exports.TypeInfo.ReleaseDefinitionEnvironment\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseDefinitionRevision.fields = {\r\n    changedDate: {\r\n        isDate: true,\r\n    },\r\n    changeType: {\r\n        enumType: exports.TypeInfo.AuditAction\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseDefinitionSummary.fields = {\r\n    releases: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.Release\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseDeployPhase.fields = {\r\n    deploymentJobs: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.DeploymentJob\r\n    },\r\n    manualInterventions: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ManualIntervention\r\n    },\r\n    phaseType: {\r\n        enumType: exports.TypeInfo.DeployPhaseTypes\r\n    },\r\n    startedOn: {\r\n        isDate: true,\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.DeployPhaseStatus\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseEnvironment.fields = {\r\n    conditions: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ReleaseCondition\r\n    },\r\n    createdOn: {\r\n        isDate: true,\r\n    },\r\n    deployPhasesSnapshot: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.DeployPhase\r\n    },\r\n    deploySteps: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.DeploymentAttempt\r\n    },\r\n    modifiedOn: {\r\n        isDate: true,\r\n    },\r\n    nextScheduledUtcTime: {\r\n        isDate: true,\r\n    },\r\n    postApprovalsSnapshot: {\r\n        typeInfo: exports.TypeInfo.ReleaseDefinitionApprovals\r\n    },\r\n    postDeployApprovals: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ReleaseApproval\r\n    },\r\n    preApprovalsSnapshot: {\r\n        typeInfo: exports.TypeInfo.ReleaseDefinitionApprovals\r\n    },\r\n    preDeployApprovals: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ReleaseApproval\r\n    },\r\n    scheduledDeploymentTime: {\r\n        isDate: true,\r\n    },\r\n    schedules: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ReleaseSchedule\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.EnvironmentStatus\r\n    },\r\n    variableGroups: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.VariableGroup\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseEnvironmentCompletedEvent.fields = {\r\n    environment: {\r\n        typeInfo: exports.TypeInfo.ReleaseEnvironment\r\n    },\r\n    reason: {\r\n        enumType: exports.TypeInfo.DeploymentReason\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseEnvironmentStatusUpdatedEvent.fields = {\r\n    environmentStatus: {\r\n        enumType: exports.TypeInfo.EnvironmentStatus\r\n    },\r\n    latestDeploymentOperationStatus: {\r\n        enumType: exports.TypeInfo.DeploymentOperationStatus\r\n    },\r\n    latestDeploymentStatus: {\r\n        enumType: exports.TypeInfo.DeploymentStatus\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseEnvironmentUpdateMetadata.fields = {\r\n    scheduledDeploymentTime: {\r\n        isDate: true,\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.EnvironmentStatus\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseGates.fields = {\r\n    deploymentJobs: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.DeploymentJob\r\n    },\r\n    ignoredGates: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.IgnoredGate\r\n    },\r\n    lastModifiedOn: {\r\n        isDate: true,\r\n    },\r\n    stabilizationCompletedOn: {\r\n        isDate: true,\r\n    },\r\n    startedOn: {\r\n        isDate: true,\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.GateStatus\r\n    },\r\n    succeedingSince: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseGatesPhase.fields = {\r\n    deploymentJobs: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.DeploymentJob\r\n    },\r\n    ignoredGates: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.IgnoredGate\r\n    },\r\n    manualInterventions: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ManualIntervention\r\n    },\r\n    phaseType: {\r\n        enumType: exports.TypeInfo.DeployPhaseTypes\r\n    },\r\n    stabilizationCompletedOn: {\r\n        isDate: true,\r\n    },\r\n    startedOn: {\r\n        isDate: true,\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.DeployPhaseStatus\r\n    },\r\n    succeedingSince: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseNotCreatedEvent.fields = {\r\n    releaseReason: {\r\n        enumType: exports.TypeInfo.ReleaseReason\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseReference.fields = {\r\n    createdOn: {\r\n        isDate: true,\r\n    },\r\n    reason: {\r\n        enumType: exports.TypeInfo.ReleaseReason\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseRevision.fields = {\r\n    changedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseSchedule.fields = {\r\n    daysToRelease: {\r\n        enumType: exports.TypeInfo.ScheduleDays\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseStartMetadata.fields = {\r\n    artifacts: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ArtifactMetadata\r\n    },\r\n    reason: {\r\n        enumType: exports.TypeInfo.ReleaseReason\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseTask.fields = {\r\n    dateEnded: {\r\n        isDate: true,\r\n    },\r\n    dateStarted: {\r\n        isDate: true,\r\n    },\r\n    finishTime: {\r\n        isDate: true,\r\n    },\r\n    startTime: {\r\n        isDate: true,\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.TaskStatus\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseTaskAttachment.fields = {\r\n    createdOn: {\r\n        isDate: true,\r\n    },\r\n    modifiedOn: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseTasksUpdatedEvent.fields = {\r\n    job: {\r\n        typeInfo: exports.TypeInfo.ReleaseTask\r\n    },\r\n    tasks: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ReleaseTask\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseTriggerBase.fields = {\r\n    triggerType: {\r\n        enumType: exports.TypeInfo.ReleaseTriggerType\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseUpdatedEvent.fields = {\r\n    release: {\r\n        typeInfo: exports.TypeInfo.Release\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseUpdateMetadata.fields = {\r\n    status: {\r\n        enumType: exports.TypeInfo.ReleaseStatus\r\n    }\r\n};\r\nexports.TypeInfo.RunOnServerDeployPhase.fields = {\r\n    deploymentInput: {\r\n        typeInfo: exports.TypeInfo.ServerDeploymentInput\r\n    },\r\n    phaseType: {\r\n        enumType: exports.TypeInfo.DeployPhaseTypes\r\n    }\r\n};\r\nexports.TypeInfo.ScheduledReleaseTrigger.fields = {\r\n    schedule: {\r\n        typeInfo: exports.TypeInfo.ReleaseSchedule\r\n    },\r\n    triggerType: {\r\n        enumType: exports.TypeInfo.ReleaseTriggerType\r\n    }\r\n};\r\nexports.TypeInfo.ServerDeploymentInput.fields = {\r\n    parallelExecution: {\r\n        typeInfo: exports.TypeInfo.ExecutionInput\r\n    }\r\n};\r\nexports.TypeInfo.SourcePullRequestVersion.fields = {\r\n    pullRequestMergedAt: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.SourceRepoTrigger.fields = {\r\n    triggerType: {\r\n        enumType: exports.TypeInfo.ReleaseTriggerType\r\n    }\r\n};\r\nexports.TypeInfo.SummaryMailSection.fields = {\r\n    sectionType: {\r\n        enumType: exports.TypeInfo.MailSectionType\r\n    }\r\n};\r\nexports.TypeInfo.VariableGroup.fields = {\r\n    createdOn: {\r\n        isDate: true,\r\n    },\r\n    modifiedOn: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.YamlFileSource.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.YamlFileSourceTypes\r\n    }\r\n};\r\nexports.TypeInfo.YamlPipelineProcess.fields = {\r\n    fileSource: {\r\n        typeInfo: exports.TypeInfo.YamlFileSource\r\n    },\r\n    type: {\r\n        enumType: exports.TypeInfo.PipelineProcessTypes\r\n    }\r\n};\r\n","/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar RoleAccess;\r\n(function (RoleAccess) {\r\n    /**\r\n     * Access has been explicitly set.\r\n     */\r\n    RoleAccess[RoleAccess[\"Assigned\"] = 1] = \"Assigned\";\r\n    /**\r\n     * Access has been inherited from a higher scope.\r\n     */\r\n    RoleAccess[RoleAccess[\"Inherited\"] = 2] = \"Inherited\";\r\n})(RoleAccess = exports.RoleAccess || (exports.RoleAccess = {}));\r\nexports.TypeInfo = {\r\n    RoleAccess: {\r\n        enumValues: {\r\n            \"assigned\": 1,\r\n            \"inherited\": 2\r\n        }\r\n    },\r\n    RoleAssignment: {},\r\n};\r\nexports.TypeInfo.RoleAssignment.fields = {\r\n    access: {\r\n        enumType: exports.TypeInfo.RoleAccess\r\n    },\r\n};\r\n","/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst FormInputInterfaces = require(\"../interfaces/common/FormInputInterfaces\");\r\nvar AadLoginPromptOption;\r\n(function (AadLoginPromptOption) {\r\n    /**\r\n     * Do not provide a prompt option\r\n     */\r\n    AadLoginPromptOption[AadLoginPromptOption[\"NoOption\"] = 0] = \"NoOption\";\r\n    /**\r\n     * Force the user to login again.\r\n     */\r\n    AadLoginPromptOption[AadLoginPromptOption[\"Login\"] = 1] = \"Login\";\r\n    /**\r\n     * Force the user to select which account they are logging in with instead of automatically picking the user up from the session state. NOTE: This does not work for switching between the variants of a dual-homed user.\r\n     */\r\n    AadLoginPromptOption[AadLoginPromptOption[\"SelectAccount\"] = 2] = \"SelectAccount\";\r\n    /**\r\n     * Force the user to login again. <remarks> Ignore current authentication state and force the user to authenticate again. This option should be used instead of Login. </remarks>\r\n     */\r\n    AadLoginPromptOption[AadLoginPromptOption[\"FreshLogin\"] = 3] = \"FreshLogin\";\r\n    /**\r\n     * Force the user to login again with mfa. <remarks> Ignore current authentication state and force the user to authenticate again. This option should be used instead of Login, if MFA is required. </remarks>\r\n     */\r\n    AadLoginPromptOption[AadLoginPromptOption[\"FreshLoginWithMfa\"] = 4] = \"FreshLoginWithMfa\";\r\n})(AadLoginPromptOption = exports.AadLoginPromptOption || (exports.AadLoginPromptOption = {}));\r\nvar AuditAction;\r\n(function (AuditAction) {\r\n    AuditAction[AuditAction[\"Add\"] = 1] = \"Add\";\r\n    AuditAction[AuditAction[\"Update\"] = 2] = \"Update\";\r\n    AuditAction[AuditAction[\"Delete\"] = 3] = \"Delete\";\r\n    AuditAction[AuditAction[\"Undelete\"] = 4] = \"Undelete\";\r\n})(AuditAction = exports.AuditAction || (exports.AuditAction = {}));\r\nvar DemandSourceType;\r\n(function (DemandSourceType) {\r\n    DemandSourceType[DemandSourceType[\"Task\"] = 0] = \"Task\";\r\n    DemandSourceType[DemandSourceType[\"Feature\"] = 1] = \"Feature\";\r\n})(DemandSourceType = exports.DemandSourceType || (exports.DemandSourceType = {}));\r\n/**\r\n * This is useful in getting a list of deployment groups, filtered for which caller has permissions to take a particular action.\r\n */\r\nvar DeploymentGroupActionFilter;\r\n(function (DeploymentGroupActionFilter) {\r\n    /**\r\n     * All deployment groups.\r\n     */\r\n    DeploymentGroupActionFilter[DeploymentGroupActionFilter[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Only deployment groups for which caller has **manage** permission.\r\n     */\r\n    DeploymentGroupActionFilter[DeploymentGroupActionFilter[\"Manage\"] = 2] = \"Manage\";\r\n    /**\r\n     * Only deployment groups for which caller has **use** permission.\r\n     */\r\n    DeploymentGroupActionFilter[DeploymentGroupActionFilter[\"Use\"] = 16] = \"Use\";\r\n})(DeploymentGroupActionFilter = exports.DeploymentGroupActionFilter || (exports.DeploymentGroupActionFilter = {}));\r\n/**\r\n * Properties to be included or expanded in deployment group objects. This is useful when getting a single or list of deployment grouops.\r\n */\r\nvar DeploymentGroupExpands;\r\n(function (DeploymentGroupExpands) {\r\n    /**\r\n     * No additional properties.\r\n     */\r\n    DeploymentGroupExpands[DeploymentGroupExpands[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Deprecated: Include all the deployment targets.\r\n     */\r\n    DeploymentGroupExpands[DeploymentGroupExpands[\"Machines\"] = 2] = \"Machines\";\r\n    /**\r\n     * Include unique list of tags across all deployment targets.\r\n     */\r\n    DeploymentGroupExpands[DeploymentGroupExpands[\"Tags\"] = 4] = \"Tags\";\r\n})(DeploymentGroupExpands = exports.DeploymentGroupExpands || (exports.DeploymentGroupExpands = {}));\r\nvar DeploymentMachineExpands;\r\n(function (DeploymentMachineExpands) {\r\n    DeploymentMachineExpands[DeploymentMachineExpands[\"None\"] = 0] = \"None\";\r\n    DeploymentMachineExpands[DeploymentMachineExpands[\"Capabilities\"] = 2] = \"Capabilities\";\r\n    DeploymentMachineExpands[DeploymentMachineExpands[\"AssignedRequest\"] = 4] = \"AssignedRequest\";\r\n})(DeploymentMachineExpands = exports.DeploymentMachineExpands || (exports.DeploymentMachineExpands = {}));\r\n/**\r\n * Properties to be included or expanded in deployment pool summary objects. This is useful when getting a single or list of deployment pool summaries.\r\n */\r\nvar DeploymentPoolSummaryExpands;\r\n(function (DeploymentPoolSummaryExpands) {\r\n    /**\r\n     * No additional properties\r\n     */\r\n    DeploymentPoolSummaryExpands[DeploymentPoolSummaryExpands[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Include deployment groups referring to the deployment pool.\r\n     */\r\n    DeploymentPoolSummaryExpands[DeploymentPoolSummaryExpands[\"DeploymentGroups\"] = 2] = \"DeploymentGroups\";\r\n    /**\r\n     * Include Resource referring to the deployment pool.\r\n     */\r\n    DeploymentPoolSummaryExpands[DeploymentPoolSummaryExpands[\"Resource\"] = 4] = \"Resource\";\r\n})(DeploymentPoolSummaryExpands = exports.DeploymentPoolSummaryExpands || (exports.DeploymentPoolSummaryExpands = {}));\r\n/**\r\n * Properties to be included or expanded in deployment target objects. This is useful when getting a single or list of deployment targets.\r\n */\r\nvar DeploymentTargetExpands;\r\n(function (DeploymentTargetExpands) {\r\n    /**\r\n     * No additional properties.\r\n     */\r\n    DeploymentTargetExpands[DeploymentTargetExpands[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Include capabilities of the deployment agent.\r\n     */\r\n    DeploymentTargetExpands[DeploymentTargetExpands[\"Capabilities\"] = 2] = \"Capabilities\";\r\n    /**\r\n     * Include the job request assigned to the deployment agent.\r\n     */\r\n    DeploymentTargetExpands[DeploymentTargetExpands[\"AssignedRequest\"] = 4] = \"AssignedRequest\";\r\n    /**\r\n     * Include the last completed job request of the deployment agent.\r\n     */\r\n    DeploymentTargetExpands[DeploymentTargetExpands[\"LastCompletedRequest\"] = 8] = \"LastCompletedRequest\";\r\n})(DeploymentTargetExpands = exports.DeploymentTargetExpands || (exports.DeploymentTargetExpands = {}));\r\nvar ElasticAgentState;\r\n(function (ElasticAgentState) {\r\n    ElasticAgentState[ElasticAgentState[\"None\"] = 0] = \"None\";\r\n    ElasticAgentState[ElasticAgentState[\"Enabled\"] = 1] = \"Enabled\";\r\n    ElasticAgentState[ElasticAgentState[\"Online\"] = 2] = \"Online\";\r\n    ElasticAgentState[ElasticAgentState[\"Assigned\"] = 4] = \"Assigned\";\r\n})(ElasticAgentState = exports.ElasticAgentState || (exports.ElasticAgentState = {}));\r\nvar ElasticComputeState;\r\n(function (ElasticComputeState) {\r\n    ElasticComputeState[ElasticComputeState[\"None\"] = 0] = \"None\";\r\n    ElasticComputeState[ElasticComputeState[\"Healthy\"] = 1] = \"Healthy\";\r\n    ElasticComputeState[ElasticComputeState[\"Creating\"] = 2] = \"Creating\";\r\n    ElasticComputeState[ElasticComputeState[\"Deleting\"] = 3] = \"Deleting\";\r\n    ElasticComputeState[ElasticComputeState[\"Failed\"] = 4] = \"Failed\";\r\n    ElasticComputeState[ElasticComputeState[\"Stopped\"] = 5] = \"Stopped\";\r\n    ElasticComputeState[ElasticComputeState[\"Reimaging\"] = 6] = \"Reimaging\";\r\n    ElasticComputeState[ElasticComputeState[\"UnhealthyVm\"] = 7] = \"UnhealthyVm\";\r\n    ElasticComputeState[ElasticComputeState[\"UnhealthyVmssVm\"] = 8] = \"UnhealthyVmssVm\";\r\n})(ElasticComputeState = exports.ElasticComputeState || (exports.ElasticComputeState = {}));\r\nvar ElasticNodeState;\r\n(function (ElasticNodeState) {\r\n    ElasticNodeState[ElasticNodeState[\"None\"] = 0] = \"None\";\r\n    ElasticNodeState[ElasticNodeState[\"New\"] = 1] = \"New\";\r\n    ElasticNodeState[ElasticNodeState[\"CreatingCompute\"] = 2] = \"CreatingCompute\";\r\n    ElasticNodeState[ElasticNodeState[\"StartingAgent\"] = 3] = \"StartingAgent\";\r\n    ElasticNodeState[ElasticNodeState[\"Idle\"] = 4] = \"Idle\";\r\n    ElasticNodeState[ElasticNodeState[\"Assigned\"] = 5] = \"Assigned\";\r\n    ElasticNodeState[ElasticNodeState[\"Offline\"] = 6] = \"Offline\";\r\n    ElasticNodeState[ElasticNodeState[\"PendingReimage\"] = 7] = \"PendingReimage\";\r\n    ElasticNodeState[ElasticNodeState[\"PendingDelete\"] = 8] = \"PendingDelete\";\r\n    ElasticNodeState[ElasticNodeState[\"Saved\"] = 9] = \"Saved\";\r\n    ElasticNodeState[ElasticNodeState[\"DeletingCompute\"] = 10] = \"DeletingCompute\";\r\n    ElasticNodeState[ElasticNodeState[\"Deleted\"] = 11] = \"Deleted\";\r\n    ElasticNodeState[ElasticNodeState[\"Lost\"] = 12] = \"Lost\";\r\n    ElasticNodeState[ElasticNodeState[\"ReimagingCompute\"] = 13] = \"ReimagingCompute\";\r\n    ElasticNodeState[ElasticNodeState[\"RestartingAgent\"] = 14] = \"RestartingAgent\";\r\n    ElasticNodeState[ElasticNodeState[\"FailedToStartPendingDelete\"] = 15] = \"FailedToStartPendingDelete\";\r\n    ElasticNodeState[ElasticNodeState[\"FailedToRestartPendingDelete\"] = 16] = \"FailedToRestartPendingDelete\";\r\n    ElasticNodeState[ElasticNodeState[\"FailedVMPendingDelete\"] = 17] = \"FailedVMPendingDelete\";\r\n    ElasticNodeState[ElasticNodeState[\"AssignedPendingDelete\"] = 18] = \"AssignedPendingDelete\";\r\n    ElasticNodeState[ElasticNodeState[\"RetryDelete\"] = 19] = \"RetryDelete\";\r\n    ElasticNodeState[ElasticNodeState[\"UnhealthyVm\"] = 20] = \"UnhealthyVm\";\r\n    ElasticNodeState[ElasticNodeState[\"UnhealthyVmPendingDelete\"] = 21] = \"UnhealthyVmPendingDelete\";\r\n})(ElasticNodeState = exports.ElasticNodeState || (exports.ElasticNodeState = {}));\r\nvar ElasticPoolState;\r\n(function (ElasticPoolState) {\r\n    /**\r\n     * Online and healthy\r\n     */\r\n    ElasticPoolState[ElasticPoolState[\"Online\"] = 0] = \"Online\";\r\n    ElasticPoolState[ElasticPoolState[\"Offline\"] = 1] = \"Offline\";\r\n    ElasticPoolState[ElasticPoolState[\"Unhealthy\"] = 2] = \"Unhealthy\";\r\n    ElasticPoolState[ElasticPoolState[\"New\"] = 3] = \"New\";\r\n})(ElasticPoolState = exports.ElasticPoolState || (exports.ElasticPoolState = {}));\r\n/**\r\n * This is useful in getting a list of Environments, filtered for which caller has permissions to take a particular action.\r\n */\r\nvar EnvironmentActionFilter;\r\n(function (EnvironmentActionFilter) {\r\n    /**\r\n     * All environments for which user has **view** permission.\r\n     */\r\n    EnvironmentActionFilter[EnvironmentActionFilter[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Only environments for which caller has **manage** permission.\r\n     */\r\n    EnvironmentActionFilter[EnvironmentActionFilter[\"Manage\"] = 2] = \"Manage\";\r\n    /**\r\n     * Only environments for which caller has **use** permission.\r\n     */\r\n    EnvironmentActionFilter[EnvironmentActionFilter[\"Use\"] = 16] = \"Use\";\r\n})(EnvironmentActionFilter = exports.EnvironmentActionFilter || (exports.EnvironmentActionFilter = {}));\r\n/**\r\n * Properties to be included or expanded in environment objects. This is useful when getting a single environment.\r\n */\r\nvar EnvironmentExpands;\r\n(function (EnvironmentExpands) {\r\n    /**\r\n     * No additional properties\r\n     */\r\n    EnvironmentExpands[EnvironmentExpands[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Include resource references referring to the environment.\r\n     */\r\n    EnvironmentExpands[EnvironmentExpands[\"ResourceReferences\"] = 1] = \"ResourceReferences\";\r\n})(EnvironmentExpands = exports.EnvironmentExpands || (exports.EnvironmentExpands = {}));\r\n/**\r\n * EnvironmentResourceType.\r\n */\r\nvar EnvironmentResourceType;\r\n(function (EnvironmentResourceType) {\r\n    EnvironmentResourceType[EnvironmentResourceType[\"Undefined\"] = 0] = \"Undefined\";\r\n    /**\r\n     * Unknown resource type\r\n     */\r\n    EnvironmentResourceType[EnvironmentResourceType[\"Generic\"] = 1] = \"Generic\";\r\n    /**\r\n     * Virtual machine resource type\r\n     */\r\n    EnvironmentResourceType[EnvironmentResourceType[\"VirtualMachine\"] = 2] = \"VirtualMachine\";\r\n    /**\r\n     * Kubernetes resource type\r\n     */\r\n    EnvironmentResourceType[EnvironmentResourceType[\"Kubernetes\"] = 4] = \"Kubernetes\";\r\n})(EnvironmentResourceType = exports.EnvironmentResourceType || (exports.EnvironmentResourceType = {}));\r\nvar ExclusiveLockType;\r\n(function (ExclusiveLockType) {\r\n    ExclusiveLockType[ExclusiveLockType[\"RunLatest\"] = 0] = \"RunLatest\";\r\n    ExclusiveLockType[ExclusiveLockType[\"Sequential\"] = 1] = \"Sequential\";\r\n})(ExclusiveLockType = exports.ExclusiveLockType || (exports.ExclusiveLockType = {}));\r\n/**\r\n * The type of issue based on severity.\r\n */\r\nvar IssueType;\r\n(function (IssueType) {\r\n    IssueType[IssueType[\"Error\"] = 1] = \"Error\";\r\n    IssueType[IssueType[\"Warning\"] = 2] = \"Warning\";\r\n})(IssueType = exports.IssueType || (exports.IssueType = {}));\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"Error\"] = 0] = \"Error\";\r\n    LogLevel[LogLevel[\"Warning\"] = 1] = \"Warning\";\r\n    LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\r\n})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\r\nvar MachineGroupActionFilter;\r\n(function (MachineGroupActionFilter) {\r\n    MachineGroupActionFilter[MachineGroupActionFilter[\"None\"] = 0] = \"None\";\r\n    MachineGroupActionFilter[MachineGroupActionFilter[\"Manage\"] = 2] = \"Manage\";\r\n    MachineGroupActionFilter[MachineGroupActionFilter[\"Use\"] = 16] = \"Use\";\r\n})(MachineGroupActionFilter = exports.MachineGroupActionFilter || (exports.MachineGroupActionFilter = {}));\r\nvar MaskType;\r\n(function (MaskType) {\r\n    MaskType[MaskType[\"Variable\"] = 1] = \"Variable\";\r\n    MaskType[MaskType[\"Regex\"] = 2] = \"Regex\";\r\n})(MaskType = exports.MaskType || (exports.MaskType = {}));\r\nvar OperatingSystemType;\r\n(function (OperatingSystemType) {\r\n    OperatingSystemType[OperatingSystemType[\"Windows\"] = 0] = \"Windows\";\r\n    OperatingSystemType[OperatingSystemType[\"Linux\"] = 1] = \"Linux\";\r\n})(OperatingSystemType = exports.OperatingSystemType || (exports.OperatingSystemType = {}));\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"ConfigurationJob\"] = 0] = \"ConfigurationJob\";\r\n    OperationType[OperationType[\"SizingJob\"] = 1] = \"SizingJob\";\r\n    OperationType[OperationType[\"IncreaseCapacity\"] = 2] = \"IncreaseCapacity\";\r\n    OperationType[OperationType[\"Reimage\"] = 3] = \"Reimage\";\r\n    OperationType[OperationType[\"DeleteVMs\"] = 4] = \"DeleteVMs\";\r\n})(OperationType = exports.OperationType || (exports.OperationType = {}));\r\nvar OrchestrationType;\r\n(function (OrchestrationType) {\r\n    OrchestrationType[OrchestrationType[\"Uniform\"] = 0] = \"Uniform\";\r\n    OrchestrationType[OrchestrationType[\"Flexible\"] = 1] = \"Flexible\";\r\n})(OrchestrationType = exports.OrchestrationType || (exports.OrchestrationType = {}));\r\nvar PlanGroupStatus;\r\n(function (PlanGroupStatus) {\r\n    PlanGroupStatus[PlanGroupStatus[\"Running\"] = 1] = \"Running\";\r\n    PlanGroupStatus[PlanGroupStatus[\"Queued\"] = 2] = \"Queued\";\r\n    PlanGroupStatus[PlanGroupStatus[\"All\"] = 3] = \"All\";\r\n})(PlanGroupStatus = exports.PlanGroupStatus || (exports.PlanGroupStatus = {}));\r\nvar PlanGroupStatusFilter;\r\n(function (PlanGroupStatusFilter) {\r\n    PlanGroupStatusFilter[PlanGroupStatusFilter[\"Running\"] = 1] = \"Running\";\r\n    PlanGroupStatusFilter[PlanGroupStatusFilter[\"Queued\"] = 2] = \"Queued\";\r\n    PlanGroupStatusFilter[PlanGroupStatusFilter[\"All\"] = 3] = \"All\";\r\n})(PlanGroupStatusFilter = exports.PlanGroupStatusFilter || (exports.PlanGroupStatusFilter = {}));\r\nvar ResourceLockStatus;\r\n(function (ResourceLockStatus) {\r\n    ResourceLockStatus[ResourceLockStatus[\"Queued\"] = 0] = \"Queued\";\r\n    ResourceLockStatus[ResourceLockStatus[\"InUse\"] = 1] = \"InUse\";\r\n    ResourceLockStatus[ResourceLockStatus[\"Finished\"] = 2] = \"Finished\";\r\n    ResourceLockStatus[ResourceLockStatus[\"TimedOut\"] = 3] = \"TimedOut\";\r\n    ResourceLockStatus[ResourceLockStatus[\"Canceled\"] = 4] = \"Canceled\";\r\n    ResourceLockStatus[ResourceLockStatus[\"Abandoned\"] = 5] = \"Abandoned\";\r\n    ResourceLockStatus[ResourceLockStatus[\"WaitingOnChecks\"] = 6] = \"WaitingOnChecks\";\r\n})(ResourceLockStatus = exports.ResourceLockStatus || (exports.ResourceLockStatus = {}));\r\nvar SecureFileActionFilter;\r\n(function (SecureFileActionFilter) {\r\n    SecureFileActionFilter[SecureFileActionFilter[\"None\"] = 0] = \"None\";\r\n    SecureFileActionFilter[SecureFileActionFilter[\"Manage\"] = 2] = \"Manage\";\r\n    SecureFileActionFilter[SecureFileActionFilter[\"Use\"] = 16] = \"Use\";\r\n})(SecureFileActionFilter = exports.SecureFileActionFilter || (exports.SecureFileActionFilter = {}));\r\n/**\r\n * This is useful in getting a list of deployment targets, filtered by the result of their last job.\r\n */\r\nvar TaskAgentJobResultFilter;\r\n(function (TaskAgentJobResultFilter) {\r\n    /**\r\n     * Only those deployment targets on which last job failed (**Abandoned**, **Canceled**, **Failed**, **Skipped**).\r\n     */\r\n    TaskAgentJobResultFilter[TaskAgentJobResultFilter[\"Failed\"] = 1] = \"Failed\";\r\n    /**\r\n     * Only those deployment targets on which last job Passed (**Succeeded**, **Succeeded with issues**).\r\n     */\r\n    TaskAgentJobResultFilter[TaskAgentJobResultFilter[\"Passed\"] = 2] = \"Passed\";\r\n    /**\r\n     * Only those deployment targets that never executed a job.\r\n     */\r\n    TaskAgentJobResultFilter[TaskAgentJobResultFilter[\"NeverDeployed\"] = 4] = \"NeverDeployed\";\r\n    /**\r\n     * All deployment targets.\r\n     */\r\n    TaskAgentJobResultFilter[TaskAgentJobResultFilter[\"All\"] = 7] = \"All\";\r\n})(TaskAgentJobResultFilter = exports.TaskAgentJobResultFilter || (exports.TaskAgentJobResultFilter = {}));\r\nvar TaskAgentJobStepType;\r\n(function (TaskAgentJobStepType) {\r\n    TaskAgentJobStepType[TaskAgentJobStepType[\"Task\"] = 1] = \"Task\";\r\n    TaskAgentJobStepType[TaskAgentJobStepType[\"Action\"] = 2] = \"Action\";\r\n})(TaskAgentJobStepType = exports.TaskAgentJobStepType || (exports.TaskAgentJobStepType = {}));\r\n/**\r\n * Filters pools based on whether the calling user has permission to use or manage the pool.\r\n */\r\nvar TaskAgentPoolActionFilter;\r\n(function (TaskAgentPoolActionFilter) {\r\n    TaskAgentPoolActionFilter[TaskAgentPoolActionFilter[\"None\"] = 0] = \"None\";\r\n    TaskAgentPoolActionFilter[TaskAgentPoolActionFilter[\"Manage\"] = 2] = \"Manage\";\r\n    TaskAgentPoolActionFilter[TaskAgentPoolActionFilter[\"Use\"] = 16] = \"Use\";\r\n})(TaskAgentPoolActionFilter = exports.TaskAgentPoolActionFilter || (exports.TaskAgentPoolActionFilter = {}));\r\nvar TaskAgentPoolMaintenanceJobResult;\r\n(function (TaskAgentPoolMaintenanceJobResult) {\r\n    TaskAgentPoolMaintenanceJobResult[TaskAgentPoolMaintenanceJobResult[\"Succeeded\"] = 1] = \"Succeeded\";\r\n    TaskAgentPoolMaintenanceJobResult[TaskAgentPoolMaintenanceJobResult[\"Failed\"] = 2] = \"Failed\";\r\n    TaskAgentPoolMaintenanceJobResult[TaskAgentPoolMaintenanceJobResult[\"Canceled\"] = 4] = \"Canceled\";\r\n})(TaskAgentPoolMaintenanceJobResult = exports.TaskAgentPoolMaintenanceJobResult || (exports.TaskAgentPoolMaintenanceJobResult = {}));\r\nvar TaskAgentPoolMaintenanceJobStatus;\r\n(function (TaskAgentPoolMaintenanceJobStatus) {\r\n    TaskAgentPoolMaintenanceJobStatus[TaskAgentPoolMaintenanceJobStatus[\"InProgress\"] = 1] = \"InProgress\";\r\n    TaskAgentPoolMaintenanceJobStatus[TaskAgentPoolMaintenanceJobStatus[\"Completed\"] = 2] = \"Completed\";\r\n    TaskAgentPoolMaintenanceJobStatus[TaskAgentPoolMaintenanceJobStatus[\"Cancelling\"] = 4] = \"Cancelling\";\r\n    TaskAgentPoolMaintenanceJobStatus[TaskAgentPoolMaintenanceJobStatus[\"Queued\"] = 8] = \"Queued\";\r\n})(TaskAgentPoolMaintenanceJobStatus = exports.TaskAgentPoolMaintenanceJobStatus || (exports.TaskAgentPoolMaintenanceJobStatus = {}));\r\nvar TaskAgentPoolMaintenanceScheduleDays;\r\n(function (TaskAgentPoolMaintenanceScheduleDays) {\r\n    /**\r\n     * Do not run.\r\n     */\r\n    TaskAgentPoolMaintenanceScheduleDays[TaskAgentPoolMaintenanceScheduleDays[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Run on Monday.\r\n     */\r\n    TaskAgentPoolMaintenanceScheduleDays[TaskAgentPoolMaintenanceScheduleDays[\"Monday\"] = 1] = \"Monday\";\r\n    /**\r\n     * Run on Tuesday.\r\n     */\r\n    TaskAgentPoolMaintenanceScheduleDays[TaskAgentPoolMaintenanceScheduleDays[\"Tuesday\"] = 2] = \"Tuesday\";\r\n    /**\r\n     * Run on Wednesday.\r\n     */\r\n    TaskAgentPoolMaintenanceScheduleDays[TaskAgentPoolMaintenanceScheduleDays[\"Wednesday\"] = 4] = \"Wednesday\";\r\n    /**\r\n     * Run on Thursday.\r\n     */\r\n    TaskAgentPoolMaintenanceScheduleDays[TaskAgentPoolMaintenanceScheduleDays[\"Thursday\"] = 8] = \"Thursday\";\r\n    /**\r\n     * Run on Friday.\r\n     */\r\n    TaskAgentPoolMaintenanceScheduleDays[TaskAgentPoolMaintenanceScheduleDays[\"Friday\"] = 16] = \"Friday\";\r\n    /**\r\n     * Run on Saturday.\r\n     */\r\n    TaskAgentPoolMaintenanceScheduleDays[TaskAgentPoolMaintenanceScheduleDays[\"Saturday\"] = 32] = \"Saturday\";\r\n    /**\r\n     * Run on Sunday.\r\n     */\r\n    TaskAgentPoolMaintenanceScheduleDays[TaskAgentPoolMaintenanceScheduleDays[\"Sunday\"] = 64] = \"Sunday\";\r\n    /**\r\n     * Run on all days of the week.\r\n     */\r\n    TaskAgentPoolMaintenanceScheduleDays[TaskAgentPoolMaintenanceScheduleDays[\"All\"] = 127] = \"All\";\r\n})(TaskAgentPoolMaintenanceScheduleDays = exports.TaskAgentPoolMaintenanceScheduleDays || (exports.TaskAgentPoolMaintenanceScheduleDays = {}));\r\n/**\r\n * Additional settings and descriptors for a TaskAgentPool\r\n */\r\nvar TaskAgentPoolOptions;\r\n(function (TaskAgentPoolOptions) {\r\n    TaskAgentPoolOptions[TaskAgentPoolOptions[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * TaskAgentPool backed by the Elastic pool service\r\n     */\r\n    TaskAgentPoolOptions[TaskAgentPoolOptions[\"ElasticPool\"] = 1] = \"ElasticPool\";\r\n    /**\r\n     * Set to true if agents are re-imaged after each TaskAgentJobRequest\r\n     */\r\n    TaskAgentPoolOptions[TaskAgentPoolOptions[\"SingleUseAgents\"] = 2] = \"SingleUseAgents\";\r\n    /**\r\n     * Set to true if agents are held for investigation after a TaskAgentJobRequest failure\r\n     */\r\n    TaskAgentPoolOptions[TaskAgentPoolOptions[\"PreserveAgentOnJobFailure\"] = 4] = \"PreserveAgentOnJobFailure\";\r\n})(TaskAgentPoolOptions = exports.TaskAgentPoolOptions || (exports.TaskAgentPoolOptions = {}));\r\n/**\r\n * The type of agent pool.\r\n */\r\nvar TaskAgentPoolType;\r\n(function (TaskAgentPoolType) {\r\n    /**\r\n     * A typical pool of task agents\r\n     */\r\n    TaskAgentPoolType[TaskAgentPoolType[\"Automation\"] = 1] = \"Automation\";\r\n    /**\r\n     * A deployment pool\r\n     */\r\n    TaskAgentPoolType[TaskAgentPoolType[\"Deployment\"] = 2] = \"Deployment\";\r\n})(TaskAgentPoolType = exports.TaskAgentPoolType || (exports.TaskAgentPoolType = {}));\r\n/**\r\n * Filters queues based on whether the calling user has permission to use or manage the queue.\r\n */\r\nvar TaskAgentQueueActionFilter;\r\n(function (TaskAgentQueueActionFilter) {\r\n    TaskAgentQueueActionFilter[TaskAgentQueueActionFilter[\"None\"] = 0] = \"None\";\r\n    TaskAgentQueueActionFilter[TaskAgentQueueActionFilter[\"Manage\"] = 2] = \"Manage\";\r\n    TaskAgentQueueActionFilter[TaskAgentQueueActionFilter[\"Use\"] = 16] = \"Use\";\r\n})(TaskAgentQueueActionFilter = exports.TaskAgentQueueActionFilter || (exports.TaskAgentQueueActionFilter = {}));\r\nvar TaskAgentRequestUpdateOptions;\r\n(function (TaskAgentRequestUpdateOptions) {\r\n    TaskAgentRequestUpdateOptions[TaskAgentRequestUpdateOptions[\"None\"] = 0] = \"None\";\r\n    TaskAgentRequestUpdateOptions[TaskAgentRequestUpdateOptions[\"BumpRequestToTop\"] = 1] = \"BumpRequestToTop\";\r\n})(TaskAgentRequestUpdateOptions = exports.TaskAgentRequestUpdateOptions || (exports.TaskAgentRequestUpdateOptions = {}));\r\nvar TaskAgentStatus;\r\n(function (TaskAgentStatus) {\r\n    TaskAgentStatus[TaskAgentStatus[\"Offline\"] = 1] = \"Offline\";\r\n    TaskAgentStatus[TaskAgentStatus[\"Online\"] = 2] = \"Online\";\r\n})(TaskAgentStatus = exports.TaskAgentStatus || (exports.TaskAgentStatus = {}));\r\n/**\r\n * This is useful in getting a list of deployment targets, filtered by the deployment agent status.\r\n */\r\nvar TaskAgentStatusFilter;\r\n(function (TaskAgentStatusFilter) {\r\n    /**\r\n     * Only deployment targets that are offline.\r\n     */\r\n    TaskAgentStatusFilter[TaskAgentStatusFilter[\"Offline\"] = 1] = \"Offline\";\r\n    /**\r\n     * Only deployment targets that are online.\r\n     */\r\n    TaskAgentStatusFilter[TaskAgentStatusFilter[\"Online\"] = 2] = \"Online\";\r\n    /**\r\n     * All deployment targets.\r\n     */\r\n    TaskAgentStatusFilter[TaskAgentStatusFilter[\"All\"] = 3] = \"All\";\r\n})(TaskAgentStatusFilter = exports.TaskAgentStatusFilter || (exports.TaskAgentStatusFilter = {}));\r\nvar TaskAgentUpdateReasonType;\r\n(function (TaskAgentUpdateReasonType) {\r\n    TaskAgentUpdateReasonType[TaskAgentUpdateReasonType[\"Manual\"] = 1] = \"Manual\";\r\n    TaskAgentUpdateReasonType[TaskAgentUpdateReasonType[\"MinAgentVersionRequired\"] = 2] = \"MinAgentVersionRequired\";\r\n    TaskAgentUpdateReasonType[TaskAgentUpdateReasonType[\"Downgrade\"] = 3] = \"Downgrade\";\r\n})(TaskAgentUpdateReasonType = exports.TaskAgentUpdateReasonType || (exports.TaskAgentUpdateReasonType = {}));\r\nvar TaskCommandMode;\r\n(function (TaskCommandMode) {\r\n    TaskCommandMode[TaskCommandMode[\"Any\"] = 0] = \"Any\";\r\n    TaskCommandMode[TaskCommandMode[\"Restricted\"] = 1] = \"Restricted\";\r\n})(TaskCommandMode = exports.TaskCommandMode || (exports.TaskCommandMode = {}));\r\nvar TaskDefinitionStatus;\r\n(function (TaskDefinitionStatus) {\r\n    TaskDefinitionStatus[TaskDefinitionStatus[\"Preinstalled\"] = 1] = \"Preinstalled\";\r\n    TaskDefinitionStatus[TaskDefinitionStatus[\"ReceivedInstallOrUpdate\"] = 2] = \"ReceivedInstallOrUpdate\";\r\n    TaskDefinitionStatus[TaskDefinitionStatus[\"Installed\"] = 3] = \"Installed\";\r\n    TaskDefinitionStatus[TaskDefinitionStatus[\"ReceivedUninstall\"] = 4] = \"ReceivedUninstall\";\r\n    TaskDefinitionStatus[TaskDefinitionStatus[\"Uninstalled\"] = 5] = \"Uninstalled\";\r\n    TaskDefinitionStatus[TaskDefinitionStatus[\"RequestedUpdate\"] = 6] = \"RequestedUpdate\";\r\n    TaskDefinitionStatus[TaskDefinitionStatus[\"Updated\"] = 7] = \"Updated\";\r\n    TaskDefinitionStatus[TaskDefinitionStatus[\"AlreadyUpToDate\"] = 8] = \"AlreadyUpToDate\";\r\n    TaskDefinitionStatus[TaskDefinitionStatus[\"InlineUpdateReceived\"] = 9] = \"InlineUpdateReceived\";\r\n})(TaskDefinitionStatus = exports.TaskDefinitionStatus || (exports.TaskDefinitionStatus = {}));\r\nvar TaskGroupExpands;\r\n(function (TaskGroupExpands) {\r\n    TaskGroupExpands[TaskGroupExpands[\"None\"] = 0] = \"None\";\r\n    TaskGroupExpands[TaskGroupExpands[\"Tasks\"] = 2] = \"Tasks\";\r\n})(TaskGroupExpands = exports.TaskGroupExpands || (exports.TaskGroupExpands = {}));\r\n/**\r\n * Specifies the desired ordering of taskGroups.\r\n */\r\nvar TaskGroupQueryOrder;\r\n(function (TaskGroupQueryOrder) {\r\n    /**\r\n     * Order by createdon ascending.\r\n     */\r\n    TaskGroupQueryOrder[TaskGroupQueryOrder[\"CreatedOnAscending\"] = 0] = \"CreatedOnAscending\";\r\n    /**\r\n     * Order by createdon descending.\r\n     */\r\n    TaskGroupQueryOrder[TaskGroupQueryOrder[\"CreatedOnDescending\"] = 1] = \"CreatedOnDescending\";\r\n})(TaskGroupQueryOrder = exports.TaskGroupQueryOrder || (exports.TaskGroupQueryOrder = {}));\r\nvar TaskOrchestrationItemType;\r\n(function (TaskOrchestrationItemType) {\r\n    TaskOrchestrationItemType[TaskOrchestrationItemType[\"Container\"] = 0] = \"Container\";\r\n    TaskOrchestrationItemType[TaskOrchestrationItemType[\"Job\"] = 1] = \"Job\";\r\n})(TaskOrchestrationItemType = exports.TaskOrchestrationItemType || (exports.TaskOrchestrationItemType = {}));\r\nvar TaskOrchestrationPlanState;\r\n(function (TaskOrchestrationPlanState) {\r\n    TaskOrchestrationPlanState[TaskOrchestrationPlanState[\"InProgress\"] = 1] = \"InProgress\";\r\n    TaskOrchestrationPlanState[TaskOrchestrationPlanState[\"Queued\"] = 2] = \"Queued\";\r\n    TaskOrchestrationPlanState[TaskOrchestrationPlanState[\"Completed\"] = 4] = \"Completed\";\r\n    TaskOrchestrationPlanState[TaskOrchestrationPlanState[\"Throttled\"] = 8] = \"Throttled\";\r\n})(TaskOrchestrationPlanState = exports.TaskOrchestrationPlanState || (exports.TaskOrchestrationPlanState = {}));\r\n/**\r\n * The result of an operation tracked by a timeline record.\r\n */\r\nvar TaskResult;\r\n(function (TaskResult) {\r\n    TaskResult[TaskResult[\"Succeeded\"] = 0] = \"Succeeded\";\r\n    TaskResult[TaskResult[\"SucceededWithIssues\"] = 1] = \"SucceededWithIssues\";\r\n    TaskResult[TaskResult[\"Failed\"] = 2] = \"Failed\";\r\n    TaskResult[TaskResult[\"Canceled\"] = 3] = \"Canceled\";\r\n    TaskResult[TaskResult[\"Skipped\"] = 4] = \"Skipped\";\r\n    TaskResult[TaskResult[\"Abandoned\"] = 5] = \"Abandoned\";\r\n})(TaskResult = exports.TaskResult || (exports.TaskResult = {}));\r\n/**\r\n * The state of the timeline record.\r\n */\r\nvar TimelineRecordState;\r\n(function (TimelineRecordState) {\r\n    TimelineRecordState[TimelineRecordState[\"Pending\"] = 0] = \"Pending\";\r\n    TimelineRecordState[TimelineRecordState[\"InProgress\"] = 1] = \"InProgress\";\r\n    TimelineRecordState[TimelineRecordState[\"Completed\"] = 2] = \"Completed\";\r\n})(TimelineRecordState = exports.TimelineRecordState || (exports.TimelineRecordState = {}));\r\nvar VariableGroupActionFilter;\r\n(function (VariableGroupActionFilter) {\r\n    VariableGroupActionFilter[VariableGroupActionFilter[\"None\"] = 0] = \"None\";\r\n    VariableGroupActionFilter[VariableGroupActionFilter[\"Manage\"] = 2] = \"Manage\";\r\n    VariableGroupActionFilter[VariableGroupActionFilter[\"Use\"] = 16] = \"Use\";\r\n})(VariableGroupActionFilter = exports.VariableGroupActionFilter || (exports.VariableGroupActionFilter = {}));\r\n/**\r\n * Specifies the desired ordering of variableGroups.\r\n */\r\nvar VariableGroupQueryOrder;\r\n(function (VariableGroupQueryOrder) {\r\n    /**\r\n     * Order by id ascending.\r\n     */\r\n    VariableGroupQueryOrder[VariableGroupQueryOrder[\"IdAscending\"] = 0] = \"IdAscending\";\r\n    /**\r\n     * Order by id descending.\r\n     */\r\n    VariableGroupQueryOrder[VariableGroupQueryOrder[\"IdDescending\"] = 1] = \"IdDescending\";\r\n})(VariableGroupQueryOrder = exports.VariableGroupQueryOrder || (exports.VariableGroupQueryOrder = {}));\r\nexports.TypeInfo = {\r\n    AadLoginPromptOption: {\r\n        enumValues: {\r\n            \"noOption\": 0,\r\n            \"login\": 1,\r\n            \"selectAccount\": 2,\r\n            \"freshLogin\": 3,\r\n            \"freshLoginWithMfa\": 4\r\n        }\r\n    },\r\n    AgentChangeEvent: {},\r\n    AgentJobRequestMessage: {},\r\n    AgentPoolEvent: {},\r\n    AgentQueueEvent: {},\r\n    AgentQueuesEvent: {},\r\n    AuditAction: {\r\n        enumValues: {\r\n            \"add\": 1,\r\n            \"update\": 2,\r\n            \"delete\": 3,\r\n            \"undelete\": 4\r\n        }\r\n    },\r\n    AzureKeyVaultVariableGroupProviderData: {},\r\n    AzureKeyVaultVariableValue: {},\r\n    DemandMinimumVersion: {},\r\n    DemandSource: {},\r\n    DemandSourceType: {\r\n        enumValues: {\r\n            \"task\": 0,\r\n            \"feature\": 1\r\n        }\r\n    },\r\n    DeploymentGroup: {},\r\n    DeploymentGroupActionFilter: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"manage\": 2,\r\n            \"use\": 16\r\n        }\r\n    },\r\n    DeploymentGroupExpands: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"machines\": 2,\r\n            \"tags\": 4\r\n        }\r\n    },\r\n    DeploymentGroupMetrics: {},\r\n    DeploymentGroupReference: {},\r\n    DeploymentMachine: {},\r\n    DeploymentMachineChangedData: {},\r\n    DeploymentMachineExpands: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"capabilities\": 2,\r\n            \"assignedRequest\": 4\r\n        }\r\n    },\r\n    DeploymentMachineGroup: {},\r\n    DeploymentMachineGroupReference: {},\r\n    DeploymentMachinesChangeEvent: {},\r\n    DeploymentPoolSummary: {},\r\n    DeploymentPoolSummaryExpands: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"deploymentGroups\": 2,\r\n            \"resource\": 4\r\n        }\r\n    },\r\n    DeploymentTargetExpands: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"capabilities\": 2,\r\n            \"assignedRequest\": 4,\r\n            \"lastCompletedRequest\": 8\r\n        }\r\n    },\r\n    ElasticAgentState: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"enabled\": 1,\r\n            \"online\": 2,\r\n            \"assigned\": 4\r\n        }\r\n    },\r\n    ElasticComputeState: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"healthy\": 1,\r\n            \"creating\": 2,\r\n            \"deleting\": 3,\r\n            \"failed\": 4,\r\n            \"stopped\": 5,\r\n            \"reimaging\": 6,\r\n            \"unhealthyVm\": 7,\r\n            \"unhealthyVmssVm\": 8\r\n        }\r\n    },\r\n    ElasticNode: {},\r\n    ElasticNodeSettings: {},\r\n    ElasticNodeState: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"new\": 1,\r\n            \"creatingCompute\": 2,\r\n            \"startingAgent\": 3,\r\n            \"idle\": 4,\r\n            \"assigned\": 5,\r\n            \"offline\": 6,\r\n            \"pendingReimage\": 7,\r\n            \"pendingDelete\": 8,\r\n            \"saved\": 9,\r\n            \"deletingCompute\": 10,\r\n            \"deleted\": 11,\r\n            \"lost\": 12,\r\n            \"reimagingCompute\": 13,\r\n            \"restartingAgent\": 14,\r\n            \"failedToStartPendingDelete\": 15,\r\n            \"failedToRestartPendingDelete\": 16,\r\n            \"failedVMPendingDelete\": 17,\r\n            \"assignedPendingDelete\": 18,\r\n            \"retryDelete\": 19,\r\n            \"unhealthyVm\": 20,\r\n            \"unhealthyVmPendingDelete\": 21\r\n        }\r\n    },\r\n    ElasticPool: {},\r\n    ElasticPoolCreationResult: {},\r\n    ElasticPoolLog: {},\r\n    ElasticPoolSettings: {},\r\n    ElasticPoolState: {\r\n        enumValues: {\r\n            \"online\": 0,\r\n            \"offline\": 1,\r\n            \"unhealthy\": 2,\r\n            \"new\": 3\r\n        }\r\n    },\r\n    EnvironmentActionFilter: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"manage\": 2,\r\n            \"use\": 16\r\n        }\r\n    },\r\n    EnvironmentDeploymentExecutionRecord: {},\r\n    EnvironmentExpands: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"resourceReferences\": 1\r\n        }\r\n    },\r\n    EnvironmentInstance: {},\r\n    EnvironmentResource: {},\r\n    EnvironmentResourceDeploymentExecutionRecord: {},\r\n    EnvironmentResourceReference: {},\r\n    EnvironmentResourceType: {\r\n        enumValues: {\r\n            \"undefined\": 0,\r\n            \"generic\": 1,\r\n            \"virtualMachine\": 2,\r\n            \"kubernetes\": 4\r\n        }\r\n    },\r\n    ExclusiveLockType: {\r\n        enumValues: {\r\n            \"runLatest\": 0,\r\n            \"sequential\": 1\r\n        }\r\n    },\r\n    Issue: {},\r\n    IssueType: {\r\n        enumValues: {\r\n            \"error\": 1,\r\n            \"warning\": 2\r\n        }\r\n    },\r\n    JobAssignedEvent: {},\r\n    JobCompletedEvent: {},\r\n    JobEnvironment: {},\r\n    JobRequestMessage: {},\r\n    KubernetesResource: {},\r\n    LogLevel: {\r\n        enumValues: {\r\n            \"error\": 0,\r\n            \"warning\": 1,\r\n            \"info\": 2\r\n        }\r\n    },\r\n    MachineGroupActionFilter: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"manage\": 2,\r\n            \"use\": 16\r\n        }\r\n    },\r\n    MaskHint: {},\r\n    MaskType: {\r\n        enumValues: {\r\n            \"variable\": 1,\r\n            \"regex\": 2\r\n        }\r\n    },\r\n    OperatingSystemType: {\r\n        enumValues: {\r\n            \"windows\": 0,\r\n            \"linux\": 1\r\n        }\r\n    },\r\n    OperationType: {\r\n        enumValues: {\r\n            \"configurationJob\": 0,\r\n            \"sizingJob\": 1,\r\n            \"increaseCapacity\": 2,\r\n            \"reimage\": 3,\r\n            \"deleteVMs\": 4\r\n        }\r\n    },\r\n    OrchestrationType: {\r\n        enumValues: {\r\n            \"uniform\": 0,\r\n            \"flexible\": 1\r\n        }\r\n    },\r\n    PackageMetadata: {},\r\n    PlanEnvironment: {},\r\n    PlanGroupStatus: {\r\n        enumValues: {\r\n            \"running\": 1,\r\n            \"queued\": 2,\r\n            \"all\": 3\r\n        }\r\n    },\r\n    PlanGroupStatusFilter: {\r\n        enumValues: {\r\n            \"running\": 1,\r\n            \"queued\": 2,\r\n            \"all\": 3\r\n        }\r\n    },\r\n    ResourceLockRequest: {},\r\n    ResourceLockStatus: {\r\n        enumValues: {\r\n            \"queued\": 0,\r\n            \"inUse\": 1,\r\n            \"finished\": 2,\r\n            \"timedOut\": 3,\r\n            \"canceled\": 4,\r\n            \"abandoned\": 5,\r\n            \"waitingOnChecks\": 6\r\n        }\r\n    },\r\n    ResourceUsage: {},\r\n    SecureFile: {},\r\n    SecureFileActionFilter: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"manage\": 2,\r\n            \"use\": 16\r\n        }\r\n    },\r\n    SecureFileEvent: {},\r\n    ServerTaskRequestMessage: {},\r\n    ServiceEndpointAuthenticationScheme: {},\r\n    ServiceEndpointExecutionData: {},\r\n    ServiceEndpointExecutionRecord: {},\r\n    ServiceEndpointExecutionRecordsInput: {},\r\n    ServiceEndpointRequestResult: {},\r\n    ServiceEndpointType: {},\r\n    TaskAgent: {},\r\n    TaskAgentCloudRequest: {},\r\n    TaskAgentCloudType: {},\r\n    TaskAgentDowngrade: {},\r\n    TaskAgentJob: {},\r\n    TaskAgentJobRequest: {},\r\n    TaskAgentJobResultFilter: {\r\n        enumValues: {\r\n            \"failed\": 1,\r\n            \"passed\": 2,\r\n            \"neverDeployed\": 4,\r\n            \"all\": 7\r\n        }\r\n    },\r\n    TaskAgentJobStep: {},\r\n    TaskAgentJobStepType: {\r\n        enumValues: {\r\n            \"task\": 1,\r\n            \"action\": 2\r\n        }\r\n    },\r\n    TaskAgentManualUpdate: {},\r\n    TaskAgentMinAgentVersionRequiredUpdate: {},\r\n    TaskAgentPool: {},\r\n    TaskAgentPoolActionFilter: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"manage\": 2,\r\n            \"use\": 16\r\n        }\r\n    },\r\n    TaskAgentPoolMaintenanceDefinition: {},\r\n    TaskAgentPoolMaintenanceJob: {},\r\n    TaskAgentPoolMaintenanceJobResult: {\r\n        enumValues: {\r\n            \"succeeded\": 1,\r\n            \"failed\": 2,\r\n            \"canceled\": 4\r\n        }\r\n    },\r\n    TaskAgentPoolMaintenanceJobStatus: {\r\n        enumValues: {\r\n            \"inProgress\": 1,\r\n            \"completed\": 2,\r\n            \"cancelling\": 4,\r\n            \"queued\": 8\r\n        }\r\n    },\r\n    TaskAgentPoolMaintenanceJobTargetAgent: {},\r\n    TaskAgentPoolMaintenanceSchedule: {},\r\n    TaskAgentPoolMaintenanceScheduleDays: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"monday\": 1,\r\n            \"tuesday\": 2,\r\n            \"wednesday\": 4,\r\n            \"thursday\": 8,\r\n            \"friday\": 16,\r\n            \"saturday\": 32,\r\n            \"sunday\": 64,\r\n            \"all\": 127\r\n        }\r\n    },\r\n    TaskAgentPoolOptions: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"elasticPool\": 1,\r\n            \"singleUseAgents\": 2,\r\n            \"preserveAgentOnJobFailure\": 4\r\n        }\r\n    },\r\n    TaskAgentPoolReference: {},\r\n    TaskAgentPoolStatus: {},\r\n    TaskAgentPoolSummary: {},\r\n    TaskAgentPoolType: {\r\n        enumValues: {\r\n            \"automation\": 1,\r\n            \"deployment\": 2\r\n        }\r\n    },\r\n    TaskAgentQueue: {},\r\n    TaskAgentQueueActionFilter: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"manage\": 2,\r\n            \"use\": 16\r\n        }\r\n    },\r\n    TaskAgentReference: {},\r\n    TaskAgentRequestUpdateOptions: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"bumpRequestToTop\": 1\r\n        }\r\n    },\r\n    TaskAgentSession: {},\r\n    TaskAgentStatus: {\r\n        enumValues: {\r\n            \"offline\": 1,\r\n            \"online\": 2\r\n        }\r\n    },\r\n    TaskAgentStatusFilter: {\r\n        enumValues: {\r\n            \"offline\": 1,\r\n            \"online\": 2,\r\n            \"all\": 3\r\n        }\r\n    },\r\n    TaskAgentUpdate: {},\r\n    TaskAgentUpdateReason: {},\r\n    TaskAgentUpdateReasonType: {\r\n        enumValues: {\r\n            \"manual\": 1,\r\n            \"minAgentVersionRequired\": 2,\r\n            \"downgrade\": 3\r\n        }\r\n    },\r\n    TaskAttachment: {},\r\n    TaskCommandMode: {\r\n        enumValues: {\r\n            \"any\": 0,\r\n            \"restricted\": 1\r\n        }\r\n    },\r\n    TaskCommandRestrictions: {},\r\n    TaskCompletedEvent: {},\r\n    TaskDefinition: {},\r\n    TaskDefinitionStatus: {\r\n        enumValues: {\r\n            \"preinstalled\": 1,\r\n            \"receivedInstallOrUpdate\": 2,\r\n            \"installed\": 3,\r\n            \"receivedUninstall\": 4,\r\n            \"uninstalled\": 5,\r\n            \"requestedUpdate\": 6,\r\n            \"updated\": 7,\r\n            \"alreadyUpToDate\": 8,\r\n            \"inlineUpdateReceived\": 9\r\n        }\r\n    },\r\n    TaskGroup: {},\r\n    TaskGroupExpands: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"tasks\": 2\r\n        }\r\n    },\r\n    TaskGroupQueryOrder: {\r\n        enumValues: {\r\n            \"createdOnAscending\": 0,\r\n            \"createdOnDescending\": 1\r\n        }\r\n    },\r\n    TaskGroupRevision: {},\r\n    TaskLog: {},\r\n    TaskOrchestrationContainer: {},\r\n    TaskOrchestrationItem: {},\r\n    TaskOrchestrationItemType: {\r\n        enumValues: {\r\n            \"container\": 0,\r\n            \"job\": 1\r\n        }\r\n    },\r\n    TaskOrchestrationJob: {},\r\n    TaskOrchestrationPlan: {},\r\n    TaskOrchestrationPlanGroup: {},\r\n    TaskOrchestrationPlanGroupsQueueMetrics: {},\r\n    TaskOrchestrationPlanState: {\r\n        enumValues: {\r\n            \"inProgress\": 1,\r\n            \"queued\": 2,\r\n            \"completed\": 4,\r\n            \"throttled\": 8\r\n        }\r\n    },\r\n    TaskOrchestrationQueuedPlan: {},\r\n    TaskOrchestrationQueuedPlanGroup: {},\r\n    TaskRestrictions: {},\r\n    TaskResult: {\r\n        enumValues: {\r\n            \"succeeded\": 0,\r\n            \"succeededWithIssues\": 1,\r\n            \"failed\": 2,\r\n            \"canceled\": 3,\r\n            \"skipped\": 4,\r\n            \"abandoned\": 5\r\n        }\r\n    },\r\n    Timeline: {},\r\n    TimelineRecord: {},\r\n    TimelineRecordReference: {},\r\n    TimelineRecordState: {\r\n        enumValues: {\r\n            \"pending\": 0,\r\n            \"inProgress\": 1,\r\n            \"completed\": 2\r\n        }\r\n    },\r\n    VariableGroup: {},\r\n    VariableGroupActionFilter: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"manage\": 2,\r\n            \"use\": 16\r\n        }\r\n    },\r\n    VariableGroupQueryOrder: {\r\n        enumValues: {\r\n            \"idAscending\": 0,\r\n            \"idDescending\": 1\r\n        }\r\n    },\r\n    VirtualMachine: {},\r\n    VirtualMachineGroup: {},\r\n    VirtualMachineResource: {},\r\n    VirtualMachineResourceCreateParameters: {},\r\n};\r\nexports.TypeInfo.AgentChangeEvent.fields = {\r\n    agent: {\r\n        typeInfo: exports.TypeInfo.TaskAgent\r\n    },\r\n    pool: {\r\n        typeInfo: exports.TypeInfo.TaskAgentPoolReference\r\n    },\r\n    timeStamp: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.AgentJobRequestMessage.fields = {\r\n    environment: {\r\n        typeInfo: exports.TypeInfo.JobEnvironment\r\n    },\r\n    lockedUntil: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.AgentPoolEvent.fields = {\r\n    pool: {\r\n        typeInfo: exports.TypeInfo.TaskAgentPool\r\n    }\r\n};\r\nexports.TypeInfo.AgentQueueEvent.fields = {\r\n    queue: {\r\n        typeInfo: exports.TypeInfo.TaskAgentQueue\r\n    }\r\n};\r\nexports.TypeInfo.AgentQueuesEvent.fields = {\r\n    queues: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TaskAgentQueue\r\n    }\r\n};\r\nexports.TypeInfo.AzureKeyVaultVariableGroupProviderData.fields = {\r\n    lastRefreshedOn: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.AzureKeyVaultVariableValue.fields = {\r\n    expires: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.DemandMinimumVersion.fields = {\r\n    source: {\r\n        typeInfo: exports.TypeInfo.DemandSource\r\n    }\r\n};\r\nexports.TypeInfo.DemandSource.fields = {\r\n    sourceType: {\r\n        enumType: exports.TypeInfo.DemandSourceType\r\n    }\r\n};\r\nexports.TypeInfo.DeploymentGroup.fields = {\r\n    machines: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.DeploymentMachine\r\n    },\r\n    pool: {\r\n        typeInfo: exports.TypeInfo.TaskAgentPoolReference\r\n    }\r\n};\r\nexports.TypeInfo.DeploymentGroupMetrics.fields = {\r\n    deploymentGroup: {\r\n        typeInfo: exports.TypeInfo.DeploymentGroupReference\r\n    }\r\n};\r\nexports.TypeInfo.DeploymentGroupReference.fields = {\r\n    pool: {\r\n        typeInfo: exports.TypeInfo.TaskAgentPoolReference\r\n    }\r\n};\r\nexports.TypeInfo.DeploymentMachine.fields = {\r\n    agent: {\r\n        typeInfo: exports.TypeInfo.TaskAgent\r\n    }\r\n};\r\nexports.TypeInfo.DeploymentMachineChangedData.fields = {\r\n    agent: {\r\n        typeInfo: exports.TypeInfo.TaskAgent\r\n    }\r\n};\r\nexports.TypeInfo.DeploymentMachineGroup.fields = {\r\n    machines: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.DeploymentMachine\r\n    },\r\n    pool: {\r\n        typeInfo: exports.TypeInfo.TaskAgentPoolReference\r\n    }\r\n};\r\nexports.TypeInfo.DeploymentMachineGroupReference.fields = {\r\n    pool: {\r\n        typeInfo: exports.TypeInfo.TaskAgentPoolReference\r\n    }\r\n};\r\nexports.TypeInfo.DeploymentMachinesChangeEvent.fields = {\r\n    machineGroupReference: {\r\n        typeInfo: exports.TypeInfo.DeploymentGroupReference\r\n    },\r\n    machines: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.DeploymentMachineChangedData\r\n    }\r\n};\r\nexports.TypeInfo.DeploymentPoolSummary.fields = {\r\n    deploymentGroups: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.DeploymentGroupReference\r\n    },\r\n    pool: {\r\n        typeInfo: exports.TypeInfo.TaskAgentPoolReference\r\n    },\r\n    resource: {\r\n        typeInfo: exports.TypeInfo.EnvironmentResourceReference\r\n    }\r\n};\r\nexports.TypeInfo.ElasticNode.fields = {\r\n    agentState: {\r\n        enumType: exports.TypeInfo.ElasticAgentState\r\n    },\r\n    computeState: {\r\n        enumType: exports.TypeInfo.ElasticComputeState\r\n    },\r\n    desiredState: {\r\n        enumType: exports.TypeInfo.ElasticNodeState\r\n    },\r\n    state: {\r\n        enumType: exports.TypeInfo.ElasticNodeState\r\n    },\r\n    stateChangedOn: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.ElasticNodeSettings.fields = {\r\n    state: {\r\n        enumType: exports.TypeInfo.ElasticNodeState\r\n    }\r\n};\r\nexports.TypeInfo.ElasticPool.fields = {\r\n    offlineSince: {\r\n        isDate: true,\r\n    },\r\n    orchestrationType: {\r\n        enumType: exports.TypeInfo.OrchestrationType\r\n    },\r\n    osType: {\r\n        enumType: exports.TypeInfo.OperatingSystemType\r\n    },\r\n    state: {\r\n        enumType: exports.TypeInfo.ElasticPoolState\r\n    }\r\n};\r\nexports.TypeInfo.ElasticPoolCreationResult.fields = {\r\n    agentPool: {\r\n        typeInfo: exports.TypeInfo.TaskAgentPool\r\n    },\r\n    agentQueue: {\r\n        typeInfo: exports.TypeInfo.TaskAgentQueue\r\n    },\r\n    elasticPool: {\r\n        typeInfo: exports.TypeInfo.ElasticPool\r\n    }\r\n};\r\nexports.TypeInfo.ElasticPoolLog.fields = {\r\n    level: {\r\n        enumType: exports.TypeInfo.LogLevel\r\n    },\r\n    operation: {\r\n        enumType: exports.TypeInfo.OperationType\r\n    },\r\n    timestamp: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.ElasticPoolSettings.fields = {\r\n    orchestrationType: {\r\n        enumType: exports.TypeInfo.OrchestrationType\r\n    },\r\n    osType: {\r\n        enumType: exports.TypeInfo.OperatingSystemType\r\n    }\r\n};\r\nexports.TypeInfo.EnvironmentDeploymentExecutionRecord.fields = {\r\n    finishTime: {\r\n        isDate: true,\r\n    },\r\n    queueTime: {\r\n        isDate: true,\r\n    },\r\n    result: {\r\n        enumType: exports.TypeInfo.TaskResult\r\n    },\r\n    startTime: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.EnvironmentInstance.fields = {\r\n    createdOn: {\r\n        isDate: true,\r\n    },\r\n    lastModifiedOn: {\r\n        isDate: true,\r\n    },\r\n    resources: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.EnvironmentResourceReference\r\n    }\r\n};\r\nexports.TypeInfo.EnvironmentResource.fields = {\r\n    createdOn: {\r\n        isDate: true,\r\n    },\r\n    lastModifiedOn: {\r\n        isDate: true,\r\n    },\r\n    type: {\r\n        enumType: exports.TypeInfo.EnvironmentResourceType\r\n    }\r\n};\r\nexports.TypeInfo.EnvironmentResourceDeploymentExecutionRecord.fields = {\r\n    finishTime: {\r\n        isDate: true,\r\n    },\r\n    result: {\r\n        enumType: exports.TypeInfo.TaskResult\r\n    },\r\n    startTime: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.EnvironmentResourceReference.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.EnvironmentResourceType\r\n    }\r\n};\r\nexports.TypeInfo.Issue.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.IssueType\r\n    }\r\n};\r\nexports.TypeInfo.JobAssignedEvent.fields = {\r\n    request: {\r\n        typeInfo: exports.TypeInfo.TaskAgentJobRequest\r\n    }\r\n};\r\nexports.TypeInfo.JobCompletedEvent.fields = {\r\n    result: {\r\n        enumType: exports.TypeInfo.TaskResult\r\n    }\r\n};\r\nexports.TypeInfo.JobEnvironment.fields = {\r\n    mask: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.MaskHint\r\n    },\r\n    secureFiles: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.SecureFile\r\n    }\r\n};\r\nexports.TypeInfo.JobRequestMessage.fields = {\r\n    environment: {\r\n        typeInfo: exports.TypeInfo.JobEnvironment\r\n    }\r\n};\r\nexports.TypeInfo.KubernetesResource.fields = {\r\n    createdOn: {\r\n        isDate: true,\r\n    },\r\n    lastModifiedOn: {\r\n        isDate: true,\r\n    },\r\n    type: {\r\n        enumType: exports.TypeInfo.EnvironmentResourceType\r\n    }\r\n};\r\nexports.TypeInfo.MaskHint.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.MaskType\r\n    }\r\n};\r\nexports.TypeInfo.PackageMetadata.fields = {\r\n    createdOn: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.PlanEnvironment.fields = {\r\n    mask: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.MaskHint\r\n    }\r\n};\r\nexports.TypeInfo.ResourceLockRequest.fields = {\r\n    assignTime: {\r\n        isDate: true,\r\n    },\r\n    finishTime: {\r\n        isDate: true,\r\n    },\r\n    lockType: {\r\n        enumType: exports.TypeInfo.ExclusiveLockType\r\n    },\r\n    queueTime: {\r\n        isDate: true,\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.ResourceLockStatus\r\n    }\r\n};\r\nexports.TypeInfo.ResourceUsage.fields = {\r\n    runningRequests: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TaskAgentJobRequest\r\n    }\r\n};\r\nexports.TypeInfo.SecureFile.fields = {\r\n    createdOn: {\r\n        isDate: true,\r\n    },\r\n    modifiedOn: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.SecureFileEvent.fields = {\r\n    secureFiles: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.SecureFile\r\n    }\r\n};\r\nexports.TypeInfo.ServerTaskRequestMessage.fields = {\r\n    environment: {\r\n        typeInfo: exports.TypeInfo.JobEnvironment\r\n    },\r\n    taskDefinition: {\r\n        typeInfo: exports.TypeInfo.TaskDefinition\r\n    }\r\n};\r\nexports.TypeInfo.ServiceEndpointAuthenticationScheme.fields = {\r\n    inputDescriptors: {\r\n        isArray: true,\r\n        typeInfo: FormInputInterfaces.TypeInfo.InputDescriptor\r\n    }\r\n};\r\nexports.TypeInfo.ServiceEndpointExecutionData.fields = {\r\n    finishTime: {\r\n        isDate: true,\r\n    },\r\n    result: {\r\n        enumType: exports.TypeInfo.TaskResult\r\n    },\r\n    startTime: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.ServiceEndpointExecutionRecord.fields = {\r\n    data: {\r\n        typeInfo: exports.TypeInfo.ServiceEndpointExecutionData\r\n    }\r\n};\r\nexports.TypeInfo.ServiceEndpointExecutionRecordsInput.fields = {\r\n    data: {\r\n        typeInfo: exports.TypeInfo.ServiceEndpointExecutionData\r\n    }\r\n};\r\nexports.TypeInfo.ServiceEndpointRequestResult.fields = {};\r\nexports.TypeInfo.ServiceEndpointType.fields = {\r\n    authenticationSchemes: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ServiceEndpointAuthenticationScheme\r\n    },\r\n    inputDescriptors: {\r\n        isArray: true,\r\n        typeInfo: FormInputInterfaces.TypeInfo.InputDescriptor\r\n    }\r\n};\r\nexports.TypeInfo.TaskAgent.fields = {\r\n    assignedAgentCloudRequest: {\r\n        typeInfo: exports.TypeInfo.TaskAgentCloudRequest\r\n    },\r\n    assignedRequest: {\r\n        typeInfo: exports.TypeInfo.TaskAgentJobRequest\r\n    },\r\n    createdOn: {\r\n        isDate: true,\r\n    },\r\n    lastCompletedRequest: {\r\n        typeInfo: exports.TypeInfo.TaskAgentJobRequest\r\n    },\r\n    pendingUpdate: {\r\n        typeInfo: exports.TypeInfo.TaskAgentUpdate\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.TaskAgentStatus\r\n    },\r\n    statusChangedOn: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TaskAgentCloudRequest.fields = {\r\n    agent: {\r\n        typeInfo: exports.TypeInfo.TaskAgentReference\r\n    },\r\n    agentConnectedTime: {\r\n        isDate: true,\r\n    },\r\n    pool: {\r\n        typeInfo: exports.TypeInfo.TaskAgentPoolReference\r\n    },\r\n    provisionedTime: {\r\n        isDate: true,\r\n    },\r\n    provisionRequestTime: {\r\n        isDate: true,\r\n    },\r\n    releaseRequestTime: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TaskAgentCloudType.fields = {\r\n    inputDescriptors: {\r\n        isArray: true,\r\n        typeInfo: FormInputInterfaces.TypeInfo.InputDescriptor\r\n    }\r\n};\r\nexports.TypeInfo.TaskAgentDowngrade.fields = {\r\n    code: {\r\n        enumType: exports.TypeInfo.TaskAgentUpdateReasonType\r\n    }\r\n};\r\nexports.TypeInfo.TaskAgentJob.fields = {\r\n    steps: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TaskAgentJobStep\r\n    }\r\n};\r\nexports.TypeInfo.TaskAgentJobRequest.fields = {\r\n    assignTime: {\r\n        isDate: true,\r\n    },\r\n    finishTime: {\r\n        isDate: true,\r\n    },\r\n    lockedUntil: {\r\n        isDate: true,\r\n    },\r\n    matchedAgents: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TaskAgentReference\r\n    },\r\n    queueTime: {\r\n        isDate: true,\r\n    },\r\n    receiveTime: {\r\n        isDate: true,\r\n    },\r\n    reservedAgent: {\r\n        typeInfo: exports.TypeInfo.TaskAgentReference\r\n    },\r\n    result: {\r\n        enumType: exports.TypeInfo.TaskResult\r\n    }\r\n};\r\nexports.TypeInfo.TaskAgentJobStep.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.TaskAgentJobStepType\r\n    }\r\n};\r\nexports.TypeInfo.TaskAgentManualUpdate.fields = {\r\n    code: {\r\n        enumType: exports.TypeInfo.TaskAgentUpdateReasonType\r\n    }\r\n};\r\nexports.TypeInfo.TaskAgentMinAgentVersionRequiredUpdate.fields = {\r\n    code: {\r\n        enumType: exports.TypeInfo.TaskAgentUpdateReasonType\r\n    }\r\n};\r\nexports.TypeInfo.TaskAgentPool.fields = {\r\n    createdOn: {\r\n        isDate: true,\r\n    },\r\n    options: {\r\n        enumType: exports.TypeInfo.TaskAgentPoolOptions\r\n    },\r\n    poolType: {\r\n        enumType: exports.TypeInfo.TaskAgentPoolType\r\n    }\r\n};\r\nexports.TypeInfo.TaskAgentPoolMaintenanceDefinition.fields = {\r\n    pool: {\r\n        typeInfo: exports.TypeInfo.TaskAgentPoolReference\r\n    },\r\n    scheduleSetting: {\r\n        typeInfo: exports.TypeInfo.TaskAgentPoolMaintenanceSchedule\r\n    }\r\n};\r\nexports.TypeInfo.TaskAgentPoolMaintenanceJob.fields = {\r\n    finishTime: {\r\n        isDate: true,\r\n    },\r\n    pool: {\r\n        typeInfo: exports.TypeInfo.TaskAgentPoolReference\r\n    },\r\n    queueTime: {\r\n        isDate: true,\r\n    },\r\n    result: {\r\n        enumType: exports.TypeInfo.TaskAgentPoolMaintenanceJobResult\r\n    },\r\n    startTime: {\r\n        isDate: true,\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.TaskAgentPoolMaintenanceJobStatus\r\n    },\r\n    targetAgents: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TaskAgentPoolMaintenanceJobTargetAgent\r\n    }\r\n};\r\nexports.TypeInfo.TaskAgentPoolMaintenanceJobTargetAgent.fields = {\r\n    agent: {\r\n        typeInfo: exports.TypeInfo.TaskAgentReference\r\n    },\r\n    result: {\r\n        enumType: exports.TypeInfo.TaskAgentPoolMaintenanceJobResult\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.TaskAgentPoolMaintenanceJobStatus\r\n    }\r\n};\r\nexports.TypeInfo.TaskAgentPoolMaintenanceSchedule.fields = {\r\n    daysToBuild: {\r\n        enumType: exports.TypeInfo.TaskAgentPoolMaintenanceScheduleDays\r\n    }\r\n};\r\nexports.TypeInfo.TaskAgentPoolReference.fields = {\r\n    options: {\r\n        enumType: exports.TypeInfo.TaskAgentPoolOptions\r\n    },\r\n    poolType: {\r\n        enumType: exports.TypeInfo.TaskAgentPoolType\r\n    }\r\n};\r\nexports.TypeInfo.TaskAgentPoolStatus.fields = {\r\n    options: {\r\n        enumType: exports.TypeInfo.TaskAgentPoolOptions\r\n    },\r\n    poolType: {\r\n        enumType: exports.TypeInfo.TaskAgentPoolType\r\n    }\r\n};\r\nexports.TypeInfo.TaskAgentPoolSummary.fields = {\r\n    deploymentGroups: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.DeploymentGroupReference\r\n    },\r\n    pool: {\r\n        typeInfo: exports.TypeInfo.TaskAgentPoolReference\r\n    },\r\n    queues: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TaskAgentQueue\r\n    }\r\n};\r\nexports.TypeInfo.TaskAgentQueue.fields = {\r\n    pool: {\r\n        typeInfo: exports.TypeInfo.TaskAgentPoolReference\r\n    }\r\n};\r\nexports.TypeInfo.TaskAgentReference.fields = {\r\n    status: {\r\n        enumType: exports.TypeInfo.TaskAgentStatus\r\n    }\r\n};\r\nexports.TypeInfo.TaskAgentSession.fields = {\r\n    agent: {\r\n        typeInfo: exports.TypeInfo.TaskAgentReference\r\n    }\r\n};\r\nexports.TypeInfo.TaskAgentUpdate.fields = {\r\n    reason: {\r\n        typeInfo: exports.TypeInfo.TaskAgentUpdateReason\r\n    },\r\n    requestTime: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TaskAgentUpdateReason.fields = {\r\n    code: {\r\n        enumType: exports.TypeInfo.TaskAgentUpdateReasonType\r\n    }\r\n};\r\nexports.TypeInfo.TaskAttachment.fields = {\r\n    createdOn: {\r\n        isDate: true,\r\n    },\r\n    lastChangedOn: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TaskCommandRestrictions.fields = {\r\n    mode: {\r\n        enumType: exports.TypeInfo.TaskCommandMode\r\n    }\r\n};\r\nexports.TypeInfo.TaskCompletedEvent.fields = {\r\n    result: {\r\n        enumType: exports.TypeInfo.TaskResult\r\n    }\r\n};\r\nexports.TypeInfo.TaskDefinition.fields = {\r\n    restrictions: {\r\n        typeInfo: exports.TypeInfo.TaskRestrictions\r\n    }\r\n};\r\nexports.TypeInfo.TaskGroup.fields = {\r\n    createdOn: {\r\n        isDate: true,\r\n    },\r\n    modifiedOn: {\r\n        isDate: true,\r\n    },\r\n    restrictions: {\r\n        typeInfo: exports.TypeInfo.TaskRestrictions\r\n    }\r\n};\r\nexports.TypeInfo.TaskGroupRevision.fields = {\r\n    changedDate: {\r\n        isDate: true,\r\n    },\r\n    changeType: {\r\n        enumType: exports.TypeInfo.AuditAction\r\n    }\r\n};\r\nexports.TypeInfo.TaskLog.fields = {\r\n    createdOn: {\r\n        isDate: true,\r\n    },\r\n    lastChangedOn: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TaskOrchestrationContainer.fields = {\r\n    children: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TaskOrchestrationItem\r\n    },\r\n    itemType: {\r\n        enumType: exports.TypeInfo.TaskOrchestrationItemType\r\n    },\r\n    rollback: {\r\n        typeInfo: exports.TypeInfo.TaskOrchestrationContainer\r\n    }\r\n};\r\nexports.TypeInfo.TaskOrchestrationItem.fields = {\r\n    itemType: {\r\n        enumType: exports.TypeInfo.TaskOrchestrationItemType\r\n    }\r\n};\r\nexports.TypeInfo.TaskOrchestrationJob.fields = {\r\n    itemType: {\r\n        enumType: exports.TypeInfo.TaskOrchestrationItemType\r\n    }\r\n};\r\nexports.TypeInfo.TaskOrchestrationPlan.fields = {\r\n    environment: {\r\n        typeInfo: exports.TypeInfo.PlanEnvironment\r\n    },\r\n    finishTime: {\r\n        isDate: true,\r\n    },\r\n    implementation: {\r\n        typeInfo: exports.TypeInfo.TaskOrchestrationContainer\r\n    },\r\n    result: {\r\n        enumType: exports.TypeInfo.TaskResult\r\n    },\r\n    startTime: {\r\n        isDate: true,\r\n    },\r\n    state: {\r\n        enumType: exports.TypeInfo.TaskOrchestrationPlanState\r\n    }\r\n};\r\nexports.TypeInfo.TaskOrchestrationPlanGroup.fields = {\r\n    runningRequests: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TaskAgentJobRequest\r\n    }\r\n};\r\nexports.TypeInfo.TaskOrchestrationPlanGroupsQueueMetrics.fields = {\r\n    status: {\r\n        enumType: exports.TypeInfo.PlanGroupStatus\r\n    }\r\n};\r\nexports.TypeInfo.TaskOrchestrationQueuedPlan.fields = {\r\n    assignTime: {\r\n        isDate: true,\r\n    },\r\n    queueTime: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TaskOrchestrationQueuedPlanGroup.fields = {\r\n    plans: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TaskOrchestrationQueuedPlan\r\n    }\r\n};\r\nexports.TypeInfo.TaskRestrictions.fields = {\r\n    commands: {\r\n        typeInfo: exports.TypeInfo.TaskCommandRestrictions\r\n    }\r\n};\r\nexports.TypeInfo.Timeline.fields = {\r\n    lastChangedOn: {\r\n        isDate: true,\r\n    },\r\n    records: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TimelineRecord\r\n    }\r\n};\r\nexports.TypeInfo.TimelineRecord.fields = {\r\n    finishTime: {\r\n        isDate: true,\r\n    },\r\n    issues: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.Issue\r\n    },\r\n    lastModified: {\r\n        isDate: true,\r\n    },\r\n    result: {\r\n        enumType: exports.TypeInfo.TaskResult\r\n    },\r\n    startTime: {\r\n        isDate: true,\r\n    },\r\n    state: {\r\n        enumType: exports.TypeInfo.TimelineRecordState\r\n    }\r\n};\r\nexports.TypeInfo.TimelineRecordReference.fields = {\r\n    state: {\r\n        enumType: exports.TypeInfo.TimelineRecordState\r\n    }\r\n};\r\nexports.TypeInfo.VariableGroup.fields = {\r\n    createdOn: {\r\n        isDate: true,\r\n    },\r\n    modifiedOn: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.VirtualMachine.fields = {\r\n    agent: {\r\n        typeInfo: exports.TypeInfo.TaskAgent\r\n    }\r\n};\r\nexports.TypeInfo.VirtualMachineGroup.fields = {\r\n    createdOn: {\r\n        isDate: true,\r\n    },\r\n    lastModifiedOn: {\r\n        isDate: true,\r\n    },\r\n    type: {\r\n        enumType: exports.TypeInfo.EnvironmentResourceType\r\n    }\r\n};\r\nexports.TypeInfo.VirtualMachineResource.fields = {\r\n    agent: {\r\n        typeInfo: exports.TypeInfo.TaskAgent\r\n    },\r\n    createdOn: {\r\n        isDate: true,\r\n    },\r\n    lastModifiedOn: {\r\n        isDate: true,\r\n    },\r\n    type: {\r\n        enumType: exports.TypeInfo.EnvironmentResourceType\r\n    }\r\n};\r\nexports.TypeInfo.VirtualMachineResourceCreateParameters.fields = {\r\n    virtualMachineResource: {\r\n        typeInfo: exports.TypeInfo.VirtualMachineResource\r\n    }\r\n};\r\n","/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst SystemData = require(\"../interfaces/common/SystemDataInterfaces\");\r\nconst TfsCoreInterfaces = require(\"../interfaces/CoreInterfaces\");\r\n/**\r\n * The types of test attachments.\r\n */\r\nvar AttachmentType;\r\n(function (AttachmentType) {\r\n    /**\r\n     * Attachment type GeneralAttachment , use this as default type unless you have other type.\r\n     */\r\n    AttachmentType[AttachmentType[\"GeneralAttachment\"] = 0] = \"GeneralAttachment\";\r\n    AttachmentType[AttachmentType[\"AfnStrip\"] = 1] = \"AfnStrip\";\r\n    AttachmentType[AttachmentType[\"BugFilingData\"] = 2] = \"BugFilingData\";\r\n    /**\r\n     * Attachment type CodeCoverage.\r\n     */\r\n    AttachmentType[AttachmentType[\"CodeCoverage\"] = 3] = \"CodeCoverage\";\r\n    AttachmentType[AttachmentType[\"IntermediateCollectorData\"] = 4] = \"IntermediateCollectorData\";\r\n    AttachmentType[AttachmentType[\"RunConfig\"] = 5] = \"RunConfig\";\r\n    AttachmentType[AttachmentType[\"TestImpactDetails\"] = 6] = \"TestImpactDetails\";\r\n    AttachmentType[AttachmentType[\"TmiTestRunDeploymentFiles\"] = 7] = \"TmiTestRunDeploymentFiles\";\r\n    AttachmentType[AttachmentType[\"TmiTestRunReverseDeploymentFiles\"] = 8] = \"TmiTestRunReverseDeploymentFiles\";\r\n    AttachmentType[AttachmentType[\"TmiTestResultDetail\"] = 9] = \"TmiTestResultDetail\";\r\n    AttachmentType[AttachmentType[\"TmiTestRunSummary\"] = 10] = \"TmiTestRunSummary\";\r\n    /**\r\n     * Attachment type ConsoleLog.\r\n     */\r\n    AttachmentType[AttachmentType[\"ConsoleLog\"] = 11] = \"ConsoleLog\";\r\n})(AttachmentType = exports.AttachmentType || (exports.AttachmentType = {}));\r\n/**\r\n * Enum of type Clone Operation Type.\r\n */\r\nvar CloneOperationState;\r\n(function (CloneOperationState) {\r\n    /**\r\n     * value for Failed State\r\n     */\r\n    CloneOperationState[CloneOperationState[\"Failed\"] = 2] = \"Failed\";\r\n    /**\r\n     * value for Inprogress state\r\n     */\r\n    CloneOperationState[CloneOperationState[\"InProgress\"] = 1] = \"InProgress\";\r\n    /**\r\n     * Value for Queued State\r\n     */\r\n    CloneOperationState[CloneOperationState[\"Queued\"] = 0] = \"Queued\";\r\n    /**\r\n     * value for Success state\r\n     */\r\n    CloneOperationState[CloneOperationState[\"Succeeded\"] = 3] = \"Succeeded\";\r\n})(CloneOperationState = exports.CloneOperationState || (exports.CloneOperationState = {}));\r\n/**\r\n * Represents status of code coverage summary for a build\r\n */\r\nvar CoverageDetailedSummaryStatus;\r\n(function (CoverageDetailedSummaryStatus) {\r\n    /**\r\n     * No coverage status\r\n     */\r\n    CoverageDetailedSummaryStatus[CoverageDetailedSummaryStatus[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * The summary evaluation is in progress\r\n     */\r\n    CoverageDetailedSummaryStatus[CoverageDetailedSummaryStatus[\"InProgress\"] = 1] = \"InProgress\";\r\n    /**\r\n     * The summary evaluation is finalized and won't change\r\n     */\r\n    CoverageDetailedSummaryStatus[CoverageDetailedSummaryStatus[\"Finalized\"] = 2] = \"Finalized\";\r\n    /**\r\n     * The summary evaluation is pending\r\n     */\r\n    CoverageDetailedSummaryStatus[CoverageDetailedSummaryStatus[\"Pending\"] = 3] = \"Pending\";\r\n    /**\r\n     * Summary evaluation may be ongoing but another merge has been requested.\r\n     */\r\n    CoverageDetailedSummaryStatus[CoverageDetailedSummaryStatus[\"UpdateRequestQueued\"] = 4] = \"UpdateRequestQueued\";\r\n    /**\r\n     * No coverage modules found\r\n     */\r\n    CoverageDetailedSummaryStatus[CoverageDetailedSummaryStatus[\"NoModulesFound\"] = 5] = \"NoModulesFound\";\r\n    /**\r\n     * Number of Files exceeded\r\n     */\r\n    CoverageDetailedSummaryStatus[CoverageDetailedSummaryStatus[\"NumberOfFilesExceeded\"] = 6] = \"NumberOfFilesExceeded\";\r\n    /**\r\n     * TNo Input Files\r\n     */\r\n    CoverageDetailedSummaryStatus[CoverageDetailedSummaryStatus[\"NoInputFiles\"] = 7] = \"NoInputFiles\";\r\n    /**\r\n     * Build got cancelled by user\r\n     */\r\n    CoverageDetailedSummaryStatus[CoverageDetailedSummaryStatus[\"BuildCancelled\"] = 8] = \"BuildCancelled\";\r\n    /**\r\n     * Coverage Jobs failed\r\n     */\r\n    CoverageDetailedSummaryStatus[CoverageDetailedSummaryStatus[\"FailedJobs\"] = 9] = \"FailedJobs\";\r\n    /**\r\n     * Module merge Timeout\r\n     */\r\n    CoverageDetailedSummaryStatus[CoverageDetailedSummaryStatus[\"ModuleMergeJobTimeout\"] = 10] = \"ModuleMergeJobTimeout\";\r\n    /**\r\n     * Coverage successfully completed\r\n     */\r\n    CoverageDetailedSummaryStatus[CoverageDetailedSummaryStatus[\"CodeCoverageSuccess\"] = 11] = \"CodeCoverageSuccess\";\r\n    /**\r\n     * Invalid Build Configuration\r\n     */\r\n    CoverageDetailedSummaryStatus[CoverageDetailedSummaryStatus[\"InvalidBuildConfiguration\"] = 12] = \"InvalidBuildConfiguration\";\r\n    /**\r\n     * Coverage Analyzer Build not found\r\n     */\r\n    CoverageDetailedSummaryStatus[CoverageDetailedSummaryStatus[\"CoverageAnalyzerBuildNotFound\"] = 13] = \"CoverageAnalyzerBuildNotFound\";\r\n    /**\r\n     * Failed to requeue the build\r\n     */\r\n    CoverageDetailedSummaryStatus[CoverageDetailedSummaryStatus[\"FailedToRequeue\"] = 14] = \"FailedToRequeue\";\r\n    /**\r\n     * Build got Bailed out\r\n     */\r\n    CoverageDetailedSummaryStatus[CoverageDetailedSummaryStatus[\"BuildBailedOut\"] = 15] = \"BuildBailedOut\";\r\n    /**\r\n     * No Code coverage configured\r\n     */\r\n    CoverageDetailedSummaryStatus[CoverageDetailedSummaryStatus[\"NoCodeCoverageTask\"] = 16] = \"NoCodeCoverageTask\";\r\n    /**\r\n     * CoverageMerge Job failed\r\n     */\r\n    CoverageDetailedSummaryStatus[CoverageDetailedSummaryStatus[\"MergeJobFailed\"] = 17] = \"MergeJobFailed\";\r\n    /**\r\n     * CoverageMergeInvoker Job failed\r\n     */\r\n    CoverageDetailedSummaryStatus[CoverageDetailedSummaryStatus[\"MergeInvokerJobFailed\"] = 18] = \"MergeInvokerJobFailed\";\r\n    /**\r\n     * CoverageMonitor Job failed\r\n     */\r\n    CoverageDetailedSummaryStatus[CoverageDetailedSummaryStatus[\"MonitorJobFailed\"] = 19] = \"MonitorJobFailed\";\r\n    /**\r\n     * CoverageMergeInvoker Job timeout\r\n     */\r\n    CoverageDetailedSummaryStatus[CoverageDetailedSummaryStatus[\"ModuleMergeInvokerJobTimeout\"] = 20] = \"ModuleMergeInvokerJobTimeout\";\r\n    /**\r\n     * CoverageMonitor Job timeout\r\n     */\r\n    CoverageDetailedSummaryStatus[CoverageDetailedSummaryStatus[\"MonitorJobTimeout\"] = 21] = \"MonitorJobTimeout\";\r\n    /**\r\n     * Invalid Coverage Input file\r\n     */\r\n    CoverageDetailedSummaryStatus[CoverageDetailedSummaryStatus[\"InvalidCoverageInput\"] = 22] = \"InvalidCoverageInput\";\r\n})(CoverageDetailedSummaryStatus = exports.CoverageDetailedSummaryStatus || (exports.CoverageDetailedSummaryStatus = {}));\r\n/**\r\n * Used to choose which coverage data is returned by a QueryXXXCoverage() call.\r\n */\r\nvar CoverageQueryFlags;\r\n(function (CoverageQueryFlags) {\r\n    /**\r\n     * If set, the Coverage.Modules property will be populated.\r\n     */\r\n    CoverageQueryFlags[CoverageQueryFlags[\"Modules\"] = 1] = \"Modules\";\r\n    /**\r\n     * If set, the ModuleCoverage.Functions properties will be populated.\r\n     */\r\n    CoverageQueryFlags[CoverageQueryFlags[\"Functions\"] = 2] = \"Functions\";\r\n    /**\r\n     * If set, the ModuleCoverage.CoverageData field will be populated.\r\n     */\r\n    CoverageQueryFlags[CoverageQueryFlags[\"BlockData\"] = 4] = \"BlockData\";\r\n})(CoverageQueryFlags = exports.CoverageQueryFlags || (exports.CoverageQueryFlags = {}));\r\nvar CoverageStatus;\r\n(function (CoverageStatus) {\r\n    CoverageStatus[CoverageStatus[\"Covered\"] = 0] = \"Covered\";\r\n    CoverageStatus[CoverageStatus[\"NotCovered\"] = 1] = \"NotCovered\";\r\n    CoverageStatus[CoverageStatus[\"PartiallyCovered\"] = 2] = \"PartiallyCovered\";\r\n})(CoverageStatus = exports.CoverageStatus || (exports.CoverageStatus = {}));\r\n/**\r\n * Represents status of code coverage summary for a build\r\n */\r\nvar CoverageSummaryStatus;\r\n(function (CoverageSummaryStatus) {\r\n    /**\r\n     * No coverage status\r\n     */\r\n    CoverageSummaryStatus[CoverageSummaryStatus[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * The summary evaluation is in progress\r\n     */\r\n    CoverageSummaryStatus[CoverageSummaryStatus[\"InProgress\"] = 1] = \"InProgress\";\r\n    /**\r\n     * The summary evaluation for the previous request is completed. Summary can change in future\r\n     */\r\n    CoverageSummaryStatus[CoverageSummaryStatus[\"Completed\"] = 2] = \"Completed\";\r\n    /**\r\n     * The summary evaluation is finalized and won't change\r\n     */\r\n    CoverageSummaryStatus[CoverageSummaryStatus[\"Finalized\"] = 3] = \"Finalized\";\r\n    /**\r\n     * The summary evaluation is pending\r\n     */\r\n    CoverageSummaryStatus[CoverageSummaryStatus[\"Pending\"] = 4] = \"Pending\";\r\n    /**\r\n     * Summary evaluation may be ongoing but another merge has been requested.\r\n     */\r\n    CoverageSummaryStatus[CoverageSummaryStatus[\"UpdateRequestQueued\"] = 5] = \"UpdateRequestQueued\";\r\n})(CoverageSummaryStatus = exports.CoverageSummaryStatus || (exports.CoverageSummaryStatus = {}));\r\nvar CustomTestFieldScope;\r\n(function (CustomTestFieldScope) {\r\n    CustomTestFieldScope[CustomTestFieldScope[\"None\"] = 0] = \"None\";\r\n    CustomTestFieldScope[CustomTestFieldScope[\"TestRun\"] = 1] = \"TestRun\";\r\n    CustomTestFieldScope[CustomTestFieldScope[\"TestResult\"] = 2] = \"TestResult\";\r\n    CustomTestFieldScope[CustomTestFieldScope[\"System\"] = 4] = \"System\";\r\n    CustomTestFieldScope[CustomTestFieldScope[\"All\"] = 7] = \"All\";\r\n})(CustomTestFieldScope = exports.CustomTestFieldScope || (exports.CustomTestFieldScope = {}));\r\nvar CustomTestFieldType;\r\n(function (CustomTestFieldType) {\r\n    CustomTestFieldType[CustomTestFieldType[\"Bit\"] = 2] = \"Bit\";\r\n    CustomTestFieldType[CustomTestFieldType[\"DateTime\"] = 4] = \"DateTime\";\r\n    CustomTestFieldType[CustomTestFieldType[\"Int\"] = 8] = \"Int\";\r\n    CustomTestFieldType[CustomTestFieldType[\"Float\"] = 6] = \"Float\";\r\n    CustomTestFieldType[CustomTestFieldType[\"String\"] = 12] = \"String\";\r\n    CustomTestFieldType[CustomTestFieldType[\"Guid\"] = 14] = \"Guid\";\r\n})(CustomTestFieldType = exports.CustomTestFieldType || (exports.CustomTestFieldType = {}));\r\nvar FlakyDetectionType;\r\n(function (FlakyDetectionType) {\r\n    /**\r\n     * Custom defines manual detection type.\r\n     */\r\n    FlakyDetectionType[FlakyDetectionType[\"Custom\"] = 1] = \"Custom\";\r\n    /**\r\n     * Defines System detection type.\r\n     */\r\n    FlakyDetectionType[FlakyDetectionType[\"System\"] = 2] = \"System\";\r\n})(FlakyDetectionType = exports.FlakyDetectionType || (exports.FlakyDetectionType = {}));\r\n/**\r\n * Test summary metrics.\r\n */\r\nvar Metrics;\r\n(function (Metrics) {\r\n    /**\r\n     * To get results of all matrix.\r\n     */\r\n    Metrics[Metrics[\"All\"] = 1] = \"All\";\r\n    /**\r\n     * Get results summary by results outcome\r\n     */\r\n    Metrics[Metrics[\"ResultSummary\"] = 2] = \"ResultSummary\";\r\n    /**\r\n     * Get results analysis which include failure analysis, increase/decrease in results count analysis.\r\n     */\r\n    Metrics[Metrics[\"ResultsAnalysis\"] = 3] = \"ResultsAnalysis\";\r\n    /**\r\n     * Get runs summary\r\n     */\r\n    Metrics[Metrics[\"RunSummary\"] = 4] = \"RunSummary\";\r\n})(Metrics = exports.Metrics || (exports.Metrics = {}));\r\nvar OneMRXSessionState;\r\n(function (OneMRXSessionState) {\r\n    /**\r\n     * Default\r\n     */\r\n    OneMRXSessionState[OneMRXSessionState[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Session state with Running\r\n     */\r\n    OneMRXSessionState[OneMRXSessionState[\"Running\"] = 1] = \"Running\";\r\n    /**\r\n     * Session state with Completed\r\n     */\r\n    OneMRXSessionState[OneMRXSessionState[\"Completed\"] = 2] = \"Completed\";\r\n    /**\r\n     * Session state with Waiting\r\n     */\r\n    OneMRXSessionState[OneMRXSessionState[\"Waiting\"] = 3] = \"Waiting\";\r\n    /**\r\n     * Session state with Cancelled\r\n     */\r\n    OneMRXSessionState[OneMRXSessionState[\"Cancelled\"] = 4] = \"Cancelled\";\r\n})(OneMRXSessionState = exports.OneMRXSessionState || (exports.OneMRXSessionState = {}));\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"Add\"] = 1] = \"Add\";\r\n    OperationType[OperationType[\"Delete\"] = 2] = \"Delete\";\r\n})(OperationType = exports.OperationType || (exports.OperationType = {}));\r\n/**\r\n * Additional details with test result\r\n */\r\nvar ResultDetails;\r\n(function (ResultDetails) {\r\n    /**\r\n     * Core fields of test result. Core fields includes State, Outcome, Priority, AutomatedTestName, AutomatedTestStorage, Comments, ErrorMessage etc.\r\n     */\r\n    ResultDetails[ResultDetails[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Test iteration details in a test result.\r\n     */\r\n    ResultDetails[ResultDetails[\"Iterations\"] = 1] = \"Iterations\";\r\n    /**\r\n     * Workitems associated with a test result.\r\n     */\r\n    ResultDetails[ResultDetails[\"WorkItems\"] = 2] = \"WorkItems\";\r\n    /**\r\n     * Subresults in a test result.\r\n     */\r\n    ResultDetails[ResultDetails[\"SubResults\"] = 4] = \"SubResults\";\r\n    /**\r\n     * Point and plan detail in a test result.\r\n     */\r\n    ResultDetails[ResultDetails[\"Point\"] = 8] = \"Point\";\r\n})(ResultDetails = exports.ResultDetails || (exports.ResultDetails = {}));\r\n/**\r\n * Hierarchy type of the result/subresults.\r\n */\r\nvar ResultGroupType;\r\n(function (ResultGroupType) {\r\n    /**\r\n     * Leaf node of test result.\r\n     */\r\n    ResultGroupType[ResultGroupType[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Hierarchy type of test result.\r\n     */\r\n    ResultGroupType[ResultGroupType[\"Rerun\"] = 1] = \"Rerun\";\r\n    /**\r\n     * Hierarchy type of test result.\r\n     */\r\n    ResultGroupType[ResultGroupType[\"DataDriven\"] = 2] = \"DataDriven\";\r\n    /**\r\n     * Hierarchy type of test result.\r\n     */\r\n    ResultGroupType[ResultGroupType[\"OrderedTest\"] = 3] = \"OrderedTest\";\r\n    /**\r\n     * Unknown hierarchy type.\r\n     */\r\n    ResultGroupType[ResultGroupType[\"Generic\"] = 4] = \"Generic\";\r\n})(ResultGroupType = exports.ResultGroupType || (exports.ResultGroupType = {}));\r\nvar ResultMetadata;\r\n(function (ResultMetadata) {\r\n    /**\r\n     * Rerun metadata\r\n     */\r\n    ResultMetadata[ResultMetadata[\"Rerun\"] = 1] = \"Rerun\";\r\n    /**\r\n     * Flaky metadata\r\n     */\r\n    ResultMetadata[ResultMetadata[\"Flaky\"] = 2] = \"Flaky\";\r\n})(ResultMetadata = exports.ResultMetadata || (exports.ResultMetadata = {}));\r\n/**\r\n * Additional details with test result metadata\r\n */\r\nvar ResultMetaDataDetails;\r\n(function (ResultMetaDataDetails) {\r\n    /**\r\n     * Core fields of test result metadata.\r\n     */\r\n    ResultMetaDataDetails[ResultMetaDataDetails[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Test FlakyIdentifiers details in test result metadata.\r\n     */\r\n    ResultMetaDataDetails[ResultMetaDataDetails[\"FlakyIdentifiers\"] = 1] = \"FlakyIdentifiers\";\r\n})(ResultMetaDataDetails = exports.ResultMetaDataDetails || (exports.ResultMetaDataDetails = {}));\r\n/**\r\n * The top level entity that is being cloned as part of a Clone operation\r\n */\r\nvar ResultObjectType;\r\n(function (ResultObjectType) {\r\n    /**\r\n     * Suite Clone\r\n     */\r\n    ResultObjectType[ResultObjectType[\"TestSuite\"] = 0] = \"TestSuite\";\r\n    /**\r\n     * Plan Clone\r\n     */\r\n    ResultObjectType[ResultObjectType[\"TestPlan\"] = 1] = \"TestPlan\";\r\n})(ResultObjectType = exports.ResultObjectType || (exports.ResultObjectType = {}));\r\nvar RunType;\r\n(function (RunType) {\r\n    /**\r\n     * Only used during an update to preserve the existing value.\r\n     */\r\n    RunType[RunType[\"Unspecified\"] = 0] = \"Unspecified\";\r\n    /**\r\n     * Normal test run.\r\n     */\r\n    RunType[RunType[\"Normal\"] = 1] = \"Normal\";\r\n    /**\r\n     * Test run created for the blocked result when a test point is blocked.\r\n     */\r\n    RunType[RunType[\"Blocking\"] = 2] = \"Blocking\";\r\n    /**\r\n     * Test run created from Web.\r\n     */\r\n    RunType[RunType[\"Web\"] = 4] = \"Web\";\r\n    /**\r\n     * Run initiated from web through MTR\r\n     */\r\n    RunType[RunType[\"MtrRunInitiatedFromWeb\"] = 8] = \"MtrRunInitiatedFromWeb\";\r\n    /**\r\n     * These test run would require DTL environment. These could be either of automated or manual test run.\r\n     */\r\n    RunType[RunType[\"RunWithDtlEnv\"] = 16] = \"RunWithDtlEnv\";\r\n    /**\r\n     * These test run may or may not have published test results but it will have summary like total test, passed test, failed test etc. These are automated tests.\r\n     */\r\n    RunType[RunType[\"NoConfigRun\"] = 32] = \"NoConfigRun\";\r\n})(RunType = exports.RunType || (exports.RunType = {}));\r\nvar Service;\r\n(function (Service) {\r\n    Service[Service[\"Any\"] = 0] = \"Any\";\r\n    Service[Service[\"Tcm\"] = 1] = \"Tcm\";\r\n    Service[Service[\"Tfs\"] = 2] = \"Tfs\";\r\n})(Service = exports.Service || (exports.Service = {}));\r\nvar SessionLinkType;\r\n(function (SessionLinkType) {\r\n    /**\r\n     * Default\r\n     */\r\n    SessionLinkType[SessionLinkType[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Link type for Session information\r\n     */\r\n    SessionLinkType[SessionLinkType[\"SessionInfo\"] = 1] = \"SessionInfo\";\r\n})(SessionLinkType = exports.SessionLinkType || (exports.SessionLinkType = {}));\r\nvar SessionResult;\r\n(function (SessionResult) {\r\n    /**\r\n     * Default\r\n     */\r\n    SessionResult[SessionResult[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Session result with Passed\r\n     */\r\n    SessionResult[SessionResult[\"Passed\"] = 1] = \"Passed\";\r\n    /**\r\n     * Session result with Failed\r\n     */\r\n    SessionResult[SessionResult[\"Failed\"] = 2] = \"Failed\";\r\n})(SessionResult = exports.SessionResult || (exports.SessionResult = {}));\r\nvar SessionTimelineType;\r\n(function (SessionTimelineType) {\r\n    /**\r\n     * Default\r\n     */\r\n    SessionTimelineType[SessionTimelineType[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Timeline type for Queued status\r\n     */\r\n    SessionTimelineType[SessionTimelineType[\"Queued\"] = 1] = \"Queued\";\r\n    /**\r\n     * Timeline type for Completed status\r\n     */\r\n    SessionTimelineType[SessionTimelineType[\"Completed\"] = 2] = \"Completed\";\r\n    /**\r\n     * Timeline type for Started status\r\n     */\r\n    SessionTimelineType[SessionTimelineType[\"Started\"] = 3] = \"Started\";\r\n})(SessionTimelineType = exports.SessionTimelineType || (exports.SessionTimelineType = {}));\r\n/**\r\n * Option to get details in response\r\n */\r\nvar SuiteExpand;\r\n(function (SuiteExpand) {\r\n    /**\r\n     * Include children in response.\r\n     */\r\n    SuiteExpand[SuiteExpand[\"Children\"] = 1] = \"Children\";\r\n    /**\r\n     * Include default testers in response.\r\n     */\r\n    SuiteExpand[SuiteExpand[\"DefaultTesters\"] = 2] = \"DefaultTesters\";\r\n})(SuiteExpand = exports.SuiteExpand || (exports.SuiteExpand = {}));\r\nvar TCMServiceDataMigrationStatus;\r\n(function (TCMServiceDataMigrationStatus) {\r\n    /**\r\n     * Migration Not Started\r\n     */\r\n    TCMServiceDataMigrationStatus[TCMServiceDataMigrationStatus[\"NotStarted\"] = 0] = \"NotStarted\";\r\n    /**\r\n     * Migration InProgress\r\n     */\r\n    TCMServiceDataMigrationStatus[TCMServiceDataMigrationStatus[\"InProgress\"] = 1] = \"InProgress\";\r\n    /**\r\n     * Migration Completed\r\n     */\r\n    TCMServiceDataMigrationStatus[TCMServiceDataMigrationStatus[\"Completed\"] = 2] = \"Completed\";\r\n    /**\r\n     * Migration Failed\r\n     */\r\n    TCMServiceDataMigrationStatus[TCMServiceDataMigrationStatus[\"Failed\"] = 3] = \"Failed\";\r\n})(TCMServiceDataMigrationStatus = exports.TCMServiceDataMigrationStatus || (exports.TCMServiceDataMigrationStatus = {}));\r\n/**\r\n * Represents the state of an ITestConfiguration object.\r\n */\r\nvar TestConfigurationState;\r\n(function (TestConfigurationState) {\r\n    /**\r\n     * The configuration can be used for new test runs.\r\n     */\r\n    TestConfigurationState[TestConfigurationState[\"Active\"] = 1] = \"Active\";\r\n    /**\r\n     * The configuration has been retired and should not be used for new test runs.\r\n     */\r\n    TestConfigurationState[TestConfigurationState[\"Inactive\"] = 2] = \"Inactive\";\r\n})(TestConfigurationState = exports.TestConfigurationState || (exports.TestConfigurationState = {}));\r\n/**\r\n * Test Log Context\r\n */\r\nvar TestLogScope;\r\n(function (TestLogScope) {\r\n    /**\r\n     * Log file is associated with Run, result, subresult\r\n     */\r\n    TestLogScope[TestLogScope[\"Run\"] = 0] = \"Run\";\r\n    /**\r\n     * Log File associated with Build\r\n     */\r\n    TestLogScope[TestLogScope[\"Build\"] = 1] = \"Build\";\r\n    /**\r\n     * Log File associated with Release\r\n     */\r\n    TestLogScope[TestLogScope[\"Release\"] = 2] = \"Release\";\r\n})(TestLogScope = exports.TestLogScope || (exports.TestLogScope = {}));\r\n/**\r\n * Test Log Status codes.\r\n */\r\nvar TestLogStatusCode;\r\n(function (TestLogStatusCode) {\r\n    /**\r\n     * Operation is successful\r\n     */\r\n    TestLogStatusCode[TestLogStatusCode[\"Success\"] = 0] = \"Success\";\r\n    /**\r\n     * Operation failed\r\n     */\r\n    TestLogStatusCode[TestLogStatusCode[\"Failed\"] = 1] = \"Failed\";\r\n    /**\r\n     * Operation failed due to file already exist\r\n     */\r\n    TestLogStatusCode[TestLogStatusCode[\"FileAlreadyExists\"] = 2] = \"FileAlreadyExists\";\r\n    /**\r\n     * Invalid input provided by user\r\n     */\r\n    TestLogStatusCode[TestLogStatusCode[\"InvalidInput\"] = 3] = \"InvalidInput\";\r\n    /**\r\n     * Invalid file name provided by user\r\n     */\r\n    TestLogStatusCode[TestLogStatusCode[\"InvalidFileName\"] = 4] = \"InvalidFileName\";\r\n    /**\r\n     * Error occurred while operating on container\r\n     */\r\n    TestLogStatusCode[TestLogStatusCode[\"InvalidContainer\"] = 5] = \"InvalidContainer\";\r\n    /**\r\n     * Blob Transfer Error\r\n     */\r\n    TestLogStatusCode[TestLogStatusCode[\"TransferFailed\"] = 6] = \"TransferFailed\";\r\n    /**\r\n     * TestLogStore feature is not enabled\r\n     */\r\n    TestLogStatusCode[TestLogStatusCode[\"FeatureDisabled\"] = 7] = \"FeatureDisabled\";\r\n    /**\r\n     * Build for which operation is requested does not exist\r\n     */\r\n    TestLogStatusCode[TestLogStatusCode[\"BuildDoesNotExist\"] = 8] = \"BuildDoesNotExist\";\r\n    /**\r\n     * Run for which operation is requested does not exist\r\n     */\r\n    TestLogStatusCode[TestLogStatusCode[\"RunDoesNotExist\"] = 9] = \"RunDoesNotExist\";\r\n    /**\r\n     * Container cannot be created\r\n     */\r\n    TestLogStatusCode[TestLogStatusCode[\"ContainerNotCreated\"] = 10] = \"ContainerNotCreated\";\r\n    /**\r\n     * Api is not supported\r\n     */\r\n    TestLogStatusCode[TestLogStatusCode[\"APINotSupported\"] = 11] = \"APINotSupported\";\r\n    /**\r\n     * File size is greater than the limitation\r\n     */\r\n    TestLogStatusCode[TestLogStatusCode[\"FileSizeExceeds\"] = 12] = \"FileSizeExceeds\";\r\n    /**\r\n     * Container is not found for which operation is requested\r\n     */\r\n    TestLogStatusCode[TestLogStatusCode[\"ContainerNotFound\"] = 13] = \"ContainerNotFound\";\r\n    /**\r\n     * File cannot be found\r\n     */\r\n    TestLogStatusCode[TestLogStatusCode[\"FileNotFound\"] = 14] = \"FileNotFound\";\r\n    /**\r\n     * Directory cannot be found\r\n     */\r\n    TestLogStatusCode[TestLogStatusCode[\"DirectoryNotFound\"] = 15] = \"DirectoryNotFound\";\r\n    /**\r\n     * Storage capacity exceeded\r\n     */\r\n    TestLogStatusCode[TestLogStatusCode[\"StorageCapacityExceeded\"] = 16] = \"StorageCapacityExceeded\";\r\n})(TestLogStatusCode = exports.TestLogStatusCode || (exports.TestLogStatusCode = {}));\r\n/**\r\n * Specifies set of possible log store endpoint type.\r\n */\r\nvar TestLogStoreEndpointType;\r\n(function (TestLogStoreEndpointType) {\r\n    /**\r\n     * Endpoint type is scoped to root\r\n     */\r\n    TestLogStoreEndpointType[TestLogStoreEndpointType[\"Root\"] = 1] = \"Root\";\r\n    /**\r\n     * Endpoint type is scoped to file\r\n     */\r\n    TestLogStoreEndpointType[TestLogStoreEndpointType[\"File\"] = 2] = \"File\";\r\n})(TestLogStoreEndpointType = exports.TestLogStoreEndpointType || (exports.TestLogStoreEndpointType = {}));\r\n/**\r\n * Specifies set of possible operation type on log store.\r\n */\r\nvar TestLogStoreOperationType;\r\n(function (TestLogStoreOperationType) {\r\n    /**\r\n     * Operation is scoped to read data only.\r\n     */\r\n    TestLogStoreOperationType[TestLogStoreOperationType[\"Read\"] = 1] = \"Read\";\r\n    /**\r\n     * Operation is scoped to create data only.\r\n     */\r\n    TestLogStoreOperationType[TestLogStoreOperationType[\"Create\"] = 2] = \"Create\";\r\n    /**\r\n     * Operation is scoped to read and create data.\r\n     */\r\n    TestLogStoreOperationType[TestLogStoreOperationType[\"ReadAndCreate\"] = 3] = \"ReadAndCreate\";\r\n})(TestLogStoreOperationType = exports.TestLogStoreOperationType || (exports.TestLogStoreOperationType = {}));\r\n/**\r\n * Test Log Types\r\n */\r\nvar TestLogType;\r\n(function (TestLogType) {\r\n    /**\r\n     * Any gereric attachment.\r\n     */\r\n    TestLogType[TestLogType[\"GeneralAttachment\"] = 1] = \"GeneralAttachment\";\r\n    /**\r\n     * Code Coverage files\r\n     */\r\n    TestLogType[TestLogType[\"CodeCoverage\"] = 2] = \"CodeCoverage\";\r\n    /**\r\n     * Test Impact details.\r\n     */\r\n    TestLogType[TestLogType[\"TestImpact\"] = 3] = \"TestImpact\";\r\n    /**\r\n     * Temporary files\r\n     */\r\n    TestLogType[TestLogType[\"Intermediate\"] = 4] = \"Intermediate\";\r\n    /**\r\n     * Subresult Attachment\r\n     */\r\n    TestLogType[TestLogType[\"System\"] = 5] = \"System\";\r\n    /**\r\n     * merged Coverage file\r\n     */\r\n    TestLogType[TestLogType[\"MergedCoverageFile\"] = 6] = \"MergedCoverageFile\";\r\n})(TestLogType = exports.TestLogType || (exports.TestLogType = {}));\r\n/**\r\n * Valid TestOutcome values.\r\n */\r\nvar TestOutcome;\r\n(function (TestOutcome) {\r\n    /**\r\n     * Only used during an update to preserve the existing value.\r\n     */\r\n    TestOutcome[TestOutcome[\"Unspecified\"] = 0] = \"Unspecified\";\r\n    /**\r\n     * Test has not been completed, or the test type does not report pass/failure.\r\n     */\r\n    TestOutcome[TestOutcome[\"None\"] = 1] = \"None\";\r\n    /**\r\n     * Test was executed w/o any issues.\r\n     */\r\n    TestOutcome[TestOutcome[\"Passed\"] = 2] = \"Passed\";\r\n    /**\r\n     * Test was executed, but there were issues. Issues may involve exceptions or failed assertions.\r\n     */\r\n    TestOutcome[TestOutcome[\"Failed\"] = 3] = \"Failed\";\r\n    /**\r\n     * Test has completed, but we can't say if it passed or failed. May be used for aborted tests...\r\n     */\r\n    TestOutcome[TestOutcome[\"Inconclusive\"] = 4] = \"Inconclusive\";\r\n    /**\r\n     * The test timed out\r\n     */\r\n    TestOutcome[TestOutcome[\"Timeout\"] = 5] = \"Timeout\";\r\n    /**\r\n     * Test was aborted. This was not caused by a user gesture, but rather by a framework decision.\r\n     */\r\n    TestOutcome[TestOutcome[\"Aborted\"] = 6] = \"Aborted\";\r\n    /**\r\n     * Test had it chance for been executed but was not, as ITestElement.IsRunnable == false.\r\n     */\r\n    TestOutcome[TestOutcome[\"Blocked\"] = 7] = \"Blocked\";\r\n    /**\r\n     * Test was not executed. This was caused by a user gesture - e.g. user hit stop button.\r\n     */\r\n    TestOutcome[TestOutcome[\"NotExecuted\"] = 8] = \"NotExecuted\";\r\n    /**\r\n     * To be used by Run level results. This is not a failure.\r\n     */\r\n    TestOutcome[TestOutcome[\"Warning\"] = 9] = \"Warning\";\r\n    /**\r\n     * There was a system error while we were trying to execute a test.\r\n     */\r\n    TestOutcome[TestOutcome[\"Error\"] = 10] = \"Error\";\r\n    /**\r\n     * Test is Not Applicable for execution.\r\n     */\r\n    TestOutcome[TestOutcome[\"NotApplicable\"] = 11] = \"NotApplicable\";\r\n    /**\r\n     * Test is paused.\r\n     */\r\n    TestOutcome[TestOutcome[\"Paused\"] = 12] = \"Paused\";\r\n    /**\r\n     * Test is currently executing. Added this for TCM charts\r\n     */\r\n    TestOutcome[TestOutcome[\"InProgress\"] = 13] = \"InProgress\";\r\n    /**\r\n     * Test is not impacted. Added fot TIA.\r\n     */\r\n    TestOutcome[TestOutcome[\"NotImpacted\"] = 14] = \"NotImpacted\";\r\n    TestOutcome[TestOutcome[\"MaxValue\"] = 14] = \"MaxValue\";\r\n})(TestOutcome = exports.TestOutcome || (exports.TestOutcome = {}));\r\nvar TestPointState;\r\n(function (TestPointState) {\r\n    /**\r\n     * Default\r\n     */\r\n    TestPointState[TestPointState[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * The test point needs to be executed in order for the test pass to be considered complete.  Either the test has not been run before or the previous run failed.\r\n     */\r\n    TestPointState[TestPointState[\"Ready\"] = 1] = \"Ready\";\r\n    /**\r\n     * The test has passed successfully and does not need to be re-run for the test pass to be considered complete.\r\n     */\r\n    TestPointState[TestPointState[\"Completed\"] = 2] = \"Completed\";\r\n    /**\r\n     * The test point needs to be executed but is not able to.\r\n     */\r\n    TestPointState[TestPointState[\"NotReady\"] = 3] = \"NotReady\";\r\n    /**\r\n     * The test is being executed.\r\n     */\r\n    TestPointState[TestPointState[\"InProgress\"] = 4] = \"InProgress\";\r\n    TestPointState[TestPointState[\"MaxValue\"] = 4] = \"MaxValue\";\r\n})(TestPointState = exports.TestPointState || (exports.TestPointState = {}));\r\n/**\r\n * Group by for results\r\n */\r\nvar TestResultGroupBy;\r\n(function (TestResultGroupBy) {\r\n    /**\r\n     * Group the results by branches\r\n     */\r\n    TestResultGroupBy[TestResultGroupBy[\"Branch\"] = 1] = \"Branch\";\r\n    /**\r\n     * Group the results by environment\r\n     */\r\n    TestResultGroupBy[TestResultGroupBy[\"Environment\"] = 2] = \"Environment\";\r\n})(TestResultGroupBy = exports.TestResultGroupBy || (exports.TestResultGroupBy = {}));\r\nvar TestResultsContextType;\r\n(function (TestResultsContextType) {\r\n    TestResultsContextType[TestResultsContextType[\"Build\"] = 1] = \"Build\";\r\n    TestResultsContextType[TestResultsContextType[\"Release\"] = 2] = \"Release\";\r\n    TestResultsContextType[TestResultsContextType[\"Pipeline\"] = 3] = \"Pipeline\";\r\n})(TestResultsContextType = exports.TestResultsContextType || (exports.TestResultsContextType = {}));\r\nvar TestResultsSessionState;\r\n(function (TestResultsSessionState) {\r\n    /**\r\n     * Default\r\n     */\r\n    TestResultsSessionState[TestResultsSessionState[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Session state with Running\r\n     */\r\n    TestResultsSessionState[TestResultsSessionState[\"Running\"] = 1] = \"Running\";\r\n    /**\r\n     * Session state with Completed\r\n     */\r\n    TestResultsSessionState[TestResultsSessionState[\"Completed\"] = 2] = \"Completed\";\r\n    /**\r\n     * Session state with Waiting\r\n     */\r\n    TestResultsSessionState[TestResultsSessionState[\"Waiting\"] = 3] = \"Waiting\";\r\n    /**\r\n     * Session state with Cancelled\r\n     */\r\n    TestResultsSessionState[TestResultsSessionState[\"Cancelled\"] = 4] = \"Cancelled\";\r\n})(TestResultsSessionState = exports.TestResultsSessionState || (exports.TestResultsSessionState = {}));\r\nvar TestResultsSettingsType;\r\n(function (TestResultsSettingsType) {\r\n    /**\r\n     * Returns All Test Settings.\r\n     */\r\n    TestResultsSettingsType[TestResultsSettingsType[\"All\"] = 1] = \"All\";\r\n    /**\r\n     * Returns Flaky Test Settings.\r\n     */\r\n    TestResultsSettingsType[TestResultsSettingsType[\"Flaky\"] = 2] = \"Flaky\";\r\n    /**\r\n     * Returns whether to log new tests or not\r\n     */\r\n    TestResultsSettingsType[TestResultsSettingsType[\"NewTestLogging\"] = 3] = \"NewTestLogging\";\r\n})(TestResultsSettingsType = exports.TestResultsSettingsType || (exports.TestResultsSettingsType = {}));\r\n/**\r\n * The types of outcomes for test run.\r\n */\r\nvar TestRunOutcome;\r\n(function (TestRunOutcome) {\r\n    /**\r\n     * Run with zero failed tests and has at least one impacted test\r\n     */\r\n    TestRunOutcome[TestRunOutcome[\"Passed\"] = 0] = \"Passed\";\r\n    /**\r\n     * Run with at-least one failed test.\r\n     */\r\n    TestRunOutcome[TestRunOutcome[\"Failed\"] = 1] = \"Failed\";\r\n    /**\r\n     * Run with no impacted tests.\r\n     */\r\n    TestRunOutcome[TestRunOutcome[\"NotImpacted\"] = 2] = \"NotImpacted\";\r\n    /**\r\n     * Runs with All tests in other category.\r\n     */\r\n    TestRunOutcome[TestRunOutcome[\"Others\"] = 3] = \"Others\";\r\n})(TestRunOutcome = exports.TestRunOutcome || (exports.TestRunOutcome = {}));\r\n/**\r\n * The types of publish context for run.\r\n */\r\nvar TestRunPublishContext;\r\n(function (TestRunPublishContext) {\r\n    /**\r\n     * Run is published for Build Context.\r\n     */\r\n    TestRunPublishContext[TestRunPublishContext[\"Build\"] = 1] = \"Build\";\r\n    /**\r\n     * Run is published for Release Context.\r\n     */\r\n    TestRunPublishContext[TestRunPublishContext[\"Release\"] = 2] = \"Release\";\r\n    /**\r\n     * Run is published for any Context.\r\n     */\r\n    TestRunPublishContext[TestRunPublishContext[\"All\"] = 3] = \"All\";\r\n})(TestRunPublishContext = exports.TestRunPublishContext || (exports.TestRunPublishContext = {}));\r\n/**\r\n * The types of states for test run.\r\n */\r\nvar TestRunState;\r\n(function (TestRunState) {\r\n    /**\r\n     * Only used during an update to preserve the existing value.\r\n     */\r\n    TestRunState[TestRunState[\"Unspecified\"] = 0] = \"Unspecified\";\r\n    /**\r\n     * The run is still being created.  No tests have started yet.\r\n     */\r\n    TestRunState[TestRunState[\"NotStarted\"] = 1] = \"NotStarted\";\r\n    /**\r\n     * Tests are running.\r\n     */\r\n    TestRunState[TestRunState[\"InProgress\"] = 2] = \"InProgress\";\r\n    /**\r\n     * All tests have completed or been skipped.\r\n     */\r\n    TestRunState[TestRunState[\"Completed\"] = 3] = \"Completed\";\r\n    /**\r\n     * Run is stopped and remaining tests have been aborted\r\n     */\r\n    TestRunState[TestRunState[\"Aborted\"] = 4] = \"Aborted\";\r\n    /**\r\n     * Run is currently initializing This is a legacy state and should not be used any more\r\n     */\r\n    TestRunState[TestRunState[\"Waiting\"] = 5] = \"Waiting\";\r\n    /**\r\n     * Run requires investigation because of a test point failure This is a legacy state and should not be used any more\r\n     */\r\n    TestRunState[TestRunState[\"NeedsInvestigation\"] = 6] = \"NeedsInvestigation\";\r\n})(TestRunState = exports.TestRunState || (exports.TestRunState = {}));\r\n/**\r\n * The types of sub states for test run. It gives the user more info about the test run beyond the high level test run state\r\n */\r\nvar TestRunSubstate;\r\n(function (TestRunSubstate) {\r\n    /**\r\n     * Run with noState.\r\n     */\r\n    TestRunSubstate[TestRunSubstate[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Run state while Creating Environment.\r\n     */\r\n    TestRunSubstate[TestRunSubstate[\"CreatingEnvironment\"] = 1] = \"CreatingEnvironment\";\r\n    /**\r\n     * Run state while Running Tests.\r\n     */\r\n    TestRunSubstate[TestRunSubstate[\"RunningTests\"] = 2] = \"RunningTests\";\r\n    /**\r\n     * Run state while Creating Environment.\r\n     */\r\n    TestRunSubstate[TestRunSubstate[\"CanceledByUser\"] = 3] = \"CanceledByUser\";\r\n    /**\r\n     * Run state when it is Aborted By the System.\r\n     */\r\n    TestRunSubstate[TestRunSubstate[\"AbortedBySystem\"] = 4] = \"AbortedBySystem\";\r\n    /**\r\n     * Run state when run has timedOut.\r\n     */\r\n    TestRunSubstate[TestRunSubstate[\"TimedOut\"] = 5] = \"TimedOut\";\r\n    /**\r\n     * Run state while Pending Analysis.\r\n     */\r\n    TestRunSubstate[TestRunSubstate[\"PendingAnalysis\"] = 6] = \"PendingAnalysis\";\r\n    /**\r\n     * Run state after being Analysed.\r\n     */\r\n    TestRunSubstate[TestRunSubstate[\"Analyzed\"] = 7] = \"Analyzed\";\r\n    /**\r\n     * Run state when cancellation is in Progress.\r\n     */\r\n    TestRunSubstate[TestRunSubstate[\"CancellationInProgress\"] = 8] = \"CancellationInProgress\";\r\n})(TestRunSubstate = exports.TestRunSubstate || (exports.TestRunSubstate = {}));\r\n/**\r\n * Represents the source from which the test session was created\r\n */\r\nvar TestSessionSource;\r\n(function (TestSessionSource) {\r\n    /**\r\n     * Source of test session uncertain as it is stale\r\n     */\r\n    TestSessionSource[TestSessionSource[\"Unknown\"] = 0] = \"Unknown\";\r\n    /**\r\n     * The session was created from Microsoft Test Manager exploratory desktop tool.\r\n     */\r\n    TestSessionSource[TestSessionSource[\"XTDesktop\"] = 1] = \"XTDesktop\";\r\n    /**\r\n     * The session was created from feedback client.\r\n     */\r\n    TestSessionSource[TestSessionSource[\"FeedbackDesktop\"] = 2] = \"FeedbackDesktop\";\r\n    /**\r\n     * The session was created from browser extension.\r\n     */\r\n    TestSessionSource[TestSessionSource[\"XTWeb\"] = 3] = \"XTWeb\";\r\n    /**\r\n     * The session was created from browser extension.\r\n     */\r\n    TestSessionSource[TestSessionSource[\"FeedbackWeb\"] = 4] = \"FeedbackWeb\";\r\n    /**\r\n     * The session was created from web access using Microsoft Test Manager exploratory desktop tool.\r\n     */\r\n    TestSessionSource[TestSessionSource[\"XTDesktop2\"] = 5] = \"XTDesktop2\";\r\n    /**\r\n     * To show sessions from all supported sources.\r\n     */\r\n    TestSessionSource[TestSessionSource[\"SessionInsightsForAll\"] = 6] = \"SessionInsightsForAll\";\r\n})(TestSessionSource = exports.TestSessionSource || (exports.TestSessionSource = {}));\r\n/**\r\n * Represents the state of the test session.\r\n */\r\nvar TestSessionState;\r\n(function (TestSessionState) {\r\n    /**\r\n     * Only used during an update to preserve the existing value.\r\n     */\r\n    TestSessionState[TestSessionState[\"Unspecified\"] = 0] = \"Unspecified\";\r\n    /**\r\n     * The session is still being created.\r\n     */\r\n    TestSessionState[TestSessionState[\"NotStarted\"] = 1] = \"NotStarted\";\r\n    /**\r\n     * The session is running.\r\n     */\r\n    TestSessionState[TestSessionState[\"InProgress\"] = 2] = \"InProgress\";\r\n    /**\r\n     * The session has paused.\r\n     */\r\n    TestSessionState[TestSessionState[\"Paused\"] = 3] = \"Paused\";\r\n    /**\r\n     * The session has completed.\r\n     */\r\n    TestSessionState[TestSessionState[\"Completed\"] = 4] = \"Completed\";\r\n    /**\r\n     * This is required for Feedback session which are declined\r\n     */\r\n    TestSessionState[TestSessionState[\"Declined\"] = 5] = \"Declined\";\r\n})(TestSessionState = exports.TestSessionState || (exports.TestSessionState = {}));\r\nexports.TypeInfo = {\r\n    AfnStrip: {},\r\n    AggregatedDataForResultTrend: {},\r\n    AggregatedResultDetailsByOutcome: {},\r\n    AggregatedResultsAnalysis: {},\r\n    AggregatedResultsByOutcome: {},\r\n    AggregatedRunsByOutcome: {},\r\n    AggregatedRunsByState: {},\r\n    AttachmentType: {\r\n        enumValues: {\r\n            \"generalAttachment\": 0,\r\n            \"afnStrip\": 1,\r\n            \"bugFilingData\": 2,\r\n            \"codeCoverage\": 3,\r\n            \"intermediateCollectorData\": 4,\r\n            \"runConfig\": 5,\r\n            \"testImpactDetails\": 6,\r\n            \"tmiTestRunDeploymentFiles\": 7,\r\n            \"tmiTestRunReverseDeploymentFiles\": 8,\r\n            \"tmiTestResultDetail\": 9,\r\n            \"tmiTestRunSummary\": 10,\r\n            \"consoleLog\": 11\r\n        }\r\n    },\r\n    BatchResponse: {},\r\n    BuildConfiguration: {},\r\n    BuildCoverage: {},\r\n    BuildReference2: {},\r\n    BulkResultUpdateRequest: {},\r\n    CloneOperationInformation: {},\r\n    CloneOperationState: {\r\n        enumValues: {\r\n            \"failed\": 2,\r\n            \"inProgress\": 1,\r\n            \"queued\": 0,\r\n            \"succeeded\": 3\r\n        }\r\n    },\r\n    CodeCoverageSummary: {},\r\n    Coverage2: {},\r\n    CoverageDetailedSummaryStatus: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"inProgress\": 1,\r\n            \"finalized\": 2,\r\n            \"pending\": 3,\r\n            \"updateRequestQueued\": 4,\r\n            \"noModulesFound\": 5,\r\n            \"numberOfFilesExceeded\": 6,\r\n            \"noInputFiles\": 7,\r\n            \"buildCancelled\": 8,\r\n            \"failedJobs\": 9,\r\n            \"moduleMergeJobTimeout\": 10,\r\n            \"codeCoverageSuccess\": 11,\r\n            \"invalidBuildConfiguration\": 12,\r\n            \"coverageAnalyzerBuildNotFound\": 13,\r\n            \"failedToRequeue\": 14,\r\n            \"buildBailedOut\": 15,\r\n            \"noCodeCoverageTask\": 16,\r\n            \"mergeJobFailed\": 17,\r\n            \"mergeInvokerJobFailed\": 18,\r\n            \"monitorJobFailed\": 19,\r\n            \"moduleMergeInvokerJobTimeout\": 20,\r\n            \"monitorJobTimeout\": 21,\r\n            \"invalidCoverageInput\": 22\r\n        }\r\n    },\r\n    CoverageQueryFlags: {\r\n        enumValues: {\r\n            \"modules\": 1,\r\n            \"functions\": 2,\r\n            \"blockData\": 4\r\n        }\r\n    },\r\n    CoverageStatus: {\r\n        enumValues: {\r\n            \"covered\": 0,\r\n            \"notCovered\": 1,\r\n            \"partiallyCovered\": 2\r\n        }\r\n    },\r\n    CoverageSummaryStatus: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"inProgress\": 1,\r\n            \"completed\": 2,\r\n            \"finalized\": 3,\r\n            \"pending\": 4,\r\n            \"updateRequestQueued\": 5\r\n        }\r\n    },\r\n    CreateTestMessageLogEntryRequest: {},\r\n    CreateTestResultsRequest: {},\r\n    CreateTestRunRequest: {},\r\n    CustomTestFieldDefinition: {},\r\n    CustomTestFieldScope: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"testRun\": 1,\r\n            \"testResult\": 2,\r\n            \"system\": 4,\r\n            \"all\": 7\r\n        }\r\n    },\r\n    CustomTestFieldType: {\r\n        enumValues: {\r\n            \"bit\": 2,\r\n            \"dateTime\": 4,\r\n            \"int\": 8,\r\n            \"float\": 6,\r\n            \"string\": 12,\r\n            \"guid\": 14\r\n        }\r\n    },\r\n    DatedTestFieldData: {},\r\n    FailingSince: {},\r\n    FetchTestResultsResponse: {},\r\n    FlakyDetection: {},\r\n    FlakyDetectionType: {\r\n        enumValues: {\r\n            \"custom\": 1,\r\n            \"system\": 2\r\n        }\r\n    },\r\n    FlakySettings: {},\r\n    LastResultDetails: {},\r\n    LegacyBuildConfiguration: {},\r\n    LegacyReleaseReference: {},\r\n    LegacyTestCaseResult: {},\r\n    LegacyTestRun: {},\r\n    LegacyTestSettings: {},\r\n    Metrics: {\r\n        enumValues: {\r\n            \"all\": 1,\r\n            \"resultSummary\": 2,\r\n            \"resultsAnalysis\": 3,\r\n            \"runSummary\": 4\r\n        }\r\n    },\r\n    OneMRXSessionState: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"running\": 1,\r\n            \"completed\": 2,\r\n            \"waiting\": 3,\r\n            \"cancelled\": 4\r\n        }\r\n    },\r\n    OperationType: {\r\n        enumValues: {\r\n            \"add\": 1,\r\n            \"delete\": 2\r\n        }\r\n    },\r\n    PipelineTestMetrics: {},\r\n    PointLastResult: {},\r\n    PointsResults2: {},\r\n    QueryTestActionResultResponse: {},\r\n    ReleaseReference: {},\r\n    ReleaseReference2: {},\r\n    RequirementsToTestsMapping2: {},\r\n    Response: {},\r\n    ResultDetails: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"iterations\": 1,\r\n            \"workItems\": 2,\r\n            \"subResults\": 4,\r\n            \"point\": 8\r\n        }\r\n    },\r\n    ResultGroupType: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"rerun\": 1,\r\n            \"dataDriven\": 2,\r\n            \"orderedTest\": 3,\r\n            \"generic\": 4\r\n        }\r\n    },\r\n    ResultMetadata: {\r\n        enumValues: {\r\n            \"rerun\": 1,\r\n            \"flaky\": 2\r\n        }\r\n    },\r\n    ResultMetaDataDetails: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"flakyIdentifiers\": 1\r\n        }\r\n    },\r\n    ResultObjectType: {\r\n        enumValues: {\r\n            \"testSuite\": 0,\r\n            \"testPlan\": 1\r\n        }\r\n    },\r\n    ResultRetentionSettings: {},\r\n    ResultsByQueryResponse: {},\r\n    ResultsFilter: {},\r\n    ResultsSummaryByOutcome: {},\r\n    ResultSummary: {},\r\n    ResultUpdateRequest: {},\r\n    ResultUpdateRequestModel: {},\r\n    ResultUpdateResponse: {},\r\n    RunCreateModel: {},\r\n    RunStatistic: {},\r\n    RunSummary: {},\r\n    RunSummaryModel: {},\r\n    RunType: {\r\n        enumValues: {\r\n            \"unspecified\": 0,\r\n            \"normal\": 1,\r\n            \"blocking\": 2,\r\n            \"web\": 4,\r\n            \"mtrRunInitiatedFromWeb\": 8,\r\n            \"runWithDtlEnv\": 16,\r\n            \"noConfigRun\": 32\r\n        }\r\n    },\r\n    RunUpdateModel: {},\r\n    Service: {\r\n        enumValues: {\r\n            \"any\": 0,\r\n            \"tcm\": 1,\r\n            \"tfs\": 2\r\n        }\r\n    },\r\n    Session: {},\r\n    SessionLinkType: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"sessionInfo\": 1\r\n        }\r\n    },\r\n    SessionResult: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"passed\": 1,\r\n            \"failed\": 2\r\n        }\r\n    },\r\n    SessionTimelineType: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"queued\": 1,\r\n            \"completed\": 2,\r\n            \"started\": 3\r\n        }\r\n    },\r\n    SourceViewBuildCoverage: {},\r\n    SuiteExpand: {\r\n        enumValues: {\r\n            \"children\": 1,\r\n            \"defaultTesters\": 2\r\n        }\r\n    },\r\n    TCMServiceDataMigrationStatus: {\r\n        enumValues: {\r\n            \"notStarted\": 0,\r\n            \"inProgress\": 1,\r\n            \"completed\": 2,\r\n            \"failed\": 3\r\n        }\r\n    },\r\n    TestActionResult: {},\r\n    TestActionResult2: {},\r\n    TestActionResultModel: {},\r\n    TestAttachment: {},\r\n    TestAuthoringDetails: {},\r\n    TestCaseReference2: {},\r\n    TestCaseResult: {},\r\n    TestConfiguration: {},\r\n    TestConfigurationState: {\r\n        enumValues: {\r\n            \"active\": 1,\r\n            \"inactive\": 2\r\n        }\r\n    },\r\n    TestExecutionReportData: {},\r\n    TestExtensionField: {},\r\n    TestExtensionFieldDetails: {},\r\n    TestFailuresAnalysis: {},\r\n    TestHistoryQuery: {},\r\n    TestIterationDetailsModel: {},\r\n    TestLog: {},\r\n    TestLogReference: {},\r\n    TestLogScope: {\r\n        enumValues: {\r\n            \"run\": 0,\r\n            \"build\": 1,\r\n            \"release\": 2\r\n        }\r\n    },\r\n    TestLogStatus: {},\r\n    TestLogStatusCode: {\r\n        enumValues: {\r\n            \"success\": 0,\r\n            \"failed\": 1,\r\n            \"fileAlreadyExists\": 2,\r\n            \"invalidInput\": 3,\r\n            \"invalidFileName\": 4,\r\n            \"invalidContainer\": 5,\r\n            \"transferFailed\": 6,\r\n            \"featureDisabled\": 7,\r\n            \"buildDoesNotExist\": 8,\r\n            \"runDoesNotExist\": 9,\r\n            \"containerNotCreated\": 10,\r\n            \"apiNotSupported\": 11,\r\n            \"fileSizeExceeds\": 12,\r\n            \"containerNotFound\": 13,\r\n            \"fileNotFound\": 14,\r\n            \"directoryNotFound\": 15,\r\n            \"storageCapacityExceeded\": 16\r\n        }\r\n    },\r\n    TestLogStoreAttachment: {},\r\n    TestLogStoreEndpointDetails: {},\r\n    TestLogStoreEndpointType: {\r\n        enumValues: {\r\n            \"root\": 1,\r\n            \"file\": 2\r\n        }\r\n    },\r\n    TestLogStoreOperationType: {\r\n        enumValues: {\r\n            \"read\": 1,\r\n            \"create\": 2,\r\n            \"readAndCreate\": 3\r\n        }\r\n    },\r\n    TestLogType: {\r\n        enumValues: {\r\n            \"generalAttachment\": 1,\r\n            \"codeCoverage\": 2,\r\n            \"testImpact\": 3,\r\n            \"intermediate\": 4,\r\n            \"system\": 5,\r\n            \"mergedCoverageFile\": 6\r\n        }\r\n    },\r\n    TestMessageLogDetails: {},\r\n    TestMessageLogEntry: {},\r\n    TestMessageLogEntry2: {},\r\n    TestOutcome: {\r\n        enumValues: {\r\n            \"unspecified\": 0,\r\n            \"none\": 1,\r\n            \"passed\": 2,\r\n            \"failed\": 3,\r\n            \"inconclusive\": 4,\r\n            \"timeout\": 5,\r\n            \"aborted\": 6,\r\n            \"blocked\": 7,\r\n            \"notExecuted\": 8,\r\n            \"warning\": 9,\r\n            \"error\": 10,\r\n            \"notApplicable\": 11,\r\n            \"paused\": 12,\r\n            \"inProgress\": 13,\r\n            \"notImpacted\": 14,\r\n            \"maxValue\": 14\r\n        }\r\n    },\r\n    TestParameter2: {},\r\n    TestPlan: {},\r\n    TestPlanCloneRequest: {},\r\n    TestPlanHubData: {},\r\n    TestPlansWithSelection: {},\r\n    TestPoint: {},\r\n    TestPointReference: {},\r\n    TestPointsEvent: {},\r\n    TestPointsQuery: {},\r\n    TestPointState: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"ready\": 1,\r\n            \"completed\": 2,\r\n            \"notReady\": 3,\r\n            \"inProgress\": 4,\r\n            \"maxValue\": 4\r\n        }\r\n    },\r\n    TestPointsUpdatedEvent: {},\r\n    TestResult2: {},\r\n    TestResultAcrossProjectResponse: {},\r\n    TestResultAttachment: {},\r\n    TestResultGroupBy: {\r\n        enumValues: {\r\n            \"branch\": 1,\r\n            \"environment\": 2\r\n        }\r\n    },\r\n    TestResultHistory: {},\r\n    TestResultHistoryDetailsForGroup: {},\r\n    TestResultHistoryForGroup: {},\r\n    TestResultModelBase: {},\r\n    TestResultReset2: {},\r\n    TestResultsContext: {},\r\n    TestResultsContextType: {\r\n        enumValues: {\r\n            \"build\": 1,\r\n            \"release\": 2,\r\n            \"pipeline\": 3\r\n        }\r\n    },\r\n    TestResultsDetails: {},\r\n    TestResultsDetailsForGroup: {},\r\n    TestResultsEx2: {},\r\n    TestResultsQuery: {},\r\n    TestResultsSession: {},\r\n    TestResultsSessionState: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"running\": 1,\r\n            \"completed\": 2,\r\n            \"waiting\": 3,\r\n            \"cancelled\": 4\r\n        }\r\n    },\r\n    TestResultsSettings: {},\r\n    TestResultsSettingsType: {\r\n        enumValues: {\r\n            \"all\": 1,\r\n            \"flaky\": 2,\r\n            \"newTestLogging\": 3\r\n        }\r\n    },\r\n    TestResultSummary: {},\r\n    TestResultsUpdateSettings: {},\r\n    TestResultsWithWatermark: {},\r\n    TestResultTrendFilter: {},\r\n    TestRun: {},\r\n    TestRun2: {},\r\n    TestRunCanceledEvent: {},\r\n    TestRunCreatedEvent: {},\r\n    TestRunEvent: {},\r\n    TestRunEx2: {},\r\n    TestRunOutcome: {\r\n        enumValues: {\r\n            \"passed\": 0,\r\n            \"failed\": 1,\r\n            \"notImpacted\": 2,\r\n            \"others\": 3\r\n        }\r\n    },\r\n    TestRunPublishContext: {\r\n        enumValues: {\r\n            \"build\": 1,\r\n            \"release\": 2,\r\n            \"all\": 3\r\n        }\r\n    },\r\n    TestRunStartedEvent: {},\r\n    TestRunState: {\r\n        enumValues: {\r\n            \"unspecified\": 0,\r\n            \"notStarted\": 1,\r\n            \"inProgress\": 2,\r\n            \"completed\": 3,\r\n            \"aborted\": 4,\r\n            \"waiting\": 5,\r\n            \"needsInvestigation\": 6\r\n        }\r\n    },\r\n    TestRunStatistic: {},\r\n    TestRunSubstate: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"creatingEnvironment\": 1,\r\n            \"runningTests\": 2,\r\n            \"canceledByUser\": 3,\r\n            \"abortedBySystem\": 4,\r\n            \"timedOut\": 5,\r\n            \"pendingAnalysis\": 6,\r\n            \"analyzed\": 7,\r\n            \"cancellationInProgress\": 8\r\n        }\r\n    },\r\n    TestRunSummary2: {},\r\n    TestRunWithDtlEnvEvent: {},\r\n    TestSession: {},\r\n    TestSessionExploredWorkItemReference: {},\r\n    TestSessionSource: {\r\n        enumValues: {\r\n            \"unknown\": 0,\r\n            \"xtDesktop\": 1,\r\n            \"feedbackDesktop\": 2,\r\n            \"xtWeb\": 3,\r\n            \"feedbackWeb\": 4,\r\n            \"xtDesktop2\": 5,\r\n            \"sessionInsightsForAll\": 6\r\n        }\r\n    },\r\n    TestSessionState: {\r\n        enumValues: {\r\n            \"unspecified\": 0,\r\n            \"notStarted\": 1,\r\n            \"inProgress\": 2,\r\n            \"paused\": 3,\r\n            \"completed\": 4,\r\n            \"declined\": 5\r\n        }\r\n    },\r\n    TestSettings2: {},\r\n    TestSubResult: {},\r\n    TestSuite: {},\r\n    TestSummaryForWorkItem: {},\r\n    Timeline: {},\r\n    UpdatedProperties: {},\r\n    UpdateTestRunRequest: {},\r\n    UpdateTestRunResponse: {},\r\n    WorkItemToTestLinks: {},\r\n};\r\nexports.TypeInfo.AfnStrip.fields = {\r\n    creationDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.AggregatedDataForResultTrend.fields = {\r\n    resultsByOutcome: {\r\n        isDictionary: true,\r\n        dictionaryKeyEnumType: exports.TypeInfo.TestOutcome,\r\n        dictionaryValueTypeInfo: exports.TypeInfo.AggregatedResultsByOutcome\r\n    },\r\n    runSummaryByState: {\r\n        isDictionary: true,\r\n        dictionaryKeyEnumType: exports.TypeInfo.TestRunState,\r\n        dictionaryValueTypeInfo: exports.TypeInfo.AggregatedRunsByState\r\n    },\r\n    testResultsContext: {\r\n        typeInfo: exports.TypeInfo.TestResultsContext\r\n    }\r\n};\r\nexports.TypeInfo.AggregatedResultDetailsByOutcome.fields = {\r\n    outcome: {\r\n        enumType: exports.TypeInfo.TestOutcome\r\n    }\r\n};\r\nexports.TypeInfo.AggregatedResultsAnalysis.fields = {\r\n    notReportedResultsByOutcome: {\r\n        isDictionary: true,\r\n        dictionaryKeyEnumType: exports.TypeInfo.TestOutcome,\r\n        dictionaryValueTypeInfo: exports.TypeInfo.AggregatedResultsByOutcome\r\n    },\r\n    previousContext: {\r\n        typeInfo: exports.TypeInfo.TestResultsContext\r\n    },\r\n    resultsByOutcome: {\r\n        isDictionary: true,\r\n        dictionaryKeyEnumType: exports.TypeInfo.TestOutcome,\r\n        dictionaryValueTypeInfo: exports.TypeInfo.AggregatedResultsByOutcome\r\n    },\r\n    runSummaryByOutcome: {\r\n        isDictionary: true,\r\n        dictionaryKeyEnumType: exports.TypeInfo.TestRunOutcome,\r\n        dictionaryValueTypeInfo: exports.TypeInfo.AggregatedRunsByOutcome\r\n    },\r\n    runSummaryByState: {\r\n        isDictionary: true,\r\n        dictionaryKeyEnumType: exports.TypeInfo.TestRunState,\r\n        dictionaryValueTypeInfo: exports.TypeInfo.AggregatedRunsByState\r\n    }\r\n};\r\nexports.TypeInfo.AggregatedResultsByOutcome.fields = {\r\n    outcome: {\r\n        enumType: exports.TypeInfo.TestOutcome\r\n    }\r\n};\r\nexports.TypeInfo.AggregatedRunsByOutcome.fields = {\r\n    outcome: {\r\n        enumType: exports.TypeInfo.TestRunOutcome\r\n    }\r\n};\r\nexports.TypeInfo.AggregatedRunsByState.fields = {\r\n    resultsByOutcome: {\r\n        isDictionary: true,\r\n        dictionaryKeyEnumType: exports.TypeInfo.TestOutcome,\r\n        dictionaryValueTypeInfo: exports.TypeInfo.AggregatedResultsByOutcome\r\n    },\r\n    state: {\r\n        enumType: exports.TypeInfo.TestRunState\r\n    }\r\n};\r\nexports.TypeInfo.BatchResponse.fields = {\r\n    responses: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.Response\r\n    },\r\n};\r\nexports.TypeInfo.BuildConfiguration.fields = {\r\n    creationDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.BuildCoverage.fields = {\r\n    configuration: {\r\n        typeInfo: exports.TypeInfo.BuildConfiguration\r\n    }\r\n};\r\nexports.TypeInfo.BuildReference2.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.BulkResultUpdateRequest.fields = {\r\n    requests: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.ResultUpdateRequest\r\n    }\r\n};\r\nexports.TypeInfo.CloneOperationInformation.fields = {\r\n    completionDate: {\r\n        isDate: true,\r\n    },\r\n    creationDate: {\r\n        isDate: true,\r\n    },\r\n    resultObjectType: {\r\n        enumType: exports.TypeInfo.ResultObjectType\r\n    },\r\n    state: {\r\n        enumType: exports.TypeInfo.CloneOperationState\r\n    }\r\n};\r\nexports.TypeInfo.CodeCoverageSummary.fields = {\r\n    coverageDetailedSummaryStatus: {\r\n        enumType: exports.TypeInfo.CoverageDetailedSummaryStatus\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.CoverageSummaryStatus\r\n    }\r\n};\r\nexports.TypeInfo.Coverage2.fields = {\r\n    dateCreated: {\r\n        isDate: true,\r\n    },\r\n    dateModified: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.CreateTestMessageLogEntryRequest.fields = {\r\n    testMessageLogEntry: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestMessageLogEntry\r\n    }\r\n};\r\nexports.TypeInfo.CreateTestResultsRequest.fields = {\r\n    results: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.LegacyTestCaseResult\r\n    }\r\n};\r\nexports.TypeInfo.CreateTestRunRequest.fields = {\r\n    results: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.LegacyTestCaseResult\r\n    },\r\n    testRun: {\r\n        typeInfo: exports.TypeInfo.LegacyTestRun\r\n    },\r\n    testSettings: {\r\n        typeInfo: exports.TypeInfo.LegacyTestSettings\r\n    }\r\n};\r\nexports.TypeInfo.CustomTestFieldDefinition.fields = {\r\n    fieldType: {\r\n        enumType: exports.TypeInfo.CustomTestFieldType\r\n    },\r\n    scope: {\r\n        enumType: exports.TypeInfo.CustomTestFieldScope\r\n    }\r\n};\r\nexports.TypeInfo.DatedTestFieldData.fields = {\r\n    date: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.FailingSince.fields = {\r\n    date: {\r\n        isDate: true,\r\n    },\r\n    release: {\r\n        typeInfo: exports.TypeInfo.ReleaseReference\r\n    }\r\n};\r\nexports.TypeInfo.FetchTestResultsResponse.fields = {\r\n    actionResults: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestActionResult\r\n    },\r\n    attachments: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestResultAttachment\r\n    },\r\n    results: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.LegacyTestCaseResult\r\n    }\r\n};\r\nexports.TypeInfo.FlakyDetection.fields = {\r\n    flakyDetectionType: {\r\n        enumType: exports.TypeInfo.FlakyDetectionType\r\n    }\r\n};\r\nexports.TypeInfo.FlakySettings.fields = {\r\n    flakyDetection: {\r\n        typeInfo: exports.TypeInfo.FlakyDetection\r\n    }\r\n};\r\nexports.TypeInfo.LastResultDetails.fields = {\r\n    dateCompleted: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.LegacyBuildConfiguration.fields = {\r\n    completedDate: {\r\n        isDate: true,\r\n    },\r\n    createdDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.LegacyReleaseReference.fields = {\r\n    environmentCreationDate: {\r\n        isDate: true,\r\n    },\r\n    releaseCreationDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.LegacyTestCaseResult.fields = {\r\n    buildReference: {\r\n        typeInfo: exports.TypeInfo.LegacyBuildConfiguration\r\n    },\r\n    creationDate: {\r\n        isDate: true,\r\n    },\r\n    customFields: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestExtensionField\r\n    },\r\n    dateCompleted: {\r\n        isDate: true,\r\n    },\r\n    dateStarted: {\r\n        isDate: true,\r\n    },\r\n    failingSince: {\r\n        typeInfo: exports.TypeInfo.FailingSince\r\n    },\r\n    lastUpdated: {\r\n        isDate: true,\r\n    },\r\n    releaseReference: {\r\n        typeInfo: exports.TypeInfo.LegacyReleaseReference\r\n    },\r\n    resultGroupType: {\r\n        enumType: exports.TypeInfo.ResultGroupType\r\n    },\r\n    stackTrace: {\r\n        typeInfo: exports.TypeInfo.TestExtensionField\r\n    }\r\n};\r\nexports.TypeInfo.LegacyTestRun.fields = {\r\n    buildReference: {\r\n        typeInfo: exports.TypeInfo.LegacyBuildConfiguration\r\n    },\r\n    completeDate: {\r\n        isDate: true,\r\n    },\r\n    creationDate: {\r\n        isDate: true,\r\n    },\r\n    customFields: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestExtensionField\r\n    },\r\n    dueDate: {\r\n        isDate: true,\r\n    },\r\n    lastUpdated: {\r\n        isDate: true,\r\n    },\r\n    releaseReference: {\r\n        typeInfo: exports.TypeInfo.LegacyReleaseReference\r\n    },\r\n    startDate: {\r\n        isDate: true,\r\n    },\r\n    testMessageLogEntries: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestMessageLogDetails\r\n    }\r\n};\r\nexports.TypeInfo.LegacyTestSettings.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    },\r\n    lastUpdated: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.PipelineTestMetrics.fields = {\r\n    resultSummary: {\r\n        typeInfo: exports.TypeInfo.ResultSummary\r\n    },\r\n    runSummary: {\r\n        typeInfo: exports.TypeInfo.RunSummary\r\n    },\r\n    summaryAtChild: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.PipelineTestMetrics\r\n    }\r\n};\r\nexports.TypeInfo.PointLastResult.fields = {\r\n    lastUpdatedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.PointsResults2.fields = {\r\n    lastUpdated: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.QueryTestActionResultResponse.fields = {\r\n    testActionResults: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestActionResult\r\n    },\r\n    testAttachments: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestResultAttachment\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseReference.fields = {\r\n    creationDate: {\r\n        isDate: true,\r\n    },\r\n    environmentCreationDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.ReleaseReference2.fields = {\r\n    environmentCreationDate: {\r\n        isDate: true,\r\n    },\r\n    releaseCreationDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.RequirementsToTestsMapping2.fields = {\r\n    creationDate: {\r\n        isDate: true,\r\n    },\r\n    deletionDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.Response.fields = {};\r\nexports.TypeInfo.ResultRetentionSettings.fields = {\r\n    lastUpdatedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.ResultsByQueryResponse.fields = {\r\n    testResults: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.LegacyTestCaseResult\r\n    }\r\n};\r\nexports.TypeInfo.ResultsFilter.fields = {\r\n    executedIn: {\r\n        enumType: exports.TypeInfo.Service\r\n    },\r\n    maxCompleteDate: {\r\n        isDate: true,\r\n    },\r\n    testResultsContext: {\r\n        typeInfo: exports.TypeInfo.TestResultsContext\r\n    }\r\n};\r\nexports.TypeInfo.ResultsSummaryByOutcome.fields = {\r\n    aggregatedResultDetailsByOutcome: {\r\n        isDictionary: true,\r\n        dictionaryKeyEnumType: exports.TypeInfo.TestOutcome,\r\n        dictionaryValueTypeInfo: exports.TypeInfo.AggregatedResultDetailsByOutcome\r\n    }\r\n};\r\nexports.TypeInfo.ResultSummary.fields = {\r\n    resultSummaryByRunState: {\r\n        isDictionary: true,\r\n        dictionaryKeyEnumType: exports.TypeInfo.TestRunState,\r\n        dictionaryValueTypeInfo: exports.TypeInfo.ResultsSummaryByOutcome\r\n    }\r\n};\r\nexports.TypeInfo.ResultUpdateRequest.fields = {\r\n    actionResultDeletes: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestActionResult\r\n    },\r\n    actionResults: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestActionResult\r\n    },\r\n    attachments: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestResultAttachment\r\n    },\r\n    testCaseResult: {\r\n        typeInfo: exports.TypeInfo.LegacyTestCaseResult\r\n    }\r\n};\r\nexports.TypeInfo.ResultUpdateRequestModel.fields = {\r\n    actionResultDeletes: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestActionResultModel\r\n    },\r\n    actionResults: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestActionResultModel\r\n    }\r\n};\r\nexports.TypeInfo.ResultUpdateResponse.fields = {\r\n    lastUpdated: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.RunCreateModel.fields = {\r\n    buildReference: {\r\n        typeInfo: exports.TypeInfo.BuildConfiguration\r\n    },\r\n    releaseReference: {\r\n        typeInfo: exports.TypeInfo.ReleaseReference\r\n    },\r\n    runSummary: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.RunSummaryModel\r\n    }\r\n};\r\nexports.TypeInfo.RunStatistic.fields = {\r\n    resultMetadata: {\r\n        enumType: exports.TypeInfo.ResultMetadata\r\n    }\r\n};\r\nexports.TypeInfo.RunSummary.fields = {\r\n    runSummaryByOutcome: {\r\n        isDictionary: true,\r\n        dictionaryKeyEnumType: exports.TypeInfo.TestRunOutcome,\r\n    },\r\n    runSummaryByState: {\r\n        isDictionary: true,\r\n        dictionaryKeyEnumType: exports.TypeInfo.TestRunState,\r\n    }\r\n};\r\nexports.TypeInfo.RunSummaryModel.fields = {\r\n    testOutcome: {\r\n        enumType: exports.TypeInfo.TestOutcome\r\n    }\r\n};\r\nexports.TypeInfo.RunUpdateModel.fields = {\r\n    logEntries: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestMessageLogDetails\r\n    },\r\n    runSummary: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.RunSummaryModel\r\n    },\r\n    substate: {\r\n        enumType: exports.TypeInfo.TestRunSubstate\r\n    }\r\n};\r\nexports.TypeInfo.Session.fields = {\r\n    endTimeUTC: {\r\n        isDate: true,\r\n    },\r\n    result: {\r\n        enumType: exports.TypeInfo.SessionResult\r\n    },\r\n    startTimeUTC: {\r\n        isDate: true,\r\n    },\r\n    state: {\r\n        enumType: exports.TypeInfo.OneMRXSessionState\r\n    },\r\n};\r\nexports.TypeInfo.SourceViewBuildCoverage.fields = {\r\n    configuration: {\r\n        typeInfo: exports.TypeInfo.BuildConfiguration\r\n    }\r\n};\r\nexports.TypeInfo.TestActionResult.fields = {\r\n    creationDate: {\r\n        isDate: true,\r\n    },\r\n    dateCompleted: {\r\n        isDate: true,\r\n    },\r\n    dateStarted: {\r\n        isDate: true,\r\n    },\r\n    lastUpdated: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestActionResult2.fields = {\r\n    creationDate: {\r\n        isDate: true,\r\n    },\r\n    dateCompleted: {\r\n        isDate: true,\r\n    },\r\n    dateStarted: {\r\n        isDate: true,\r\n    },\r\n    lastUpdated: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestActionResultModel.fields = {\r\n    completedDate: {\r\n        isDate: true,\r\n    },\r\n    startedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestAttachment.fields = {\r\n    attachmentType: {\r\n        enumType: exports.TypeInfo.AttachmentType\r\n    },\r\n    createdDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestAuthoringDetails.fields = {\r\n    lastUpdated: {\r\n        isDate: true,\r\n    },\r\n    state: {\r\n        enumType: exports.TypeInfo.TestPointState\r\n    }\r\n};\r\nexports.TypeInfo.TestCaseReference2.fields = {\r\n    creationDate: {\r\n        isDate: true,\r\n    },\r\n    lastRefTestRunDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestCaseResult.fields = {\r\n    completedDate: {\r\n        isDate: true,\r\n    },\r\n    createdDate: {\r\n        isDate: true,\r\n    },\r\n    failingSince: {\r\n        typeInfo: exports.TypeInfo.FailingSince\r\n    },\r\n    iterationDetails: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestIterationDetailsModel\r\n    },\r\n    lastUpdatedDate: {\r\n        isDate: true,\r\n    },\r\n    releaseReference: {\r\n        typeInfo: exports.TypeInfo.ReleaseReference\r\n    },\r\n    resultGroupType: {\r\n        enumType: exports.TypeInfo.ResultGroupType\r\n    },\r\n    startedDate: {\r\n        isDate: true,\r\n    },\r\n    subResults: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestSubResult\r\n    }\r\n};\r\nexports.TypeInfo.TestConfiguration.fields = {\r\n    lastUpdatedDate: {\r\n        isDate: true,\r\n    },\r\n    state: {\r\n        enumType: exports.TypeInfo.TestConfigurationState\r\n    }\r\n};\r\nexports.TypeInfo.TestExecutionReportData.fields = {\r\n    reportData: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.DatedTestFieldData\r\n    }\r\n};\r\nexports.TypeInfo.TestExtensionField.fields = {\r\n    field: {\r\n        typeInfo: exports.TypeInfo.TestExtensionFieldDetails\r\n    }\r\n};\r\nexports.TypeInfo.TestExtensionFieldDetails.fields = {\r\n    type: {\r\n        enumType: SystemData.TypeInfo.SqlDbType\r\n    }\r\n};\r\nexports.TypeInfo.TestFailuresAnalysis.fields = {\r\n    previousContext: {\r\n        typeInfo: exports.TypeInfo.TestResultsContext\r\n    }\r\n};\r\nexports.TypeInfo.TestHistoryQuery.fields = {\r\n    groupBy: {\r\n        enumType: exports.TypeInfo.TestResultGroupBy\r\n    },\r\n    maxCompleteDate: {\r\n        isDate: true,\r\n    },\r\n    resultsForGroup: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestResultHistoryForGroup\r\n    }\r\n};\r\nexports.TypeInfo.TestIterationDetailsModel.fields = {\r\n    actionResults: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestActionResultModel\r\n    },\r\n    completedDate: {\r\n        isDate: true,\r\n    },\r\n    startedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestLog.fields = {\r\n    logReference: {\r\n        typeInfo: exports.TypeInfo.TestLogReference\r\n    },\r\n    modifiedOn: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestLogReference.fields = {\r\n    scope: {\r\n        enumType: exports.TypeInfo.TestLogScope\r\n    },\r\n    type: {\r\n        enumType: exports.TypeInfo.TestLogType\r\n    }\r\n};\r\nexports.TypeInfo.TestLogStatus.fields = {\r\n    status: {\r\n        enumType: exports.TypeInfo.TestLogStatusCode\r\n    }\r\n};\r\nexports.TypeInfo.TestLogStoreAttachment.fields = {\r\n    attachmentType: {\r\n        enumType: exports.TypeInfo.AttachmentType\r\n    },\r\n    createdDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestLogStoreEndpointDetails.fields = {\r\n    endpointType: {\r\n        enumType: exports.TypeInfo.TestLogStoreEndpointType\r\n    },\r\n    status: {\r\n        enumType: exports.TypeInfo.TestLogStatusCode\r\n    }\r\n};\r\nexports.TypeInfo.TestMessageLogDetails.fields = {\r\n    dateCreated: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestMessageLogEntry.fields = {\r\n    dateCreated: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestMessageLogEntry2.fields = {\r\n    dateCreated: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestParameter2.fields = {\r\n    creationDate: {\r\n        isDate: true,\r\n    },\r\n    dateModified: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestPlan.fields = {\r\n    endDate: {\r\n        isDate: true,\r\n    },\r\n    startDate: {\r\n        isDate: true,\r\n    },\r\n    updatedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestPlanCloneRequest.fields = {\r\n    destinationTestPlan: {\r\n        typeInfo: exports.TypeInfo.TestPlan\r\n    }\r\n};\r\nexports.TypeInfo.TestPlanHubData.fields = {\r\n    testPlan: {\r\n        typeInfo: exports.TypeInfo.TestPlan\r\n    },\r\n    testPoints: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestPoint\r\n    },\r\n    testSuites: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestSuite\r\n    }\r\n};\r\nexports.TypeInfo.TestPlansWithSelection.fields = {\r\n    plans: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestPlan\r\n    }\r\n};\r\nexports.TypeInfo.TestPoint.fields = {\r\n    lastResetToActive: {\r\n        isDate: true,\r\n    },\r\n    lastResultDetails: {\r\n        typeInfo: exports.TypeInfo.LastResultDetails\r\n    },\r\n    lastUpdatedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestPointReference.fields = {\r\n    state: {\r\n        enumType: exports.TypeInfo.TestPointState\r\n    }\r\n};\r\nexports.TypeInfo.TestPointsEvent.fields = {\r\n    testPoints: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestPointReference\r\n    }\r\n};\r\nexports.TypeInfo.TestPointsQuery.fields = {\r\n    points: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestPoint\r\n    }\r\n};\r\nexports.TypeInfo.TestPointsUpdatedEvent.fields = {\r\n    testPoints: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestPointReference\r\n    }\r\n};\r\nexports.TypeInfo.TestResult2.fields = {\r\n    creationDate: {\r\n        isDate: true,\r\n    },\r\n    dateCompleted: {\r\n        isDate: true,\r\n    },\r\n    dateStarted: {\r\n        isDate: true,\r\n    },\r\n    lastUpdated: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestResultAcrossProjectResponse.fields = {\r\n    testResult: {\r\n        typeInfo: exports.TypeInfo.LegacyTestCaseResult\r\n    }\r\n};\r\nexports.TypeInfo.TestResultAttachment.fields = {\r\n    attachmentType: {\r\n        enumType: exports.TypeInfo.AttachmentType\r\n    },\r\n    creationDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestResultHistory.fields = {\r\n    resultsForGroup: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestResultHistoryDetailsForGroup\r\n    }\r\n};\r\nexports.TypeInfo.TestResultHistoryDetailsForGroup.fields = {\r\n    latestResult: {\r\n        typeInfo: exports.TypeInfo.TestCaseResult\r\n    }\r\n};\r\nexports.TypeInfo.TestResultHistoryForGroup.fields = {\r\n    results: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestCaseResult\r\n    }\r\n};\r\nexports.TypeInfo.TestResultModelBase.fields = {\r\n    completedDate: {\r\n        isDate: true,\r\n    },\r\n    startedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestResultReset2.fields = {\r\n    dateModified: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestResultsContext.fields = {\r\n    contextType: {\r\n        enumType: exports.TypeInfo.TestResultsContextType\r\n    },\r\n    release: {\r\n        typeInfo: exports.TypeInfo.ReleaseReference\r\n    }\r\n};\r\nexports.TypeInfo.TestResultsDetails.fields = {\r\n    resultsForGroup: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestResultsDetailsForGroup\r\n    }\r\n};\r\nexports.TypeInfo.TestResultsDetailsForGroup.fields = {\r\n    results: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestCaseResult\r\n    },\r\n    resultsCountByOutcome: {\r\n        isDictionary: true,\r\n        dictionaryKeyEnumType: exports.TypeInfo.TestOutcome,\r\n        dictionaryValueTypeInfo: exports.TypeInfo.AggregatedResultsByOutcome\r\n    }\r\n};\r\nexports.TypeInfo.TestResultsEx2.fields = {\r\n    creationDate: {\r\n        isDate: true,\r\n    },\r\n    dateTimeValue: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestResultsQuery.fields = {\r\n    results: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestCaseResult\r\n    },\r\n    resultsFilter: {\r\n        typeInfo: exports.TypeInfo.ResultsFilter\r\n    }\r\n};\r\nexports.TypeInfo.TestResultsSession.fields = {\r\n    endTimeUTC: {\r\n        isDate: true,\r\n    },\r\n    result: {\r\n        enumType: exports.TypeInfo.SessionResult\r\n    },\r\n    startTimeUTC: {\r\n        isDate: true,\r\n    },\r\n    state: {\r\n        enumType: exports.TypeInfo.TestResultsSessionState\r\n    },\r\n};\r\nexports.TypeInfo.TestResultsSettings.fields = {\r\n    flakySettings: {\r\n        typeInfo: exports.TypeInfo.FlakySettings\r\n    }\r\n};\r\nexports.TypeInfo.TestResultSummary.fields = {\r\n    aggregatedResultsAnalysis: {\r\n        typeInfo: exports.TypeInfo.AggregatedResultsAnalysis\r\n    },\r\n    teamProject: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    },\r\n    testFailures: {\r\n        typeInfo: exports.TypeInfo.TestFailuresAnalysis\r\n    },\r\n    testResultsContext: {\r\n        typeInfo: exports.TypeInfo.TestResultsContext\r\n    }\r\n};\r\nexports.TypeInfo.TestResultsUpdateSettings.fields = {\r\n    flakySettings: {\r\n        typeInfo: exports.TypeInfo.FlakySettings\r\n    }\r\n};\r\nexports.TypeInfo.TestResultsWithWatermark.fields = {\r\n    changedDate: {\r\n        isDate: true,\r\n    },\r\n    pointsResults: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.PointsResults2\r\n    }\r\n};\r\nexports.TypeInfo.TestResultTrendFilter.fields = {\r\n    maxCompleteDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestRun.fields = {\r\n    buildConfiguration: {\r\n        typeInfo: exports.TypeInfo.BuildConfiguration\r\n    },\r\n    completedDate: {\r\n        isDate: true,\r\n    },\r\n    createdDate: {\r\n        isDate: true,\r\n    },\r\n    dueDate: {\r\n        isDate: true,\r\n    },\r\n    lastUpdatedDate: {\r\n        isDate: true,\r\n    },\r\n    release: {\r\n        typeInfo: exports.TypeInfo.ReleaseReference\r\n    },\r\n    runStatistics: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.RunStatistic\r\n    },\r\n    startedDate: {\r\n        isDate: true,\r\n    },\r\n    substate: {\r\n        enumType: exports.TypeInfo.TestRunSubstate\r\n    }\r\n};\r\nexports.TypeInfo.TestRun2.fields = {\r\n    completeDate: {\r\n        isDate: true,\r\n    },\r\n    creationDate: {\r\n        isDate: true,\r\n    },\r\n    deletedOn: {\r\n        isDate: true,\r\n    },\r\n    dueDate: {\r\n        isDate: true,\r\n    },\r\n    lastUpdated: {\r\n        isDate: true,\r\n    },\r\n    startDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestRunCanceledEvent.fields = {\r\n    testRun: {\r\n        typeInfo: exports.TypeInfo.TestRun\r\n    }\r\n};\r\nexports.TypeInfo.TestRunCreatedEvent.fields = {\r\n    testRun: {\r\n        typeInfo: exports.TypeInfo.TestRun\r\n    }\r\n};\r\nexports.TypeInfo.TestRunEvent.fields = {\r\n    testRun: {\r\n        typeInfo: exports.TypeInfo.TestRun\r\n    }\r\n};\r\nexports.TypeInfo.TestRunEx2.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    },\r\n    dateTimeValue: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestRunStartedEvent.fields = {\r\n    testRun: {\r\n        typeInfo: exports.TypeInfo.TestRun\r\n    }\r\n};\r\nexports.TypeInfo.TestRunStatistic.fields = {\r\n    runStatistics: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.RunStatistic\r\n    }\r\n};\r\nexports.TypeInfo.TestRunSummary2.fields = {\r\n    testRunCompletedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestRunWithDtlEnvEvent.fields = {\r\n    testRun: {\r\n        typeInfo: exports.TypeInfo.TestRun\r\n    }\r\n};\r\nexports.TypeInfo.TestSession.fields = {\r\n    endDate: {\r\n        isDate: true,\r\n    },\r\n    lastUpdatedDate: {\r\n        isDate: true,\r\n    },\r\n    source: {\r\n        enumType: exports.TypeInfo.TestSessionSource\r\n    },\r\n    startDate: {\r\n        isDate: true,\r\n    },\r\n    state: {\r\n        enumType: exports.TypeInfo.TestSessionState\r\n    }\r\n};\r\nexports.TypeInfo.TestSessionExploredWorkItemReference.fields = {\r\n    endTime: {\r\n        isDate: true,\r\n    },\r\n    startTime: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestSettings2.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    },\r\n    lastUpdatedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestSubResult.fields = {\r\n    completedDate: {\r\n        isDate: true,\r\n    },\r\n    lastUpdatedDate: {\r\n        isDate: true,\r\n    },\r\n    resultGroupType: {\r\n        enumType: exports.TypeInfo.ResultGroupType\r\n    },\r\n    startedDate: {\r\n        isDate: true,\r\n    },\r\n    subResults: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestSubResult\r\n    }\r\n};\r\nexports.TypeInfo.TestSuite.fields = {\r\n    children: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestSuite\r\n    },\r\n    lastPopulatedDate: {\r\n        isDate: true,\r\n    },\r\n    lastUpdatedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestSummaryForWorkItem.fields = {\r\n    summary: {\r\n        typeInfo: exports.TypeInfo.AggregatedDataForResultTrend\r\n    }\r\n};\r\nexports.TypeInfo.Timeline.fields = {\r\n    timestampUTC: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.UpdatedProperties.fields = {\r\n    lastUpdated: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.UpdateTestRunRequest.fields = {\r\n    attachmentsToAdd: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestResultAttachment\r\n    },\r\n    testRun: {\r\n        typeInfo: exports.TypeInfo.LegacyTestRun\r\n    }\r\n};\r\nexports.TypeInfo.UpdateTestRunResponse.fields = {\r\n    updatedProperties: {\r\n        typeInfo: exports.TypeInfo.UpdatedProperties\r\n    }\r\n};\r\nexports.TypeInfo.WorkItemToTestLinks.fields = {\r\n    executedIn: {\r\n        enumType: exports.TypeInfo.Service\r\n    }\r\n};\r\n","/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst TFS_TestManagement_Contracts = require(\"../interfaces/TestInterfaces\");\r\nconst TfsCoreInterfaces = require(\"../interfaces/CoreInterfaces\");\r\n/**\r\n * Exclude Flags for suite test case object. Exclude Flags exclude various objects from payload depending on the value passed\r\n */\r\nvar ExcludeFlags;\r\n(function (ExcludeFlags) {\r\n    /**\r\n     * To exclude nothing\r\n     */\r\n    ExcludeFlags[ExcludeFlags[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * To exclude point assignments, pass exclude = 1\r\n     */\r\n    ExcludeFlags[ExcludeFlags[\"PointAssignments\"] = 1] = \"PointAssignments\";\r\n    /**\r\n     * To exclude extra information (links, test plan, test suite), pass exclude = 2\r\n     */\r\n    ExcludeFlags[ExcludeFlags[\"ExtraInformation\"] = 2] = \"ExtraInformation\";\r\n})(ExcludeFlags = exports.ExcludeFlags || (exports.ExcludeFlags = {}));\r\nvar FailureType;\r\n(function (FailureType) {\r\n    FailureType[FailureType[\"None\"] = 0] = \"None\";\r\n    FailureType[FailureType[\"Regression\"] = 1] = \"Regression\";\r\n    FailureType[FailureType[\"New_Issue\"] = 2] = \"New_Issue\";\r\n    FailureType[FailureType[\"Known_Issue\"] = 3] = \"Known_Issue\";\r\n    FailureType[FailureType[\"Unknown\"] = 4] = \"Unknown\";\r\n    FailureType[FailureType[\"Null_Value\"] = 5] = \"Null_Value\";\r\n    FailureType[FailureType[\"MaxValue\"] = 5] = \"MaxValue\";\r\n})(FailureType = exports.FailureType || (exports.FailureType = {}));\r\nvar LastResolutionState;\r\n(function (LastResolutionState) {\r\n    LastResolutionState[LastResolutionState[\"None\"] = 0] = \"None\";\r\n    LastResolutionState[LastResolutionState[\"NeedsInvestigation\"] = 1] = \"NeedsInvestigation\";\r\n    LastResolutionState[LastResolutionState[\"TestIssue\"] = 2] = \"TestIssue\";\r\n    LastResolutionState[LastResolutionState[\"ProductIssue\"] = 3] = \"ProductIssue\";\r\n    LastResolutionState[LastResolutionState[\"ConfigurationIssue\"] = 4] = \"ConfigurationIssue\";\r\n    LastResolutionState[LastResolutionState[\"NullValue\"] = 5] = \"NullValue\";\r\n    LastResolutionState[LastResolutionState[\"MaxValue\"] = 5] = \"MaxValue\";\r\n})(LastResolutionState = exports.LastResolutionState || (exports.LastResolutionState = {}));\r\n/**\r\n * Enum representing the return code of data provider.\r\n */\r\nvar LibraryTestCasesDataReturnCode;\r\n(function (LibraryTestCasesDataReturnCode) {\r\n    LibraryTestCasesDataReturnCode[LibraryTestCasesDataReturnCode[\"Success\"] = 0] = \"Success\";\r\n    LibraryTestCasesDataReturnCode[LibraryTestCasesDataReturnCode[\"Error\"] = 1] = \"Error\";\r\n})(LibraryTestCasesDataReturnCode = exports.LibraryTestCasesDataReturnCode || (exports.LibraryTestCasesDataReturnCode = {}));\r\nvar Outcome;\r\n(function (Outcome) {\r\n    /**\r\n     * Only used during an update to preserve the existing value.\r\n     */\r\n    Outcome[Outcome[\"Unspecified\"] = 0] = \"Unspecified\";\r\n    /**\r\n     * Test has not been completed, or the test type does not report pass/failure.\r\n     */\r\n    Outcome[Outcome[\"None\"] = 1] = \"None\";\r\n    /**\r\n     * Test was executed w/o any issues.\r\n     */\r\n    Outcome[Outcome[\"Passed\"] = 2] = \"Passed\";\r\n    /**\r\n     * Test was executed, but there were issues. Issues may involve exceptions or failed assertions.\r\n     */\r\n    Outcome[Outcome[\"Failed\"] = 3] = \"Failed\";\r\n    /**\r\n     * Test has completed, but we can't say if it passed or failed. May be used for aborted tests...\r\n     */\r\n    Outcome[Outcome[\"Inconclusive\"] = 4] = \"Inconclusive\";\r\n    /**\r\n     * The test timed out\r\n     */\r\n    Outcome[Outcome[\"Timeout\"] = 5] = \"Timeout\";\r\n    /**\r\n     * Test was aborted. This was not caused by a user gesture, but rather by a framework decision.\r\n     */\r\n    Outcome[Outcome[\"Aborted\"] = 6] = \"Aborted\";\r\n    /**\r\n     * Test had it chance for been executed but was not, as ITestElement.IsRunnable == false.\r\n     */\r\n    Outcome[Outcome[\"Blocked\"] = 7] = \"Blocked\";\r\n    /**\r\n     * Test was not executed. This was caused by a user gesture - e.g. user hit stop button.\r\n     */\r\n    Outcome[Outcome[\"NotExecuted\"] = 8] = \"NotExecuted\";\r\n    /**\r\n     * To be used by Run level results. This is not a failure.\r\n     */\r\n    Outcome[Outcome[\"Warning\"] = 9] = \"Warning\";\r\n    /**\r\n     * There was a system error while we were trying to execute a test.\r\n     */\r\n    Outcome[Outcome[\"Error\"] = 10] = \"Error\";\r\n    /**\r\n     * Test is Not Applicable for execution.\r\n     */\r\n    Outcome[Outcome[\"NotApplicable\"] = 11] = \"NotApplicable\";\r\n    /**\r\n     * Test is paused.\r\n     */\r\n    Outcome[Outcome[\"Paused\"] = 12] = \"Paused\";\r\n    /**\r\n     * Test is currently executing. Added this for TCM charts\r\n     */\r\n    Outcome[Outcome[\"InProgress\"] = 13] = \"InProgress\";\r\n    /**\r\n     * Test is not impacted. Added fot TIA.\r\n     */\r\n    Outcome[Outcome[\"NotImpacted\"] = 14] = \"NotImpacted\";\r\n    Outcome[Outcome[\"MaxValue\"] = 14] = \"MaxValue\";\r\n})(Outcome = exports.Outcome || (exports.Outcome = {}));\r\nvar PointState;\r\n(function (PointState) {\r\n    /**\r\n     * Default\r\n     */\r\n    PointState[PointState[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * The test point needs to be executed in order for the test pass to be considered complete.  Either the test has not been run before or the previous run failed.\r\n     */\r\n    PointState[PointState[\"Ready\"] = 1] = \"Ready\";\r\n    /**\r\n     * The test has passed successfully and does not need to be re-run for the test pass to be considered complete.\r\n     */\r\n    PointState[PointState[\"Completed\"] = 2] = \"Completed\";\r\n    /**\r\n     * The test point needs to be executed but is not able to.\r\n     */\r\n    PointState[PointState[\"NotReady\"] = 3] = \"NotReady\";\r\n    /**\r\n     * The test is being executed.\r\n     */\r\n    PointState[PointState[\"InProgress\"] = 4] = \"InProgress\";\r\n    PointState[PointState[\"MaxValue\"] = 4] = \"MaxValue\";\r\n})(PointState = exports.PointState || (exports.PointState = {}));\r\nvar ResultState;\r\n(function (ResultState) {\r\n    /**\r\n     * Only used during an update to preserve the existing value.\r\n     */\r\n    ResultState[ResultState[\"Unspecified\"] = 0] = \"Unspecified\";\r\n    /**\r\n     * Test is in the execution queue, was not started yet.\r\n     */\r\n    ResultState[ResultState[\"Pending\"] = 1] = \"Pending\";\r\n    /**\r\n     * Test has been queued. This is applicable when a test case is queued for execution\r\n     */\r\n    ResultState[ResultState[\"Queued\"] = 2] = \"Queued\";\r\n    /**\r\n     * Test is currently executing.\r\n     */\r\n    ResultState[ResultState[\"InProgress\"] = 3] = \"InProgress\";\r\n    /**\r\n     * Test has been paused. This is applicable when a test case is paused by the user (For e.g. Manual Tester can pause the execution of the manual test case)\r\n     */\r\n    ResultState[ResultState[\"Paused\"] = 4] = \"Paused\";\r\n    /**\r\n     * Test has completed, but there is no quantitative measure of completeness. This may apply to load tests.\r\n     */\r\n    ResultState[ResultState[\"Completed\"] = 5] = \"Completed\";\r\n    ResultState[ResultState[\"MaxValue\"] = 5] = \"MaxValue\";\r\n})(ResultState = exports.ResultState || (exports.ResultState = {}));\r\nvar SuiteEntryTypes;\r\n(function (SuiteEntryTypes) {\r\n    /**\r\n     * Test Case\r\n     */\r\n    SuiteEntryTypes[SuiteEntryTypes[\"TestCase\"] = 0] = \"TestCase\";\r\n    /**\r\n     * Child Suite\r\n     */\r\n    SuiteEntryTypes[SuiteEntryTypes[\"Suite\"] = 1] = \"Suite\";\r\n})(SuiteEntryTypes = exports.SuiteEntryTypes || (exports.SuiteEntryTypes = {}));\r\n/**\r\n * Option to get details in response\r\n */\r\nvar SuiteExpand;\r\n(function (SuiteExpand) {\r\n    /**\r\n     * Dont include any of the expansions in output.\r\n     */\r\n    SuiteExpand[SuiteExpand[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Include children in response.\r\n     */\r\n    SuiteExpand[SuiteExpand[\"Children\"] = 1] = \"Children\";\r\n    /**\r\n     * Include default testers in response.\r\n     */\r\n    SuiteExpand[SuiteExpand[\"DefaultTesters\"] = 2] = \"DefaultTesters\";\r\n})(SuiteExpand = exports.SuiteExpand || (exports.SuiteExpand = {}));\r\nvar TestEntityTypes;\r\n(function (TestEntityTypes) {\r\n    TestEntityTypes[TestEntityTypes[\"TestCase\"] = 0] = \"TestCase\";\r\n    TestEntityTypes[TestEntityTypes[\"TestPoint\"] = 1] = \"TestPoint\";\r\n})(TestEntityTypes = exports.TestEntityTypes || (exports.TestEntityTypes = {}));\r\n/**\r\n * Enum used to define the queries used in Test Plans Library.\r\n */\r\nvar TestPlansLibraryQuery;\r\n(function (TestPlansLibraryQuery) {\r\n    TestPlansLibraryQuery[TestPlansLibraryQuery[\"None\"] = 0] = \"None\";\r\n    TestPlansLibraryQuery[TestPlansLibraryQuery[\"AllTestCases\"] = 1] = \"AllTestCases\";\r\n    TestPlansLibraryQuery[TestPlansLibraryQuery[\"TestCasesWithActiveBugs\"] = 2] = \"TestCasesWithActiveBugs\";\r\n    TestPlansLibraryQuery[TestPlansLibraryQuery[\"TestCasesNotLinkedToRequirements\"] = 3] = \"TestCasesNotLinkedToRequirements\";\r\n    TestPlansLibraryQuery[TestPlansLibraryQuery[\"TestCasesLinkedToRequirements\"] = 4] = \"TestCasesLinkedToRequirements\";\r\n    TestPlansLibraryQuery[TestPlansLibraryQuery[\"AllSharedSteps\"] = 11] = \"AllSharedSteps\";\r\n    TestPlansLibraryQuery[TestPlansLibraryQuery[\"SharedStepsNotLinkedToRequirement\"] = 12] = \"SharedStepsNotLinkedToRequirement\";\r\n})(TestPlansLibraryQuery = exports.TestPlansLibraryQuery || (exports.TestPlansLibraryQuery = {}));\r\nvar TestPlansLibraryWorkItemFilterMode;\r\n(function (TestPlansLibraryWorkItemFilterMode) {\r\n    /**\r\n     * Default. Have the field values separated by an OR clause.\r\n     */\r\n    TestPlansLibraryWorkItemFilterMode[TestPlansLibraryWorkItemFilterMode[\"Or\"] = 0] = \"Or\";\r\n    /**\r\n     * Have the field values separated by an AND clause.\r\n     */\r\n    TestPlansLibraryWorkItemFilterMode[TestPlansLibraryWorkItemFilterMode[\"And\"] = 1] = \"And\";\r\n})(TestPlansLibraryWorkItemFilterMode = exports.TestPlansLibraryWorkItemFilterMode || (exports.TestPlansLibraryWorkItemFilterMode = {}));\r\n/**\r\n * Type of TestSuite\r\n */\r\nvar TestSuiteType;\r\n(function (TestSuiteType) {\r\n    /**\r\n     * Default suite type\r\n     */\r\n    TestSuiteType[TestSuiteType[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Query Based test Suite\r\n     */\r\n    TestSuiteType[TestSuiteType[\"DynamicTestSuite\"] = 1] = \"DynamicTestSuite\";\r\n    /**\r\n     * Static Test Suite\r\n     */\r\n    TestSuiteType[TestSuiteType[\"StaticTestSuite\"] = 2] = \"StaticTestSuite\";\r\n    /**\r\n     * Requirement based Test Suite\r\n     */\r\n    TestSuiteType[TestSuiteType[\"RequirementTestSuite\"] = 3] = \"RequirementTestSuite\";\r\n})(TestSuiteType = exports.TestSuiteType || (exports.TestSuiteType = {}));\r\nvar UserFriendlyTestOutcome;\r\n(function (UserFriendlyTestOutcome) {\r\n    UserFriendlyTestOutcome[UserFriendlyTestOutcome[\"InProgress\"] = 0] = \"InProgress\";\r\n    UserFriendlyTestOutcome[UserFriendlyTestOutcome[\"Blocked\"] = 1] = \"Blocked\";\r\n    UserFriendlyTestOutcome[UserFriendlyTestOutcome[\"Failed\"] = 2] = \"Failed\";\r\n    UserFriendlyTestOutcome[UserFriendlyTestOutcome[\"Passed\"] = 3] = \"Passed\";\r\n    UserFriendlyTestOutcome[UserFriendlyTestOutcome[\"Ready\"] = 4] = \"Ready\";\r\n    UserFriendlyTestOutcome[UserFriendlyTestOutcome[\"NotApplicable\"] = 5] = \"NotApplicable\";\r\n    UserFriendlyTestOutcome[UserFriendlyTestOutcome[\"Paused\"] = 6] = \"Paused\";\r\n    UserFriendlyTestOutcome[UserFriendlyTestOutcome[\"Timeout\"] = 7] = \"Timeout\";\r\n    UserFriendlyTestOutcome[UserFriendlyTestOutcome[\"Warning\"] = 8] = \"Warning\";\r\n    UserFriendlyTestOutcome[UserFriendlyTestOutcome[\"Error\"] = 9] = \"Error\";\r\n    UserFriendlyTestOutcome[UserFriendlyTestOutcome[\"NotExecuted\"] = 10] = \"NotExecuted\";\r\n    UserFriendlyTestOutcome[UserFriendlyTestOutcome[\"Inconclusive\"] = 11] = \"Inconclusive\";\r\n    UserFriendlyTestOutcome[UserFriendlyTestOutcome[\"Aborted\"] = 12] = \"Aborted\";\r\n    UserFriendlyTestOutcome[UserFriendlyTestOutcome[\"None\"] = 13] = \"None\";\r\n    UserFriendlyTestOutcome[UserFriendlyTestOutcome[\"NotImpacted\"] = 14] = \"NotImpacted\";\r\n    UserFriendlyTestOutcome[UserFriendlyTestOutcome[\"Unspecified\"] = 15] = \"Unspecified\";\r\n    UserFriendlyTestOutcome[UserFriendlyTestOutcome[\"MaxValue\"] = 15] = \"MaxValue\";\r\n})(UserFriendlyTestOutcome = exports.UserFriendlyTestOutcome || (exports.UserFriendlyTestOutcome = {}));\r\nexports.TypeInfo = {\r\n    CloneOperationCommonResponse: {},\r\n    CloneTestCaseOperationInformation: {},\r\n    CloneTestPlanOperationInformation: {},\r\n    CloneTestPlanParams: {},\r\n    CloneTestSuiteOperationInformation: {},\r\n    DestinationTestPlanCloneParams: {},\r\n    ExcludeFlags: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"pointAssignments\": 1,\r\n            \"extraInformation\": 2\r\n        }\r\n    },\r\n    FailureType: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"regression\": 1,\r\n            \"new_Issue\": 2,\r\n            \"known_Issue\": 3,\r\n            \"unknown\": 4,\r\n            \"null_Value\": 5,\r\n            \"maxValue\": 5\r\n        }\r\n    },\r\n    LastResolutionState: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"needsInvestigation\": 1,\r\n            \"testIssue\": 2,\r\n            \"productIssue\": 3,\r\n            \"configurationIssue\": 4,\r\n            \"nullValue\": 5,\r\n            \"maxValue\": 5\r\n        }\r\n    },\r\n    LibraryTestCasesDataReturnCode: {\r\n        enumValues: {\r\n            \"success\": 0,\r\n            \"error\": 1\r\n        }\r\n    },\r\n    LibraryWorkItemsData: {},\r\n    LibraryWorkItemsDataProviderRequest: {},\r\n    Outcome: {\r\n        enumValues: {\r\n            \"unspecified\": 0,\r\n            \"none\": 1,\r\n            \"passed\": 2,\r\n            \"failed\": 3,\r\n            \"inconclusive\": 4,\r\n            \"timeout\": 5,\r\n            \"aborted\": 6,\r\n            \"blocked\": 7,\r\n            \"notExecuted\": 8,\r\n            \"warning\": 9,\r\n            \"error\": 10,\r\n            \"notApplicable\": 11,\r\n            \"paused\": 12,\r\n            \"inProgress\": 13,\r\n            \"notImpacted\": 14,\r\n            \"maxValue\": 14\r\n        }\r\n    },\r\n    PointState: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"ready\": 1,\r\n            \"completed\": 2,\r\n            \"notReady\": 3,\r\n            \"inProgress\": 4,\r\n            \"maxValue\": 4\r\n        }\r\n    },\r\n    Results: {},\r\n    ResultState: {\r\n        enumValues: {\r\n            \"unspecified\": 0,\r\n            \"pending\": 1,\r\n            \"queued\": 2,\r\n            \"inProgress\": 3,\r\n            \"paused\": 4,\r\n            \"completed\": 5,\r\n            \"maxValue\": 5\r\n        }\r\n    },\r\n    SourceTestplanResponse: {},\r\n    SourceTestSuiteResponse: {},\r\n    SuiteEntry: {},\r\n    SuiteEntryTypes: {\r\n        enumValues: {\r\n            \"testCase\": 0,\r\n            \"suite\": 1\r\n        }\r\n    },\r\n    SuiteEntryUpdateParams: {},\r\n    SuiteExpand: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"children\": 1,\r\n            \"defaultTesters\": 2\r\n        }\r\n    },\r\n    TestCase: {},\r\n    TestCaseAssociatedResult: {},\r\n    TestCaseResultsData: {},\r\n    TestConfiguration: {},\r\n    TestConfigurationCreateUpdateParameters: {},\r\n    TestEntityTypes: {\r\n        enumValues: {\r\n            \"testCase\": 0,\r\n            \"testPoint\": 1\r\n        }\r\n    },\r\n    TestPlan: {},\r\n    TestPlanCreateParams: {},\r\n    TestPlanDetailedReference: {},\r\n    TestPlansHubRefreshData: {},\r\n    TestPlansLibraryQuery: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"allTestCases\": 1,\r\n            \"testCasesWithActiveBugs\": 2,\r\n            \"testCasesNotLinkedToRequirements\": 3,\r\n            \"testCasesLinkedToRequirements\": 4,\r\n            \"allSharedSteps\": 11,\r\n            \"sharedStepsNotLinkedToRequirement\": 12\r\n        }\r\n    },\r\n    TestPlansLibraryWorkItemFilter: {},\r\n    TestPlansLibraryWorkItemFilterMode: {\r\n        enumValues: {\r\n            \"or\": 0,\r\n            \"and\": 1\r\n        }\r\n    },\r\n    TestPlanUpdateParams: {},\r\n    TestPoint: {},\r\n    TestPointResults: {},\r\n    TestPointUpdateParams: {},\r\n    TestSuite: {},\r\n    TestSuiteCreateParams: {},\r\n    TestSuiteReferenceWithProject: {},\r\n    TestSuiteType: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"dynamicTestSuite\": 1,\r\n            \"staticTestSuite\": 2,\r\n            \"requirementTestSuite\": 3\r\n        }\r\n    },\r\n    TestVariable: {},\r\n    UserFriendlyTestOutcome: {\r\n        enumValues: {\r\n            \"inProgress\": 0,\r\n            \"blocked\": 1,\r\n            \"failed\": 2,\r\n            \"passed\": 3,\r\n            \"ready\": 4,\r\n            \"notApplicable\": 5,\r\n            \"paused\": 6,\r\n            \"timeout\": 7,\r\n            \"warning\": 8,\r\n            \"error\": 9,\r\n            \"notExecuted\": 10,\r\n            \"inconclusive\": 11,\r\n            \"aborted\": 12,\r\n            \"none\": 13,\r\n            \"notImpacted\": 14,\r\n            \"unspecified\": 15,\r\n            \"maxValue\": 15\r\n        }\r\n    },\r\n};\r\nexports.TypeInfo.CloneOperationCommonResponse.fields = {\r\n    completionDate: {\r\n        isDate: true,\r\n    },\r\n    creationDate: {\r\n        isDate: true,\r\n    },\r\n    state: {\r\n        enumType: TFS_TestManagement_Contracts.TypeInfo.CloneOperationState\r\n    }\r\n};\r\nexports.TypeInfo.CloneTestCaseOperationInformation.fields = {\r\n    cloneOperationResponse: {\r\n        typeInfo: exports.TypeInfo.CloneOperationCommonResponse\r\n    },\r\n    destinationTestSuite: {\r\n        typeInfo: exports.TypeInfo.TestSuiteReferenceWithProject\r\n    },\r\n    sourceTestSuite: {\r\n        typeInfo: exports.TypeInfo.SourceTestSuiteResponse\r\n    }\r\n};\r\nexports.TypeInfo.CloneTestPlanOperationInformation.fields = {\r\n    cloneOperationResponse: {\r\n        typeInfo: exports.TypeInfo.CloneOperationCommonResponse\r\n    },\r\n    destinationTestPlan: {\r\n        typeInfo: exports.TypeInfo.TestPlan\r\n    },\r\n    sourceTestPlan: {\r\n        typeInfo: exports.TypeInfo.SourceTestplanResponse\r\n    }\r\n};\r\nexports.TypeInfo.CloneTestPlanParams.fields = {\r\n    destinationTestPlan: {\r\n        typeInfo: exports.TypeInfo.DestinationTestPlanCloneParams\r\n    }\r\n};\r\nexports.TypeInfo.CloneTestSuiteOperationInformation.fields = {\r\n    clonedTestSuite: {\r\n        typeInfo: exports.TypeInfo.TestSuiteReferenceWithProject\r\n    },\r\n    cloneOperationResponse: {\r\n        typeInfo: exports.TypeInfo.CloneOperationCommonResponse\r\n    },\r\n    destinationTestSuite: {\r\n        typeInfo: exports.TypeInfo.TestSuiteReferenceWithProject\r\n    },\r\n    sourceTestSuite: {\r\n        typeInfo: exports.TypeInfo.TestSuiteReferenceWithProject\r\n    }\r\n};\r\nexports.TypeInfo.DestinationTestPlanCloneParams.fields = {\r\n    endDate: {\r\n        isDate: true,\r\n    },\r\n    startDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.LibraryWorkItemsData.fields = {\r\n    returnCode: {\r\n        enumType: exports.TypeInfo.LibraryTestCasesDataReturnCode\r\n    }\r\n};\r\nexports.TypeInfo.LibraryWorkItemsDataProviderRequest.fields = {\r\n    filterValues: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestPlansLibraryWorkItemFilter\r\n    },\r\n    libraryQueryType: {\r\n        enumType: exports.TypeInfo.TestPlansLibraryQuery\r\n    }\r\n};\r\nexports.TypeInfo.Results.fields = {\r\n    outcome: {\r\n        enumType: exports.TypeInfo.Outcome\r\n    }\r\n};\r\nexports.TypeInfo.SourceTestplanResponse.fields = {\r\n    project: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    }\r\n};\r\nexports.TypeInfo.SourceTestSuiteResponse.fields = {\r\n    project: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    }\r\n};\r\nexports.TypeInfo.SuiteEntry.fields = {\r\n    suiteEntryType: {\r\n        enumType: exports.TypeInfo.SuiteEntryTypes\r\n    }\r\n};\r\nexports.TypeInfo.SuiteEntryUpdateParams.fields = {\r\n    suiteEntryType: {\r\n        enumType: exports.TypeInfo.SuiteEntryTypes\r\n    }\r\n};\r\nexports.TypeInfo.TestCase.fields = {\r\n    project: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    }\r\n};\r\nexports.TypeInfo.TestCaseAssociatedResult.fields = {\r\n    completedDate: {\r\n        isDate: true,\r\n    },\r\n    outcome: {\r\n        enumType: exports.TypeInfo.UserFriendlyTestOutcome\r\n    }\r\n};\r\nexports.TypeInfo.TestCaseResultsData.fields = {\r\n    results: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestCaseAssociatedResult\r\n    }\r\n};\r\nexports.TypeInfo.TestConfiguration.fields = {\r\n    project: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    },\r\n    state: {\r\n        enumType: TFS_TestManagement_Contracts.TypeInfo.TestConfigurationState\r\n    }\r\n};\r\nexports.TypeInfo.TestConfigurationCreateUpdateParameters.fields = {\r\n    state: {\r\n        enumType: TFS_TestManagement_Contracts.TypeInfo.TestConfigurationState\r\n    }\r\n};\r\nexports.TypeInfo.TestPlan.fields = {\r\n    endDate: {\r\n        isDate: true,\r\n    },\r\n    project: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    },\r\n    startDate: {\r\n        isDate: true,\r\n    },\r\n    updatedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestPlanCreateParams.fields = {\r\n    endDate: {\r\n        isDate: true,\r\n    },\r\n    startDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestPlanDetailedReference.fields = {\r\n    endDate: {\r\n        isDate: true,\r\n    },\r\n    startDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestPlansHubRefreshData.fields = {\r\n    testCases: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestCase\r\n    },\r\n    testPlan: {\r\n        typeInfo: exports.TypeInfo.TestPlanDetailedReference\r\n    },\r\n    testPoints: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestPoint\r\n    },\r\n    testSuites: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestSuite\r\n    }\r\n};\r\nexports.TypeInfo.TestPlansLibraryWorkItemFilter.fields = {\r\n    filterMode: {\r\n        enumType: exports.TypeInfo.TestPlansLibraryWorkItemFilterMode\r\n    }\r\n};\r\nexports.TypeInfo.TestPlanUpdateParams.fields = {\r\n    endDate: {\r\n        isDate: true,\r\n    },\r\n    startDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TestPoint.fields = {\r\n    lastResetToActive: {\r\n        isDate: true,\r\n    },\r\n    lastUpdatedDate: {\r\n        isDate: true,\r\n    },\r\n    project: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    },\r\n    results: {\r\n        typeInfo: exports.TypeInfo.TestPointResults\r\n    }\r\n};\r\nexports.TypeInfo.TestPointResults.fields = {\r\n    failureType: {\r\n        enumType: exports.TypeInfo.FailureType\r\n    },\r\n    lastResolutionState: {\r\n        enumType: exports.TypeInfo.LastResolutionState\r\n    },\r\n    lastResultDetails: {\r\n        typeInfo: TFS_TestManagement_Contracts.TypeInfo.LastResultDetails\r\n    },\r\n    lastResultState: {\r\n        enumType: exports.TypeInfo.ResultState\r\n    },\r\n    outcome: {\r\n        enumType: exports.TypeInfo.Outcome\r\n    },\r\n    state: {\r\n        enumType: exports.TypeInfo.PointState\r\n    }\r\n};\r\nexports.TypeInfo.TestPointUpdateParams.fields = {\r\n    results: {\r\n        typeInfo: exports.TypeInfo.Results\r\n    }\r\n};\r\nexports.TypeInfo.TestSuite.fields = {\r\n    children: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TestSuite\r\n    },\r\n    lastPopulatedDate: {\r\n        isDate: true,\r\n    },\r\n    lastUpdatedDate: {\r\n        isDate: true,\r\n    },\r\n    project: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    },\r\n    suiteType: {\r\n        enumType: exports.TypeInfo.TestSuiteType\r\n    }\r\n};\r\nexports.TypeInfo.TestSuiteCreateParams.fields = {\r\n    suiteType: {\r\n        enumType: exports.TypeInfo.TestSuiteType\r\n    }\r\n};\r\nexports.TypeInfo.TestSuiteReferenceWithProject.fields = {\r\n    project: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    }\r\n};\r\nexports.TypeInfo.TestVariable.fields = {\r\n    project: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    }\r\n};\r\n","/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst TfsCoreInterfaces = require(\"../interfaces/CoreInterfaces\");\r\nvar ItemContentType;\r\n(function (ItemContentType) {\r\n    ItemContentType[ItemContentType[\"RawText\"] = 0] = \"RawText\";\r\n    ItemContentType[ItemContentType[\"Base64Encoded\"] = 1] = \"Base64Encoded\";\r\n})(ItemContentType = exports.ItemContentType || (exports.ItemContentType = {}));\r\n/**\r\n * Options for Version handling.\r\n */\r\nvar TfvcVersionOption;\r\n(function (TfvcVersionOption) {\r\n    /**\r\n     * None.\r\n     */\r\n    TfvcVersionOption[TfvcVersionOption[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Return the previous version.\r\n     */\r\n    TfvcVersionOption[TfvcVersionOption[\"Previous\"] = 1] = \"Previous\";\r\n    /**\r\n     * Only usuable with versiontype MergeSource and integer versions, uses RenameSource identifier instead of Merge identifier.\r\n     */\r\n    TfvcVersionOption[TfvcVersionOption[\"UseRename\"] = 2] = \"UseRename\";\r\n})(TfvcVersionOption = exports.TfvcVersionOption || (exports.TfvcVersionOption = {}));\r\n/**\r\n * Type of Version object\r\n */\r\nvar TfvcVersionType;\r\n(function (TfvcVersionType) {\r\n    /**\r\n     * Version is treated as a ChangesetId.\r\n     */\r\n    TfvcVersionType[TfvcVersionType[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Version is treated as a ChangesetId.\r\n     */\r\n    TfvcVersionType[TfvcVersionType[\"Changeset\"] = 1] = \"Changeset\";\r\n    /**\r\n     * Version is treated as a Shelveset name and owner.\r\n     */\r\n    TfvcVersionType[TfvcVersionType[\"Shelveset\"] = 2] = \"Shelveset\";\r\n    /**\r\n     * Version is treated as a Change.\r\n     */\r\n    TfvcVersionType[TfvcVersionType[\"Change\"] = 3] = \"Change\";\r\n    /**\r\n     * Version is treated as a Date.\r\n     */\r\n    TfvcVersionType[TfvcVersionType[\"Date\"] = 4] = \"Date\";\r\n    /**\r\n     * If Version is defined the Latest of that Version will be used, if no version is defined the latest ChangesetId will be used.\r\n     */\r\n    TfvcVersionType[TfvcVersionType[\"Latest\"] = 5] = \"Latest\";\r\n    /**\r\n     * Version will be treated as a Tip, if no version is defined latest will be used.\r\n     */\r\n    TfvcVersionType[TfvcVersionType[\"Tip\"] = 6] = \"Tip\";\r\n    /**\r\n     * Version will be treated as a MergeSource.\r\n     */\r\n    TfvcVersionType[TfvcVersionType[\"MergeSource\"] = 7] = \"MergeSource\";\r\n})(TfvcVersionType = exports.TfvcVersionType || (exports.TfvcVersionType = {}));\r\nvar VersionControlChangeType;\r\n(function (VersionControlChangeType) {\r\n    VersionControlChangeType[VersionControlChangeType[\"None\"] = 0] = \"None\";\r\n    VersionControlChangeType[VersionControlChangeType[\"Add\"] = 1] = \"Add\";\r\n    VersionControlChangeType[VersionControlChangeType[\"Edit\"] = 2] = \"Edit\";\r\n    VersionControlChangeType[VersionControlChangeType[\"Encoding\"] = 4] = \"Encoding\";\r\n    VersionControlChangeType[VersionControlChangeType[\"Rename\"] = 8] = \"Rename\";\r\n    VersionControlChangeType[VersionControlChangeType[\"Delete\"] = 16] = \"Delete\";\r\n    VersionControlChangeType[VersionControlChangeType[\"Undelete\"] = 32] = \"Undelete\";\r\n    VersionControlChangeType[VersionControlChangeType[\"Branch\"] = 64] = \"Branch\";\r\n    VersionControlChangeType[VersionControlChangeType[\"Merge\"] = 128] = \"Merge\";\r\n    VersionControlChangeType[VersionControlChangeType[\"Lock\"] = 256] = \"Lock\";\r\n    VersionControlChangeType[VersionControlChangeType[\"Rollback\"] = 512] = \"Rollback\";\r\n    VersionControlChangeType[VersionControlChangeType[\"SourceRename\"] = 1024] = \"SourceRename\";\r\n    VersionControlChangeType[VersionControlChangeType[\"TargetRename\"] = 2048] = \"TargetRename\";\r\n    VersionControlChangeType[VersionControlChangeType[\"Property\"] = 4096] = \"Property\";\r\n    VersionControlChangeType[VersionControlChangeType[\"All\"] = 8191] = \"All\";\r\n})(VersionControlChangeType = exports.VersionControlChangeType || (exports.VersionControlChangeType = {}));\r\nvar VersionControlRecursionType;\r\n(function (VersionControlRecursionType) {\r\n    /**\r\n     * Only return the specified item.\r\n     */\r\n    VersionControlRecursionType[VersionControlRecursionType[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Return the specified item and its direct children.\r\n     */\r\n    VersionControlRecursionType[VersionControlRecursionType[\"OneLevel\"] = 1] = \"OneLevel\";\r\n    /**\r\n     * Return the specified item and its direct children, as well as recursive chains of nested child folders that only contain a single folder.\r\n     */\r\n    VersionControlRecursionType[VersionControlRecursionType[\"OneLevelPlusNestedEmptyFolders\"] = 4] = \"OneLevelPlusNestedEmptyFolders\";\r\n    /**\r\n     * Return specified item and all descendants\r\n     */\r\n    VersionControlRecursionType[VersionControlRecursionType[\"Full\"] = 120] = \"Full\";\r\n})(VersionControlRecursionType = exports.VersionControlRecursionType || (exports.VersionControlRecursionType = {}));\r\nexports.TypeInfo = {\r\n    Change: {},\r\n    GitRepository: {},\r\n    GitRepositoryRef: {},\r\n    ItemContent: {},\r\n    ItemContentType: {\r\n        enumValues: {\r\n            \"rawText\": 0,\r\n            \"base64Encoded\": 1\r\n        }\r\n    },\r\n    TfvcBranch: {},\r\n    TfvcBranchRef: {},\r\n    TfvcChange: {},\r\n    TfvcChangeset: {},\r\n    TfvcChangesetRef: {},\r\n    TfvcItem: {},\r\n    TfvcItemDescriptor: {},\r\n    TfvcItemRequestData: {},\r\n    TfvcLabel: {},\r\n    TfvcLabelRef: {},\r\n    TfvcShelveset: {},\r\n    TfvcShelvesetRef: {},\r\n    TfvcVersionDescriptor: {},\r\n    TfvcVersionOption: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"previous\": 1,\r\n            \"useRename\": 2\r\n        }\r\n    },\r\n    TfvcVersionType: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"changeset\": 1,\r\n            \"shelveset\": 2,\r\n            \"change\": 3,\r\n            \"date\": 4,\r\n            \"latest\": 5,\r\n            \"tip\": 6,\r\n            \"mergeSource\": 7\r\n        }\r\n    },\r\n    VersionControlChangeType: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"add\": 1,\r\n            \"edit\": 2,\r\n            \"encoding\": 4,\r\n            \"rename\": 8,\r\n            \"delete\": 16,\r\n            \"undelete\": 32,\r\n            \"branch\": 64,\r\n            \"merge\": 128,\r\n            \"lock\": 256,\r\n            \"rollback\": 512,\r\n            \"sourceRename\": 1024,\r\n            \"targetRename\": 2048,\r\n            \"property\": 4096,\r\n            \"all\": 8191\r\n        }\r\n    },\r\n    VersionControlProjectInfo: {},\r\n    VersionControlRecursionType: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"oneLevel\": 1,\r\n            \"oneLevelPlusNestedEmptyFolders\": 4,\r\n            \"full\": 120\r\n        }\r\n    },\r\n};\r\nexports.TypeInfo.Change.fields = {\r\n    changeType: {\r\n        enumType: exports.TypeInfo.VersionControlChangeType\r\n    },\r\n    newContent: {\r\n        typeInfo: exports.TypeInfo.ItemContent\r\n    }\r\n};\r\nexports.TypeInfo.GitRepository.fields = {\r\n    parentRepository: {\r\n        typeInfo: exports.TypeInfo.GitRepositoryRef\r\n    },\r\n    project: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    }\r\n};\r\nexports.TypeInfo.GitRepositoryRef.fields = {\r\n    project: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    }\r\n};\r\nexports.TypeInfo.ItemContent.fields = {\r\n    contentType: {\r\n        enumType: exports.TypeInfo.ItemContentType\r\n    }\r\n};\r\nexports.TypeInfo.TfvcBranch.fields = {\r\n    children: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TfvcBranch\r\n    },\r\n    createdDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TfvcBranchRef.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TfvcChange.fields = {\r\n    changeType: {\r\n        enumType: exports.TypeInfo.VersionControlChangeType\r\n    },\r\n    newContent: {\r\n        typeInfo: exports.TypeInfo.ItemContent\r\n    }\r\n};\r\nexports.TypeInfo.TfvcChangeset.fields = {\r\n    changes: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TfvcChange\r\n    },\r\n    createdDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TfvcChangesetRef.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TfvcItem.fields = {\r\n    changeDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TfvcItemDescriptor.fields = {\r\n    recursionLevel: {\r\n        enumType: exports.TypeInfo.VersionControlRecursionType\r\n    },\r\n    versionOption: {\r\n        enumType: exports.TypeInfo.TfvcVersionOption\r\n    },\r\n    versionType: {\r\n        enumType: exports.TypeInfo.TfvcVersionType\r\n    }\r\n};\r\nexports.TypeInfo.TfvcItemRequestData.fields = {\r\n    itemDescriptors: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TfvcItemDescriptor\r\n    }\r\n};\r\nexports.TypeInfo.TfvcLabel.fields = {\r\n    items: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TfvcItem\r\n    },\r\n    modifiedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TfvcLabelRef.fields = {\r\n    modifiedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TfvcShelveset.fields = {\r\n    changes: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TfvcChange\r\n    },\r\n    createdDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TfvcShelvesetRef.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TfvcVersionDescriptor.fields = {\r\n    versionOption: {\r\n        enumType: exports.TypeInfo.TfvcVersionOption\r\n    },\r\n    versionType: {\r\n        enumType: exports.TypeInfo.TfvcVersionType\r\n    }\r\n};\r\nexports.TypeInfo.VersionControlProjectInfo.fields = {\r\n    defaultSourceControlType: {\r\n        enumType: TfsCoreInterfaces.TypeInfo.SourceControlTypes\r\n    },\r\n    project: {\r\n        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference\r\n    }\r\n};\r\n","/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst GitInterfaces = require(\"../interfaces/GitInterfaces\");\r\n/**\r\n * Wiki types.\r\n */\r\nvar WikiType;\r\n(function (WikiType) {\r\n    /**\r\n     * Indicates that the wiki is provisioned for the team project\r\n     */\r\n    WikiType[WikiType[\"ProjectWiki\"] = 0] = \"ProjectWiki\";\r\n    /**\r\n     * Indicates that the wiki is published from a git repository\r\n     */\r\n    WikiType[WikiType[\"CodeWiki\"] = 1] = \"CodeWiki\";\r\n})(WikiType = exports.WikiType || (exports.WikiType = {}));\r\nexports.TypeInfo = {\r\n    Wiki: {},\r\n    WikiCreateBaseParameters: {},\r\n    WikiCreateParametersV2: {},\r\n    WikiPageDetail: {},\r\n    WikiPageStat: {},\r\n    WikiPageViewStats: {},\r\n    WikiType: {\r\n        enumValues: {\r\n            \"projectWiki\": 0,\r\n            \"codeWiki\": 1\r\n        }\r\n    },\r\n    WikiUpdateParameters: {},\r\n    WikiV2: {},\r\n};\r\nexports.TypeInfo.Wiki.fields = {\r\n    repository: {\r\n        typeInfo: GitInterfaces.TypeInfo.GitRepository\r\n    }\r\n};\r\nexports.TypeInfo.WikiCreateBaseParameters.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.WikiType\r\n    }\r\n};\r\nexports.TypeInfo.WikiCreateParametersV2.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.WikiType\r\n    },\r\n    version: {\r\n        typeInfo: GitInterfaces.TypeInfo.GitVersionDescriptor\r\n    }\r\n};\r\nexports.TypeInfo.WikiPageDetail.fields = {\r\n    viewStats: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.WikiPageStat\r\n    }\r\n};\r\nexports.TypeInfo.WikiPageStat.fields = {\r\n    day: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.WikiPageViewStats.fields = {\r\n    lastViewedTime: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.WikiUpdateParameters.fields = {\r\n    versions: {\r\n        isArray: true,\r\n        typeInfo: GitInterfaces.TypeInfo.GitVersionDescriptor\r\n    }\r\n};\r\nexports.TypeInfo.WikiV2.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.WikiType\r\n    },\r\n    versions: {\r\n        isArray: true,\r\n        typeInfo: GitInterfaces.TypeInfo.GitVersionDescriptor\r\n    }\r\n};\r\n","/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst SystemInterfaces = require(\"../interfaces/common/System\");\r\n/**\r\n * Definition of the type of backlog level\r\n */\r\nvar BacklogType;\r\n(function (BacklogType) {\r\n    /**\r\n     * Portfolio backlog level\r\n     */\r\n    BacklogType[BacklogType[\"Portfolio\"] = 0] = \"Portfolio\";\r\n    /**\r\n     * Requirement backlog level\r\n     */\r\n    BacklogType[BacklogType[\"Requirement\"] = 1] = \"Requirement\";\r\n    /**\r\n     * Task backlog level\r\n     */\r\n    BacklogType[BacklogType[\"Task\"] = 2] = \"Task\";\r\n})(BacklogType = exports.BacklogType || (exports.BacklogType = {}));\r\n/**\r\n * Determines what columns to include on the board badge\r\n */\r\nvar BoardBadgeColumnOptions;\r\n(function (BoardBadgeColumnOptions) {\r\n    /**\r\n     * Only include In Progress columns\r\n     */\r\n    BoardBadgeColumnOptions[BoardBadgeColumnOptions[\"InProgressColumns\"] = 0] = \"InProgressColumns\";\r\n    /**\r\n     * Include all columns\r\n     */\r\n    BoardBadgeColumnOptions[BoardBadgeColumnOptions[\"AllColumns\"] = 1] = \"AllColumns\";\r\n    /**\r\n     * Include a custom set of columns\r\n     */\r\n    BoardBadgeColumnOptions[BoardBadgeColumnOptions[\"CustomColumns\"] = 2] = \"CustomColumns\";\r\n})(BoardBadgeColumnOptions = exports.BoardBadgeColumnOptions || (exports.BoardBadgeColumnOptions = {}));\r\nvar BoardColumnType;\r\n(function (BoardColumnType) {\r\n    BoardColumnType[BoardColumnType[\"Incoming\"] = 0] = \"Incoming\";\r\n    BoardColumnType[BoardColumnType[\"InProgress\"] = 1] = \"InProgress\";\r\n    BoardColumnType[BoardColumnType[\"Outgoing\"] = 2] = \"Outgoing\";\r\n})(BoardColumnType = exports.BoardColumnType || (exports.BoardColumnType = {}));\r\n/**\r\n * The behavior of the work item types that are in the work item category specified in the BugWorkItems section in the Process Configuration\r\n */\r\nvar BugsBehavior;\r\n(function (BugsBehavior) {\r\n    BugsBehavior[BugsBehavior[\"Off\"] = 0] = \"Off\";\r\n    BugsBehavior[BugsBehavior[\"AsRequirements\"] = 1] = \"AsRequirements\";\r\n    BugsBehavior[BugsBehavior[\"AsTasks\"] = 2] = \"AsTasks\";\r\n})(BugsBehavior = exports.BugsBehavior || (exports.BugsBehavior = {}));\r\nvar FieldType;\r\n(function (FieldType) {\r\n    FieldType[FieldType[\"String\"] = 0] = \"String\";\r\n    FieldType[FieldType[\"PlainText\"] = 1] = \"PlainText\";\r\n    FieldType[FieldType[\"Integer\"] = 2] = \"Integer\";\r\n    FieldType[FieldType[\"DateTime\"] = 3] = \"DateTime\";\r\n    FieldType[FieldType[\"TreePath\"] = 4] = \"TreePath\";\r\n    FieldType[FieldType[\"Boolean\"] = 5] = \"Boolean\";\r\n    FieldType[FieldType[\"Double\"] = 6] = \"Double\";\r\n})(FieldType = exports.FieldType || (exports.FieldType = {}));\r\n/**\r\n * Enum for the various modes of identity picker\r\n */\r\nvar IdentityDisplayFormat;\r\n(function (IdentityDisplayFormat) {\r\n    /**\r\n     * Display avatar only\r\n     */\r\n    IdentityDisplayFormat[IdentityDisplayFormat[\"AvatarOnly\"] = 0] = \"AvatarOnly\";\r\n    /**\r\n     * Display Full name only\r\n     */\r\n    IdentityDisplayFormat[IdentityDisplayFormat[\"FullName\"] = 1] = \"FullName\";\r\n    /**\r\n     * Display Avatar and Full name\r\n     */\r\n    IdentityDisplayFormat[IdentityDisplayFormat[\"AvatarAndFullName\"] = 2] = \"AvatarAndFullName\";\r\n})(IdentityDisplayFormat = exports.IdentityDisplayFormat || (exports.IdentityDisplayFormat = {}));\r\n/**\r\n * Enum for the various types of plans\r\n */\r\nvar PlanType;\r\n(function (PlanType) {\r\n    PlanType[PlanType[\"DeliveryTimelineView\"] = 0] = \"DeliveryTimelineView\";\r\n})(PlanType = exports.PlanType || (exports.PlanType = {}));\r\n/**\r\n * Flag for permissions a user can have for this plan.\r\n */\r\nvar PlanUserPermissions;\r\n(function (PlanUserPermissions) {\r\n    /**\r\n     * None\r\n     */\r\n    PlanUserPermissions[PlanUserPermissions[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Permission to view this plan.\r\n     */\r\n    PlanUserPermissions[PlanUserPermissions[\"View\"] = 1] = \"View\";\r\n    /**\r\n     * Permission to update this plan.\r\n     */\r\n    PlanUserPermissions[PlanUserPermissions[\"Edit\"] = 2] = \"Edit\";\r\n    /**\r\n     * Permission to delete this plan.\r\n     */\r\n    PlanUserPermissions[PlanUserPermissions[\"Delete\"] = 4] = \"Delete\";\r\n    /**\r\n     * Permission to manage this plan.\r\n     */\r\n    PlanUserPermissions[PlanUserPermissions[\"Manage\"] = 8] = \"Manage\";\r\n    /**\r\n     * Full control permission for this plan.\r\n     */\r\n    PlanUserPermissions[PlanUserPermissions[\"AllPermissions\"] = 15] = \"AllPermissions\";\r\n})(PlanUserPermissions = exports.PlanUserPermissions || (exports.PlanUserPermissions = {}));\r\nvar TimeFrame;\r\n(function (TimeFrame) {\r\n    TimeFrame[TimeFrame[\"Past\"] = 0] = \"Past\";\r\n    TimeFrame[TimeFrame[\"Current\"] = 1] = \"Current\";\r\n    TimeFrame[TimeFrame[\"Future\"] = 2] = \"Future\";\r\n})(TimeFrame = exports.TimeFrame || (exports.TimeFrame = {}));\r\nvar TimelineCriteriaStatusCode;\r\n(function (TimelineCriteriaStatusCode) {\r\n    /**\r\n     * No error - filter is good.\r\n     */\r\n    TimelineCriteriaStatusCode[TimelineCriteriaStatusCode[\"OK\"] = 0] = \"OK\";\r\n    /**\r\n     * One of the filter clause is invalid.\r\n     */\r\n    TimelineCriteriaStatusCode[TimelineCriteriaStatusCode[\"InvalidFilterClause\"] = 1] = \"InvalidFilterClause\";\r\n    /**\r\n     * Unknown error.\r\n     */\r\n    TimelineCriteriaStatusCode[TimelineCriteriaStatusCode[\"Unknown\"] = 2] = \"Unknown\";\r\n})(TimelineCriteriaStatusCode = exports.TimelineCriteriaStatusCode || (exports.TimelineCriteriaStatusCode = {}));\r\nvar TimelineIterationStatusCode;\r\n(function (TimelineIterationStatusCode) {\r\n    /**\r\n     * No error - iteration data is good.\r\n     */\r\n    TimelineIterationStatusCode[TimelineIterationStatusCode[\"OK\"] = 0] = \"OK\";\r\n    /**\r\n     * This iteration overlaps with another iteration, no data is returned for this iteration.\r\n     */\r\n    TimelineIterationStatusCode[TimelineIterationStatusCode[\"IsOverlapping\"] = 1] = \"IsOverlapping\";\r\n})(TimelineIterationStatusCode = exports.TimelineIterationStatusCode || (exports.TimelineIterationStatusCode = {}));\r\nvar TimelineTeamStatusCode;\r\n(function (TimelineTeamStatusCode) {\r\n    /**\r\n     * No error - all data for team is good.\r\n     */\r\n    TimelineTeamStatusCode[TimelineTeamStatusCode[\"OK\"] = 0] = \"OK\";\r\n    /**\r\n     * Team does not exist or access is denied.\r\n     */\r\n    TimelineTeamStatusCode[TimelineTeamStatusCode[\"DoesntExistOrAccessDenied\"] = 1] = \"DoesntExistOrAccessDenied\";\r\n    /**\r\n     * Maximum number of teams was exceeded. No team data will be returned for this team.\r\n     */\r\n    TimelineTeamStatusCode[TimelineTeamStatusCode[\"MaxTeamsExceeded\"] = 2] = \"MaxTeamsExceeded\";\r\n    /**\r\n     * Maximum number of team fields (ie Area paths) have been exceeded. No team data will be returned for this team.\r\n     */\r\n    TimelineTeamStatusCode[TimelineTeamStatusCode[\"MaxTeamFieldsExceeded\"] = 3] = \"MaxTeamFieldsExceeded\";\r\n    /**\r\n     * Backlog does not exist or is missing crucial information.\r\n     */\r\n    TimelineTeamStatusCode[TimelineTeamStatusCode[\"BacklogInError\"] = 4] = \"BacklogInError\";\r\n    /**\r\n     * Team field value is not set for this team. No team data will be returned for this team\r\n     */\r\n    TimelineTeamStatusCode[TimelineTeamStatusCode[\"MissingTeamFieldValue\"] = 5] = \"MissingTeamFieldValue\";\r\n    /**\r\n     * Team does not have a single iteration with date range.\r\n     */\r\n    TimelineTeamStatusCode[TimelineTeamStatusCode[\"NoIterationsExist\"] = 6] = \"NoIterationsExist\";\r\n})(TimelineTeamStatusCode = exports.TimelineTeamStatusCode || (exports.TimelineTeamStatusCode = {}));\r\nexports.TypeInfo = {\r\n    BacklogConfiguration: {},\r\n    BacklogLevelConfiguration: {},\r\n    BacklogType: {\r\n        enumValues: {\r\n            \"portfolio\": 0,\r\n            \"requirement\": 1,\r\n            \"task\": 2\r\n        }\r\n    },\r\n    Board: {},\r\n    BoardBadgeColumnOptions: {\r\n        enumValues: {\r\n            \"inProgressColumns\": 0,\r\n            \"allColumns\": 1,\r\n            \"customColumns\": 2\r\n        }\r\n    },\r\n    BoardColumn: {},\r\n    BoardColumnType: {\r\n        enumValues: {\r\n            \"incoming\": 0,\r\n            \"inProgress\": 1,\r\n            \"outgoing\": 2\r\n        }\r\n    },\r\n    BugsBehavior: {\r\n        enumValues: {\r\n            \"off\": 0,\r\n            \"asRequirements\": 1,\r\n            \"asTasks\": 2\r\n        }\r\n    },\r\n    CapacityContractBase: {},\r\n    CapacityPatch: {},\r\n    CardFieldSettings: {},\r\n    CardSettings: {},\r\n    CreatePlan: {},\r\n    DateRange: {},\r\n    DeliveryViewData: {},\r\n    DeliveryViewPropertyCollection: {},\r\n    FieldInfo: {},\r\n    FieldType: {\r\n        enumValues: {\r\n            \"string\": 0,\r\n            \"plainText\": 1,\r\n            \"integer\": 2,\r\n            \"dateTime\": 3,\r\n            \"treePath\": 4,\r\n            \"boolean\": 5,\r\n            \"double\": 6\r\n        }\r\n    },\r\n    IdentityDisplayFormat: {\r\n        enumValues: {\r\n            \"avatarOnly\": 0,\r\n            \"fullName\": 1,\r\n            \"avatarAndFullName\": 2\r\n        }\r\n    },\r\n    Marker: {},\r\n    Plan: {},\r\n    PlanMetadata: {},\r\n    PlanType: {\r\n        enumValues: {\r\n            \"deliveryTimelineView\": 0\r\n        }\r\n    },\r\n    PlanUserPermissions: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"view\": 1,\r\n            \"edit\": 2,\r\n            \"delete\": 4,\r\n            \"manage\": 8,\r\n            \"allPermissions\": 15\r\n        }\r\n    },\r\n    TeamCapacity: {},\r\n    TeamIterationAttributes: {},\r\n    TeamMemberCapacity: {},\r\n    TeamMemberCapacityIdentityRef: {},\r\n    TeamSetting: {},\r\n    TeamSettingsDaysOff: {},\r\n    TeamSettingsDaysOffPatch: {},\r\n    TeamSettingsIteration: {},\r\n    TeamSettingsPatch: {},\r\n    TimeFrame: {\r\n        enumValues: {\r\n            \"past\": 0,\r\n            \"current\": 1,\r\n            \"future\": 2\r\n        }\r\n    },\r\n    TimelineCriteriaStatus: {},\r\n    TimelineCriteriaStatusCode: {\r\n        enumValues: {\r\n            \"ok\": 0,\r\n            \"invalidFilterClause\": 1,\r\n            \"unknown\": 2\r\n        }\r\n    },\r\n    TimelineIterationStatus: {},\r\n    TimelineIterationStatusCode: {\r\n        enumValues: {\r\n            \"ok\": 0,\r\n            \"isOverlapping\": 1\r\n        }\r\n    },\r\n    TimelineTeamData: {},\r\n    TimelineTeamIteration: {},\r\n    TimelineTeamStatus: {},\r\n    TimelineTeamStatusCode: {\r\n        enumValues: {\r\n            \"ok\": 0,\r\n            \"doesntExistOrAccessDenied\": 1,\r\n            \"maxTeamsExceeded\": 2,\r\n            \"maxTeamFieldsExceeded\": 3,\r\n            \"backlogInError\": 4,\r\n            \"missingTeamFieldValue\": 5,\r\n            \"noIterationsExist\": 6\r\n        }\r\n    },\r\n    UpdatePlan: {},\r\n};\r\nexports.TypeInfo.BacklogConfiguration.fields = {\r\n    bugsBehavior: {\r\n        enumType: exports.TypeInfo.BugsBehavior\r\n    },\r\n    portfolioBacklogs: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.BacklogLevelConfiguration\r\n    },\r\n    requirementBacklog: {\r\n        typeInfo: exports.TypeInfo.BacklogLevelConfiguration\r\n    },\r\n    taskBacklog: {\r\n        typeInfo: exports.TypeInfo.BacklogLevelConfiguration\r\n    }\r\n};\r\nexports.TypeInfo.BacklogLevelConfiguration.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.BacklogType\r\n    }\r\n};\r\nexports.TypeInfo.Board.fields = {\r\n    columns: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.BoardColumn\r\n    }\r\n};\r\nexports.TypeInfo.BoardColumn.fields = {\r\n    columnType: {\r\n        enumType: exports.TypeInfo.BoardColumnType\r\n    }\r\n};\r\nexports.TypeInfo.CapacityContractBase.fields = {\r\n    daysOff: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.DateRange\r\n    }\r\n};\r\nexports.TypeInfo.CapacityPatch.fields = {\r\n    daysOff: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.DateRange\r\n    }\r\n};\r\nexports.TypeInfo.CardFieldSettings.fields = {\r\n    additionalFields: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.FieldInfo\r\n    },\r\n    assignedToDisplayFormat: {\r\n        enumType: exports.TypeInfo.IdentityDisplayFormat\r\n    },\r\n    coreFields: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.FieldInfo\r\n    }\r\n};\r\nexports.TypeInfo.CardSettings.fields = {\r\n    fields: {\r\n        typeInfo: exports.TypeInfo.CardFieldSettings\r\n    }\r\n};\r\nexports.TypeInfo.CreatePlan.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.PlanType\r\n    }\r\n};\r\nexports.TypeInfo.DateRange.fields = {\r\n    end: {\r\n        isDate: true,\r\n    },\r\n    start: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.DeliveryViewData.fields = {\r\n    criteriaStatus: {\r\n        typeInfo: exports.TypeInfo.TimelineCriteriaStatus\r\n    },\r\n    endDate: {\r\n        isDate: true,\r\n    },\r\n    startDate: {\r\n        isDate: true,\r\n    },\r\n    teams: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TimelineTeamData\r\n    }\r\n};\r\nexports.TypeInfo.DeliveryViewPropertyCollection.fields = {\r\n    cardSettings: {\r\n        typeInfo: exports.TypeInfo.CardSettings\r\n    },\r\n    markers: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.Marker\r\n    }\r\n};\r\nexports.TypeInfo.FieldInfo.fields = {\r\n    fieldType: {\r\n        enumType: exports.TypeInfo.FieldType\r\n    }\r\n};\r\nexports.TypeInfo.Marker.fields = {\r\n    date: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.Plan.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    },\r\n    lastAccessed: {\r\n        isDate: true,\r\n    },\r\n    modifiedDate: {\r\n        isDate: true,\r\n    },\r\n    type: {\r\n        enumType: exports.TypeInfo.PlanType\r\n    },\r\n    userPermissions: {\r\n        enumType: exports.TypeInfo.PlanUserPermissions\r\n    }\r\n};\r\nexports.TypeInfo.PlanMetadata.fields = {\r\n    modifiedDate: {\r\n        isDate: true,\r\n    },\r\n    userPermissions: {\r\n        enumType: exports.TypeInfo.PlanUserPermissions\r\n    }\r\n};\r\nexports.TypeInfo.TeamCapacity.fields = {\r\n    teamMembers: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TeamMemberCapacityIdentityRef\r\n    }\r\n};\r\nexports.TypeInfo.TeamIterationAttributes.fields = {\r\n    finishDate: {\r\n        isDate: true,\r\n    },\r\n    startDate: {\r\n        isDate: true,\r\n    },\r\n    timeFrame: {\r\n        enumType: exports.TypeInfo.TimeFrame\r\n    }\r\n};\r\nexports.TypeInfo.TeamMemberCapacity.fields = {\r\n    daysOff: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.DateRange\r\n    }\r\n};\r\nexports.TypeInfo.TeamMemberCapacityIdentityRef.fields = {\r\n    daysOff: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.DateRange\r\n    }\r\n};\r\nexports.TypeInfo.TeamSetting.fields = {\r\n    backlogIteration: {\r\n        typeInfo: exports.TypeInfo.TeamSettingsIteration\r\n    },\r\n    bugsBehavior: {\r\n        enumType: exports.TypeInfo.BugsBehavior\r\n    },\r\n    defaultIteration: {\r\n        typeInfo: exports.TypeInfo.TeamSettingsIteration\r\n    },\r\n    workingDays: {\r\n        isArray: true,\r\n        enumType: SystemInterfaces.TypeInfo.DayOfWeek\r\n    }\r\n};\r\nexports.TypeInfo.TeamSettingsDaysOff.fields = {\r\n    daysOff: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.DateRange\r\n    }\r\n};\r\nexports.TypeInfo.TeamSettingsDaysOffPatch.fields = {\r\n    daysOff: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.DateRange\r\n    }\r\n};\r\nexports.TypeInfo.TeamSettingsIteration.fields = {\r\n    attributes: {\r\n        typeInfo: exports.TypeInfo.TeamIterationAttributes\r\n    }\r\n};\r\nexports.TypeInfo.TeamSettingsPatch.fields = {\r\n    bugsBehavior: {\r\n        enumType: exports.TypeInfo.BugsBehavior\r\n    },\r\n    workingDays: {\r\n        isArray: true,\r\n        enumType: SystemInterfaces.TypeInfo.DayOfWeek\r\n    }\r\n};\r\nexports.TypeInfo.TimelineCriteriaStatus.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.TimelineCriteriaStatusCode\r\n    }\r\n};\r\nexports.TypeInfo.TimelineIterationStatus.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.TimelineIterationStatusCode\r\n    }\r\n};\r\nexports.TypeInfo.TimelineTeamData.fields = {\r\n    iterations: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.TimelineTeamIteration\r\n    },\r\n    status: {\r\n        typeInfo: exports.TypeInfo.TimelineTeamStatus\r\n    }\r\n};\r\nexports.TypeInfo.TimelineTeamIteration.fields = {\r\n    finishDate: {\r\n        isDate: true,\r\n    },\r\n    startDate: {\r\n        isDate: true,\r\n    },\r\n    status: {\r\n        typeInfo: exports.TypeInfo.TimelineIterationStatus\r\n    }\r\n};\r\nexports.TypeInfo.TimelineTeamStatus.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.TimelineTeamStatusCode\r\n    }\r\n};\r\nexports.TypeInfo.UpdatePlan.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.PlanType\r\n    }\r\n};\r\n","/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Flag to control error policy in a batch classification nodes get request.\r\n */\r\nvar ClassificationNodesErrorPolicy;\r\n(function (ClassificationNodesErrorPolicy) {\r\n    ClassificationNodesErrorPolicy[ClassificationNodesErrorPolicy[\"Fail\"] = 1] = \"Fail\";\r\n    ClassificationNodesErrorPolicy[ClassificationNodesErrorPolicy[\"Omit\"] = 2] = \"Omit\";\r\n})(ClassificationNodesErrorPolicy = exports.ClassificationNodesErrorPolicy || (exports.ClassificationNodesErrorPolicy = {}));\r\n/**\r\n * Specifies the additional data retrieval options for work item comments.\r\n */\r\nvar CommentExpandOptions;\r\n(function (CommentExpandOptions) {\r\n    CommentExpandOptions[CommentExpandOptions[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Include comment reactions.\r\n     */\r\n    CommentExpandOptions[CommentExpandOptions[\"Reactions\"] = 1] = \"Reactions\";\r\n    /**\r\n     * Include the rendered text (html) in addition to MD text.\r\n     */\r\n    CommentExpandOptions[CommentExpandOptions[\"RenderedText\"] = 8] = \"RenderedText\";\r\n    /**\r\n     * If specified, then ONLY rendered text (html) will be returned, w/o markdown. Supposed to be used internally from data provides for optimization purposes.\r\n     */\r\n    CommentExpandOptions[CommentExpandOptions[\"RenderedTextOnly\"] = 16] = \"RenderedTextOnly\";\r\n    CommentExpandOptions[CommentExpandOptions[\"All\"] = -17] = \"All\";\r\n})(CommentExpandOptions = exports.CommentExpandOptions || (exports.CommentExpandOptions = {}));\r\n/**\r\n * Represents the possible types for the comment format. Should be in sync with WorkItemCommentFormat.cs\r\n */\r\nvar CommentFormat;\r\n(function (CommentFormat) {\r\n    CommentFormat[CommentFormat[\"Markdown\"] = 0] = \"Markdown\";\r\n    CommentFormat[CommentFormat[\"Html\"] = 1] = \"Html\";\r\n})(CommentFormat = exports.CommentFormat || (exports.CommentFormat = {}));\r\n/**\r\n * Represents different reaction types for a work item comment.\r\n */\r\nvar CommentReactionType;\r\n(function (CommentReactionType) {\r\n    CommentReactionType[CommentReactionType[\"Like\"] = 0] = \"Like\";\r\n    CommentReactionType[CommentReactionType[\"Dislike\"] = 1] = \"Dislike\";\r\n    CommentReactionType[CommentReactionType[\"Heart\"] = 2] = \"Heart\";\r\n    CommentReactionType[CommentReactionType[\"Hooray\"] = 3] = \"Hooray\";\r\n    CommentReactionType[CommentReactionType[\"Smile\"] = 4] = \"Smile\";\r\n    CommentReactionType[CommentReactionType[\"Confused\"] = 5] = \"Confused\";\r\n})(CommentReactionType = exports.CommentReactionType || (exports.CommentReactionType = {}));\r\nvar CommentSortOrder;\r\n(function (CommentSortOrder) {\r\n    /**\r\n     * The results will be sorted in Ascending order.\r\n     */\r\n    CommentSortOrder[CommentSortOrder[\"Asc\"] = 1] = \"Asc\";\r\n    /**\r\n     * The results will be sorted in Descending order.\r\n     */\r\n    CommentSortOrder[CommentSortOrder[\"Desc\"] = 2] = \"Desc\";\r\n})(CommentSortOrder = exports.CommentSortOrder || (exports.CommentSortOrder = {}));\r\n/**\r\n * Enum for field types.\r\n */\r\nvar FieldType;\r\n(function (FieldType) {\r\n    /**\r\n     * String field type.\r\n     */\r\n    FieldType[FieldType[\"String\"] = 0] = \"String\";\r\n    /**\r\n     * Integer field type.\r\n     */\r\n    FieldType[FieldType[\"Integer\"] = 1] = \"Integer\";\r\n    /**\r\n     * Datetime field type.\r\n     */\r\n    FieldType[FieldType[\"DateTime\"] = 2] = \"DateTime\";\r\n    /**\r\n     * Plain text field type.\r\n     */\r\n    FieldType[FieldType[\"PlainText\"] = 3] = \"PlainText\";\r\n    /**\r\n     * HTML (Multiline) field type.\r\n     */\r\n    FieldType[FieldType[\"Html\"] = 4] = \"Html\";\r\n    /**\r\n     * Treepath field type.\r\n     */\r\n    FieldType[FieldType[\"TreePath\"] = 5] = \"TreePath\";\r\n    /**\r\n     * History field type.\r\n     */\r\n    FieldType[FieldType[\"History\"] = 6] = \"History\";\r\n    /**\r\n     * Double field type.\r\n     */\r\n    FieldType[FieldType[\"Double\"] = 7] = \"Double\";\r\n    /**\r\n     * Guid field type.\r\n     */\r\n    FieldType[FieldType[\"Guid\"] = 8] = \"Guid\";\r\n    /**\r\n     * Boolean field type.\r\n     */\r\n    FieldType[FieldType[\"Boolean\"] = 9] = \"Boolean\";\r\n    /**\r\n     * Identity field type.\r\n     */\r\n    FieldType[FieldType[\"Identity\"] = 10] = \"Identity\";\r\n    /**\r\n     * String picklist field type. When creating a string picklist field from REST API, use \"String\" FieldType.\r\n     */\r\n    FieldType[FieldType[\"PicklistString\"] = 11] = \"PicklistString\";\r\n    /**\r\n     * Integer picklist field type. When creating a integer picklist field from REST API, use \"Integer\" FieldType.\r\n     */\r\n    FieldType[FieldType[\"PicklistInteger\"] = 12] = \"PicklistInteger\";\r\n    /**\r\n     * Double picklist field type. When creating a double picklist field from REST API, use \"Double\" FieldType.\r\n     */\r\n    FieldType[FieldType[\"PicklistDouble\"] = 13] = \"PicklistDouble\";\r\n})(FieldType = exports.FieldType || (exports.FieldType = {}));\r\n/**\r\n * Enum for field usages.\r\n */\r\nvar FieldUsage;\r\n(function (FieldUsage) {\r\n    /**\r\n     * Empty usage.\r\n     */\r\n    FieldUsage[FieldUsage[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Work item field usage.\r\n     */\r\n    FieldUsage[FieldUsage[\"WorkItem\"] = 1] = \"WorkItem\";\r\n    /**\r\n     * Work item link field usage.\r\n     */\r\n    FieldUsage[FieldUsage[\"WorkItemLink\"] = 2] = \"WorkItemLink\";\r\n    /**\r\n     * Treenode field usage.\r\n     */\r\n    FieldUsage[FieldUsage[\"Tree\"] = 3] = \"Tree\";\r\n    /**\r\n     * Work Item Type Extension usage.\r\n     */\r\n    FieldUsage[FieldUsage[\"WorkItemTypeExtension\"] = 4] = \"WorkItemTypeExtension\";\r\n})(FieldUsage = exports.FieldUsage || (exports.FieldUsage = {}));\r\n/**\r\n * Flag to expand types of fields.\r\n */\r\nvar GetFieldsExpand;\r\n(function (GetFieldsExpand) {\r\n    /**\r\n     * Default behavior.\r\n     */\r\n    GetFieldsExpand[GetFieldsExpand[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Adds extension fields to the response.\r\n     */\r\n    GetFieldsExpand[GetFieldsExpand[\"ExtensionFields\"] = 1] = \"ExtensionFields\";\r\n    /**\r\n     * Includes fields that have been deleted.\r\n     */\r\n    GetFieldsExpand[GetFieldsExpand[\"IncludeDeleted\"] = 2] = \"IncludeDeleted\";\r\n})(GetFieldsExpand = exports.GetFieldsExpand || (exports.GetFieldsExpand = {}));\r\n/**\r\n * The link query mode which determines the behavior of the query.\r\n */\r\nvar LinkQueryMode;\r\n(function (LinkQueryMode) {\r\n    /**\r\n     * Returns flat list of work items.\r\n     */\r\n    LinkQueryMode[LinkQueryMode[\"WorkItems\"] = 0] = \"WorkItems\";\r\n    /**\r\n     * Returns work items where the source, target, and link criteria are all satisfied.\r\n     */\r\n    LinkQueryMode[LinkQueryMode[\"LinksOneHopMustContain\"] = 1] = \"LinksOneHopMustContain\";\r\n    /**\r\n     * Returns work items that satisfy the source and link criteria, even if no linked work item satisfies the target criteria.\r\n     */\r\n    LinkQueryMode[LinkQueryMode[\"LinksOneHopMayContain\"] = 2] = \"LinksOneHopMayContain\";\r\n    /**\r\n     * Returns work items that satisfy the source, only if no linked work item satisfies the link and target criteria.\r\n     */\r\n    LinkQueryMode[LinkQueryMode[\"LinksOneHopDoesNotContain\"] = 3] = \"LinksOneHopDoesNotContain\";\r\n    LinkQueryMode[LinkQueryMode[\"LinksRecursiveMustContain\"] = 4] = \"LinksRecursiveMustContain\";\r\n    /**\r\n     * Returns work items a hierarchy of work items that by default satisfy the source\r\n     */\r\n    LinkQueryMode[LinkQueryMode[\"LinksRecursiveMayContain\"] = 5] = \"LinksRecursiveMayContain\";\r\n    LinkQueryMode[LinkQueryMode[\"LinksRecursiveDoesNotContain\"] = 6] = \"LinksRecursiveDoesNotContain\";\r\n})(LinkQueryMode = exports.LinkQueryMode || (exports.LinkQueryMode = {}));\r\nvar LogicalOperation;\r\n(function (LogicalOperation) {\r\n    LogicalOperation[LogicalOperation[\"NONE\"] = 0] = \"NONE\";\r\n    LogicalOperation[LogicalOperation[\"AND\"] = 1] = \"AND\";\r\n    LogicalOperation[LogicalOperation[\"OR\"] = 2] = \"OR\";\r\n})(LogicalOperation = exports.LogicalOperation || (exports.LogicalOperation = {}));\r\n/**\r\n * Enumerates the possible provisioning actions that can be triggered on process template update.\r\n */\r\nvar ProvisioningActionType;\r\n(function (ProvisioningActionType) {\r\n    ProvisioningActionType[ProvisioningActionType[\"Import\"] = 0] = \"Import\";\r\n    ProvisioningActionType[ProvisioningActionType[\"Validate\"] = 1] = \"Validate\";\r\n})(ProvisioningActionType = exports.ProvisioningActionType || (exports.ProvisioningActionType = {}));\r\n/**\r\n * Enum to control error policy in a query batch request.\r\n */\r\nvar QueryErrorPolicy;\r\n(function (QueryErrorPolicy) {\r\n    QueryErrorPolicy[QueryErrorPolicy[\"Fail\"] = 1] = \"Fail\";\r\n    QueryErrorPolicy[QueryErrorPolicy[\"Omit\"] = 2] = \"Omit\";\r\n})(QueryErrorPolicy = exports.QueryErrorPolicy || (exports.QueryErrorPolicy = {}));\r\n/**\r\n * Determines which set of additional query properties to display\r\n */\r\nvar QueryExpand;\r\n(function (QueryExpand) {\r\n    /**\r\n     * Expands Columns, Links and ChangeInfo\r\n     */\r\n    QueryExpand[QueryExpand[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Expands Columns, Links,  ChangeInfo and WIQL text\r\n     */\r\n    QueryExpand[QueryExpand[\"Wiql\"] = 1] = \"Wiql\";\r\n    /**\r\n     * Expands Columns, Links, ChangeInfo, WIQL text and clauses\r\n     */\r\n    QueryExpand[QueryExpand[\"Clauses\"] = 2] = \"Clauses\";\r\n    /**\r\n     * Expands all properties\r\n     */\r\n    QueryExpand[QueryExpand[\"All\"] = 3] = \"All\";\r\n    /**\r\n     * Displays minimal properties and the WIQL text\r\n     */\r\n    QueryExpand[QueryExpand[\"Minimal\"] = 4] = \"Minimal\";\r\n})(QueryExpand = exports.QueryExpand || (exports.QueryExpand = {}));\r\nvar QueryOption;\r\n(function (QueryOption) {\r\n    QueryOption[QueryOption[\"Doing\"] = 1] = \"Doing\";\r\n    QueryOption[QueryOption[\"Done\"] = 2] = \"Done\";\r\n    QueryOption[QueryOption[\"Followed\"] = 3] = \"Followed\";\r\n})(QueryOption = exports.QueryOption || (exports.QueryOption = {}));\r\n/**\r\n * Determines whether a tree query matches parents or children first.\r\n */\r\nvar QueryRecursionOption;\r\n(function (QueryRecursionOption) {\r\n    /**\r\n     * Returns work items that satisfy the source, even if no linked work item satisfies the target and link criteria.\r\n     */\r\n    QueryRecursionOption[QueryRecursionOption[\"ParentFirst\"] = 0] = \"ParentFirst\";\r\n    /**\r\n     * Returns work items that satisfy the target criteria, even if no work item satisfies the source and link criteria.\r\n     */\r\n    QueryRecursionOption[QueryRecursionOption[\"ChildFirst\"] = 1] = \"ChildFirst\";\r\n})(QueryRecursionOption = exports.QueryRecursionOption || (exports.QueryRecursionOption = {}));\r\n/**\r\n * The query result type\r\n */\r\nvar QueryResultType;\r\n(function (QueryResultType) {\r\n    /**\r\n     * A list of work items (for flat queries).\r\n     */\r\n    QueryResultType[QueryResultType[\"WorkItem\"] = 1] = \"WorkItem\";\r\n    /**\r\n     * A list of work item links (for OneHop and Tree queries).\r\n     */\r\n    QueryResultType[QueryResultType[\"WorkItemLink\"] = 2] = \"WorkItemLink\";\r\n})(QueryResultType = exports.QueryResultType || (exports.QueryResultType = {}));\r\n/**\r\n * The type of query.\r\n */\r\nvar QueryType;\r\n(function (QueryType) {\r\n    /**\r\n     * Gets a flat list of work items.\r\n     */\r\n    QueryType[QueryType[\"Flat\"] = 1] = \"Flat\";\r\n    /**\r\n     * Gets a tree of work items showing their link hierarchy.\r\n     */\r\n    QueryType[QueryType[\"Tree\"] = 2] = \"Tree\";\r\n    /**\r\n     * Gets a list of work items and their direct links.\r\n     */\r\n    QueryType[QueryType[\"OneHop\"] = 3] = \"OneHop\";\r\n})(QueryType = exports.QueryType || (exports.QueryType = {}));\r\n/**\r\n * The reporting revision expand level.\r\n */\r\nvar ReportingRevisionsExpand;\r\n(function (ReportingRevisionsExpand) {\r\n    /**\r\n     * Default behavior.\r\n     */\r\n    ReportingRevisionsExpand[ReportingRevisionsExpand[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Add fields to the response.\r\n     */\r\n    ReportingRevisionsExpand[ReportingRevisionsExpand[\"Fields\"] = 1] = \"Fields\";\r\n})(ReportingRevisionsExpand = exports.ReportingRevisionsExpand || (exports.ReportingRevisionsExpand = {}));\r\n/**\r\n * Enumerates types of supported xml templates used for customization.\r\n */\r\nvar TemplateType;\r\n(function (TemplateType) {\r\n    TemplateType[TemplateType[\"WorkItemType\"] = 0] = \"WorkItemType\";\r\n    TemplateType[TemplateType[\"GlobalWorkflow\"] = 1] = \"GlobalWorkflow\";\r\n})(TemplateType = exports.TemplateType || (exports.TemplateType = {}));\r\n/**\r\n * Types of tree node structures.\r\n */\r\nvar TreeNodeStructureType;\r\n(function (TreeNodeStructureType) {\r\n    /**\r\n     * Area type.\r\n     */\r\n    TreeNodeStructureType[TreeNodeStructureType[\"Area\"] = 0] = \"Area\";\r\n    /**\r\n     * Iteration type.\r\n     */\r\n    TreeNodeStructureType[TreeNodeStructureType[\"Iteration\"] = 1] = \"Iteration\";\r\n})(TreeNodeStructureType = exports.TreeNodeStructureType || (exports.TreeNodeStructureType = {}));\r\n/**\r\n * Types of tree structures groups.\r\n */\r\nvar TreeStructureGroup;\r\n(function (TreeStructureGroup) {\r\n    TreeStructureGroup[TreeStructureGroup[\"Areas\"] = 0] = \"Areas\";\r\n    TreeStructureGroup[TreeStructureGroup[\"Iterations\"] = 1] = \"Iterations\";\r\n})(TreeStructureGroup = exports.TreeStructureGroup || (exports.TreeStructureGroup = {}));\r\n/**\r\n * Enum to control error policy in a bulk get work items request.\r\n */\r\nvar WorkItemErrorPolicy;\r\n(function (WorkItemErrorPolicy) {\r\n    /**\r\n     * Fail work error policy.\r\n     */\r\n    WorkItemErrorPolicy[WorkItemErrorPolicy[\"Fail\"] = 1] = \"Fail\";\r\n    /**\r\n     * Omit work error policy.\r\n     */\r\n    WorkItemErrorPolicy[WorkItemErrorPolicy[\"Omit\"] = 2] = \"Omit\";\r\n})(WorkItemErrorPolicy = exports.WorkItemErrorPolicy || (exports.WorkItemErrorPolicy = {}));\r\n/**\r\n * Flag to control payload properties from get work item command.\r\n */\r\nvar WorkItemExpand;\r\n(function (WorkItemExpand) {\r\n    /**\r\n     * Default behavior.\r\n     */\r\n    WorkItemExpand[WorkItemExpand[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Relations work item expand.\r\n     */\r\n    WorkItemExpand[WorkItemExpand[\"Relations\"] = 1] = \"Relations\";\r\n    /**\r\n     * Fields work item expand.\r\n     */\r\n    WorkItemExpand[WorkItemExpand[\"Fields\"] = 2] = \"Fields\";\r\n    /**\r\n     * Links work item expand.\r\n     */\r\n    WorkItemExpand[WorkItemExpand[\"Links\"] = 3] = \"Links\";\r\n    /**\r\n     * Expands all.\r\n     */\r\n    WorkItemExpand[WorkItemExpand[\"All\"] = 4] = \"All\";\r\n})(WorkItemExpand = exports.WorkItemExpand || (exports.WorkItemExpand = {}));\r\n/**\r\n * Type of the activity\r\n */\r\nvar WorkItemRecentActivityType;\r\n(function (WorkItemRecentActivityType) {\r\n    WorkItemRecentActivityType[WorkItemRecentActivityType[\"Visited\"] = 0] = \"Visited\";\r\n    WorkItemRecentActivityType[WorkItemRecentActivityType[\"Edited\"] = 1] = \"Edited\";\r\n    WorkItemRecentActivityType[WorkItemRecentActivityType[\"Deleted\"] = 2] = \"Deleted\";\r\n    WorkItemRecentActivityType[WorkItemRecentActivityType[\"Restored\"] = 3] = \"Restored\";\r\n})(WorkItemRecentActivityType = exports.WorkItemRecentActivityType || (exports.WorkItemRecentActivityType = {}));\r\n/**\r\n * Expand options for the work item field(s) request.\r\n */\r\nvar WorkItemTypeFieldsExpandLevel;\r\n(function (WorkItemTypeFieldsExpandLevel) {\r\n    /**\r\n     * Includes only basic properties of the field.\r\n     */\r\n    WorkItemTypeFieldsExpandLevel[WorkItemTypeFieldsExpandLevel[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Includes allowed values for the field.\r\n     */\r\n    WorkItemTypeFieldsExpandLevel[WorkItemTypeFieldsExpandLevel[\"AllowedValues\"] = 1] = \"AllowedValues\";\r\n    /**\r\n     * Includes dependent fields of the field.\r\n     */\r\n    WorkItemTypeFieldsExpandLevel[WorkItemTypeFieldsExpandLevel[\"DependentFields\"] = 2] = \"DependentFields\";\r\n    /**\r\n     * Includes allowed values and dependent fields of the field.\r\n     */\r\n    WorkItemTypeFieldsExpandLevel[WorkItemTypeFieldsExpandLevel[\"All\"] = 3] = \"All\";\r\n})(WorkItemTypeFieldsExpandLevel = exports.WorkItemTypeFieldsExpandLevel || (exports.WorkItemTypeFieldsExpandLevel = {}));\r\nexports.TypeInfo = {\r\n    AccountMyWorkResult: {},\r\n    AccountRecentActivityWorkItemModel: {},\r\n    AccountRecentActivityWorkItemModel2: {},\r\n    AccountRecentActivityWorkItemModelBase: {},\r\n    AccountRecentMentionWorkItemModel: {},\r\n    AccountWorkWorkItemModel: {},\r\n    ClassificationNodesErrorPolicy: {\r\n        enumValues: {\r\n            \"fail\": 1,\r\n            \"omit\": 2\r\n        }\r\n    },\r\n    Comment: {},\r\n    CommentExpandOptions: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"reactions\": 1,\r\n            \"renderedText\": 8,\r\n            \"renderedTextOnly\": 16,\r\n            \"all\": -17\r\n        }\r\n    },\r\n    CommentFormat: {\r\n        enumValues: {\r\n            \"markdown\": 0,\r\n            \"html\": 1\r\n        }\r\n    },\r\n    CommentList: {},\r\n    CommentReaction: {},\r\n    CommentReactionType: {\r\n        enumValues: {\r\n            \"like\": 0,\r\n            \"dislike\": 1,\r\n            \"heart\": 2,\r\n            \"hooray\": 3,\r\n            \"smile\": 4,\r\n            \"confused\": 5\r\n        }\r\n    },\r\n    CommentSortOrder: {\r\n        enumValues: {\r\n            \"asc\": 1,\r\n            \"desc\": 2\r\n        }\r\n    },\r\n    CommentVersion: {},\r\n    ExternalDeployment: {},\r\n    FieldType: {\r\n        enumValues: {\r\n            \"string\": 0,\r\n            \"integer\": 1,\r\n            \"dateTime\": 2,\r\n            \"plainText\": 3,\r\n            \"html\": 4,\r\n            \"treePath\": 5,\r\n            \"history\": 6,\r\n            \"double\": 7,\r\n            \"guid\": 8,\r\n            \"boolean\": 9,\r\n            \"identity\": 10,\r\n            \"picklistString\": 11,\r\n            \"picklistInteger\": 12,\r\n            \"picklistDouble\": 13\r\n        }\r\n    },\r\n    FieldUsage: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"workItem\": 1,\r\n            \"workItemLink\": 2,\r\n            \"tree\": 3,\r\n            \"workItemTypeExtension\": 4\r\n        }\r\n    },\r\n    GetFieldsExpand: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"extensionFields\": 1,\r\n            \"includeDeleted\": 2\r\n        }\r\n    },\r\n    LinkQueryMode: {\r\n        enumValues: {\r\n            \"workItems\": 0,\r\n            \"linksOneHopMustContain\": 1,\r\n            \"linksOneHopMayContain\": 2,\r\n            \"linksOneHopDoesNotContain\": 3,\r\n            \"linksRecursiveMustContain\": 4,\r\n            \"linksRecursiveMayContain\": 5,\r\n            \"linksRecursiveDoesNotContain\": 6\r\n        }\r\n    },\r\n    LogicalOperation: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"and\": 1,\r\n            \"or\": 2\r\n        }\r\n    },\r\n    ProvisioningActionType: {\r\n        enumValues: {\r\n            \"import\": 0,\r\n            \"validate\": 1\r\n        }\r\n    },\r\n    QueryBatchGetRequest: {},\r\n    QueryErrorPolicy: {\r\n        enumValues: {\r\n            \"fail\": 1,\r\n            \"omit\": 2\r\n        }\r\n    },\r\n    QueryExpand: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"wiql\": 1,\r\n            \"clauses\": 2,\r\n            \"all\": 3,\r\n            \"minimal\": 4\r\n        }\r\n    },\r\n    QueryHierarchyItem: {},\r\n    QueryHierarchyItemsResult: {},\r\n    QueryOption: {\r\n        enumValues: {\r\n            \"doing\": 1,\r\n            \"done\": 2,\r\n            \"followed\": 3\r\n        }\r\n    },\r\n    QueryRecursionOption: {\r\n        enumValues: {\r\n            \"parentFirst\": 0,\r\n            \"childFirst\": 1\r\n        }\r\n    },\r\n    QueryResultType: {\r\n        enumValues: {\r\n            \"workItem\": 1,\r\n            \"workItemLink\": 2\r\n        }\r\n    },\r\n    QueryType: {\r\n        enumValues: {\r\n            \"flat\": 1,\r\n            \"tree\": 2,\r\n            \"oneHop\": 3\r\n        }\r\n    },\r\n    ReportingRevisionsExpand: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"fields\": 1\r\n        }\r\n    },\r\n    TemplateType: {\r\n        enumValues: {\r\n            \"workItemType\": 0,\r\n            \"globalWorkflow\": 1\r\n        }\r\n    },\r\n    TreeNodeStructureType: {\r\n        enumValues: {\r\n            \"area\": 0,\r\n            \"iteration\": 1\r\n        }\r\n    },\r\n    TreeStructureGroup: {\r\n        enumValues: {\r\n            \"areas\": 0,\r\n            \"iterations\": 1\r\n        }\r\n    },\r\n    WorkItemBatchGetRequest: {},\r\n    WorkItemClassificationNode: {},\r\n    WorkItemComment: {},\r\n    WorkItemComments: {},\r\n    WorkItemErrorPolicy: {\r\n        enumValues: {\r\n            \"fail\": 1,\r\n            \"omit\": 2\r\n        }\r\n    },\r\n    WorkItemExpand: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"relations\": 1,\r\n            \"fields\": 2,\r\n            \"links\": 3,\r\n            \"all\": 4\r\n        }\r\n    },\r\n    WorkItemField: {},\r\n    WorkItemField2: {},\r\n    WorkItemHistory: {},\r\n    WorkItemQueryClause: {},\r\n    WorkItemQueryResult: {},\r\n    WorkItemRecentActivityType: {\r\n        enumValues: {\r\n            \"visited\": 0,\r\n            \"edited\": 1,\r\n            \"deleted\": 2,\r\n            \"restored\": 3\r\n        }\r\n    },\r\n    WorkItemTagDefinition: {},\r\n    WorkItemTypeFieldsExpandLevel: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"allowedValues\": 1,\r\n            \"dependentFields\": 2,\r\n            \"all\": 3\r\n        }\r\n    },\r\n    WorkItemTypeTemplateUpdateModel: {},\r\n    WorkItemUpdate: {},\r\n};\r\nexports.TypeInfo.AccountMyWorkResult.fields = {\r\n    workItemDetails: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.AccountWorkWorkItemModel\r\n    }\r\n};\r\nexports.TypeInfo.AccountRecentActivityWorkItemModel.fields = {\r\n    activityDate: {\r\n        isDate: true,\r\n    },\r\n    activityType: {\r\n        enumType: exports.TypeInfo.WorkItemRecentActivityType\r\n    },\r\n    changedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.AccountRecentActivityWorkItemModel2.fields = {\r\n    activityDate: {\r\n        isDate: true,\r\n    },\r\n    activityType: {\r\n        enumType: exports.TypeInfo.WorkItemRecentActivityType\r\n    },\r\n    changedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.AccountRecentActivityWorkItemModelBase.fields = {\r\n    activityDate: {\r\n        isDate: true,\r\n    },\r\n    activityType: {\r\n        enumType: exports.TypeInfo.WorkItemRecentActivityType\r\n    },\r\n    changedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.AccountRecentMentionWorkItemModel.fields = {\r\n    mentionedDateField: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.AccountWorkWorkItemModel.fields = {\r\n    changedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.Comment.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    },\r\n    createdOnBehalfDate: {\r\n        isDate: true,\r\n    },\r\n    format: {\r\n        enumType: exports.TypeInfo.CommentFormat\r\n    },\r\n    modifiedDate: {\r\n        isDate: true,\r\n    },\r\n    reactions: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.CommentReaction\r\n    }\r\n};\r\nexports.TypeInfo.CommentList.fields = {\r\n    comments: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.Comment\r\n    }\r\n};\r\nexports.TypeInfo.CommentReaction.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.CommentReactionType\r\n    }\r\n};\r\nexports.TypeInfo.CommentVersion.fields = {\r\n    createdDate: {\r\n        isDate: true,\r\n    },\r\n    createdOnBehalfDate: {\r\n        isDate: true,\r\n    },\r\n    modifiedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.ExternalDeployment.fields = {\r\n    statusDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.QueryBatchGetRequest.fields = {\r\n    $expand: {\r\n        enumType: exports.TypeInfo.QueryExpand\r\n    },\r\n    errorPolicy: {\r\n        enumType: exports.TypeInfo.QueryErrorPolicy\r\n    }\r\n};\r\nexports.TypeInfo.QueryHierarchyItem.fields = {\r\n    children: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.QueryHierarchyItem\r\n    },\r\n    clauses: {\r\n        typeInfo: exports.TypeInfo.WorkItemQueryClause\r\n    },\r\n    createdDate: {\r\n        isDate: true,\r\n    },\r\n    filterOptions: {\r\n        enumType: exports.TypeInfo.LinkQueryMode\r\n    },\r\n    lastExecutedDate: {\r\n        isDate: true,\r\n    },\r\n    lastModifiedDate: {\r\n        isDate: true,\r\n    },\r\n    linkClauses: {\r\n        typeInfo: exports.TypeInfo.WorkItemQueryClause\r\n    },\r\n    queryRecursionOption: {\r\n        enumType: exports.TypeInfo.QueryRecursionOption\r\n    },\r\n    queryType: {\r\n        enumType: exports.TypeInfo.QueryType\r\n    },\r\n    sourceClauses: {\r\n        typeInfo: exports.TypeInfo.WorkItemQueryClause\r\n    },\r\n    targetClauses: {\r\n        typeInfo: exports.TypeInfo.WorkItemQueryClause\r\n    }\r\n};\r\nexports.TypeInfo.QueryHierarchyItemsResult.fields = {\r\n    value: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.QueryHierarchyItem\r\n    }\r\n};\r\nexports.TypeInfo.WorkItemBatchGetRequest.fields = {\r\n    $expand: {\r\n        enumType: exports.TypeInfo.WorkItemExpand\r\n    },\r\n    asOf: {\r\n        isDate: true,\r\n    },\r\n    errorPolicy: {\r\n        enumType: exports.TypeInfo.WorkItemErrorPolicy\r\n    }\r\n};\r\nexports.TypeInfo.WorkItemClassificationNode.fields = {\r\n    children: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.WorkItemClassificationNode\r\n    },\r\n    structureType: {\r\n        enumType: exports.TypeInfo.TreeNodeStructureType\r\n    }\r\n};\r\nexports.TypeInfo.WorkItemComment.fields = {\r\n    format: {\r\n        enumType: exports.TypeInfo.CommentFormat\r\n    },\r\n    revisedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.WorkItemComments.fields = {\r\n    comments: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.WorkItemComment\r\n    }\r\n};\r\nexports.TypeInfo.WorkItemField.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.FieldType\r\n    },\r\n    usage: {\r\n        enumType: exports.TypeInfo.FieldUsage\r\n    }\r\n};\r\nexports.TypeInfo.WorkItemField2.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.FieldType\r\n    },\r\n    usage: {\r\n        enumType: exports.TypeInfo.FieldUsage\r\n    }\r\n};\r\nexports.TypeInfo.WorkItemHistory.fields = {\r\n    revisedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.WorkItemQueryClause.fields = {\r\n    clauses: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.WorkItemQueryClause\r\n    },\r\n    logicalOperator: {\r\n        enumType: exports.TypeInfo.LogicalOperation\r\n    }\r\n};\r\nexports.TypeInfo.WorkItemQueryResult.fields = {\r\n    asOf: {\r\n        isDate: true,\r\n    },\r\n    queryResultType: {\r\n        enumType: exports.TypeInfo.QueryResultType\r\n    },\r\n    queryType: {\r\n        enumType: exports.TypeInfo.QueryType\r\n    }\r\n};\r\nexports.TypeInfo.WorkItemTagDefinition.fields = {\r\n    lastUpdated: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.WorkItemTypeTemplateUpdateModel.fields = {\r\n    actionType: {\r\n        enumType: exports.TypeInfo.ProvisioningActionType\r\n    },\r\n    templateType: {\r\n        enumType: exports.TypeInfo.TemplateType\r\n    }\r\n};\r\nexports.TypeInfo.WorkItemUpdate.fields = {\r\n    revisedDate: {\r\n        isDate: true,\r\n    }\r\n};\r\n","/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Enum for the type of a field.\r\n */\r\nvar FieldType;\r\n(function (FieldType) {\r\n    /**\r\n     * String field type.\r\n     */\r\n    FieldType[FieldType[\"String\"] = 1] = \"String\";\r\n    /**\r\n     * Integer field type.\r\n     */\r\n    FieldType[FieldType[\"Integer\"] = 2] = \"Integer\";\r\n    /**\r\n     * Datetime field type.\r\n     */\r\n    FieldType[FieldType[\"DateTime\"] = 3] = \"DateTime\";\r\n    /**\r\n     * Plain Text field type.\r\n     */\r\n    FieldType[FieldType[\"PlainText\"] = 5] = \"PlainText\";\r\n    /**\r\n     * HTML (Multiline) field type.\r\n     */\r\n    FieldType[FieldType[\"Html\"] = 7] = \"Html\";\r\n    /**\r\n     * Treepath field type.\r\n     */\r\n    FieldType[FieldType[\"TreePath\"] = 8] = \"TreePath\";\r\n    /**\r\n     * History field type.\r\n     */\r\n    FieldType[FieldType[\"History\"] = 9] = \"History\";\r\n    /**\r\n     * Double field type.\r\n     */\r\n    FieldType[FieldType[\"Double\"] = 10] = \"Double\";\r\n    /**\r\n     * Guid field type.\r\n     */\r\n    FieldType[FieldType[\"Guid\"] = 11] = \"Guid\";\r\n    /**\r\n     * Boolean field type.\r\n     */\r\n    FieldType[FieldType[\"Boolean\"] = 12] = \"Boolean\";\r\n    /**\r\n     * Identity field type.\r\n     */\r\n    FieldType[FieldType[\"Identity\"] = 13] = \"Identity\";\r\n    /**\r\n     * Integer picklist field type.\r\n     */\r\n    FieldType[FieldType[\"PicklistInteger\"] = 14] = \"PicklistInteger\";\r\n    /**\r\n     * String picklist field type.\r\n     */\r\n    FieldType[FieldType[\"PicklistString\"] = 15] = \"PicklistString\";\r\n    /**\r\n     * Double picklist field type.\r\n     */\r\n    FieldType[FieldType[\"PicklistDouble\"] = 16] = \"PicklistDouble\";\r\n})(FieldType = exports.FieldType || (exports.FieldType = {}));\r\nvar GetWorkItemTypeExpand;\r\n(function (GetWorkItemTypeExpand) {\r\n    GetWorkItemTypeExpand[GetWorkItemTypeExpand[\"None\"] = 0] = \"None\";\r\n    GetWorkItemTypeExpand[GetWorkItemTypeExpand[\"States\"] = 1] = \"States\";\r\n    GetWorkItemTypeExpand[GetWorkItemTypeExpand[\"Behaviors\"] = 2] = \"Behaviors\";\r\n    GetWorkItemTypeExpand[GetWorkItemTypeExpand[\"Layout\"] = 4] = \"Layout\";\r\n})(GetWorkItemTypeExpand = exports.GetWorkItemTypeExpand || (exports.GetWorkItemTypeExpand = {}));\r\n/**\r\n * Type of page\r\n */\r\nvar PageType;\r\n(function (PageType) {\r\n    PageType[PageType[\"Custom\"] = 1] = \"Custom\";\r\n    PageType[PageType[\"History\"] = 2] = \"History\";\r\n    PageType[PageType[\"Links\"] = 3] = \"Links\";\r\n    PageType[PageType[\"Attachments\"] = 4] = \"Attachments\";\r\n})(PageType = exports.PageType || (exports.PageType = {}));\r\n/**\r\n * Work item type classes'\r\n */\r\nvar WorkItemTypeClass;\r\n(function (WorkItemTypeClass) {\r\n    WorkItemTypeClass[WorkItemTypeClass[\"System\"] = 0] = \"System\";\r\n    WorkItemTypeClass[WorkItemTypeClass[\"Derived\"] = 1] = \"Derived\";\r\n    WorkItemTypeClass[WorkItemTypeClass[\"Custom\"] = 2] = \"Custom\";\r\n})(WorkItemTypeClass = exports.WorkItemTypeClass || (exports.WorkItemTypeClass = {}));\r\nexports.TypeInfo = {\r\n    FieldModel: {},\r\n    FieldType: {\r\n        enumValues: {\r\n            \"string\": 1,\r\n            \"integer\": 2,\r\n            \"dateTime\": 3,\r\n            \"plainText\": 5,\r\n            \"html\": 7,\r\n            \"treePath\": 8,\r\n            \"history\": 9,\r\n            \"double\": 10,\r\n            \"guid\": 11,\r\n            \"boolean\": 12,\r\n            \"identity\": 13,\r\n            \"picklistInteger\": 14,\r\n            \"picklistString\": 15,\r\n            \"picklistDouble\": 16\r\n        }\r\n    },\r\n    FormLayout: {},\r\n    GetWorkItemTypeExpand: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"states\": 1,\r\n            \"behaviors\": 2,\r\n            \"layout\": 4\r\n        }\r\n    },\r\n    Page: {},\r\n    PageType: {\r\n        enumValues: {\r\n            \"custom\": 1,\r\n            \"history\": 2,\r\n            \"links\": 3,\r\n            \"attachments\": 4\r\n        }\r\n    },\r\n    WorkItemTypeClass: {\r\n        enumValues: {\r\n            \"system\": 0,\r\n            \"derived\": 1,\r\n            \"custom\": 2\r\n        }\r\n    },\r\n    WorkItemTypeFieldModel: {},\r\n    WorkItemTypeFieldModel2: {},\r\n    WorkItemTypeModel: {},\r\n};\r\nexports.TypeInfo.FieldModel.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.FieldType\r\n    }\r\n};\r\nexports.TypeInfo.FormLayout.fields = {\r\n    pages: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.Page\r\n    }\r\n};\r\nexports.TypeInfo.Page.fields = {\r\n    pageType: {\r\n        enumType: exports.TypeInfo.PageType\r\n    }\r\n};\r\nexports.TypeInfo.WorkItemTypeFieldModel.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.FieldType\r\n    }\r\n};\r\nexports.TypeInfo.WorkItemTypeFieldModel2.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.FieldType\r\n    }\r\n};\r\nexports.TypeInfo.WorkItemTypeModel.fields = {\r\n    class: {\r\n        enumType: exports.TypeInfo.WorkItemTypeClass\r\n    },\r\n    layout: {\r\n        typeInfo: exports.TypeInfo.FormLayout\r\n    }\r\n};\r\n","/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Indicates the customization-type. Customization-type is System if is system generated or by default. Customization-type is Inherited if the existing workitemtype of inherited process is customized. Customization-type is Custom if the newly created workitemtype is customized.\r\n */\r\nvar CustomizationType;\r\n(function (CustomizationType) {\r\n    /**\r\n     * Customization-type is System if is system generated workitemtype.\r\n     */\r\n    CustomizationType[CustomizationType[\"System\"] = 1] = \"System\";\r\n    /**\r\n     * Customization-type is Inherited if the existing workitemtype of inherited process is customized.\r\n     */\r\n    CustomizationType[CustomizationType[\"Inherited\"] = 2] = \"Inherited\";\r\n    /**\r\n     * Customization-type is Custom if the newly created workitemtype is customized.\r\n     */\r\n    CustomizationType[CustomizationType[\"Custom\"] = 3] = \"Custom\";\r\n})(CustomizationType = exports.CustomizationType || (exports.CustomizationType = {}));\r\n/**\r\n * Enum for the type of a field.\r\n */\r\nvar FieldType;\r\n(function (FieldType) {\r\n    /**\r\n     * String field type.\r\n     */\r\n    FieldType[FieldType[\"String\"] = 1] = \"String\";\r\n    /**\r\n     * Integer field type.\r\n     */\r\n    FieldType[FieldType[\"Integer\"] = 2] = \"Integer\";\r\n    /**\r\n     * DateTime field type.\r\n     */\r\n    FieldType[FieldType[\"DateTime\"] = 3] = \"DateTime\";\r\n    /**\r\n     * Plain text field type.\r\n     */\r\n    FieldType[FieldType[\"PlainText\"] = 5] = \"PlainText\";\r\n    /**\r\n     * HTML (Multiline) field type.\r\n     */\r\n    FieldType[FieldType[\"Html\"] = 7] = \"Html\";\r\n    /**\r\n     * Treepath field type.\r\n     */\r\n    FieldType[FieldType[\"TreePath\"] = 8] = \"TreePath\";\r\n    /**\r\n     * History field type.\r\n     */\r\n    FieldType[FieldType[\"History\"] = 9] = \"History\";\r\n    /**\r\n     * Double field type.\r\n     */\r\n    FieldType[FieldType[\"Double\"] = 10] = \"Double\";\r\n    /**\r\n     * Guid field type.\r\n     */\r\n    FieldType[FieldType[\"Guid\"] = 11] = \"Guid\";\r\n    /**\r\n     * Boolean field type.\r\n     */\r\n    FieldType[FieldType[\"Boolean\"] = 12] = \"Boolean\";\r\n    /**\r\n     * Identity field type.\r\n     */\r\n    FieldType[FieldType[\"Identity\"] = 13] = \"Identity\";\r\n    /**\r\n     * Integer picklist field type.\r\n     */\r\n    FieldType[FieldType[\"PicklistInteger\"] = 14] = \"PicklistInteger\";\r\n    /**\r\n     * String picklist field type.\r\n     */\r\n    FieldType[FieldType[\"PicklistString\"] = 15] = \"PicklistString\";\r\n    /**\r\n     * Double picklist field type.\r\n     */\r\n    FieldType[FieldType[\"PicklistDouble\"] = 16] = \"PicklistDouble\";\r\n})(FieldType = exports.FieldType || (exports.FieldType = {}));\r\n/**\r\n * Expand options to fetch fields for behaviors API.\r\n */\r\nvar GetBehaviorsExpand;\r\n(function (GetBehaviorsExpand) {\r\n    /**\r\n     * Default none option.\r\n     */\r\n    GetBehaviorsExpand[GetBehaviorsExpand[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * This option returns fields associated with a behavior.\r\n     */\r\n    GetBehaviorsExpand[GetBehaviorsExpand[\"Fields\"] = 1] = \"Fields\";\r\n    /**\r\n     * This option returns fields associated with this behavior and all behaviors from which it inherits.\r\n     */\r\n    GetBehaviorsExpand[GetBehaviorsExpand[\"CombinedFields\"] = 2] = \"CombinedFields\";\r\n})(GetBehaviorsExpand = exports.GetBehaviorsExpand || (exports.GetBehaviorsExpand = {}));\r\n/**\r\n * The expand level of returned processes.\r\n */\r\nvar GetProcessExpandLevel;\r\n(function (GetProcessExpandLevel) {\r\n    /**\r\n     * No expand level.\r\n     */\r\n    GetProcessExpandLevel[GetProcessExpandLevel[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Projects expand level.\r\n     */\r\n    GetProcessExpandLevel[GetProcessExpandLevel[\"Projects\"] = 1] = \"Projects\";\r\n})(GetProcessExpandLevel = exports.GetProcessExpandLevel || (exports.GetProcessExpandLevel = {}));\r\n/**\r\n * Flag to define what properties to return in get work item type response.\r\n */\r\nvar GetWorkItemTypeExpand;\r\n(function (GetWorkItemTypeExpand) {\r\n    /**\r\n     * Returns no properties in get work item type response.\r\n     */\r\n    GetWorkItemTypeExpand[GetWorkItemTypeExpand[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Returns states property in get work item type response.\r\n     */\r\n    GetWorkItemTypeExpand[GetWorkItemTypeExpand[\"States\"] = 1] = \"States\";\r\n    /**\r\n     * Returns behaviors property in get work item type response.\r\n     */\r\n    GetWorkItemTypeExpand[GetWorkItemTypeExpand[\"Behaviors\"] = 2] = \"Behaviors\";\r\n    /**\r\n     * Returns layout property in get work item type response.\r\n     */\r\n    GetWorkItemTypeExpand[GetWorkItemTypeExpand[\"Layout\"] = 4] = \"Layout\";\r\n})(GetWorkItemTypeExpand = exports.GetWorkItemTypeExpand || (exports.GetWorkItemTypeExpand = {}));\r\n/**\r\n * Enum for the types of pages in the work item form layout\r\n */\r\nvar PageType;\r\n(function (PageType) {\r\n    /**\r\n     * Custom page type.\r\n     */\r\n    PageType[PageType[\"Custom\"] = 1] = \"Custom\";\r\n    /**\r\n     * History page type.\r\n     */\r\n    PageType[PageType[\"History\"] = 2] = \"History\";\r\n    /**\r\n     * Link page type.\r\n     */\r\n    PageType[PageType[\"Links\"] = 3] = \"Links\";\r\n    /**\r\n     * Attachment page type.\r\n     */\r\n    PageType[PageType[\"Attachments\"] = 4] = \"Attachments\";\r\n})(PageType = exports.PageType || (exports.PageType = {}));\r\nvar ProcessClass;\r\n(function (ProcessClass) {\r\n    ProcessClass[ProcessClass[\"System\"] = 0] = \"System\";\r\n    ProcessClass[ProcessClass[\"Derived\"] = 1] = \"Derived\";\r\n    ProcessClass[ProcessClass[\"Custom\"] = 2] = \"Custom\";\r\n})(ProcessClass = exports.ProcessClass || (exports.ProcessClass = {}));\r\n/**\r\n * Expand options for the work item field(s) request.\r\n */\r\nvar ProcessWorkItemTypeFieldsExpandLevel;\r\n(function (ProcessWorkItemTypeFieldsExpandLevel) {\r\n    /**\r\n     * Includes only basic properties of the field.\r\n     */\r\n    ProcessWorkItemTypeFieldsExpandLevel[ProcessWorkItemTypeFieldsExpandLevel[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Includes allowed values for the field.\r\n     */\r\n    ProcessWorkItemTypeFieldsExpandLevel[ProcessWorkItemTypeFieldsExpandLevel[\"AllowedValues\"] = 1] = \"AllowedValues\";\r\n    /**\r\n     * Includes allowed values and dependent fields of the field.\r\n     */\r\n    ProcessWorkItemTypeFieldsExpandLevel[ProcessWorkItemTypeFieldsExpandLevel[\"All\"] = 2] = \"All\";\r\n})(ProcessWorkItemTypeFieldsExpandLevel = exports.ProcessWorkItemTypeFieldsExpandLevel || (exports.ProcessWorkItemTypeFieldsExpandLevel = {}));\r\n/**\r\n * Type of action to take when the rule is triggered.\r\n */\r\nvar RuleActionType;\r\n(function (RuleActionType) {\r\n    /**\r\n     * Make the target field required. Example : {\"actionType\":\"$makeRequired\",\"targetField\":\"Microsoft.VSTS.Common.Activity\",\"value\":\"\"}\r\n     */\r\n    RuleActionType[RuleActionType[\"MakeRequired\"] = 1] = \"MakeRequired\";\r\n    /**\r\n     * Make the target field read-only. Example : {\"actionType\":\"$makeReadOnly\",\"targetField\":\"Microsoft.VSTS.Common.Activity\",\"value\":\"\"}\r\n     */\r\n    RuleActionType[RuleActionType[\"MakeReadOnly\"] = 2] = \"MakeReadOnly\";\r\n    /**\r\n     * Set a default value on the target field. This is used if the user creates a integer/string field and sets a default value of this field.\r\n     */\r\n    RuleActionType[RuleActionType[\"SetDefaultValue\"] = 3] = \"SetDefaultValue\";\r\n    /**\r\n     * Set the default value on the target field from server clock. This is used if user creates the field like Date/Time and uses default value.\r\n     */\r\n    RuleActionType[RuleActionType[\"SetDefaultFromClock\"] = 4] = \"SetDefaultFromClock\";\r\n    /**\r\n     * Set the default current user value on the target field. This is used if the user creates the field of type identity and uses default value.\r\n     */\r\n    RuleActionType[RuleActionType[\"SetDefaultFromCurrentUser\"] = 5] = \"SetDefaultFromCurrentUser\";\r\n    /**\r\n     * Set the default value on from existing field to the target field.  This used wants to set a existing field value to the current field.\r\n     */\r\n    RuleActionType[RuleActionType[\"SetDefaultFromField\"] = 6] = \"SetDefaultFromField\";\r\n    /**\r\n     * Set the value of target field to given value. Example : {actionType: \"$copyValue\", targetField: \"ScrumInherited.mypicklist\", value: \"samplevalue\"}\r\n     */\r\n    RuleActionType[RuleActionType[\"CopyValue\"] = 7] = \"CopyValue\";\r\n    /**\r\n     * Set the value from clock.\r\n     */\r\n    RuleActionType[RuleActionType[\"CopyFromClock\"] = 8] = \"CopyFromClock\";\r\n    /**\r\n     * Set the current user to the target field. Example : {\"actionType\":\"$copyFromCurrentUser\",\"targetField\":\"System.AssignedTo\",\"value\":\"\"}.\r\n     */\r\n    RuleActionType[RuleActionType[\"CopyFromCurrentUser\"] = 9] = \"CopyFromCurrentUser\";\r\n    /**\r\n     * Copy the value from a specified field and set to target field. Example : {actionType: \"$copyFromField\", targetField: \"System.AssignedTo\", value:\"System.ChangedBy\"}. Here, value is copied from \"System.ChangedBy\" and set to \"System.AssingedTo\" field.\r\n     */\r\n    RuleActionType[RuleActionType[\"CopyFromField\"] = 10] = \"CopyFromField\";\r\n    /**\r\n     * Set the value of the target field to empty.\r\n     */\r\n    RuleActionType[RuleActionType[\"SetValueToEmpty\"] = 11] = \"SetValueToEmpty\";\r\n    /**\r\n     * Use the current time to set the value of the target field. Example : {actionType: \"$copyFromServerClock\", targetField: \"System.CreatedDate\", value: \"\"}\r\n     */\r\n    RuleActionType[RuleActionType[\"CopyFromServerClock\"] = 12] = \"CopyFromServerClock\";\r\n    /**\r\n     * Use the current user to set the value of the target field.\r\n     */\r\n    RuleActionType[RuleActionType[\"CopyFromServerCurrentUser\"] = 13] = \"CopyFromServerCurrentUser\";\r\n    /**\r\n     * Hides target field from the form. This is a server side only action.\r\n     */\r\n    RuleActionType[RuleActionType[\"HideTargetField\"] = 14] = \"HideTargetField\";\r\n    /**\r\n     * Disallows a field from being set to a specific value.\r\n     */\r\n    RuleActionType[RuleActionType[\"DisallowValue\"] = 15] = \"DisallowValue\";\r\n})(RuleActionType = exports.RuleActionType || (exports.RuleActionType = {}));\r\n/**\r\n * Type of rule condition.\r\n */\r\nvar RuleConditionType;\r\n(function (RuleConditionType) {\r\n    /**\r\n     * $When. This condition limits the execution of its children to cases when another field has a particular value, i.e. when the Is value of the referenced field is equal to the given literal value.\r\n     */\r\n    RuleConditionType[RuleConditionType[\"When\"] = 1] = \"When\";\r\n    /**\r\n     * $WhenNot.This condition limits the execution of its children to cases when another field does not have a particular value, i.e.when the Is value of the referenced field is not equal to the given literal value.\r\n     */\r\n    RuleConditionType[RuleConditionType[\"WhenNot\"] = 2] = \"WhenNot\";\r\n    /**\r\n     * $WhenChanged.This condition limits the execution of its children to cases when another field has changed, i.e.when the Is value of the referenced field is not equal to the Was value of that field.\r\n     */\r\n    RuleConditionType[RuleConditionType[\"WhenChanged\"] = 3] = \"WhenChanged\";\r\n    /**\r\n     * $WhenNotChanged.This condition limits the execution of its children to cases when another field has not changed, i.e.when the Is value of the referenced field is equal to the Was value of that field.\r\n     */\r\n    RuleConditionType[RuleConditionType[\"WhenNotChanged\"] = 4] = \"WhenNotChanged\";\r\n    /**\r\n     * $WhenWas. This condition limits the execution of its children to cases when another field value is changed from one value to another. e.g. If the condition is : When the work item state changes from New to Approved, here $WhenWas clause defines the \"New\" state of the workitem and $When clause defines \"Approved\" state.\r\n     */\r\n    RuleConditionType[RuleConditionType[\"WhenWas\"] = 5] = \"WhenWas\";\r\n    RuleConditionType[RuleConditionType[\"WhenStateChangedTo\"] = 6] = \"WhenStateChangedTo\";\r\n    RuleConditionType[RuleConditionType[\"WhenStateChangedFromAndTo\"] = 7] = \"WhenStateChangedFromAndTo\";\r\n    RuleConditionType[RuleConditionType[\"WhenWorkItemIsCreated\"] = 8] = \"WhenWorkItemIsCreated\";\r\n    RuleConditionType[RuleConditionType[\"WhenValueIsDefined\"] = 9] = \"WhenValueIsDefined\";\r\n    RuleConditionType[RuleConditionType[\"WhenValueIsNotDefined\"] = 10] = \"WhenValueIsNotDefined\";\r\n    /**\r\n     * This condition checks if current user is member of a particular group. This condition does not have any 1:1 mapping with any server side rule condition, rather this is a dummy condition added for customer simplicity of understanding. This condition is later translated to a FOR membership filter . e.g. If the condition is : WhenCurrentUserIsMemberOfGroup \"Approvers\" then \"MakeRequired\" Field1.Here it translates to a For rule , \"MakeRequired\" for \"Approvers\"\r\n     */\r\n    RuleConditionType[RuleConditionType[\"WhenCurrentUserIsMemberOfGroup\"] = 11] = \"WhenCurrentUserIsMemberOfGroup\";\r\n    /**\r\n     * This condition checks if current user is not member of a particular group. This condition does not have any 1:1 mapping with any server side rule condition, rather this is a dummy condition added for customer simplicity of understanding. This condition is later translated to a NOT membership filter . e.g. If the condition is : WhenCurrentUserIsNotMemberOfGroup \"Approvers\" then \"MakeRequired\" Field1.Here it translates to a Not rule , \"MakeRequired\" not \"Approvers\"\r\n     */\r\n    RuleConditionType[RuleConditionType[\"WhenCurrentUserIsNotMemberOfGroup\"] = 12] = \"WhenCurrentUserIsNotMemberOfGroup\";\r\n})(RuleConditionType = exports.RuleConditionType || (exports.RuleConditionType = {}));\r\nvar WorkItemTypeClass;\r\n(function (WorkItemTypeClass) {\r\n    WorkItemTypeClass[WorkItemTypeClass[\"System\"] = 0] = \"System\";\r\n    WorkItemTypeClass[WorkItemTypeClass[\"Derived\"] = 1] = \"Derived\";\r\n    WorkItemTypeClass[WorkItemTypeClass[\"Custom\"] = 2] = \"Custom\";\r\n})(WorkItemTypeClass = exports.WorkItemTypeClass || (exports.WorkItemTypeClass = {}));\r\nexports.TypeInfo = {\r\n    CreateProcessRuleRequest: {},\r\n    CustomizationType: {\r\n        enumValues: {\r\n            \"system\": 1,\r\n            \"inherited\": 2,\r\n            \"custom\": 3\r\n        }\r\n    },\r\n    FieldModel: {},\r\n    FieldType: {\r\n        enumValues: {\r\n            \"string\": 1,\r\n            \"integer\": 2,\r\n            \"dateTime\": 3,\r\n            \"plainText\": 5,\r\n            \"html\": 7,\r\n            \"treePath\": 8,\r\n            \"history\": 9,\r\n            \"double\": 10,\r\n            \"guid\": 11,\r\n            \"boolean\": 12,\r\n            \"identity\": 13,\r\n            \"picklistInteger\": 14,\r\n            \"picklistString\": 15,\r\n            \"picklistDouble\": 16\r\n        }\r\n    },\r\n    FormLayout: {},\r\n    GetBehaviorsExpand: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"fields\": 1,\r\n            \"combinedFields\": 2\r\n        }\r\n    },\r\n    GetProcessExpandLevel: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"projects\": 1\r\n        }\r\n    },\r\n    GetWorkItemTypeExpand: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"states\": 1,\r\n            \"behaviors\": 2,\r\n            \"layout\": 4\r\n        }\r\n    },\r\n    Page: {},\r\n    PageType: {\r\n        enumValues: {\r\n            \"custom\": 1,\r\n            \"history\": 2,\r\n            \"links\": 3,\r\n            \"attachments\": 4\r\n        }\r\n    },\r\n    ProcessBehavior: {},\r\n    ProcessClass: {\r\n        enumValues: {\r\n            \"system\": 0,\r\n            \"derived\": 1,\r\n            \"custom\": 2\r\n        }\r\n    },\r\n    ProcessInfo: {},\r\n    ProcessModel: {},\r\n    ProcessProperties: {},\r\n    ProcessRule: {},\r\n    ProcessWorkItemType: {},\r\n    ProcessWorkItemTypeField: {},\r\n    ProcessWorkItemTypeFieldsExpandLevel: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"allowedValues\": 1,\r\n            \"all\": 2\r\n        }\r\n    },\r\n    RuleAction: {},\r\n    RuleActionType: {\r\n        enumValues: {\r\n            \"makeRequired\": 1,\r\n            \"makeReadOnly\": 2,\r\n            \"setDefaultValue\": 3,\r\n            \"setDefaultFromClock\": 4,\r\n            \"setDefaultFromCurrentUser\": 5,\r\n            \"setDefaultFromField\": 6,\r\n            \"copyValue\": 7,\r\n            \"copyFromClock\": 8,\r\n            \"copyFromCurrentUser\": 9,\r\n            \"copyFromField\": 10,\r\n            \"setValueToEmpty\": 11,\r\n            \"copyFromServerClock\": 12,\r\n            \"copyFromServerCurrentUser\": 13,\r\n            \"hideTargetField\": 14,\r\n            \"disallowValue\": 15\r\n        }\r\n    },\r\n    RuleCondition: {},\r\n    RuleConditionType: {\r\n        enumValues: {\r\n            \"when\": 1,\r\n            \"whenNot\": 2,\r\n            \"whenChanged\": 3,\r\n            \"whenNotChanged\": 4,\r\n            \"whenWas\": 5,\r\n            \"whenStateChangedTo\": 6,\r\n            \"whenStateChangedFromAndTo\": 7,\r\n            \"whenWorkItemIsCreated\": 8,\r\n            \"whenValueIsDefined\": 9,\r\n            \"whenValueIsNotDefined\": 10,\r\n            \"whenCurrentUserIsMemberOfGroup\": 11,\r\n            \"whenCurrentUserIsNotMemberOfGroup\": 12\r\n        }\r\n    },\r\n    UpdateProcessRuleRequest: {},\r\n    WorkItemStateResultModel: {},\r\n    WorkItemTypeClass: {\r\n        enumValues: {\r\n            \"system\": 0,\r\n            \"derived\": 1,\r\n            \"custom\": 2\r\n        }\r\n    },\r\n    WorkItemTypeModel: {},\r\n};\r\nexports.TypeInfo.CreateProcessRuleRequest.fields = {\r\n    actions: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.RuleAction\r\n    },\r\n    conditions: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.RuleCondition\r\n    }\r\n};\r\nexports.TypeInfo.FieldModel.fields = {\r\n    type: {\r\n        enumType: exports.TypeInfo.FieldType\r\n    }\r\n};\r\nexports.TypeInfo.FormLayout.fields = {\r\n    pages: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.Page\r\n    }\r\n};\r\nexports.TypeInfo.Page.fields = {\r\n    pageType: {\r\n        enumType: exports.TypeInfo.PageType\r\n    }\r\n};\r\nexports.TypeInfo.ProcessBehavior.fields = {\r\n    customization: {\r\n        enumType: exports.TypeInfo.CustomizationType\r\n    }\r\n};\r\nexports.TypeInfo.ProcessInfo.fields = {\r\n    customizationType: {\r\n        enumType: exports.TypeInfo.CustomizationType\r\n    }\r\n};\r\nexports.TypeInfo.ProcessModel.fields = {\r\n    properties: {\r\n        typeInfo: exports.TypeInfo.ProcessProperties\r\n    }\r\n};\r\nexports.TypeInfo.ProcessProperties.fields = {\r\n    class: {\r\n        enumType: exports.TypeInfo.ProcessClass\r\n    }\r\n};\r\nexports.TypeInfo.ProcessRule.fields = {\r\n    actions: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.RuleAction\r\n    },\r\n    conditions: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.RuleCondition\r\n    },\r\n    customizationType: {\r\n        enumType: exports.TypeInfo.CustomizationType\r\n    }\r\n};\r\nexports.TypeInfo.ProcessWorkItemType.fields = {\r\n    customization: {\r\n        enumType: exports.TypeInfo.CustomizationType\r\n    },\r\n    layout: {\r\n        typeInfo: exports.TypeInfo.FormLayout\r\n    },\r\n    states: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.WorkItemStateResultModel\r\n    }\r\n};\r\nexports.TypeInfo.ProcessWorkItemTypeField.fields = {\r\n    customization: {\r\n        enumType: exports.TypeInfo.CustomizationType\r\n    },\r\n    type: {\r\n        enumType: exports.TypeInfo.FieldType\r\n    }\r\n};\r\nexports.TypeInfo.RuleAction.fields = {\r\n    actionType: {\r\n        enumType: exports.TypeInfo.RuleActionType\r\n    }\r\n};\r\nexports.TypeInfo.RuleCondition.fields = {\r\n    conditionType: {\r\n        enumType: exports.TypeInfo.RuleConditionType\r\n    }\r\n};\r\nexports.TypeInfo.UpdateProcessRuleRequest.fields = {\r\n    actions: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.RuleAction\r\n    },\r\n    conditions: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.RuleCondition\r\n    }\r\n};\r\nexports.TypeInfo.WorkItemStateResultModel.fields = {\r\n    customizationType: {\r\n        enumType: exports.TypeInfo.CustomizationType\r\n    }\r\n};\r\nexports.TypeInfo.WorkItemTypeModel.fields = {\r\n    class: {\r\n        enumType: exports.TypeInfo.WorkItemTypeClass\r\n    },\r\n    layout: {\r\n        typeInfo: exports.TypeInfo.FormLayout\r\n    },\r\n    states: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.WorkItemStateResultModel\r\n    }\r\n};\r\n","/*\r\n* ---------------------------------------------------------\r\n* Copyright(C) Microsoft Corporation. All rights reserved.\r\n* ---------------------------------------------------------\r\n*\r\n* ---------------------------------------------------------\r\n* Generated file, DO NOT EDIT\r\n* ---------------------------------------------------------\r\n*\r\n* See following wiki page for instructions on how to regenerate:\r\n*   https://vsowiki.com/index.php?title=Rest_Client_Generation\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar InputDataType;\r\n(function (InputDataType) {\r\n    /**\r\n     * No data type is specified.\r\n     */\r\n    InputDataType[InputDataType[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Represents a textual value.\r\n     */\r\n    InputDataType[InputDataType[\"String\"] = 10] = \"String\";\r\n    /**\r\n     * Represents a numberic value.\r\n     */\r\n    InputDataType[InputDataType[\"Number\"] = 20] = \"Number\";\r\n    /**\r\n     * Represents a value of true or false.\r\n     */\r\n    InputDataType[InputDataType[\"Boolean\"] = 30] = \"Boolean\";\r\n    /**\r\n     * Represents a Guid.\r\n     */\r\n    InputDataType[InputDataType[\"Guid\"] = 40] = \"Guid\";\r\n    /**\r\n     * Represents a URI.\r\n     */\r\n    InputDataType[InputDataType[\"Uri\"] = 50] = \"Uri\";\r\n})(InputDataType = exports.InputDataType || (exports.InputDataType = {}));\r\nvar InputFilterOperator;\r\n(function (InputFilterOperator) {\r\n    InputFilterOperator[InputFilterOperator[\"Equals\"] = 0] = \"Equals\";\r\n    InputFilterOperator[InputFilterOperator[\"NotEquals\"] = 1] = \"NotEquals\";\r\n})(InputFilterOperator = exports.InputFilterOperator || (exports.InputFilterOperator = {}));\r\nvar InputMode;\r\n(function (InputMode) {\r\n    /**\r\n     * This input should not be shown in the UI\r\n     */\r\n    InputMode[InputMode[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * An input text box should be shown\r\n     */\r\n    InputMode[InputMode[\"TextBox\"] = 10] = \"TextBox\";\r\n    /**\r\n     * An password input box should be shown\r\n     */\r\n    InputMode[InputMode[\"PasswordBox\"] = 20] = \"PasswordBox\";\r\n    /**\r\n     * A select/combo control should be shown\r\n     */\r\n    InputMode[InputMode[\"Combo\"] = 30] = \"Combo\";\r\n    /**\r\n     * Radio buttons should be shown\r\n     */\r\n    InputMode[InputMode[\"RadioButtons\"] = 40] = \"RadioButtons\";\r\n    /**\r\n     * Checkbox should be shown(for true/false values)\r\n     */\r\n    InputMode[InputMode[\"CheckBox\"] = 50] = \"CheckBox\";\r\n    /**\r\n     * A multi-line text area should be shown\r\n     */\r\n    InputMode[InputMode[\"TextArea\"] = 60] = \"TextArea\";\r\n})(InputMode = exports.InputMode || (exports.InputMode = {}));\r\nexports.TypeInfo = {\r\n    InputDataType: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"string\": 10,\r\n            \"number\": 20,\r\n            \"boolean\": 30,\r\n            \"guid\": 40,\r\n            \"uri\": 50,\r\n        }\r\n    },\r\n    InputDescriptor: {\r\n        fields: null\r\n    },\r\n    InputFilter: {\r\n        fields: null\r\n    },\r\n    InputFilterCondition: {\r\n        fields: null\r\n    },\r\n    InputFilterOperator: {\r\n        enumValues: {\r\n            \"equals\": 0,\r\n            \"notEquals\": 1,\r\n        }\r\n    },\r\n    InputMode: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"textBox\": 10,\r\n            \"passwordBox\": 20,\r\n            \"combo\": 30,\r\n            \"radioButtons\": 40,\r\n            \"checkBox\": 50,\r\n            \"textArea\": 60,\r\n        }\r\n    },\r\n    InputValidation: {\r\n        fields: null\r\n    },\r\n    InputValue: {\r\n        fields: null\r\n    },\r\n    InputValues: {\r\n        fields: null\r\n    },\r\n    InputValuesError: {\r\n        fields: null\r\n    },\r\n    InputValuesQuery: {\r\n        fields: null\r\n    },\r\n};\r\nexports.TypeInfo.InputDescriptor.fields = {\r\n    inputMode: {\r\n        enumType: exports.TypeInfo.InputMode\r\n    },\r\n    validation: {\r\n        typeInfo: exports.TypeInfo.InputValidation\r\n    },\r\n    values: {\r\n        typeInfo: exports.TypeInfo.InputValues\r\n    },\r\n};\r\nexports.TypeInfo.InputFilter.fields = {\r\n    conditions: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.InputFilterCondition\r\n    },\r\n};\r\nexports.TypeInfo.InputFilterCondition.fields = {\r\n    operator: {\r\n        enumType: exports.TypeInfo.InputFilterOperator\r\n    },\r\n};\r\nexports.TypeInfo.InputValidation.fields = {\r\n    dataType: {\r\n        enumType: exports.TypeInfo.InputDataType\r\n    },\r\n};\r\nexports.TypeInfo.InputValue.fields = {};\r\nexports.TypeInfo.InputValues.fields = {\r\n    error: {\r\n        typeInfo: exports.TypeInfo.InputValuesError\r\n    },\r\n    possibleValues: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.InputValue\r\n    },\r\n};\r\nexports.TypeInfo.InputValuesError.fields = {};\r\nexports.TypeInfo.InputValuesQuery.fields = {\r\n    inputValues: {\r\n        isArray: true,\r\n        typeInfo: exports.TypeInfo.InputValues\r\n    },\r\n};\r\n","/*\r\n* ---------------------------------------------------------\r\n* Copyright(C) Microsoft Corporation. All rights reserved.\r\n* ---------------------------------------------------------\r\n*\r\n* ---------------------------------------------------------\r\n* Generated file, DO NOT EDIT\r\n* ---------------------------------------------------------\r\n*/\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar OperationStatus;\r\n(function (OperationStatus) {\r\n    /**\r\n     * The operation object does not have the status set.\r\n     */\r\n    OperationStatus[OperationStatus[\"NotSet\"] = 0] = \"NotSet\";\r\n    /**\r\n     * The operation has been queued.\r\n     */\r\n    OperationStatus[OperationStatus[\"Queued\"] = 1] = \"Queued\";\r\n    /**\r\n     * The operation is in progress.\r\n     */\r\n    OperationStatus[OperationStatus[\"InProgress\"] = 2] = \"InProgress\";\r\n    /**\r\n     * The operation was cancelled by the user.\r\n     */\r\n    OperationStatus[OperationStatus[\"Cancelled\"] = 3] = \"Cancelled\";\r\n    /**\r\n     * The operation completed successfully.\r\n     */\r\n    OperationStatus[OperationStatus[\"Succeeded\"] = 4] = \"Succeeded\";\r\n    /**\r\n     * The operation completed with a failure.\r\n     */\r\n    OperationStatus[OperationStatus[\"Failed\"] = 5] = \"Failed\";\r\n})(OperationStatus = exports.OperationStatus || (exports.OperationStatus = {}));\r\nexports.TypeInfo = {\r\n    OperationReference: {\r\n        fields: null\r\n    },\r\n    OperationStatus: {\r\n        enumValues: {\r\n            \"notSet\": 0,\r\n            \"queued\": 1,\r\n            \"inProgress\": 2,\r\n            \"cancelled\": 3,\r\n            \"succeeded\": 4,\r\n            \"failed\": 5,\r\n        }\r\n    },\r\n};\r\nexports.TypeInfo.OperationReference.fields = {\r\n    status: {\r\n        enumType: exports.TypeInfo.OperationStatus\r\n    },\r\n};\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar DayOfWeek;\r\n(function (DayOfWeek) {\r\n    /**\r\n     * Indicates Sunday.\r\n     */\r\n    DayOfWeek[DayOfWeek[\"Sunday\"] = 0] = \"Sunday\";\r\n    /**\r\n     * Indicates Monday.\r\n     */\r\n    DayOfWeek[DayOfWeek[\"Monday\"] = 1] = \"Monday\";\r\n    /**\r\n     * Indicates Tuesday.\r\n     */\r\n    DayOfWeek[DayOfWeek[\"Tuesday\"] = 2] = \"Tuesday\";\r\n    /**\r\n     * Indicates Wednesday.\r\n     */\r\n    DayOfWeek[DayOfWeek[\"Wednesday\"] = 3] = \"Wednesday\";\r\n    /**\r\n     * Indicates Thursday.\r\n     */\r\n    DayOfWeek[DayOfWeek[\"Thursday\"] = 4] = \"Thursday\";\r\n    /**\r\n     * Indicates Friday.\r\n     */\r\n    DayOfWeek[DayOfWeek[\"Friday\"] = 5] = \"Friday\";\r\n    /**\r\n     * Indicates Saturday.\r\n     */\r\n    DayOfWeek[DayOfWeek[\"Saturday\"] = 6] = \"Saturday\";\r\n})(DayOfWeek = exports.DayOfWeek || (exports.DayOfWeek = {}));\r\nexports.TypeInfo = {\r\n    DayOfWeek: {\r\n        enumValues: {\r\n            \"sunday\": 0,\r\n            \"monday\": 1,\r\n            \"tuesday\": 2,\r\n            \"wednesday\": 3,\r\n            \"thursday\": 4,\r\n            \"friday\": 5,\r\n            \"saturday\": 6\r\n        }\r\n    }\r\n};\r\n","\"use strict\";\r\n//----------------------------------------------------------\r\n// Copyright (C) Microsoft Corporation. All rights reserved.\r\n//----------------------------------------------------------\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Specifies SQL Server-specific data type of a field, property, for use in a System.Data.SqlClient.SqlParameter.\r\n */\r\nvar SqlDbType;\r\n(function (SqlDbType) {\r\n    /**\r\n     * A 64-bit signed integer.\r\n     */\r\n    SqlDbType[SqlDbType[\"BigInt\"] = 0] = \"BigInt\";\r\n    /**\r\n     * Array of type Byte. A fixed-length stream of binary data ranging between 1 and 8,000 bytes.\r\n     */\r\n    SqlDbType[SqlDbType[\"Binary\"] = 1] = \"Binary\";\r\n    /**\r\n     * Boolean. An unsigned numeric value that can be 0, 1, or null.\r\n     */\r\n    SqlDbType[SqlDbType[\"Bit\"] = 2] = \"Bit\";\r\n    /**\r\n     * String. A fixed-length stream of non-Unicode characters ranging between 1 and 8,000 characters.\r\n     */\r\n    SqlDbType[SqlDbType[\"Char\"] = 3] = \"Char\";\r\n    /**\r\n     * DateTime. Date and time data ranging in value from January 1, 1753 to December 31, 9999 to an accuracy of 3.33 milliseconds.\r\n     */\r\n    SqlDbType[SqlDbType[\"DateTime\"] = 4] = \"DateTime\";\r\n    /**\r\n     * Decimal. A fixed precision and scale numeric value between -10 38 -1 and 10 38 -1.\r\n     */\r\n    SqlDbType[SqlDbType[\"Decimal\"] = 5] = \"Decimal\";\r\n    /**\r\n     * Double. A floating point number within the range of -1.79E +308 through 1.79E +308.\r\n     */\r\n    SqlDbType[SqlDbType[\"Float\"] = 6] = \"Float\";\r\n    /**\r\n     * Array of type Byte. A variable-length stream of binary data ranging from 0 to 2 31 -1 (or 2,147,483,647) bytes.\r\n     */\r\n    SqlDbType[SqlDbType[\"Image\"] = 7] = \"Image\";\r\n    /**\r\n     * Int32. A 32-bit signed integer.\r\n     */\r\n    SqlDbType[SqlDbType[\"Int\"] = 8] = \"Int\";\r\n    /**\r\n     * Decimal. A currency value ranging from -2 63 (or -9,223,372,036,854,775,808) to 2 63 -1 (or +9,223,372,036,854,775,807) with an accuracy to a ten-thousandth of a currency unit.\r\n     */\r\n    SqlDbType[SqlDbType[\"Money\"] = 9] = \"Money\";\r\n    /**\r\n     * String. A fixed-length stream of Unicode characters ranging between 1 and 4,000 characters.\r\n     */\r\n    SqlDbType[SqlDbType[\"NChar\"] = 10] = \"NChar\";\r\n    /**\r\n     * String. A variable-length stream of Unicode data with a maximum length of 2 30 - 1 (or 1,073,741,823) characters.\r\n     */\r\n    SqlDbType[SqlDbType[\"NText\"] = 11] = \"NText\";\r\n    /**\r\n     * String. A variable-length stream of Unicode characters ranging between 1 and 4,000 characters. Implicit conversion fails if the string is greater than 4,000 characters. Explicitly set the object when working with strings longer than 4,000 characters. Use System.Data.SqlDbType.NVarChar when the database column is nvarchar(max).\r\n     */\r\n    SqlDbType[SqlDbType[\"NVarChar\"] = 12] = \"NVarChar\";\r\n    /**\r\n     * Single. A floating point number within the range of -3.40E +38 through 3.40E +38.\r\n     */\r\n    SqlDbType[SqlDbType[\"Real\"] = 13] = \"Real\";\r\n    /**\r\n     * Guid. A globally unique identifier (or GUID).\r\n     */\r\n    SqlDbType[SqlDbType[\"UniqueIdentifier\"] = 14] = \"UniqueIdentifier\";\r\n    /**\r\n     * DateTime. Date and time data ranging in value from January 1, 1900 to June 6, 2079 to an accuracy of one minute.\r\n     */\r\n    SqlDbType[SqlDbType[\"SmallDateTime\"] = 15] = \"SmallDateTime\";\r\n    /**\r\n     * Int16. A 16-bit signed integer.\r\n     */\r\n    SqlDbType[SqlDbType[\"SmallInt\"] = 16] = \"SmallInt\";\r\n    /**\r\n     * Decimal. A currency value ranging from -214,748.3648 to +214,748.3647 with an accuracy to a ten-thousandth of a currency unit.\r\n     */\r\n    SqlDbType[SqlDbType[\"SmallMoney\"] = 17] = \"SmallMoney\";\r\n    /**\r\n     * String. A variable-length stream of non-Unicode data with a maximum length of 2 31 -1 (or 2,147,483,647) characters.\r\n     */\r\n    SqlDbType[SqlDbType[\"Text\"] = 18] = \"Text\";\r\n    /**\r\n     * Array of type System.Byte. Automatically generated binary numbers, which are guaranteed to be unique within a database. timestamp is used typically as a mechanism for version-stamping table rows. The storage size is 8 bytes.\r\n     */\r\n    SqlDbType[SqlDbType[\"Timestamp\"] = 19] = \"Timestamp\";\r\n    /**\r\n     * Byte. An 8-bit unsigned integer.\r\n     */\r\n    SqlDbType[SqlDbType[\"TinyInt\"] = 20] = \"TinyInt\";\r\n    /**\r\n     * Array of type Byte. A variable-length stream of binary data ranging between 1 and 8,000 bytes. Implicit conversion fails if the byte array is greater than 8,000 bytes. Explicitly set the object when working with byte arrays larger than 8,000 bytes.\r\n     */\r\n    SqlDbType[SqlDbType[\"VarBinary\"] = 21] = \"VarBinary\";\r\n    /**\r\n     * String. A variable-length stream of non-Unicode characters ranging between 1 and 8,000 characters. Use System.Data.SqlDbType.VarChar when the database column is varchar(max).\r\n     */\r\n    SqlDbType[SqlDbType[\"VarChar\"] = 22] = \"VarChar\";\r\n    /**\r\n     * Object. A special data type that can contain numeric, string, binary, or date data as well as the SQL Server values Empty and Null, which is assumed if no other type is declared.\r\n     */\r\n    SqlDbType[SqlDbType[\"Variant\"] = 23] = \"Variant\";\r\n    /**\r\n     * An XML value. Obtain the XML as a string using the System.Data.SqlClient.SqlDataReader.GetValue(System.Int32) method or System.Data.SqlTypes.SqlXml.Value property, or as an System.Xml.XmlReader by calling the System.Data.SqlTypes.SqlXml.CreateReader method.\r\n     */\r\n    SqlDbType[SqlDbType[\"Xml\"] = 25] = \"Xml\";\r\n    /**\r\n     * A SQL Server user-defined type (UDT).\r\n     */\r\n    SqlDbType[SqlDbType[\"Udt\"] = 29] = \"Udt\";\r\n    /**\r\n     * A special data type for specifying structured data contained in table-valued parameters.\r\n     */\r\n    SqlDbType[SqlDbType[\"Structured\"] = 30] = \"Structured\";\r\n    /**\r\n     * Date data ranging in value from January 1,1 AD through December 31, 9999 AD.\r\n     */\r\n    SqlDbType[SqlDbType[\"Date\"] = 31] = \"Date\";\r\n    /**\r\n     * Time data based on a 24-hour clock. Time value range is 00:00:00 through 23:59:59.9999999 with an accuracy of 100 nanoseconds. Corresponds to a SQL Server time value.\r\n     */\r\n    SqlDbType[SqlDbType[\"Time\"] = 32] = \"Time\";\r\n    /**\r\n     * Date and time data. Date value range is from January 1,1 AD through December 31, 9999 AD. Time value range is 00:00:00 through 23:59:59.9999999 with an accuracy of 100 nanoseconds.\r\n     */\r\n    SqlDbType[SqlDbType[\"DateTime2\"] = 33] = \"DateTime2\";\r\n    /**\r\n     * Date and time data with time zone awareness. Date value range is from January 1,1 AD through December 31, 9999 AD. Time value range is 00:00:00 through 23:59:59.9999999 with an accuracy of 100 nanoseconds. Time zone value range is -14:00 through +14:00.\r\n     */\r\n    SqlDbType[SqlDbType[\"DateTimeOffset\"] = 34] = \"DateTimeOffset\";\r\n})(SqlDbType = exports.SqlDbType || (exports.SqlDbType = {}));\r\nexports.TypeInfo = {\r\n    SqlDbType: {\r\n        enumValues: {\r\n            \"BigInt\": 0,\r\n            \"Binary\": 1,\r\n            \"Bit\": 2,\r\n            \"Char\": 3,\r\n            \"DateTime\": 4,\r\n            \"Decimal\": 5,\r\n            \"Float\": 6,\r\n            \"Image\": 7,\r\n            \"Int\": 8,\r\n            \"Money\": 9,\r\n            \"NChar\": 10,\r\n            \"NText\": 11,\r\n            \"NVarChar\": 12,\r\n            \"Real\": 13,\r\n            \"UniqueIdentifier\": 14,\r\n            \"SmallDateTime\": 15,\r\n            \"SmallInt\": 16,\r\n            \"SmallMoney\": 17,\r\n            \"Text\": 18,\r\n            \"Timestamp\": 19,\r\n            \"TinyInt\": 20,\r\n            \"VarBinary\": 21,\r\n            \"VarChar\": 22,\r\n            \"Variant\": 23,\r\n            \"Xml\": 25,\r\n            \"Udt\": 29,\r\n            \"Structured\": 30,\r\n            \"Date\": 31,\r\n            \"Time\": 32,\r\n            \"DateTime2\": 33,\r\n            \"DateTimeOffset\": 34\r\n        }\r\n    }\r\n};\r\n","/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n *\r\n * ---------------------------------------------------------\r\n * Generated file, DO NOT EDIT\r\n * ---------------------------------------------------------\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Enumeration of the options that can be passed in on Connect.\r\n */\r\nvar ConnectOptions;\r\n(function (ConnectOptions) {\r\n    /**\r\n     * Retrieve no optional data.\r\n     */\r\n    ConnectOptions[ConnectOptions[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Includes information about AccessMappings and ServiceDefinitions.\r\n     */\r\n    ConnectOptions[ConnectOptions[\"IncludeServices\"] = 1] = \"IncludeServices\";\r\n    /**\r\n     * Includes the last user access for this host.\r\n     */\r\n    ConnectOptions[ConnectOptions[\"IncludeLastUserAccess\"] = 2] = \"IncludeLastUserAccess\";\r\n    /**\r\n     * This is only valid on the deployment host and when true. Will only return inherited definitions.\r\n     */\r\n    ConnectOptions[ConnectOptions[\"IncludeInheritedDefinitionsOnly\"] = 4] = \"IncludeInheritedDefinitionsOnly\";\r\n    /**\r\n     * When true will only return non inherited definitions. Only valid at non-deployment host.\r\n     */\r\n    ConnectOptions[ConnectOptions[\"IncludeNonInheritedDefinitionsOnly\"] = 8] = \"IncludeNonInheritedDefinitionsOnly\";\r\n})(ConnectOptions = exports.ConnectOptions || (exports.ConnectOptions = {}));\r\nvar DeploymentFlags;\r\n(function (DeploymentFlags) {\r\n    DeploymentFlags[DeploymentFlags[\"None\"] = 0] = \"None\";\r\n    DeploymentFlags[DeploymentFlags[\"Hosted\"] = 1] = \"Hosted\";\r\n    DeploymentFlags[DeploymentFlags[\"OnPremises\"] = 2] = \"OnPremises\";\r\n})(DeploymentFlags = exports.DeploymentFlags || (exports.DeploymentFlags = {}));\r\nvar JWTAlgorithm;\r\n(function (JWTAlgorithm) {\r\n    JWTAlgorithm[JWTAlgorithm[\"None\"] = 0] = \"None\";\r\n    JWTAlgorithm[JWTAlgorithm[\"HS256\"] = 1] = \"HS256\";\r\n    JWTAlgorithm[JWTAlgorithm[\"RS256\"] = 2] = \"RS256\";\r\n})(JWTAlgorithm = exports.JWTAlgorithm || (exports.JWTAlgorithm = {}));\r\nvar Operation;\r\n(function (Operation) {\r\n    Operation[Operation[\"Add\"] = 0] = \"Add\";\r\n    Operation[Operation[\"Remove\"] = 1] = \"Remove\";\r\n    Operation[Operation[\"Replace\"] = 2] = \"Replace\";\r\n    Operation[Operation[\"Move\"] = 3] = \"Move\";\r\n    Operation[Operation[\"Copy\"] = 4] = \"Copy\";\r\n    Operation[Operation[\"Test\"] = 5] = \"Test\";\r\n})(Operation = exports.Operation || (exports.Operation = {}));\r\nvar UserProfileSyncState;\r\n(function (UserProfileSyncState) {\r\n    UserProfileSyncState[UserProfileSyncState[\"None\"] = 0] = \"None\";\r\n    UserProfileSyncState[UserProfileSyncState[\"Completed\"] = 1] = \"Completed\";\r\n    UserProfileSyncState[UserProfileSyncState[\"NewProfileDataAndImageRetrieved\"] = 2] = \"NewProfileDataAndImageRetrieved\";\r\n    UserProfileSyncState[UserProfileSyncState[\"ProfileDataBackupDone\"] = 3] = \"ProfileDataBackupDone\";\r\n    UserProfileSyncState[UserProfileSyncState[\"NewProfileDataSet\"] = 4] = \"NewProfileDataSet\";\r\n    UserProfileSyncState[UserProfileSyncState[\"NewProfileDataUpdateFailed\"] = 5] = \"NewProfileDataUpdateFailed\";\r\n    UserProfileSyncState[UserProfileSyncState[\"NewProfileImageUpdateFailed\"] = 6] = \"NewProfileImageUpdateFailed\";\r\n})(UserProfileSyncState = exports.UserProfileSyncState || (exports.UserProfileSyncState = {}));\r\nexports.TypeInfo = {\r\n    ConnectOptions: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"includeServices\": 1,\r\n            \"includeLastUserAccess\": 2,\r\n            \"includeInheritedDefinitionsOnly\": 4,\r\n            \"includeNonInheritedDefinitionsOnly\": 8\r\n        }\r\n    },\r\n    DeploymentFlags: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"hosted\": 1,\r\n            \"onPremises\": 2\r\n        }\r\n    },\r\n    JsonPatchOperation: {},\r\n    JWTAlgorithm: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"hS256\": 1,\r\n            \"rS256\": 2\r\n        }\r\n    },\r\n    Operation: {\r\n        enumValues: {\r\n            \"add\": 0,\r\n            \"remove\": 1,\r\n            \"replace\": 2,\r\n            \"move\": 3,\r\n            \"copy\": 4,\r\n            \"test\": 5\r\n        }\r\n    },\r\n    SignedUrl: {},\r\n    TraceFilter: {},\r\n    UserProfileSyncState: {\r\n        enumValues: {\r\n            \"none\": 0,\r\n            \"completed\": 1,\r\n            \"newProfileDataAndImageRetrieved\": 2,\r\n            \"profileDataBackupDone\": 3,\r\n            \"newProfileDataSet\": 4,\r\n            \"newProfileDataUpdateFailed\": 5,\r\n            \"newProfileImageUpdateFailed\": 6\r\n        }\r\n    },\r\n    VssNotificationEvent: {},\r\n};\r\nexports.TypeInfo.JsonPatchOperation.fields = {\r\n    op: {\r\n        enumType: exports.TypeInfo.Operation\r\n    }\r\n};\r\nexports.TypeInfo.SignedUrl.fields = {\r\n    signatureExpires: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.TraceFilter.fields = {\r\n    timeCreated: {\r\n        isDate: true,\r\n    }\r\n};\r\nexports.TypeInfo.VssNotificationEvent.fields = {\r\n    sourceEventCreatedTime: {\r\n        isDate: true,\r\n    }\r\n};\r\n","'use strict';\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    if(a===b) {\n      return [ai, bi];\n    }\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n","'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBind = require('./');\n\nvar $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));\n\nmodule.exports = function callBoundIntrinsic(name, allowMissing) {\n\tvar intrinsic = GetIntrinsic(name, !!allowMissing);\n\tif (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {\n\t\treturn callBind(intrinsic);\n\t}\n\treturn intrinsic;\n};\n","'use strict';\n\nvar bind = require('function-bind');\nvar GetIntrinsic = require('get-intrinsic');\nvar setFunctionLength = require('set-function-length');\n\nvar $TypeError = require('es-errors/type');\nvar $apply = GetIntrinsic('%Function.prototype.apply%');\nvar $call = GetIntrinsic('%Function.prototype.call%');\nvar $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);\n\nvar $defineProperty = require('es-define-property');\nvar $max = GetIntrinsic('%Math.max%');\n\nmodule.exports = function callBind(originalFunction) {\n\tif (typeof originalFunction !== 'function') {\n\t\tthrow new $TypeError('a function is required');\n\t}\n\tvar func = $reflectApply(bind, $call, arguments);\n\treturn setFunctionLength(\n\t\tfunc,\n\t\t1 + $max(0, originalFunction.length - (arguments.length - 1)),\n\t\ttrue\n\t);\n};\n\nvar applyBind = function applyBind() {\n\treturn $reflectApply(bind, $apply, arguments);\n};\n\nif ($defineProperty) {\n\t$defineProperty(module.exports, 'apply', { value: applyBind });\n} else {\n\tmodule.exports.apply = applyBind;\n}\n","'use strict';\n\nvar $defineProperty = require('es-define-property');\n\nvar $SyntaxError = require('es-errors/syntax');\nvar $TypeError = require('es-errors/type');\n\nvar gopd = require('gopd');\n\n/** @type {import('.')} */\nmodule.exports = function defineDataProperty(\n\tobj,\n\tproperty,\n\tvalue\n) {\n\tif (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {\n\t\tthrow new $TypeError('`obj` must be an object or a function`');\n\t}\n\tif (typeof property !== 'string' && typeof property !== 'symbol') {\n\t\tthrow new $TypeError('`property` must be a string or a symbol`');\n\t}\n\tif (arguments.length > 3 && typeof arguments[3] !== 'boolean' && arguments[3] !== null) {\n\t\tthrow new $TypeError('`nonEnumerable`, if provided, must be a boolean or null');\n\t}\n\tif (arguments.length > 4 && typeof arguments[4] !== 'boolean' && arguments[4] !== null) {\n\t\tthrow new $TypeError('`nonWritable`, if provided, must be a boolean or null');\n\t}\n\tif (arguments.length > 5 && typeof arguments[5] !== 'boolean' && arguments[5] !== null) {\n\t\tthrow new $TypeError('`nonConfigurable`, if provided, must be a boolean or null');\n\t}\n\tif (arguments.length > 6 && typeof arguments[6] !== 'boolean') {\n\t\tthrow new $TypeError('`loose`, if provided, must be a boolean');\n\t}\n\n\tvar nonEnumerable = arguments.length > 3 ? arguments[3] : null;\n\tvar nonWritable = arguments.length > 4 ? arguments[4] : null;\n\tvar nonConfigurable = arguments.length > 5 ? arguments[5] : null;\n\tvar loose = arguments.length > 6 ? arguments[6] : false;\n\n\t/* @type {false | TypedPropertyDescriptor<unknown>} */\n\tvar desc = !!gopd && gopd(obj, property);\n\n\tif ($defineProperty) {\n\t\t$defineProperty(obj, property, {\n\t\t\tconfigurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,\n\t\t\tenumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,\n\t\t\tvalue: value,\n\t\t\twritable: nonWritable === null && desc ? desc.writable : !nonWritable\n\t\t});\n\t} else if (loose || (!nonEnumerable && !nonWritable && !nonConfigurable)) {\n\t\t// must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable\n\t\tobj[property] = value; // eslint-disable-line no-param-reassign\n\t} else {\n\t\tthrow new $SyntaxError('This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.');\n\t}\n};\n","'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\n/** @type {import('.')} */\nvar $defineProperty = GetIntrinsic('%Object.defineProperty%', true) || false;\nif ($defineProperty) {\n\ttry {\n\t\t$defineProperty({}, 'a', { value: 1 });\n\t} catch (e) {\n\t\t// IE 8 has a broken defineProperty\n\t\t$defineProperty = false;\n\t}\n}\n\nmodule.exports = $defineProperty;\n","'use strict';\n\n/** @type {import('./eval')} */\nmodule.exports = EvalError;\n","'use strict';\n\n/** @type {import('.')} */\nmodule.exports = Error;\n","'use strict';\n\n/** @type {import('./range')} */\nmodule.exports = RangeError;\n","'use strict';\n\n/** @type {import('./ref')} */\nmodule.exports = ReferenceError;\n","'use strict';\n\n/** @type {import('./syntax')} */\nmodule.exports = SyntaxError;\n","'use strict';\n\n/** @type {import('./type')} */\nmodule.exports = TypeError;\n","'use strict';\n\n/** @type {import('./uri')} */\nmodule.exports = URIError;\n","'use strict';\n\n/* eslint no-invalid-this: 1 */\n\nvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\nvar toStr = Object.prototype.toString;\nvar max = Math.max;\nvar funcType = '[object Function]';\n\nvar concatty = function concatty(a, b) {\n    var arr = [];\n\n    for (var i = 0; i < a.length; i += 1) {\n        arr[i] = a[i];\n    }\n    for (var j = 0; j < b.length; j += 1) {\n        arr[j + a.length] = b[j];\n    }\n\n    return arr;\n};\n\nvar slicy = function slicy(arrLike, offset) {\n    var arr = [];\n    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {\n        arr[j] = arrLike[i];\n    }\n    return arr;\n};\n\nvar joiny = function (arr, joiner) {\n    var str = '';\n    for (var i = 0; i < arr.length; i += 1) {\n        str += arr[i];\n        if (i + 1 < arr.length) {\n            str += joiner;\n        }\n    }\n    return str;\n};\n\nmodule.exports = function bind(that) {\n    var target = this;\n    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slicy(arguments, 1);\n\n    var bound;\n    var binder = function () {\n        if (this instanceof bound) {\n            var result = target.apply(\n                this,\n                concatty(args, arguments)\n            );\n            if (Object(result) === result) {\n                return result;\n            }\n            return this;\n        }\n        return target.apply(\n            that,\n            concatty(args, arguments)\n        );\n\n    };\n\n    var boundLength = max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n        boundArgs[i] = '$' + i;\n    }\n\n    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);\n\n    if (target.prototype) {\n        var Empty = function Empty() {};\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n    }\n\n    return bound;\n};\n","'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = Function.prototype.bind || implementation;\n","'use strict';\n\nvar undefined;\n\nvar $Error = require('es-errors');\nvar $EvalError = require('es-errors/eval');\nvar $RangeError = require('es-errors/range');\nvar $ReferenceError = require('es-errors/ref');\nvar $SyntaxError = require('es-errors/syntax');\nvar $TypeError = require('es-errors/type');\nvar $URIError = require('es-errors/uri');\n\nvar $Function = Function;\n\n// eslint-disable-next-line consistent-return\nvar getEvalledConstructor = function (expressionSyntax) {\n\ttry {\n\t\treturn $Function('\"use strict\"; return (' + expressionSyntax + ').constructor;')();\n\t} catch (e) {}\n};\n\nvar $gOPD = Object.getOwnPropertyDescriptor;\nif ($gOPD) {\n\ttry {\n\t\t$gOPD({}, '');\n\t} catch (e) {\n\t\t$gOPD = null; // this is IE 8, which has a broken gOPD\n\t}\n}\n\nvar throwTypeError = function () {\n\tthrow new $TypeError();\n};\nvar ThrowTypeError = $gOPD\n\t? (function () {\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties\n\t\t\targuments.callee; // IE 8 does not throw here\n\t\t\treturn throwTypeError;\n\t\t} catch (calleeThrows) {\n\t\t\ttry {\n\t\t\t\t// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')\n\t\t\t\treturn $gOPD(arguments, 'callee').get;\n\t\t\t} catch (gOPDthrows) {\n\t\t\t\treturn throwTypeError;\n\t\t\t}\n\t\t}\n\t}())\n\t: throwTypeError;\n\nvar hasSymbols = require('has-symbols')();\nvar hasProto = require('has-proto')();\n\nvar getProto = Object.getPrototypeOf || (\n\thasProto\n\t\t? function (x) { return x.__proto__; } // eslint-disable-line no-proto\n\t\t: null\n);\n\nvar needsEval = {};\n\nvar TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);\n\nvar INTRINSICS = {\n\t__proto__: null,\n\t'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,\n\t'%Array%': Array,\n\t'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,\n\t'%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,\n\t'%AsyncFromSyncIteratorPrototype%': undefined,\n\t'%AsyncFunction%': needsEval,\n\t'%AsyncGenerator%': needsEval,\n\t'%AsyncGeneratorFunction%': needsEval,\n\t'%AsyncIteratorPrototype%': needsEval,\n\t'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,\n\t'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,\n\t'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,\n\t'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,\n\t'%Boolean%': Boolean,\n\t'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,\n\t'%Date%': Date,\n\t'%decodeURI%': decodeURI,\n\t'%decodeURIComponent%': decodeURIComponent,\n\t'%encodeURI%': encodeURI,\n\t'%encodeURIComponent%': encodeURIComponent,\n\t'%Error%': $Error,\n\t'%eval%': eval, // eslint-disable-line no-eval\n\t'%EvalError%': $EvalError,\n\t'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,\n\t'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,\n\t'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,\n\t'%Function%': $Function,\n\t'%GeneratorFunction%': needsEval,\n\t'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,\n\t'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,\n\t'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,\n\t'%isFinite%': isFinite,\n\t'%isNaN%': isNaN,\n\t'%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,\n\t'%JSON%': typeof JSON === 'object' ? JSON : undefined,\n\t'%Map%': typeof Map === 'undefined' ? undefined : Map,\n\t'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),\n\t'%Math%': Math,\n\t'%Number%': Number,\n\t'%Object%': Object,\n\t'%parseFloat%': parseFloat,\n\t'%parseInt%': parseInt,\n\t'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,\n\t'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,\n\t'%RangeError%': $RangeError,\n\t'%ReferenceError%': $ReferenceError,\n\t'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,\n\t'%RegExp%': RegExp,\n\t'%Set%': typeof Set === 'undefined' ? undefined : Set,\n\t'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),\n\t'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,\n\t'%String%': String,\n\t'%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,\n\t'%Symbol%': hasSymbols ? Symbol : undefined,\n\t'%SyntaxError%': $SyntaxError,\n\t'%ThrowTypeError%': ThrowTypeError,\n\t'%TypedArray%': TypedArray,\n\t'%TypeError%': $TypeError,\n\t'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,\n\t'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,\n\t'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,\n\t'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,\n\t'%URIError%': $URIError,\n\t'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,\n\t'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,\n\t'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet\n};\n\nif (getProto) {\n\ttry {\n\t\tnull.error; // eslint-disable-line no-unused-expressions\n\t} catch (e) {\n\t\t// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229\n\t\tvar errorProto = getProto(getProto(e));\n\t\tINTRINSICS['%Error.prototype%'] = errorProto;\n\t}\n}\n\nvar doEval = function doEval(name) {\n\tvar value;\n\tif (name === '%AsyncFunction%') {\n\t\tvalue = getEvalledConstructor('async function () {}');\n\t} else if (name === '%GeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('function* () {}');\n\t} else if (name === '%AsyncGeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('async function* () {}');\n\t} else if (name === '%AsyncGenerator%') {\n\t\tvar fn = doEval('%AsyncGeneratorFunction%');\n\t\tif (fn) {\n\t\t\tvalue = fn.prototype;\n\t\t}\n\t} else if (name === '%AsyncIteratorPrototype%') {\n\t\tvar gen = doEval('%AsyncGenerator%');\n\t\tif (gen && getProto) {\n\t\t\tvalue = getProto(gen.prototype);\n\t\t}\n\t}\n\n\tINTRINSICS[name] = value;\n\n\treturn value;\n};\n\nvar LEGACY_ALIASES = {\n\t__proto__: null,\n\t'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],\n\t'%ArrayPrototype%': ['Array', 'prototype'],\n\t'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],\n\t'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],\n\t'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],\n\t'%ArrayProto_values%': ['Array', 'prototype', 'values'],\n\t'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],\n\t'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],\n\t'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],\n\t'%BooleanPrototype%': ['Boolean', 'prototype'],\n\t'%DataViewPrototype%': ['DataView', 'prototype'],\n\t'%DatePrototype%': ['Date', 'prototype'],\n\t'%ErrorPrototype%': ['Error', 'prototype'],\n\t'%EvalErrorPrototype%': ['EvalError', 'prototype'],\n\t'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],\n\t'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],\n\t'%FunctionPrototype%': ['Function', 'prototype'],\n\t'%Generator%': ['GeneratorFunction', 'prototype'],\n\t'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],\n\t'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],\n\t'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],\n\t'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],\n\t'%JSONParse%': ['JSON', 'parse'],\n\t'%JSONStringify%': ['JSON', 'stringify'],\n\t'%MapPrototype%': ['Map', 'prototype'],\n\t'%NumberPrototype%': ['Number', 'prototype'],\n\t'%ObjectPrototype%': ['Object', 'prototype'],\n\t'%ObjProto_toString%': ['Object', 'prototype', 'toString'],\n\t'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],\n\t'%PromisePrototype%': ['Promise', 'prototype'],\n\t'%PromiseProto_then%': ['Promise', 'prototype', 'then'],\n\t'%Promise_all%': ['Promise', 'all'],\n\t'%Promise_reject%': ['Promise', 'reject'],\n\t'%Promise_resolve%': ['Promise', 'resolve'],\n\t'%RangeErrorPrototype%': ['RangeError', 'prototype'],\n\t'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],\n\t'%RegExpPrototype%': ['RegExp', 'prototype'],\n\t'%SetPrototype%': ['Set', 'prototype'],\n\t'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],\n\t'%StringPrototype%': ['String', 'prototype'],\n\t'%SymbolPrototype%': ['Symbol', 'prototype'],\n\t'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],\n\t'%TypedArrayPrototype%': ['TypedArray', 'prototype'],\n\t'%TypeErrorPrototype%': ['TypeError', 'prototype'],\n\t'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],\n\t'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],\n\t'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],\n\t'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],\n\t'%URIErrorPrototype%': ['URIError', 'prototype'],\n\t'%WeakMapPrototype%': ['WeakMap', 'prototype'],\n\t'%WeakSetPrototype%': ['WeakSet', 'prototype']\n};\n\nvar bind = require('function-bind');\nvar hasOwn = require('hasown');\nvar $concat = bind.call(Function.call, Array.prototype.concat);\nvar $spliceApply = bind.call(Function.apply, Array.prototype.splice);\nvar $replace = bind.call(Function.call, String.prototype.replace);\nvar $strSlice = bind.call(Function.call, String.prototype.slice);\nvar $exec = bind.call(Function.call, RegExp.prototype.exec);\n\n/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */\nvar rePropName = /[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;\nvar reEscapeChar = /\\\\(\\\\)?/g; /** Used to match backslashes in property paths. */\nvar stringToPath = function stringToPath(string) {\n\tvar first = $strSlice(string, 0, 1);\n\tvar last = $strSlice(string, -1);\n\tif (first === '%' && last !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected closing `%`');\n\t} else if (last === '%' && first !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected opening `%`');\n\t}\n\tvar result = [];\n\t$replace(string, rePropName, function (match, number, quote, subString) {\n\t\tresult[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;\n\t});\n\treturn result;\n};\n/* end adaptation */\n\nvar getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {\n\tvar intrinsicName = name;\n\tvar alias;\n\tif (hasOwn(LEGACY_ALIASES, intrinsicName)) {\n\t\talias = LEGACY_ALIASES[intrinsicName];\n\t\tintrinsicName = '%' + alias[0] + '%';\n\t}\n\n\tif (hasOwn(INTRINSICS, intrinsicName)) {\n\t\tvar value = INTRINSICS[intrinsicName];\n\t\tif (value === needsEval) {\n\t\t\tvalue = doEval(intrinsicName);\n\t\t}\n\t\tif (typeof value === 'undefined' && !allowMissing) {\n\t\t\tthrow new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');\n\t\t}\n\n\t\treturn {\n\t\t\talias: alias,\n\t\t\tname: intrinsicName,\n\t\t\tvalue: value\n\t\t};\n\t}\n\n\tthrow new $SyntaxError('intrinsic ' + name + ' does not exist!');\n};\n\nmodule.exports = function GetIntrinsic(name, allowMissing) {\n\tif (typeof name !== 'string' || name.length === 0) {\n\t\tthrow new $TypeError('intrinsic name must be a non-empty string');\n\t}\n\tif (arguments.length > 1 && typeof allowMissing !== 'boolean') {\n\t\tthrow new $TypeError('\"allowMissing\" argument must be a boolean');\n\t}\n\n\tif ($exec(/^%?[^%]*%?$/, name) === null) {\n\t\tthrow new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');\n\t}\n\tvar parts = stringToPath(name);\n\tvar intrinsicBaseName = parts.length > 0 ? parts[0] : '';\n\n\tvar intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);\n\tvar intrinsicRealName = intrinsic.name;\n\tvar value = intrinsic.value;\n\tvar skipFurtherCaching = false;\n\n\tvar alias = intrinsic.alias;\n\tif (alias) {\n\t\tintrinsicBaseName = alias[0];\n\t\t$spliceApply(parts, $concat([0, 1], alias));\n\t}\n\n\tfor (var i = 1, isOwn = true; i < parts.length; i += 1) {\n\t\tvar part = parts[i];\n\t\tvar first = $strSlice(part, 0, 1);\n\t\tvar last = $strSlice(part, -1);\n\t\tif (\n\t\t\t(\n\t\t\t\t(first === '\"' || first === \"'\" || first === '`')\n\t\t\t\t|| (last === '\"' || last === \"'\" || last === '`')\n\t\t\t)\n\t\t\t&& first !== last\n\t\t) {\n\t\t\tthrow new $SyntaxError('property names with quotes must have matching quotes');\n\t\t}\n\t\tif (part === 'constructor' || !isOwn) {\n\t\t\tskipFurtherCaching = true;\n\t\t}\n\n\t\tintrinsicBaseName += '.' + part;\n\t\tintrinsicRealName = '%' + intrinsicBaseName + '%';\n\n\t\tif (hasOwn(INTRINSICS, intrinsicRealName)) {\n\t\t\tvalue = INTRINSICS[intrinsicRealName];\n\t\t} else if (value != null) {\n\t\t\tif (!(part in value)) {\n\t\t\t\tif (!allowMissing) {\n\t\t\t\t\tthrow new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');\n\t\t\t\t}\n\t\t\t\treturn void undefined;\n\t\t\t}\n\t\t\tif ($gOPD && (i + 1) >= parts.length) {\n\t\t\t\tvar desc = $gOPD(value, part);\n\t\t\t\tisOwn = !!desc;\n\n\t\t\t\t// By convention, when a data property is converted to an accessor\n\t\t\t\t// property to emulate a data property that does not suffer from\n\t\t\t\t// the override mistake, that accessor's getter is marked with\n\t\t\t\t// an `originalValue` property. Here, when we detect this, we\n\t\t\t\t// uphold the illusion by pretending to see that original data\n\t\t\t\t// property, i.e., returning the value rather than the getter\n\t\t\t\t// itself.\n\t\t\t\tif (isOwn && 'get' in desc && !('originalValue' in desc.get)) {\n\t\t\t\t\tvalue = desc.get;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = value[part];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tisOwn = hasOwn(value, part);\n\t\t\t\tvalue = value[part];\n\t\t\t}\n\n\t\t\tif (isOwn && !skipFurtherCaching) {\n\t\t\t\tINTRINSICS[intrinsicRealName] = value;\n\t\t\t}\n\t\t}\n\t}\n\treturn value;\n};\n","var balanced = require('balanced-match');\n\nmodule.exports = expandTop;\n\nvar escSlash = '\\0SLASH'+Math.random()+'\\0';\nvar escOpen = '\\0OPEN'+Math.random()+'\\0';\nvar escClose = '\\0CLOSE'+Math.random()+'\\0';\nvar escComma = '\\0COMMA'+Math.random()+'\\0';\nvar escPeriod = '\\0PERIOD'+Math.random()+'\\0';\n\nfunction numeric(str) {\n  return parseInt(str, 10) == str\n    ? parseInt(str, 10)\n    : str.charCodeAt(0);\n}\n\nfunction escapeBraces(str) {\n  return str.split('\\\\\\\\').join(escSlash)\n            .split('\\\\{').join(escOpen)\n            .split('\\\\}').join(escClose)\n            .split('\\\\,').join(escComma)\n            .split('\\\\.').join(escPeriod);\n}\n\nfunction unescapeBraces(str) {\n  return str.split(escSlash).join('\\\\')\n            .split(escOpen).join('{')\n            .split(escClose).join('}')\n            .split(escComma).join(',')\n            .split(escPeriod).join('.');\n}\n\n\n// Basically just str.split(\",\"), but handling cases\n// where we have nested braced sections, which should be\n// treated as individual members, like {a,{b,c},d}\nfunction parseCommaParts(str) {\n  if (!str)\n    return [''];\n\n  var parts = [];\n  var m = balanced('{', '}', str);\n\n  if (!m)\n    return str.split(',');\n\n  var pre = m.pre;\n  var body = m.body;\n  var post = m.post;\n  var p = pre.split(',');\n\n  p[p.length-1] += '{' + body + '}';\n  var postParts = parseCommaParts(post);\n  if (post.length) {\n    p[p.length-1] += postParts.shift();\n    p.push.apply(p, postParts);\n  }\n\n  parts.push.apply(parts, p);\n\n  return parts;\n}\n\nfunction expandTop(str) {\n  if (!str)\n    return [];\n\n  // I don't know why Bash 4.3 does this, but it does.\n  // Anything starting with {} will have the first two bytes preserved\n  // but *only* at the top level, so {},a}b will not expand to anything,\n  // but a{},b}c will be expanded to [a}c,abc].\n  // One could argue that this is a bug in Bash, but since the goal of\n  // this module is to match Bash's rules, we escape a leading {}\n  if (str.substr(0, 2) === '{}') {\n    str = '\\\\{\\\\}' + str.substr(2);\n  }\n\n  return expand(escapeBraces(str), true).map(unescapeBraces);\n}\n\nfunction embrace(str) {\n  return '{' + str + '}';\n}\nfunction isPadded(el) {\n  return /^-?0\\d/.test(el);\n}\n\nfunction lte(i, y) {\n  return i <= y;\n}\nfunction gte(i, y) {\n  return i >= y;\n}\n\nfunction expand(str, isTop) {\n  var expansions = [];\n\n  var m = balanced('{', '}', str);\n  if (!m) return [str];\n\n  // no need to expand pre, since it is guaranteed to be free of brace-sets\n  var pre = m.pre;\n  var post = m.post.length\n    ? expand(m.post, false)\n    : [''];\n\n  if (/\\$$/.test(m.pre)) {    \n    for (var k = 0; k < post.length; k++) {\n      var expansion = pre+ '{' + m.body + '}' + post[k];\n      expansions.push(expansion);\n    }\n  } else {\n    var isNumericSequence = /^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(m.body);\n    var isAlphaSequence = /^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(m.body);\n    var isSequence = isNumericSequence || isAlphaSequence;\n    var isOptions = m.body.indexOf(',') >= 0;\n    if (!isSequence && !isOptions) {\n      // {a},b}\n      if (m.post.match(/,.*\\}/)) {\n        str = m.pre + '{' + m.body + escClose + m.post;\n        return expand(str);\n      }\n      return [str];\n    }\n\n    var n;\n    if (isSequence) {\n      n = m.body.split(/\\.\\./);\n    } else {\n      n = parseCommaParts(m.body);\n      if (n.length === 1) {\n        // x{{a,b}}y ==> x{a}y x{b}y\n        n = expand(n[0], false).map(embrace);\n        if (n.length === 1) {\n          return post.map(function(p) {\n            return m.pre + n[0] + p;\n          });\n        }\n      }\n    }\n\n    // at this point, n is the parts, and we know it's not a comma set\n    // with a single entry.\n    var N;\n\n    if (isSequence) {\n      var x = numeric(n[0]);\n      var y = numeric(n[1]);\n      var width = Math.max(n[0].length, n[1].length)\n      var incr = n.length == 3\n        ? Math.abs(numeric(n[2]))\n        : 1;\n      var test = lte;\n      var reverse = y < x;\n      if (reverse) {\n        incr *= -1;\n        test = gte;\n      }\n      var pad = n.some(isPadded);\n\n      N = [];\n\n      for (var i = x; test(i, y); i += incr) {\n        var c;\n        if (isAlphaSequence) {\n          c = String.fromCharCode(i);\n          if (c === '\\\\')\n            c = '';\n        } else {\n          c = String(i);\n          if (pad) {\n            var need = width - c.length;\n            if (need > 0) {\n              var z = new Array(need + 1).join('0');\n              if (i < 0)\n                c = '-' + z + c.slice(1);\n              else\n                c = z + c;\n            }\n          }\n        }\n        N.push(c);\n      }\n    } else {\n      N = [];\n\n      for (var j = 0; j < n.length; j++) {\n        N.push.apply(N, expand(n[j], false));\n      }\n    }\n\n    for (var j = 0; j < N.length; j++) {\n      for (var k = 0; k < post.length; k++) {\n        var expansion = pre + N[j] + post[k];\n        if (!isTop || isSequence || expansion)\n          expansions.push(expansion);\n      }\n    }\n  }\n\n  return expansions;\n}\n\n","'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);\n\nif ($gOPD) {\n\ttry {\n\t\t$gOPD([], 'length');\n\t} catch (e) {\n\t\t// IE 8 has a broken gOPD\n\t\t$gOPD = null;\n\t}\n}\n\nmodule.exports = $gOPD;\n","'use strict';\n\nvar $defineProperty = require('es-define-property');\n\nvar hasPropertyDescriptors = function hasPropertyDescriptors() {\n\treturn !!$defineProperty;\n};\n\nhasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {\n\t// node v0.6 has a bug where array lengths can be Set but not Defined\n\tif (!$defineProperty) {\n\t\treturn null;\n\t}\n\ttry {\n\t\treturn $defineProperty([], 'length', { value: 1 }).length !== 1;\n\t} catch (e) {\n\t\t// In Firefox 4-22, defining length on an array throws an exception.\n\t\treturn true;\n\t}\n};\n\nmodule.exports = hasPropertyDescriptors;\n","'use strict';\n\nvar test = {\n\tfoo: {}\n};\n\nvar $Object = Object;\n\nmodule.exports = function hasProto() {\n\treturn { __proto__: test }.foo === test.foo && !({ __proto__: null } instanceof $Object);\n};\n","'use strict';\n\nvar origSymbol = typeof Symbol !== 'undefined' && Symbol;\nvar hasSymbolSham = require('./shams');\n\nmodule.exports = function hasNativeSymbols() {\n\tif (typeof origSymbol !== 'function') { return false; }\n\tif (typeof Symbol !== 'function') { return false; }\n\tif (typeof origSymbol('foo') !== 'symbol') { return false; }\n\tif (typeof Symbol('bar') !== 'symbol') { return false; }\n\n\treturn hasSymbolSham();\n};\n","'use strict';\n\n/* eslint complexity: [2, 18], max-statements: [2, 33] */\nmodule.exports = function hasSymbols() {\n\tif (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }\n\tif (typeof Symbol.iterator === 'symbol') { return true; }\n\n\tvar obj = {};\n\tvar sym = Symbol('test');\n\tvar symObj = Object(sym);\n\tif (typeof sym === 'string') { return false; }\n\n\tif (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }\n\tif (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }\n\n\t// temp disabled per https://github.com/ljharb/object.assign/issues/17\n\t// if (sym instanceof Symbol) { return false; }\n\t// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4\n\t// if (!(symObj instanceof Symbol)) { return false; }\n\n\t// if (typeof Symbol.prototype.toString !== 'function') { return false; }\n\t// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }\n\n\tvar symVal = 42;\n\tobj[sym] = symVal;\n\tfor (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop\n\tif (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }\n\n\tif (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }\n\n\tvar syms = Object.getOwnPropertySymbols(obj);\n\tif (syms.length !== 1 || syms[0] !== sym) { return false; }\n\n\tif (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }\n\n\tif (typeof Object.getOwnPropertyDescriptor === 'function') {\n\t\tvar descriptor = Object.getOwnPropertyDescriptor(obj, sym);\n\t\tif (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nvar call = Function.prototype.call;\nvar $hasOwn = Object.prototype.hasOwnProperty;\nvar bind = require('function-bind');\n\n/** @type {import('.')} */\nmodule.exports = bind.call(call, $hasOwn);\n","var hasMap = typeof Map === 'function' && Map.prototype;\nvar mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;\nvar mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;\nvar mapForEach = hasMap && Map.prototype.forEach;\nvar hasSet = typeof Set === 'function' && Set.prototype;\nvar setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;\nvar setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;\nvar setForEach = hasSet && Set.prototype.forEach;\nvar hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;\nvar weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;\nvar hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;\nvar weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;\nvar hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;\nvar weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;\nvar booleanValueOf = Boolean.prototype.valueOf;\nvar objectToString = Object.prototype.toString;\nvar functionToString = Function.prototype.toString;\nvar $match = String.prototype.match;\nvar $slice = String.prototype.slice;\nvar $replace = String.prototype.replace;\nvar $toUpperCase = String.prototype.toUpperCase;\nvar $toLowerCase = String.prototype.toLowerCase;\nvar $test = RegExp.prototype.test;\nvar $concat = Array.prototype.concat;\nvar $join = Array.prototype.join;\nvar $arrSlice = Array.prototype.slice;\nvar $floor = Math.floor;\nvar bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;\nvar gOPS = Object.getOwnPropertySymbols;\nvar symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;\nvar hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';\n// ie, `has-tostringtag/shams\nvar toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol')\n    ? Symbol.toStringTag\n    : null;\nvar isEnumerable = Object.prototype.propertyIsEnumerable;\n\nvar gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (\n    [].__proto__ === Array.prototype // eslint-disable-line no-proto\n        ? function (O) {\n            return O.__proto__; // eslint-disable-line no-proto\n        }\n        : null\n);\n\nfunction addNumericSeparator(num, str) {\n    if (\n        num === Infinity\n        || num === -Infinity\n        || num !== num\n        || (num && num > -1000 && num < 1000)\n        || $test.call(/e/, str)\n    ) {\n        return str;\n    }\n    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;\n    if (typeof num === 'number') {\n        var int = num < 0 ? -$floor(-num) : $floor(num); // trunc(num)\n        if (int !== num) {\n            var intStr = String(int);\n            var dec = $slice.call(str, intStr.length + 1);\n            return $replace.call(intStr, sepRegex, '$&_') + '.' + $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');\n        }\n    }\n    return $replace.call(str, sepRegex, '$&_');\n}\n\nvar utilInspect = require('./util.inspect');\nvar inspectCustom = utilInspect.custom;\nvar inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;\n\nmodule.exports = function inspect_(obj, options, depth, seen) {\n    var opts = options || {};\n\n    if (has(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {\n        throw new TypeError('option \"quoteStyle\" must be \"single\" or \"double\"');\n    }\n    if (\n        has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'\n            ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity\n            : opts.maxStringLength !== null\n        )\n    ) {\n        throw new TypeError('option \"maxStringLength\", if provided, must be a positive integer, Infinity, or `null`');\n    }\n    var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;\n    if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {\n        throw new TypeError('option \"customInspect\", if provided, must be `true`, `false`, or `\\'symbol\\'`');\n    }\n\n    if (\n        has(opts, 'indent')\n        && opts.indent !== null\n        && opts.indent !== '\\t'\n        && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)\n    ) {\n        throw new TypeError('option \"indent\" must be \"\\\\t\", an integer > 0, or `null`');\n    }\n    if (has(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {\n        throw new TypeError('option \"numericSeparator\", if provided, must be `true` or `false`');\n    }\n    var numericSeparator = opts.numericSeparator;\n\n    if (typeof obj === 'undefined') {\n        return 'undefined';\n    }\n    if (obj === null) {\n        return 'null';\n    }\n    if (typeof obj === 'boolean') {\n        return obj ? 'true' : 'false';\n    }\n\n    if (typeof obj === 'string') {\n        return inspectString(obj, opts);\n    }\n    if (typeof obj === 'number') {\n        if (obj === 0) {\n            return Infinity / obj > 0 ? '0' : '-0';\n        }\n        var str = String(obj);\n        return numericSeparator ? addNumericSeparator(obj, str) : str;\n    }\n    if (typeof obj === 'bigint') {\n        var bigIntStr = String(obj) + 'n';\n        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;\n    }\n\n    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;\n    if (typeof depth === 'undefined') { depth = 0; }\n    if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {\n        return isArray(obj) ? '[Array]' : '[Object]';\n    }\n\n    var indent = getIndent(opts, depth);\n\n    if (typeof seen === 'undefined') {\n        seen = [];\n    } else if (indexOf(seen, obj) >= 0) {\n        return '[Circular]';\n    }\n\n    function inspect(value, from, noIndent) {\n        if (from) {\n            seen = $arrSlice.call(seen);\n            seen.push(from);\n        }\n        if (noIndent) {\n            var newOpts = {\n                depth: opts.depth\n            };\n            if (has(opts, 'quoteStyle')) {\n                newOpts.quoteStyle = opts.quoteStyle;\n            }\n            return inspect_(value, newOpts, depth + 1, seen);\n        }\n        return inspect_(value, opts, depth + 1, seen);\n    }\n\n    if (typeof obj === 'function' && !isRegExp(obj)) { // in older engines, regexes are callable\n        var name = nameOf(obj);\n        var keys = arrObjKeys(obj, inspect);\n        return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');\n    }\n    if (isSymbol(obj)) {\n        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\\(.*\\))_[^)]*$/, '$1') : symToString.call(obj);\n        return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;\n    }\n    if (isElement(obj)) {\n        var s = '<' + $toLowerCase.call(String(obj.nodeName));\n        var attrs = obj.attributes || [];\n        for (var i = 0; i < attrs.length; i++) {\n            s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);\n        }\n        s += '>';\n        if (obj.childNodes && obj.childNodes.length) { s += '...'; }\n        s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';\n        return s;\n    }\n    if (isArray(obj)) {\n        if (obj.length === 0) { return '[]'; }\n        var xs = arrObjKeys(obj, inspect);\n        if (indent && !singleLineValues(xs)) {\n            return '[' + indentedJoin(xs, indent) + ']';\n        }\n        return '[ ' + $join.call(xs, ', ') + ' ]';\n    }\n    if (isError(obj)) {\n        var parts = arrObjKeys(obj, inspect);\n        if (!('cause' in Error.prototype) && 'cause' in obj && !isEnumerable.call(obj, 'cause')) {\n            return '{ [' + String(obj) + '] ' + $join.call($concat.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';\n        }\n        if (parts.length === 0) { return '[' + String(obj) + ']'; }\n        return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';\n    }\n    if (typeof obj === 'object' && customInspect) {\n        if (inspectSymbol && typeof obj[inspectSymbol] === 'function' && utilInspect) {\n            return utilInspect(obj, { depth: maxDepth - depth });\n        } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {\n            return obj.inspect();\n        }\n    }\n    if (isMap(obj)) {\n        var mapParts = [];\n        if (mapForEach) {\n            mapForEach.call(obj, function (value, key) {\n                mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));\n            });\n        }\n        return collectionOf('Map', mapSize.call(obj), mapParts, indent);\n    }\n    if (isSet(obj)) {\n        var setParts = [];\n        if (setForEach) {\n            setForEach.call(obj, function (value) {\n                setParts.push(inspect(value, obj));\n            });\n        }\n        return collectionOf('Set', setSize.call(obj), setParts, indent);\n    }\n    if (isWeakMap(obj)) {\n        return weakCollectionOf('WeakMap');\n    }\n    if (isWeakSet(obj)) {\n        return weakCollectionOf('WeakSet');\n    }\n    if (isWeakRef(obj)) {\n        return weakCollectionOf('WeakRef');\n    }\n    if (isNumber(obj)) {\n        return markBoxed(inspect(Number(obj)));\n    }\n    if (isBigInt(obj)) {\n        return markBoxed(inspect(bigIntValueOf.call(obj)));\n    }\n    if (isBoolean(obj)) {\n        return markBoxed(booleanValueOf.call(obj));\n    }\n    if (isString(obj)) {\n        return markBoxed(inspect(String(obj)));\n    }\n    // note: in IE 8, sometimes `global !== window` but both are the prototypes of each other\n    /* eslint-env browser */\n    if (typeof window !== 'undefined' && obj === window) {\n        return '{ [object Window] }';\n    }\n    if (obj === global) {\n        return '{ [object globalThis] }';\n    }\n    if (!isDate(obj) && !isRegExp(obj)) {\n        var ys = arrObjKeys(obj, inspect);\n        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;\n        var protoTag = obj instanceof Object ? '' : 'null prototype';\n        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? 'Object' : '';\n        var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';\n        var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');\n        if (ys.length === 0) { return tag + '{}'; }\n        if (indent) {\n            return tag + '{' + indentedJoin(ys, indent) + '}';\n        }\n        return tag + '{ ' + $join.call(ys, ', ') + ' }';\n    }\n    return String(obj);\n};\n\nfunction wrapQuotes(s, defaultStyle, opts) {\n    var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '\"' : \"'\";\n    return quoteChar + s + quoteChar;\n}\n\nfunction quote(s) {\n    return $replace.call(String(s), /\"/g, '&quot;');\n}\n\nfunction isArray(obj) { return toStr(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isDate(obj) { return toStr(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isRegExp(obj) { return toStr(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isError(obj) { return toStr(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isString(obj) { return toStr(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isNumber(obj) { return toStr(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isBoolean(obj) { return toStr(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\n\n// Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives\nfunction isSymbol(obj) {\n    if (hasShammedSymbols) {\n        return obj && typeof obj === 'object' && obj instanceof Symbol;\n    }\n    if (typeof obj === 'symbol') {\n        return true;\n    }\n    if (!obj || typeof obj !== 'object' || !symToString) {\n        return false;\n    }\n    try {\n        symToString.call(obj);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nfunction isBigInt(obj) {\n    if (!obj || typeof obj !== 'object' || !bigIntValueOf) {\n        return false;\n    }\n    try {\n        bigIntValueOf.call(obj);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nvar hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };\nfunction has(obj, key) {\n    return hasOwn.call(obj, key);\n}\n\nfunction toStr(obj) {\n    return objectToString.call(obj);\n}\n\nfunction nameOf(f) {\n    if (f.name) { return f.name; }\n    var m = $match.call(functionToString.call(f), /^function\\s*([\\w$]+)/);\n    if (m) { return m[1]; }\n    return null;\n}\n\nfunction indexOf(xs, x) {\n    if (xs.indexOf) { return xs.indexOf(x); }\n    for (var i = 0, l = xs.length; i < l; i++) {\n        if (xs[i] === x) { return i; }\n    }\n    return -1;\n}\n\nfunction isMap(x) {\n    if (!mapSize || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        mapSize.call(x);\n        try {\n            setSize.call(x);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof Map; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakMap(x) {\n    if (!weakMapHas || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakMapHas.call(x, weakMapHas);\n        try {\n            weakSetHas.call(x, weakSetHas);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakRef(x) {\n    if (!weakRefDeref || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakRefDeref.call(x);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nfunction isSet(x) {\n    if (!setSize || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        setSize.call(x);\n        try {\n            mapSize.call(x);\n        } catch (m) {\n            return true;\n        }\n        return x instanceof Set; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakSet(x) {\n    if (!weakSetHas || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakSetHas.call(x, weakSetHas);\n        try {\n            weakMapHas.call(x, weakMapHas);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isElement(x) {\n    if (!x || typeof x !== 'object') { return false; }\n    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {\n        return true;\n    }\n    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';\n}\n\nfunction inspectString(str, opts) {\n    if (str.length > opts.maxStringLength) {\n        var remaining = str.length - opts.maxStringLength;\n        var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');\n        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;\n    }\n    // eslint-disable-next-line no-control-regex\n    var s = $replace.call($replace.call(str, /(['\\\\])/g, '\\\\$1'), /[\\x00-\\x1f]/g, lowbyte);\n    return wrapQuotes(s, 'single', opts);\n}\n\nfunction lowbyte(c) {\n    var n = c.charCodeAt(0);\n    var x = {\n        8: 'b',\n        9: 't',\n        10: 'n',\n        12: 'f',\n        13: 'r'\n    }[n];\n    if (x) { return '\\\\' + x; }\n    return '\\\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));\n}\n\nfunction markBoxed(str) {\n    return 'Object(' + str + ')';\n}\n\nfunction weakCollectionOf(type) {\n    return type + ' { ? }';\n}\n\nfunction collectionOf(type, size, entries, indent) {\n    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ', ');\n    return type + ' (' + size + ') {' + joinedEntries + '}';\n}\n\nfunction singleLineValues(xs) {\n    for (var i = 0; i < xs.length; i++) {\n        if (indexOf(xs[i], '\\n') >= 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction getIndent(opts, depth) {\n    var baseIndent;\n    if (opts.indent === '\\t') {\n        baseIndent = '\\t';\n    } else if (typeof opts.indent === 'number' && opts.indent > 0) {\n        baseIndent = $join.call(Array(opts.indent + 1), ' ');\n    } else {\n        return null;\n    }\n    return {\n        base: baseIndent,\n        prev: $join.call(Array(depth + 1), baseIndent)\n    };\n}\n\nfunction indentedJoin(xs, indent) {\n    if (xs.length === 0) { return ''; }\n    var lineJoiner = '\\n' + indent.prev + indent.base;\n    return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\\n' + indent.prev;\n}\n\nfunction arrObjKeys(obj, inspect) {\n    var isArr = isArray(obj);\n    var xs = [];\n    if (isArr) {\n        xs.length = obj.length;\n        for (var i = 0; i < obj.length; i++) {\n            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';\n        }\n    }\n    var syms = typeof gOPS === 'function' ? gOPS(obj) : [];\n    var symMap;\n    if (hasShammedSymbols) {\n        symMap = {};\n        for (var k = 0; k < syms.length; k++) {\n            symMap['$' + syms[k]] = syms[k];\n        }\n    }\n\n    for (var key in obj) { // eslint-disable-line no-restricted-syntax\n        if (!has(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue\n        if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue\n        if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {\n            // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section\n            continue; // eslint-disable-line no-restricted-syntax, no-continue\n        } else if ($test.call(/[^\\w$]/, key)) {\n            xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));\n        } else {\n            xs.push(key + ': ' + inspect(obj[key], obj));\n        }\n    }\n    if (typeof gOPS === 'function') {\n        for (var j = 0; j < syms.length; j++) {\n            if (isEnumerable.call(obj, syms[j])) {\n                xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));\n            }\n        }\n    }\n    return xs;\n}\n","module.exports = require('util').inspect;\n","'use strict';\n\nvar replace = String.prototype.replace;\nvar percentTwenties = /%20/g;\n\nvar Format = {\n    RFC1738: 'RFC1738',\n    RFC3986: 'RFC3986'\n};\n\nmodule.exports = {\n    'default': Format.RFC3986,\n    formatters: {\n        RFC1738: function (value) {\n            return replace.call(value, percentTwenties, '+');\n        },\n        RFC3986: function (value) {\n            return String(value);\n        }\n    },\n    RFC1738: Format.RFC1738,\n    RFC3986: Format.RFC3986\n};\n","'use strict';\n\nvar stringify = require('./stringify');\nvar parse = require('./parse');\nvar formats = require('./formats');\n\nmodule.exports = {\n    formats: formats,\n    parse: parse,\n    stringify: stringify\n};\n","'use strict';\n\nvar utils = require('./utils');\n\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\n\nvar defaults = {\n    allowDots: false,\n    allowEmptyArrays: false,\n    allowPrototypes: false,\n    allowSparse: false,\n    arrayLimit: 20,\n    charset: 'utf-8',\n    charsetSentinel: false,\n    comma: false,\n    decodeDotInKeys: true,\n    decoder: utils.decode,\n    delimiter: '&',\n    depth: 5,\n    duplicates: 'combine',\n    ignoreQueryPrefix: false,\n    interpretNumericEntities: false,\n    parameterLimit: 1000,\n    parseArrays: true,\n    plainObjects: false,\n    strictNullHandling: false\n};\n\nvar interpretNumericEntities = function (str) {\n    return str.replace(/&#(\\d+);/g, function ($0, numberStr) {\n        return String.fromCharCode(parseInt(numberStr, 10));\n    });\n};\n\nvar parseArrayValue = function (val, options) {\n    if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {\n        return val.split(',');\n    }\n\n    return val;\n};\n\n// This is what browsers will submit when the ✓ character occurs in an\n// application/x-www-form-urlencoded body and the encoding of the page containing\n// the form is iso-8859-1, or when the submitted form has an accept-charset\n// attribute of iso-8859-1. Presumably also with other charsets that do not contain\n// the ✓ character, such as us-ascii.\nvar isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')\n\n// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.\nvar charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')\n\nvar parseValues = function parseQueryStringValues(str, options) {\n    var obj = { __proto__: null };\n\n    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\\?/, '') : str;\n    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;\n    var parts = cleanStr.split(options.delimiter, limit);\n    var skipIndex = -1; // Keep track of where the utf8 sentinel was found\n    var i;\n\n    var charset = options.charset;\n    if (options.charsetSentinel) {\n        for (i = 0; i < parts.length; ++i) {\n            if (parts[i].indexOf('utf8=') === 0) {\n                if (parts[i] === charsetSentinel) {\n                    charset = 'utf-8';\n                } else if (parts[i] === isoSentinel) {\n                    charset = 'iso-8859-1';\n                }\n                skipIndex = i;\n                i = parts.length; // The eslint settings do not allow break;\n            }\n        }\n    }\n\n    for (i = 0; i < parts.length; ++i) {\n        if (i === skipIndex) {\n            continue;\n        }\n        var part = parts[i];\n\n        var bracketEqualsPos = part.indexOf(']=');\n        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;\n\n        var key, val;\n        if (pos === -1) {\n            key = options.decoder(part, defaults.decoder, charset, 'key');\n            val = options.strictNullHandling ? null : '';\n        } else {\n            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');\n            val = utils.maybeMap(\n                parseArrayValue(part.slice(pos + 1), options),\n                function (encodedVal) {\n                    return options.decoder(encodedVal, defaults.decoder, charset, 'value');\n                }\n            );\n        }\n\n        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {\n            val = interpretNumericEntities(val);\n        }\n\n        if (part.indexOf('[]=') > -1) {\n            val = isArray(val) ? [val] : val;\n        }\n\n        var existing = has.call(obj, key);\n        if (existing && options.duplicates === 'combine') {\n            obj[key] = utils.combine(obj[key], val);\n        } else if (!existing || options.duplicates === 'last') {\n            obj[key] = val;\n        }\n    }\n\n    return obj;\n};\n\nvar parseObject = function (chain, val, options, valuesParsed) {\n    var leaf = valuesParsed ? val : parseArrayValue(val, options);\n\n    for (var i = chain.length - 1; i >= 0; --i) {\n        var obj;\n        var root = chain[i];\n\n        if (root === '[]' && options.parseArrays) {\n            obj = options.allowEmptyArrays && leaf === '' ? [] : [].concat(leaf);\n        } else {\n            obj = options.plainObjects ? Object.create(null) : {};\n            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;\n            var decodedRoot = options.decodeDotInKeys ? cleanRoot.replace(/%2E/g, '.') : cleanRoot;\n            var index = parseInt(decodedRoot, 10);\n            if (!options.parseArrays && decodedRoot === '') {\n                obj = { 0: leaf };\n            } else if (\n                !isNaN(index)\n                && root !== decodedRoot\n                && String(index) === decodedRoot\n                && index >= 0\n                && (options.parseArrays && index <= options.arrayLimit)\n            ) {\n                obj = [];\n                obj[index] = leaf;\n            } else if (decodedRoot !== '__proto__') {\n                obj[decodedRoot] = leaf;\n            }\n        }\n\n        leaf = obj;\n    }\n\n    return leaf;\n};\n\nvar parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {\n    if (!givenKey) {\n        return;\n    }\n\n    // Transform dot notation to bracket notation\n    var key = options.allowDots ? givenKey.replace(/\\.([^.[]+)/g, '[$1]') : givenKey;\n\n    // The regex chunks\n\n    var brackets = /(\\[[^[\\]]*])/;\n    var child = /(\\[[^[\\]]*])/g;\n\n    // Get the parent\n\n    var segment = options.depth > 0 && brackets.exec(key);\n    var parent = segment ? key.slice(0, segment.index) : key;\n\n    // Stash the parent if it exists\n\n    var keys = [];\n    if (parent) {\n        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties\n        if (!options.plainObjects && has.call(Object.prototype, parent)) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n\n        keys.push(parent);\n    }\n\n    // Loop through children appending to the array until we hit depth\n\n    var i = 0;\n    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {\n        i += 1;\n        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n        keys.push(segment[1]);\n    }\n\n    // If there's a remainder, just add whatever is left\n\n    if (segment) {\n        keys.push('[' + key.slice(segment.index) + ']');\n    }\n\n    return parseObject(keys, val, options, valuesParsed);\n};\n\nvar normalizeParseOptions = function normalizeParseOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n\n    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {\n        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');\n    }\n\n    if (typeof opts.decodeDotInKeys !== 'undefined' && typeof opts.decodeDotInKeys !== 'boolean') {\n        throw new TypeError('`decodeDotInKeys` option can only be `true` or `false`, when provided');\n    }\n\n    if (opts.decoder !== null && typeof opts.decoder !== 'undefined' && typeof opts.decoder !== 'function') {\n        throw new TypeError('Decoder has to be a function.');\n    }\n\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n    }\n    var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;\n\n    var duplicates = typeof opts.duplicates === 'undefined' ? defaults.duplicates : opts.duplicates;\n\n    if (duplicates !== 'combine' && duplicates !== 'first' && duplicates !== 'last') {\n        throw new TypeError('The duplicates option must be either combine, first, or last');\n    }\n\n    var allowDots = typeof opts.allowDots === 'undefined' ? opts.decodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;\n\n    return {\n        allowDots: allowDots,\n        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,\n        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,\n        allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,\n        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,\n        decodeDotInKeys: typeof opts.decodeDotInKeys === 'boolean' ? opts.decodeDotInKeys : defaults.decodeDotInKeys,\n        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,\n        delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,\n        // eslint-disable-next-line no-implicit-coercion, no-extra-parens\n        depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults.depth,\n        duplicates: duplicates,\n        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,\n        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,\n        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,\n        parseArrays: opts.parseArrays !== false,\n        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n};\n\nmodule.exports = function (str, opts) {\n    var options = normalizeParseOptions(opts);\n\n    if (str === '' || str === null || typeof str === 'undefined') {\n        return options.plainObjects ? Object.create(null) : {};\n    }\n\n    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;\n    var obj = options.plainObjects ? Object.create(null) : {};\n\n    // Iterate over the keys and setup the new object\n\n    var keys = Object.keys(tempObj);\n    for (var i = 0; i < keys.length; ++i) {\n        var key = keys[i];\n        var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');\n        obj = utils.merge(obj, newObj, options);\n    }\n\n    if (options.allowSparse === true) {\n        return obj;\n    }\n\n    return utils.compact(obj);\n};\n","'use strict';\n\nvar getSideChannel = require('side-channel');\nvar utils = require('./utils');\nvar formats = require('./formats');\nvar has = Object.prototype.hasOwnProperty;\n\nvar arrayPrefixGenerators = {\n    brackets: function brackets(prefix) {\n        return prefix + '[]';\n    },\n    comma: 'comma',\n    indices: function indices(prefix, key) {\n        return prefix + '[' + key + ']';\n    },\n    repeat: function repeat(prefix) {\n        return prefix;\n    }\n};\n\nvar isArray = Array.isArray;\nvar push = Array.prototype.push;\nvar pushToArray = function (arr, valueOrArray) {\n    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);\n};\n\nvar toISO = Date.prototype.toISOString;\n\nvar defaultFormat = formats['default'];\nvar defaults = {\n    addQueryPrefix: false,\n    allowDots: false,\n    allowEmptyArrays: false,\n    arrayFormat: 'indices',\n    charset: 'utf-8',\n    charsetSentinel: false,\n    delimiter: '&',\n    encode: true,\n    encodeDotInKeys: false,\n    encoder: utils.encode,\n    encodeValuesOnly: false,\n    format: defaultFormat,\n    formatter: formats.formatters[defaultFormat],\n    // deprecated\n    indices: false,\n    serializeDate: function serializeDate(date) {\n        return toISO.call(date);\n    },\n    skipNulls: false,\n    strictNullHandling: false\n};\n\nvar isNonNullishPrimitive = function isNonNullishPrimitive(v) {\n    return typeof v === 'string'\n        || typeof v === 'number'\n        || typeof v === 'boolean'\n        || typeof v === 'symbol'\n        || typeof v === 'bigint';\n};\n\nvar sentinel = {};\n\nvar stringify = function stringify(\n    object,\n    prefix,\n    generateArrayPrefix,\n    commaRoundTrip,\n    allowEmptyArrays,\n    strictNullHandling,\n    skipNulls,\n    encodeDotInKeys,\n    encoder,\n    filter,\n    sort,\n    allowDots,\n    serializeDate,\n    format,\n    formatter,\n    encodeValuesOnly,\n    charset,\n    sideChannel\n) {\n    var obj = object;\n\n    var tmpSc = sideChannel;\n    var step = 0;\n    var findFlag = false;\n    while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {\n        // Where object last appeared in the ref tree\n        var pos = tmpSc.get(object);\n        step += 1;\n        if (typeof pos !== 'undefined') {\n            if (pos === step) {\n                throw new RangeError('Cyclic object value');\n            } else {\n                findFlag = true; // Break while\n            }\n        }\n        if (typeof tmpSc.get(sentinel) === 'undefined') {\n            step = 0;\n        }\n    }\n\n    if (typeof filter === 'function') {\n        obj = filter(prefix, obj);\n    } else if (obj instanceof Date) {\n        obj = serializeDate(obj);\n    } else if (generateArrayPrefix === 'comma' && isArray(obj)) {\n        obj = utils.maybeMap(obj, function (value) {\n            if (value instanceof Date) {\n                return serializeDate(value);\n            }\n            return value;\n        });\n    }\n\n    if (obj === null) {\n        if (strictNullHandling) {\n            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key', format) : prefix;\n        }\n\n        obj = '';\n    }\n\n    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {\n        if (encoder) {\n            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key', format);\n            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value', format))];\n        }\n        return [formatter(prefix) + '=' + formatter(String(obj))];\n    }\n\n    var values = [];\n\n    if (typeof obj === 'undefined') {\n        return values;\n    }\n\n    var objKeys;\n    if (generateArrayPrefix === 'comma' && isArray(obj)) {\n        // we need to join elements in\n        if (encodeValuesOnly && encoder) {\n            obj = utils.maybeMap(obj, encoder);\n        }\n        objKeys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];\n    } else if (isArray(filter)) {\n        objKeys = filter;\n    } else {\n        var keys = Object.keys(obj);\n        objKeys = sort ? keys.sort(sort) : keys;\n    }\n\n    var encodedPrefix = encodeDotInKeys ? prefix.replace(/\\./g, '%2E') : prefix;\n\n    var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? encodedPrefix + '[]' : encodedPrefix;\n\n    if (allowEmptyArrays && isArray(obj) && obj.length === 0) {\n        return adjustedPrefix + '[]';\n    }\n\n    for (var j = 0; j < objKeys.length; ++j) {\n        var key = objKeys[j];\n        var value = typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];\n\n        if (skipNulls && value === null) {\n            continue;\n        }\n\n        var encodedKey = allowDots && encodeDotInKeys ? key.replace(/\\./g, '%2E') : key;\n        var keyPrefix = isArray(obj)\n            ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(adjustedPrefix, encodedKey) : adjustedPrefix\n            : adjustedPrefix + (allowDots ? '.' + encodedKey : '[' + encodedKey + ']');\n\n        sideChannel.set(object, step);\n        var valueSideChannel = getSideChannel();\n        valueSideChannel.set(sentinel, sideChannel);\n        pushToArray(values, stringify(\n            value,\n            keyPrefix,\n            generateArrayPrefix,\n            commaRoundTrip,\n            allowEmptyArrays,\n            strictNullHandling,\n            skipNulls,\n            encodeDotInKeys,\n            generateArrayPrefix === 'comma' && encodeValuesOnly && isArray(obj) ? null : encoder,\n            filter,\n            sort,\n            allowDots,\n            serializeDate,\n            format,\n            formatter,\n            encodeValuesOnly,\n            charset,\n            valueSideChannel\n        ));\n    }\n\n    return values;\n};\n\nvar normalizeStringifyOptions = function normalizeStringifyOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n\n    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {\n        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');\n    }\n\n    if (typeof opts.encodeDotInKeys !== 'undefined' && typeof opts.encodeDotInKeys !== 'boolean') {\n        throw new TypeError('`encodeDotInKeys` option can only be `true` or `false`, when provided');\n    }\n\n    if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {\n        throw new TypeError('Encoder has to be a function.');\n    }\n\n    var charset = opts.charset || defaults.charset;\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n    }\n\n    var format = formats['default'];\n    if (typeof opts.format !== 'undefined') {\n        if (!has.call(formats.formatters, opts.format)) {\n            throw new TypeError('Unknown format option provided.');\n        }\n        format = opts.format;\n    }\n    var formatter = formats.formatters[format];\n\n    var filter = defaults.filter;\n    if (typeof opts.filter === 'function' || isArray(opts.filter)) {\n        filter = opts.filter;\n    }\n\n    var arrayFormat;\n    if (opts.arrayFormat in arrayPrefixGenerators) {\n        arrayFormat = opts.arrayFormat;\n    } else if ('indices' in opts) {\n        arrayFormat = opts.indices ? 'indices' : 'repeat';\n    } else {\n        arrayFormat = defaults.arrayFormat;\n    }\n\n    if ('commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {\n        throw new TypeError('`commaRoundTrip` must be a boolean, or absent');\n    }\n\n    var allowDots = typeof opts.allowDots === 'undefined' ? opts.encodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;\n\n    return {\n        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,\n        allowDots: allowDots,\n        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,\n        arrayFormat: arrayFormat,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n        commaRoundTrip: opts.commaRoundTrip,\n        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,\n        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,\n        encodeDotInKeys: typeof opts.encodeDotInKeys === 'boolean' ? opts.encodeDotInKeys : defaults.encodeDotInKeys,\n        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,\n        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,\n        filter: filter,\n        format: format,\n        formatter: formatter,\n        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,\n        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,\n        sort: typeof opts.sort === 'function' ? opts.sort : null,\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n};\n\nmodule.exports = function (object, opts) {\n    var obj = object;\n    var options = normalizeStringifyOptions(opts);\n\n    var objKeys;\n    var filter;\n\n    if (typeof options.filter === 'function') {\n        filter = options.filter;\n        obj = filter('', obj);\n    } else if (isArray(options.filter)) {\n        filter = options.filter;\n        objKeys = filter;\n    }\n\n    var keys = [];\n\n    if (typeof obj !== 'object' || obj === null) {\n        return '';\n    }\n\n    var generateArrayPrefix = arrayPrefixGenerators[options.arrayFormat];\n    var commaRoundTrip = generateArrayPrefix === 'comma' && options.commaRoundTrip;\n\n    if (!objKeys) {\n        objKeys = Object.keys(obj);\n    }\n\n    if (options.sort) {\n        objKeys.sort(options.sort);\n    }\n\n    var sideChannel = getSideChannel();\n    for (var i = 0; i < objKeys.length; ++i) {\n        var key = objKeys[i];\n\n        if (options.skipNulls && obj[key] === null) {\n            continue;\n        }\n        pushToArray(keys, stringify(\n            obj[key],\n            key,\n            generateArrayPrefix,\n            commaRoundTrip,\n            options.allowEmptyArrays,\n            options.strictNullHandling,\n            options.skipNulls,\n            options.encodeDotInKeys,\n            options.encode ? options.encoder : null,\n            options.filter,\n            options.sort,\n            options.allowDots,\n            options.serializeDate,\n            options.format,\n            options.formatter,\n            options.encodeValuesOnly,\n            options.charset,\n            sideChannel\n        ));\n    }\n\n    var joined = keys.join(options.delimiter);\n    var prefix = options.addQueryPrefix === true ? '?' : '';\n\n    if (options.charsetSentinel) {\n        if (options.charset === 'iso-8859-1') {\n            // encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\n            prefix += 'utf8=%26%2310003%3B&';\n        } else {\n            // encodeURIComponent('✓')\n            prefix += 'utf8=%E2%9C%93&';\n        }\n    }\n\n    return joined.length > 0 ? prefix + joined : '';\n};\n","'use strict';\n\nvar formats = require('./formats');\n\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\n\nvar hexTable = (function () {\n    var array = [];\n    for (var i = 0; i < 256; ++i) {\n        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());\n    }\n\n    return array;\n}());\n\nvar compactQueue = function compactQueue(queue) {\n    while (queue.length > 1) {\n        var item = queue.pop();\n        var obj = item.obj[item.prop];\n\n        if (isArray(obj)) {\n            var compacted = [];\n\n            for (var j = 0; j < obj.length; ++j) {\n                if (typeof obj[j] !== 'undefined') {\n                    compacted.push(obj[j]);\n                }\n            }\n\n            item.obj[item.prop] = compacted;\n        }\n    }\n};\n\nvar arrayToObject = function arrayToObject(source, options) {\n    var obj = options && options.plainObjects ? Object.create(null) : {};\n    for (var i = 0; i < source.length; ++i) {\n        if (typeof source[i] !== 'undefined') {\n            obj[i] = source[i];\n        }\n    }\n\n    return obj;\n};\n\nvar merge = function merge(target, source, options) {\n    /* eslint no-param-reassign: 0 */\n    if (!source) {\n        return target;\n    }\n\n    if (typeof source !== 'object') {\n        if (isArray(target)) {\n            target.push(source);\n        } else if (target && typeof target === 'object') {\n            if ((options && (options.plainObjects || options.allowPrototypes)) || !has.call(Object.prototype, source)) {\n                target[source] = true;\n            }\n        } else {\n            return [target, source];\n        }\n\n        return target;\n    }\n\n    if (!target || typeof target !== 'object') {\n        return [target].concat(source);\n    }\n\n    var mergeTarget = target;\n    if (isArray(target) && !isArray(source)) {\n        mergeTarget = arrayToObject(target, options);\n    }\n\n    if (isArray(target) && isArray(source)) {\n        source.forEach(function (item, i) {\n            if (has.call(target, i)) {\n                var targetItem = target[i];\n                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {\n                    target[i] = merge(targetItem, item, options);\n                } else {\n                    target.push(item);\n                }\n            } else {\n                target[i] = item;\n            }\n        });\n        return target;\n    }\n\n    return Object.keys(source).reduce(function (acc, key) {\n        var value = source[key];\n\n        if (has.call(acc, key)) {\n            acc[key] = merge(acc[key], value, options);\n        } else {\n            acc[key] = value;\n        }\n        return acc;\n    }, mergeTarget);\n};\n\nvar assign = function assignSingleSource(target, source) {\n    return Object.keys(source).reduce(function (acc, key) {\n        acc[key] = source[key];\n        return acc;\n    }, target);\n};\n\nvar decode = function (str, decoder, charset) {\n    var strWithoutPlus = str.replace(/\\+/g, ' ');\n    if (charset === 'iso-8859-1') {\n        // unescape never throws, no try...catch needed:\n        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);\n    }\n    // utf-8\n    try {\n        return decodeURIComponent(strWithoutPlus);\n    } catch (e) {\n        return strWithoutPlus;\n    }\n};\n\nvar encode = function encode(str, defaultEncoder, charset, kind, format) {\n    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.\n    // It has been adapted here for stricter adherence to RFC 3986\n    if (str.length === 0) {\n        return str;\n    }\n\n    var string = str;\n    if (typeof str === 'symbol') {\n        string = Symbol.prototype.toString.call(str);\n    } else if (typeof str !== 'string') {\n        string = String(str);\n    }\n\n    if (charset === 'iso-8859-1') {\n        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {\n            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';\n        });\n    }\n\n    var out = '';\n    for (var i = 0; i < string.length; ++i) {\n        var c = string.charCodeAt(i);\n\n        if (\n            c === 0x2D // -\n            || c === 0x2E // .\n            || c === 0x5F // _\n            || c === 0x7E // ~\n            || (c >= 0x30 && c <= 0x39) // 0-9\n            || (c >= 0x41 && c <= 0x5A) // a-z\n            || (c >= 0x61 && c <= 0x7A) // A-Z\n            || (format === formats.RFC1738 && (c === 0x28 || c === 0x29)) // ( )\n        ) {\n            out += string.charAt(i);\n            continue;\n        }\n\n        if (c < 0x80) {\n            out = out + hexTable[c];\n            continue;\n        }\n\n        if (c < 0x800) {\n            out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);\n            continue;\n        }\n\n        if (c < 0xD800 || c >= 0xE000) {\n            out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);\n            continue;\n        }\n\n        i += 1;\n        c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));\n        /* eslint operator-linebreak: [2, \"before\"] */\n        out += hexTable[0xF0 | (c >> 18)]\n            + hexTable[0x80 | ((c >> 12) & 0x3F)]\n            + hexTable[0x80 | ((c >> 6) & 0x3F)]\n            + hexTable[0x80 | (c & 0x3F)];\n    }\n\n    return out;\n};\n\nvar compact = function compact(value) {\n    var queue = [{ obj: { o: value }, prop: 'o' }];\n    var refs = [];\n\n    for (var i = 0; i < queue.length; ++i) {\n        var item = queue[i];\n        var obj = item.obj[item.prop];\n\n        var keys = Object.keys(obj);\n        for (var j = 0; j < keys.length; ++j) {\n            var key = keys[j];\n            var val = obj[key];\n            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {\n                queue.push({ obj: obj, prop: key });\n                refs.push(val);\n            }\n        }\n    }\n\n    compactQueue(queue);\n\n    return value;\n};\n\nvar isRegExp = function isRegExp(obj) {\n    return Object.prototype.toString.call(obj) === '[object RegExp]';\n};\n\nvar isBuffer = function isBuffer(obj) {\n    if (!obj || typeof obj !== 'object') {\n        return false;\n    }\n\n    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\n};\n\nvar combine = function combine(a, b) {\n    return [].concat(a, b);\n};\n\nvar maybeMap = function maybeMap(val, fn) {\n    if (isArray(val)) {\n        var mapped = [];\n        for (var i = 0; i < val.length; i += 1) {\n            mapped.push(fn(val[i]));\n        }\n        return mapped;\n    }\n    return fn(val);\n};\n\nmodule.exports = {\n    arrayToObject: arrayToObject,\n    assign: assign,\n    combine: combine,\n    compact: compact,\n    decode: decode,\n    encode: encode,\n    isBuffer: isBuffer,\n    isRegExp: isRegExp,\n    maybeMap: maybeMap,\n    merge: merge\n};\n","'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar define = require('define-data-property');\nvar hasDescriptors = require('has-property-descriptors')();\nvar gOPD = require('gopd');\n\nvar $TypeError = require('es-errors/type');\nvar $floor = GetIntrinsic('%Math.floor%');\n\n/** @type {import('.')} */\nmodule.exports = function setFunctionLength(fn, length) {\n\tif (typeof fn !== 'function') {\n\t\tthrow new $TypeError('`fn` is not a function');\n\t}\n\tif (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) {\n\t\tthrow new $TypeError('`length` must be a positive 32-bit integer');\n\t}\n\n\tvar loose = arguments.length > 2 && !!arguments[2];\n\n\tvar functionLengthIsConfigurable = true;\n\tvar functionLengthIsWritable = true;\n\tif ('length' in fn && gOPD) {\n\t\tvar desc = gOPD(fn, 'length');\n\t\tif (desc && !desc.configurable) {\n\t\t\tfunctionLengthIsConfigurable = false;\n\t\t}\n\t\tif (desc && !desc.writable) {\n\t\t\tfunctionLengthIsWritable = false;\n\t\t}\n\t}\n\n\tif (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {\n\t\tif (hasDescriptors) {\n\t\t\tdefine(/** @type {Parameters<define>[0]} */ (fn), 'length', length, true, true);\n\t\t} else {\n\t\t\tdefine(/** @type {Parameters<define>[0]} */ (fn), 'length', length);\n\t\t}\n\t}\n\treturn fn;\n};\n","'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar callBound = require('call-bind/callBound');\nvar inspect = require('object-inspect');\n\nvar $TypeError = require('es-errors/type');\nvar $WeakMap = GetIntrinsic('%WeakMap%', true);\nvar $Map = GetIntrinsic('%Map%', true);\n\nvar $weakMapGet = callBound('WeakMap.prototype.get', true);\nvar $weakMapSet = callBound('WeakMap.prototype.set', true);\nvar $weakMapHas = callBound('WeakMap.prototype.has', true);\nvar $mapGet = callBound('Map.prototype.get', true);\nvar $mapSet = callBound('Map.prototype.set', true);\nvar $mapHas = callBound('Map.prototype.has', true);\n\n/*\n* This function traverses the list returning the node corresponding to the given key.\n*\n* That node is also moved to the head of the list, so that if it's accessed again we don't need to traverse the whole list. By doing so, all the recently used nodes can be accessed relatively quickly.\n*/\n/** @type {import('.').listGetNode} */\nvar listGetNode = function (list, key) { // eslint-disable-line consistent-return\n\t/** @type {typeof list | NonNullable<(typeof list)['next']>} */\n\tvar prev = list;\n\t/** @type {(typeof list)['next']} */\n\tvar curr;\n\tfor (; (curr = prev.next) !== null; prev = curr) {\n\t\tif (curr.key === key) {\n\t\t\tprev.next = curr.next;\n\t\t\t// eslint-disable-next-line no-extra-parens\n\t\t\tcurr.next = /** @type {NonNullable<typeof list.next>} */ (list.next);\n\t\t\tlist.next = curr; // eslint-disable-line no-param-reassign\n\t\t\treturn curr;\n\t\t}\n\t}\n};\n\n/** @type {import('.').listGet} */\nvar listGet = function (objects, key) {\n\tvar node = listGetNode(objects, key);\n\treturn node && node.value;\n};\n/** @type {import('.').listSet} */\nvar listSet = function (objects, key, value) {\n\tvar node = listGetNode(objects, key);\n\tif (node) {\n\t\tnode.value = value;\n\t} else {\n\t\t// Prepend the new node to the beginning of the list\n\t\tobjects.next = /** @type {import('.').ListNode<typeof value>} */ ({ // eslint-disable-line no-param-reassign, no-extra-parens\n\t\t\tkey: key,\n\t\t\tnext: objects.next,\n\t\t\tvalue: value\n\t\t});\n\t}\n};\n/** @type {import('.').listHas} */\nvar listHas = function (objects, key) {\n\treturn !!listGetNode(objects, key);\n};\n\n/** @type {import('.')} */\nmodule.exports = function getSideChannel() {\n\t/** @type {WeakMap<object, unknown>} */ var $wm;\n\t/** @type {Map<object, unknown>} */ var $m;\n\t/** @type {import('.').RootNode<unknown>} */ var $o;\n\n\t/** @type {import('.').Channel} */\n\tvar channel = {\n\t\tassert: function (key) {\n\t\t\tif (!channel.has(key)) {\n\t\t\t\tthrow new $TypeError('Side channel does not contain ' + inspect(key));\n\t\t\t}\n\t\t},\n\t\tget: function (key) { // eslint-disable-line consistent-return\n\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\tif ($wm) {\n\t\t\t\t\treturn $weakMapGet($wm, key);\n\t\t\t\t}\n\t\t\t} else if ($Map) {\n\t\t\t\tif ($m) {\n\t\t\t\t\treturn $mapGet($m, key);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ($o) { // eslint-disable-line no-lonely-if\n\t\t\t\t\treturn listGet($o, key);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\thas: function (key) {\n\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\tif ($wm) {\n\t\t\t\t\treturn $weakMapHas($wm, key);\n\t\t\t\t}\n\t\t\t} else if ($Map) {\n\t\t\t\tif ($m) {\n\t\t\t\t\treturn $mapHas($m, key);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ($o) { // eslint-disable-line no-lonely-if\n\t\t\t\t\treturn listHas($o, key);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tset: function (key, value) {\n\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\tif (!$wm) {\n\t\t\t\t\t$wm = new $WeakMap();\n\t\t\t\t}\n\t\t\t\t$weakMapSet($wm, key, value);\n\t\t\t} else if ($Map) {\n\t\t\t\tif (!$m) {\n\t\t\t\t\t$m = new $Map();\n\t\t\t\t}\n\t\t\t\t$mapSet($m, key, value);\n\t\t\t} else {\n\t\t\t\tif (!$o) {\n\t\t\t\t\t// Initialize the linked list as an empty node, so that we don't have to special-case handling of the first node: we can always refer to it as (previous node).next, instead of something like (list).head\n\t\t\t\t\t$o = { key: {}, next: null };\n\t\t\t\t}\n\t\t\t\tlistSet($o, key, value);\n\t\t\t}\n\t\t}\n\t};\n\treturn channel;\n};\n","module.exports = require('./lib/tunnel');\n","'use strict';\n\nvar net = require('net');\nvar tls = require('tls');\nvar http = require('http');\nvar https = require('https');\nvar events = require('events');\nvar assert = require('assert');\nvar util = require('util');\n\n\nexports.httpOverHttp = httpOverHttp;\nexports.httpsOverHttp = httpsOverHttp;\nexports.httpOverHttps = httpOverHttps;\nexports.httpsOverHttps = httpsOverHttps;\n\n\nfunction httpOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  return agent;\n}\n\nfunction httpsOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\nfunction httpOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  return agent;\n}\n\nfunction httpsOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\n\nfunction TunnelingAgent(options) {\n  var self = this;\n  self.options = options || {};\n  self.proxyOptions = self.options.proxy || {};\n  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;\n  self.requests = [];\n  self.sockets = [];\n\n  self.on('free', function onFree(socket, host, port, localAddress) {\n    var options = toOptions(host, port, localAddress);\n    for (var i = 0, len = self.requests.length; i < len; ++i) {\n      var pending = self.requests[i];\n      if (pending.host === options.host && pending.port === options.port) {\n        // Detect the request to connect same origin server,\n        // reuse the connection.\n        self.requests.splice(i, 1);\n        pending.request.onSocket(socket);\n        return;\n      }\n    }\n    socket.destroy();\n    self.removeSocket(socket);\n  });\n}\nutil.inherits(TunnelingAgent, events.EventEmitter);\n\nTunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {\n  var self = this;\n  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));\n\n  if (self.sockets.length >= this.maxSockets) {\n    // We are over limit so we'll add it to the queue.\n    self.requests.push(options);\n    return;\n  }\n\n  // If we are under maxSockets create a new one.\n  self.createSocket(options, function(socket) {\n    socket.on('free', onFree);\n    socket.on('close', onCloseOrRemove);\n    socket.on('agentRemove', onCloseOrRemove);\n    req.onSocket(socket);\n\n    function onFree() {\n      self.emit('free', socket, options);\n    }\n\n    function onCloseOrRemove(err) {\n      self.removeSocket(socket);\n      socket.removeListener('free', onFree);\n      socket.removeListener('close', onCloseOrRemove);\n      socket.removeListener('agentRemove', onCloseOrRemove);\n    }\n  });\n};\n\nTunnelingAgent.prototype.createSocket = function createSocket(options, cb) {\n  var self = this;\n  var placeholder = {};\n  self.sockets.push(placeholder);\n\n  var connectOptions = mergeOptions({}, self.proxyOptions, {\n    method: 'CONNECT',\n    path: options.host + ':' + options.port,\n    agent: false,\n    headers: {\n      host: options.host + ':' + options.port\n    }\n  });\n  if (options.localAddress) {\n    connectOptions.localAddress = options.localAddress;\n  }\n  if (connectOptions.proxyAuth) {\n    connectOptions.headers = connectOptions.headers || {};\n    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +\n        new Buffer(connectOptions.proxyAuth).toString('base64');\n  }\n\n  debug('making CONNECT request');\n  var connectReq = self.request(connectOptions);\n  connectReq.useChunkedEncodingByDefault = false; // for v0.6\n  connectReq.once('response', onResponse); // for v0.6\n  connectReq.once('upgrade', onUpgrade);   // for v0.6\n  connectReq.once('connect', onConnect);   // for v0.7 or later\n  connectReq.once('error', onError);\n  connectReq.end();\n\n  function onResponse(res) {\n    // Very hacky. This is necessary to avoid http-parser leaks.\n    res.upgrade = true;\n  }\n\n  function onUpgrade(res, socket, head) {\n    // Hacky.\n    process.nextTick(function() {\n      onConnect(res, socket, head);\n    });\n  }\n\n  function onConnect(res, socket, head) {\n    connectReq.removeAllListeners();\n    socket.removeAllListeners();\n\n    if (res.statusCode !== 200) {\n      debug('tunneling socket could not be established, statusCode=%d',\n        res.statusCode);\n      socket.destroy();\n      var error = new Error('tunneling socket could not be established, ' +\n        'statusCode=' + res.statusCode);\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    if (head.length > 0) {\n      debug('got illegal response body from proxy');\n      socket.destroy();\n      var error = new Error('got illegal response body from proxy');\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    debug('tunneling connection has established');\n    self.sockets[self.sockets.indexOf(placeholder)] = socket;\n    return cb(socket);\n  }\n\n  function onError(cause) {\n    connectReq.removeAllListeners();\n\n    debug('tunneling socket could not be established, cause=%s\\n',\n          cause.message, cause.stack);\n    var error = new Error('tunneling socket could not be established, ' +\n                          'cause=' + cause.message);\n    error.code = 'ECONNRESET';\n    options.request.emit('error', error);\n    self.removeSocket(placeholder);\n  }\n};\n\nTunnelingAgent.prototype.removeSocket = function removeSocket(socket) {\n  var pos = this.sockets.indexOf(socket)\n  if (pos === -1) {\n    return;\n  }\n  this.sockets.splice(pos, 1);\n\n  var pending = this.requests.shift();\n  if (pending) {\n    // If we have pending requests and a socket gets closed a new one\n    // needs to be created to take over in the pool for the one that closed.\n    this.createSocket(pending, function(socket) {\n      pending.request.onSocket(socket);\n    });\n  }\n};\n\nfunction createSecureSocket(options, cb) {\n  var self = this;\n  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {\n    var hostHeader = options.request.getHeader('host');\n    var tlsOptions = mergeOptions({}, self.options, {\n      socket: socket,\n      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host\n    });\n\n    // 0 is dummy port for v0.6\n    var secureSocket = tls.connect(0, tlsOptions);\n    self.sockets[self.sockets.indexOf(socket)] = secureSocket;\n    cb(secureSocket);\n  });\n}\n\n\nfunction toOptions(host, port, localAddress) {\n  if (typeof host === 'string') { // since v0.10\n    return {\n      host: host,\n      port: port,\n      localAddress: localAddress\n    };\n  }\n  return host; // for v0.11 or later\n}\n\nfunction mergeOptions(target) {\n  for (var i = 1, len = arguments.length; i < len; ++i) {\n    var overrides = arguments[i];\n    if (typeof overrides === 'object') {\n      var keys = Object.keys(overrides);\n      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {\n        var k = keys[j];\n        if (overrides[k] !== undefined) {\n          target[k] = overrides[k];\n        }\n      }\n    }\n  }\n  return target;\n}\n\n\nvar debug;\nif (process.env.NODE_DEBUG && /\\btunnel\\b/.test(process.env.NODE_DEBUG)) {\n  debug = function() {\n    var args = Array.prototype.slice.call(arguments);\n    if (typeof args[0] === 'string') {\n      args[0] = 'TUNNEL: ' + args[0];\n    } else {\n      args.unshift('TUNNEL:');\n    }\n    console.error.apply(console, args);\n  }\n} else {\n  debug = function() {};\n}\nexports.debug = debug; // for test\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar basiccreds_1 = require(\"./handlers/basiccreds\");\nexports.BasicCredentialHandler = basiccreds_1.BasicCredentialHandler;\nvar bearertoken_1 = require(\"./handlers/bearertoken\");\nexports.BearerCredentialHandler = bearertoken_1.BearerCredentialHandler;\nvar ntlm_1 = require(\"./handlers/ntlm\");\nexports.NtlmCredentialHandler = ntlm_1.NtlmCredentialHandler;\nvar personalaccesstoken_1 = require(\"./handlers/personalaccesstoken\");\nexports.PersonalAccessTokenCredentialHandler = personalaccesstoken_1.PersonalAccessTokenCredentialHandler;\n","\"use strict\";\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for full license information.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst url = require(\"url\");\nconst http = require(\"http\");\nconst https = require(\"https\");\nconst util = require(\"./Util\");\nlet fs;\nlet tunnel;\nvar HttpCodes;\n(function (HttpCodes) {\n    HttpCodes[HttpCodes[\"OK\"] = 200] = \"OK\";\n    HttpCodes[HttpCodes[\"MultipleChoices\"] = 300] = \"MultipleChoices\";\n    HttpCodes[HttpCodes[\"MovedPermanently\"] = 301] = \"MovedPermanently\";\n    HttpCodes[HttpCodes[\"ResourceMoved\"] = 302] = \"ResourceMoved\";\n    HttpCodes[HttpCodes[\"SeeOther\"] = 303] = \"SeeOther\";\n    HttpCodes[HttpCodes[\"NotModified\"] = 304] = \"NotModified\";\n    HttpCodes[HttpCodes[\"UseProxy\"] = 305] = \"UseProxy\";\n    HttpCodes[HttpCodes[\"SwitchProxy\"] = 306] = \"SwitchProxy\";\n    HttpCodes[HttpCodes[\"TemporaryRedirect\"] = 307] = \"TemporaryRedirect\";\n    HttpCodes[HttpCodes[\"PermanentRedirect\"] = 308] = \"PermanentRedirect\";\n    HttpCodes[HttpCodes[\"BadRequest\"] = 400] = \"BadRequest\";\n    HttpCodes[HttpCodes[\"Unauthorized\"] = 401] = \"Unauthorized\";\n    HttpCodes[HttpCodes[\"PaymentRequired\"] = 402] = \"PaymentRequired\";\n    HttpCodes[HttpCodes[\"Forbidden\"] = 403] = \"Forbidden\";\n    HttpCodes[HttpCodes[\"NotFound\"] = 404] = \"NotFound\";\n    HttpCodes[HttpCodes[\"MethodNotAllowed\"] = 405] = \"MethodNotAllowed\";\n    HttpCodes[HttpCodes[\"NotAcceptable\"] = 406] = \"NotAcceptable\";\n    HttpCodes[HttpCodes[\"ProxyAuthenticationRequired\"] = 407] = \"ProxyAuthenticationRequired\";\n    HttpCodes[HttpCodes[\"RequestTimeout\"] = 408] = \"RequestTimeout\";\n    HttpCodes[HttpCodes[\"Conflict\"] = 409] = \"Conflict\";\n    HttpCodes[HttpCodes[\"Gone\"] = 410] = \"Gone\";\n    HttpCodes[HttpCodes[\"TooManyRequests\"] = 429] = \"TooManyRequests\";\n    HttpCodes[HttpCodes[\"InternalServerError\"] = 500] = \"InternalServerError\";\n    HttpCodes[HttpCodes[\"NotImplemented\"] = 501] = \"NotImplemented\";\n    HttpCodes[HttpCodes[\"BadGateway\"] = 502] = \"BadGateway\";\n    HttpCodes[HttpCodes[\"ServiceUnavailable\"] = 503] = \"ServiceUnavailable\";\n    HttpCodes[HttpCodes[\"GatewayTimeout\"] = 504] = \"GatewayTimeout\";\n})(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));\nconst HttpRedirectCodes = [HttpCodes.MovedPermanently, HttpCodes.ResourceMoved, HttpCodes.SeeOther, HttpCodes.TemporaryRedirect, HttpCodes.PermanentRedirect];\nconst HttpResponseRetryCodes = [HttpCodes.BadGateway, HttpCodes.ServiceUnavailable, HttpCodes.GatewayTimeout];\nconst NetworkRetryErrors = ['ECONNRESET', 'ENOTFOUND', 'ESOCKETTIMEDOUT', 'ETIMEDOUT', 'ECONNREFUSED'];\nconst RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];\nconst ExponentialBackoffCeiling = 10;\nconst ExponentialBackoffTimeSlice = 5;\nclass HttpClientResponse {\n    constructor(message) {\n        this.message = message;\n    }\n    readBody() {\n        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n            const chunks = [];\n            const encodingCharset = util.obtainContentCharset(this);\n            // Extract Encoding from header: 'content-encoding'\n            // Match `gzip`, `gzip, deflate` variations of GZIP encoding\n            const contentEncoding = this.message.headers['content-encoding'] || '';\n            const isGzippedEncoded = new RegExp('(gzip$)|(gzip, *deflate)').test(contentEncoding);\n            this.message.on('data', function (data) {\n                const chunk = (typeof data === 'string') ? Buffer.from(data, encodingCharset) : data;\n                chunks.push(chunk);\n            }).on('end', function () {\n                return __awaiter(this, void 0, void 0, function* () {\n                    const buffer = Buffer.concat(chunks);\n                    if (isGzippedEncoded) { // Process GZipped Response Body HERE\n                        const gunzippedBody = yield util.decompressGzippedContent(buffer, encodingCharset);\n                        resolve(gunzippedBody);\n                    }\n                    else {\n                        resolve(buffer.toString(encodingCharset));\n                    }\n                });\n            }).on('error', function (err) {\n                reject(err);\n            });\n        }));\n    }\n}\nexports.HttpClientResponse = HttpClientResponse;\nfunction isHttps(requestUrl) {\n    let parsedUrl = url.parse(requestUrl);\n    return parsedUrl.protocol === 'https:';\n}\nexports.isHttps = isHttps;\nvar EnvironmentVariables;\n(function (EnvironmentVariables) {\n    EnvironmentVariables[\"HTTP_PROXY\"] = \"HTTP_PROXY\";\n    EnvironmentVariables[\"HTTPS_PROXY\"] = \"HTTPS_PROXY\";\n    EnvironmentVariables[\"NO_PROXY\"] = \"NO_PROXY\";\n})(EnvironmentVariables || (EnvironmentVariables = {}));\nclass HttpClient {\n    constructor(userAgent, handlers, requestOptions) {\n        this._ignoreSslError = false;\n        this._allowRedirects = true;\n        this._allowRedirectDowngrade = false;\n        this._maxRedirects = 50;\n        this._allowRetries = false;\n        this._maxRetries = 1;\n        this._keepAlive = false;\n        this._disposed = false;\n        this.userAgent = userAgent;\n        this.handlers = handlers || [];\n        let no_proxy = process.env[EnvironmentVariables.NO_PROXY];\n        if (no_proxy) {\n            this._httpProxyBypassHosts = [];\n            no_proxy.split(',').forEach(bypass => {\n                this._httpProxyBypassHosts.push(util.buildProxyBypassRegexFromEnv(bypass));\n            });\n        }\n        this.requestOptions = requestOptions;\n        if (requestOptions) {\n            if (requestOptions.ignoreSslError != null) {\n                this._ignoreSslError = requestOptions.ignoreSslError;\n            }\n            this._socketTimeout = requestOptions.socketTimeout;\n            this._httpProxy = requestOptions.proxy;\n            if (requestOptions.proxy && requestOptions.proxy.proxyBypassHosts) {\n                this._httpProxyBypassHosts = [];\n                requestOptions.proxy.proxyBypassHosts.forEach(bypass => {\n                    this._httpProxyBypassHosts.push(new RegExp(bypass, 'i'));\n                });\n            }\n            this._certConfig = requestOptions.cert;\n            if (this._certConfig) {\n                // If using cert, need fs\n                fs = require('fs');\n                // cache the cert content into memory, so we don't have to read it from disk every time\n                if (this._certConfig.caFile && fs.existsSync(this._certConfig.caFile)) {\n                    this._ca = fs.readFileSync(this._certConfig.caFile, 'utf8');\n                }\n                if (this._certConfig.certFile && fs.existsSync(this._certConfig.certFile)) {\n                    this._cert = fs.readFileSync(this._certConfig.certFile, 'utf8');\n                }\n                if (this._certConfig.keyFile && fs.existsSync(this._certConfig.keyFile)) {\n                    this._key = fs.readFileSync(this._certConfig.keyFile, 'utf8');\n                }\n            }\n            if (requestOptions.allowRedirects != null) {\n                this._allowRedirects = requestOptions.allowRedirects;\n            }\n            if (requestOptions.allowRedirectDowngrade != null) {\n                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;\n            }\n            if (requestOptions.maxRedirects != null) {\n                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);\n            }\n            if (requestOptions.keepAlive != null) {\n                this._keepAlive = requestOptions.keepAlive;\n            }\n            if (requestOptions.allowRetries != null) {\n                this._allowRetries = requestOptions.allowRetries;\n            }\n            if (requestOptions.maxRetries != null) {\n                this._maxRetries = requestOptions.maxRetries;\n            }\n        }\n    }\n    options(requestUrl, additionalHeaders) {\n        return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});\n    }\n    get(requestUrl, additionalHeaders) {\n        return this.request('GET', requestUrl, null, additionalHeaders || {});\n    }\n    del(requestUrl, additionalHeaders) {\n        return this.request('DELETE', requestUrl, null, additionalHeaders || {});\n    }\n    post(requestUrl, data, additionalHeaders) {\n        return this.request('POST', requestUrl, data, additionalHeaders || {});\n    }\n    patch(requestUrl, data, additionalHeaders) {\n        return this.request('PATCH', requestUrl, data, additionalHeaders || {});\n    }\n    put(requestUrl, data, additionalHeaders) {\n        return this.request('PUT', requestUrl, data, additionalHeaders || {});\n    }\n    head(requestUrl, additionalHeaders) {\n        return this.request('HEAD', requestUrl, null, additionalHeaders || {});\n    }\n    sendStream(verb, requestUrl, stream, additionalHeaders) {\n        return this.request(verb, requestUrl, stream, additionalHeaders);\n    }\n    /**\n     * Makes a raw http request.\n     * All other methods such as get, post, patch, and request ultimately call this.\n     * Prefer get, del, post and patch\n     */\n    request(verb, requestUrl, data, headers) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._disposed) {\n                throw new Error(\"Client has already been disposed.\");\n            }\n            let parsedUrl = url.parse(requestUrl);\n            let info = this._prepareRequest(verb, parsedUrl, headers);\n            // Only perform retries on reads since writes may not be idempotent.\n            let maxTries = (this._allowRetries && RetryableHttpVerbs.indexOf(verb) != -1) ? this._maxRetries + 1 : 1;\n            let numTries = 0;\n            let response;\n            while (numTries < maxTries) {\n                try {\n                    response = yield this.requestRaw(info, data);\n                }\n                catch (err) {\n                    numTries++;\n                    if (err && err.code && NetworkRetryErrors.indexOf(err.code) > -1 && numTries < maxTries) {\n                        yield this._performExponentialBackoff(numTries);\n                        continue;\n                    }\n                    throw err;\n                }\n                // Check if it's an authentication challenge\n                if (response && response.message && response.message.statusCode === HttpCodes.Unauthorized) {\n                    let authenticationHandler;\n                    for (let i = 0; i < this.handlers.length; i++) {\n                        if (this.handlers[i].canHandleAuthentication(response)) {\n                            authenticationHandler = this.handlers[i];\n                            break;\n                        }\n                    }\n                    if (authenticationHandler) {\n                        return authenticationHandler.handleAuthentication(this, info, data);\n                    }\n                    else {\n                        // We have received an unauthorized response but have no handlers to handle it.\n                        // Let the response return to the caller.\n                        return response;\n                    }\n                }\n                let redirectsRemaining = this._maxRedirects;\n                while (HttpRedirectCodes.indexOf(response.message.statusCode) != -1\n                    && this._allowRedirects\n                    && redirectsRemaining > 0) {\n                    const redirectUrl = response.message.headers[\"location\"];\n                    if (!redirectUrl) {\n                        // if there's no location to redirect to, we won't\n                        break;\n                    }\n                    let parsedRedirectUrl = url.parse(redirectUrl);\n                    if (parsedUrl.protocol == 'https:' && parsedUrl.protocol != parsedRedirectUrl.protocol && !this._allowRedirectDowngrade) {\n                        throw new Error(\"Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.\");\n                    }\n                    // we need to finish reading the response before reassigning response\n                    // which will leak the open socket.\n                    yield response.readBody();\n                    // let's make the request with the new redirectUrl\n                    info = this._prepareRequest(verb, parsedRedirectUrl, headers);\n                    response = yield this.requestRaw(info, data);\n                    redirectsRemaining--;\n                }\n                if (HttpResponseRetryCodes.indexOf(response.message.statusCode) == -1) {\n                    // If not a retry code, return immediately instead of retrying\n                    return response;\n                }\n                numTries += 1;\n                if (numTries < maxTries) {\n                    yield response.readBody();\n                    yield this._performExponentialBackoff(numTries);\n                }\n            }\n            return response;\n        });\n    }\n    /**\n     * Needs to be called if keepAlive is set to true in request options.\n     */\n    dispose() {\n        if (this._agent) {\n            this._agent.destroy();\n        }\n        this._disposed = true;\n    }\n    /**\n     * Raw request.\n     * @param info\n     * @param data\n     */\n    requestRaw(info, data) {\n        return new Promise((resolve, reject) => {\n            let callbackForResult = function (err, res) {\n                if (err) {\n                    reject(err);\n                }\n                resolve(res);\n            };\n            this.requestRawWithCallback(info, data, callbackForResult);\n        });\n    }\n    /**\n     * Raw request with callback.\n     * @param info\n     * @param data\n     * @param onResult\n     */\n    requestRawWithCallback(info, data, onResult) {\n        let socket;\n        if (typeof (data) === 'string') {\n            info.options.headers[\"Content-Length\"] = Buffer.byteLength(data, 'utf8');\n        }\n        let callbackCalled = false;\n        let handleResult = (err, res) => {\n            if (!callbackCalled) {\n                callbackCalled = true;\n                onResult(err, res);\n            }\n        };\n        let req = info.httpModule.request(info.options, (msg) => {\n            let res = new HttpClientResponse(msg);\n            handleResult(null, res);\n        });\n        req.on('socket', (sock) => {\n            socket = sock;\n        });\n        // If we ever get disconnected, we want the socket to timeout eventually\n        req.setTimeout(this._socketTimeout || 3 * 60000, () => {\n            if (socket) {\n                socket.destroy();\n            }\n            handleResult(new Error('Request timeout: ' + info.options.path), null);\n        });\n        req.on('error', function (err) {\n            // err has statusCode property\n            // res should have headers\n            handleResult(err, null);\n        });\n        if (data && typeof (data) === 'string') {\n            req.write(data, 'utf8');\n        }\n        if (data && typeof (data) !== 'string') {\n            data.on('close', function () {\n                req.end();\n            });\n            data.pipe(req);\n        }\n        else {\n            req.end();\n        }\n    }\n    _prepareRequest(method, requestUrl, headers) {\n        const info = {};\n        info.parsedUrl = requestUrl;\n        const usingSsl = info.parsedUrl.protocol === 'https:';\n        info.httpModule = usingSsl ? https : http;\n        const defaultPort = usingSsl ? 443 : 80;\n        info.options = {};\n        info.options.host = info.parsedUrl.hostname;\n        info.options.port = info.parsedUrl.port ? parseInt(info.parsedUrl.port) : defaultPort;\n        info.options.path = (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');\n        info.options.method = method;\n        info.options.timeout = (this.requestOptions && this.requestOptions.socketTimeout) || this._socketTimeout;\n        this._socketTimeout = info.options.timeout;\n        info.options.headers = this._mergeHeaders(headers);\n        if (this.userAgent != null) {\n            info.options.headers[\"user-agent\"] = this.userAgent;\n        }\n        info.options.agent = this._getAgent(info.parsedUrl);\n        // gives handlers an opportunity to participate\n        if (this.handlers && !this._isPresigned(url.format(requestUrl))) {\n            this.handlers.forEach((handler) => {\n                handler.prepareRequest(info.options);\n            });\n        }\n        return info;\n    }\n    _isPresigned(requestUrl) {\n        if (this.requestOptions && this.requestOptions.presignedUrlPatterns) {\n            const patterns = this.requestOptions.presignedUrlPatterns;\n            for (let i = 0; i < patterns.length; i++) {\n                if (requestUrl.match(patterns[i])) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    _mergeHeaders(headers) {\n        const lowercaseKeys = obj => Object.keys(obj).reduce((c, k) => (c[k.toLowerCase()] = obj[k], c), {});\n        if (this.requestOptions && this.requestOptions.headers) {\n            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers));\n        }\n        return lowercaseKeys(headers || {});\n    }\n    _getAgent(parsedUrl) {\n        let agent;\n        let proxy = this._getProxy(parsedUrl);\n        let useProxy = proxy.proxyUrl && proxy.proxyUrl.hostname && !this._isMatchInBypassProxyList(parsedUrl);\n        if (this._keepAlive && useProxy) {\n            agent = this._proxyAgent;\n        }\n        if (this._keepAlive && !useProxy) {\n            agent = this._agent;\n        }\n        // if agent is already assigned use that agent.\n        if (!!agent) {\n            return agent;\n        }\n        const usingSsl = parsedUrl.protocol === 'https:';\n        let maxSockets = 100;\n        if (!!this.requestOptions) {\n            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;\n        }\n        if (useProxy) {\n            // If using proxy, need tunnel\n            if (!tunnel) {\n                tunnel = require('tunnel');\n            }\n            const agentOptions = {\n                maxSockets: maxSockets,\n                keepAlive: this._keepAlive,\n                proxy: {\n                    proxyAuth: proxy.proxyAuth,\n                    host: proxy.proxyUrl.hostname,\n                    port: proxy.proxyUrl.port\n                },\n            };\n            let tunnelAgent;\n            const overHttps = proxy.proxyUrl.protocol === 'https:';\n            if (usingSsl) {\n                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;\n            }\n            else {\n                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;\n            }\n            agent = tunnelAgent(agentOptions);\n            this._proxyAgent = agent;\n        }\n        // if reusing agent across request and tunneling agent isn't assigned create a new agent\n        if (this._keepAlive && !agent) {\n            const options = { keepAlive: this._keepAlive, maxSockets: maxSockets };\n            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);\n            this._agent = agent;\n        }\n        // if not using private agent and tunnel agent isn't setup then use global agent\n        if (!agent) {\n            agent = usingSsl ? https.globalAgent : http.globalAgent;\n        }\n        if (usingSsl && this._ignoreSslError) {\n            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process\n            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options\n            // we have to cast it to any and change it directly\n            agent.options = Object.assign(agent.options || {}, { rejectUnauthorized: false });\n        }\n        if (usingSsl && this._certConfig) {\n            agent.options = Object.assign(agent.options || {}, { ca: this._ca, cert: this._cert, key: this._key, passphrase: this._certConfig.passphrase });\n        }\n        return agent;\n    }\n    _getProxy(parsedUrl) {\n        let usingSsl = parsedUrl.protocol === 'https:';\n        let proxyConfig = this._httpProxy;\n        // fallback to http_proxy and https_proxy env\n        let https_proxy = process.env[EnvironmentVariables.HTTPS_PROXY];\n        let http_proxy = process.env[EnvironmentVariables.HTTP_PROXY];\n        if (!proxyConfig) {\n            if (https_proxy && usingSsl) {\n                proxyConfig = {\n                    proxyUrl: https_proxy\n                };\n            }\n            else if (http_proxy) {\n                proxyConfig = {\n                    proxyUrl: http_proxy\n                };\n            }\n        }\n        let proxyUrl;\n        let proxyAuth;\n        if (proxyConfig) {\n            if (proxyConfig.proxyUrl.length > 0) {\n                proxyUrl = url.parse(proxyConfig.proxyUrl);\n            }\n            if (proxyConfig.proxyUsername || proxyConfig.proxyPassword) {\n                proxyAuth = proxyConfig.proxyUsername + \":\" + proxyConfig.proxyPassword;\n            }\n        }\n        return { proxyUrl: proxyUrl, proxyAuth: proxyAuth };\n    }\n    _isMatchInBypassProxyList(parsedUrl) {\n        if (!this._httpProxyBypassHosts) {\n            return false;\n        }\n        let bypass = false;\n        this._httpProxyBypassHosts.forEach(bypassHost => {\n            if (bypassHost.test(parsedUrl.href)) {\n                bypass = true;\n            }\n        });\n        return bypass;\n    }\n    _performExponentialBackoff(retryNumber) {\n        retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);\n        const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);\n        return new Promise(resolve => setTimeout(() => resolve(), ms));\n    }\n}\nexports.HttpClient = HttpClient;\n","\"use strict\";\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for full license information.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst httpm = require(\"./HttpClient\");\nconst util = require(\"./Util\");\nclass RestClient {\n    /**\n     * Creates an instance of the RestClient\n     * @constructor\n     * @param {string} userAgent - userAgent for requests\n     * @param {string} baseUrl - (Optional) If not specified, use full urls per request.  If supplied and a function passes a relative url, it will be appended to this\n     * @param {ifm.IRequestHandler[]} handlers - handlers are typically auth handlers (basic, bearer, ntlm supplied)\n     * @param {ifm.IRequestOptions} requestOptions - options for each http requests (http proxy setting, socket timeout)\n     */\n    constructor(userAgent, baseUrl, handlers, requestOptions) {\n        this.client = new httpm.HttpClient(userAgent, handlers, requestOptions);\n        if (baseUrl) {\n            this._baseUrl = baseUrl;\n        }\n    }\n    /**\n     * Gets a resource from an endpoint\n     * Be aware that not found returns a null.  Other error conditions reject the promise\n     * @param {string} requestUrl - fully qualified or relative url\n     * @param {IRequestOptions} requestOptions - (optional) requestOptions object\n     */\n    options(requestUrl, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let url = util.getUrl(requestUrl, this._baseUrl);\n            let res = yield this.client.options(url, this._headersFromOptions(options));\n            return this.processResponse(res, options);\n        });\n    }\n    /**\n     * Gets a resource from an endpoint\n     * Be aware that not found returns a null.  Other error conditions reject the promise\n     * @param {string} resource - fully qualified url or relative path\n     * @param {IRequestOptions} requestOptions - (optional) requestOptions object\n     */\n    get(resource, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let url = util.getUrl(resource, this._baseUrl, (options || {}).queryParameters);\n            let res = yield this.client.get(url, this._headersFromOptions(options));\n            return this.processResponse(res, options);\n        });\n    }\n    /**\n     * Deletes a resource from an endpoint\n     * Be aware that not found returns a null.  Other error conditions reject the promise\n     * @param {string} resource - fully qualified or relative url\n     * @param {IRequestOptions} requestOptions - (optional) requestOptions object\n     */\n    del(resource, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let url = util.getUrl(resource, this._baseUrl, (options || {}).queryParameters);\n            let res = yield this.client.del(url, this._headersFromOptions(options));\n            return this.processResponse(res, options);\n        });\n    }\n    /**\n     * Creates resource(s) from an endpoint\n     * T type of object returned.\n     * Be aware that not found returns a null.  Other error conditions reject the promise\n     * @param {string} resource - fully qualified or relative url\n     * @param {IRequestOptions} requestOptions - (optional) requestOptions object\n     */\n    create(resource, resources, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let url = util.getUrl(resource, this._baseUrl);\n            let headers = this._headersFromOptions(options, true);\n            let data = JSON.stringify(resources, null, 2);\n            let res = yield this.client.post(url, data, headers);\n            return this.processResponse(res, options);\n        });\n    }\n    /**\n     * Updates resource(s) from an endpoint\n     * T type of object returned.\n     * Be aware that not found returns a null.  Other error conditions reject the promise\n     * @param {string} resource - fully qualified or relative url\n     * @param {IRequestOptions} requestOptions - (optional) requestOptions object\n     */\n    update(resource, resources, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let url = util.getUrl(resource, this._baseUrl);\n            let headers = this._headersFromOptions(options, true);\n            let data = JSON.stringify(resources, null, 2);\n            let res = yield this.client.patch(url, data, headers);\n            return this.processResponse(res, options);\n        });\n    }\n    /**\n     * Replaces resource(s) from an endpoint\n     * T type of object returned.\n     * Be aware that not found returns a null.  Other error conditions reject the promise\n     * @param {string} resource - fully qualified or relative url\n     * @param {IRequestOptions} requestOptions - (optional) requestOptions object\n     */\n    replace(resource, resources, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let url = util.getUrl(resource, this._baseUrl);\n            let headers = this._headersFromOptions(options, true);\n            let data = JSON.stringify(resources, null, 2);\n            let res = yield this.client.put(url, data, headers);\n            return this.processResponse(res, options);\n        });\n    }\n    uploadStream(verb, requestUrl, stream, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let url = util.getUrl(requestUrl, this._baseUrl);\n            let headers = this._headersFromOptions(options, true);\n            let res = yield this.client.sendStream(verb, url, stream, headers);\n            return this.processResponse(res, options);\n        });\n    }\n    _headersFromOptions(options, contentType) {\n        options = options || {};\n        let headers = options.additionalHeaders || {};\n        headers[\"Accept\"] = options.acceptHeader || \"application/json\";\n        if (contentType) {\n            let found = false;\n            for (let header in headers) {\n                if (header.toLowerCase() == \"content-type\") {\n                    found = true;\n                }\n            }\n            if (!found) {\n                headers[\"Content-Type\"] = 'application/json; charset=utf-8';\n            }\n        }\n        return headers;\n    }\n    static dateTimeDeserializer(key, value) {\n        if (typeof value === 'string') {\n            let a = new Date(value);\n            if (!isNaN(a.valueOf())) {\n                return a;\n            }\n        }\n        return value;\n    }\n    processResponse(res, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                const statusCode = res.message.statusCode;\n                const response = {\n                    statusCode: statusCode,\n                    result: null,\n                    headers: {}\n                };\n                // not found leads to null obj returned\n                if (statusCode == httpm.HttpCodes.NotFound) {\n                    resolve(response);\n                }\n                let obj;\n                let contents;\n                // get the result from the body\n                try {\n                    contents = yield res.readBody();\n                    if (contents && contents.length > 0) {\n                        if (options && options.deserializeDates) {\n                            obj = JSON.parse(contents, RestClient.dateTimeDeserializer);\n                        }\n                        else {\n                            obj = JSON.parse(contents);\n                        }\n                        if (options && options.responseProcessor) {\n                            response.result = options.responseProcessor(obj);\n                        }\n                        else {\n                            response.result = obj;\n                        }\n                    }\n                    response.headers = res.message.headers;\n                }\n                catch (err) {\n                    // Invalid resource (contents not json);  leaving result obj null\n                }\n                // note that 3xx redirects are handled by the http layer.\n                if (statusCode > 299) {\n                    let msg;\n                    // if exception/error in body, attempt to get better error\n                    if (obj && obj.message) {\n                        msg = obj.message;\n                    }\n                    else if (contents && contents.length > 0) {\n                        // it may be the case that the exception is in the body message as string\n                        msg = contents;\n                    }\n                    else {\n                        msg = \"Failed request: (\" + statusCode + \")\";\n                    }\n                    let err = new Error(msg);\n                    // attach statusCode and body obj (if available) to the error object\n                    err['statusCode'] = statusCode;\n                    if (response.result) {\n                        err['result'] = response.result;\n                    }\n                    if (response.headers) {\n                        err['responseHeaders'] = response.headers;\n                    }\n                    reject(err);\n                }\n                else {\n                    resolve(response);\n                }\n            }));\n        });\n    }\n}\nexports.RestClient = RestClient;\n","\"use strict\";\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for full license information.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst qs = require(\"qs\");\nconst url = require(\"url\");\nconst path = require(\"path\");\nconst zlib = require(\"zlib\");\n/**\n * creates an url from a request url and optional base url (http://server:8080)\n * @param {string} resource - a fully qualified url or relative path\n * @param {string} baseUrl - an optional baseUrl (http://server:8080)\n * @param {IRequestOptions} options - an optional options object, could include QueryParameters e.g.\n * @return {string} - resultant url\n */\nfunction getUrl(resource, baseUrl, queryParams) {\n    const pathApi = path.posix || path;\n    let requestUrl = '';\n    if (!baseUrl) {\n        requestUrl = resource;\n    }\n    else if (!resource) {\n        requestUrl = baseUrl;\n    }\n    else {\n        const base = url.parse(baseUrl);\n        const resultantUrl = url.parse(resource);\n        // resource (specific per request) elements take priority\n        resultantUrl.protocol = resultantUrl.protocol || base.protocol;\n        resultantUrl.auth = resultantUrl.auth || base.auth;\n        resultantUrl.host = resultantUrl.host || base.host;\n        resultantUrl.pathname = pathApi.resolve(base.pathname, resultantUrl.pathname);\n        if (!resultantUrl.pathname.endsWith('/') && resource.endsWith('/')) {\n            resultantUrl.pathname += '/';\n        }\n        requestUrl = url.format(resultantUrl);\n    }\n    return queryParams ?\n        getUrlWithParsedQueryParams(requestUrl, queryParams) :\n        requestUrl;\n}\nexports.getUrl = getUrl;\n/**\n *\n * @param {string} requestUrl\n * @param {IRequestQueryParams} queryParams\n * @return {string} - Request's URL with Query Parameters appended/parsed.\n */\nfunction getUrlWithParsedQueryParams(requestUrl, queryParams) {\n    const url = requestUrl.replace(/\\?$/g, ''); // Clean any extra end-of-string \"?\" character\n    const parsedQueryParams = qs.stringify(queryParams.params, buildParamsStringifyOptions(queryParams));\n    return `${url}${parsedQueryParams}`;\n}\n/**\n * Build options for QueryParams Stringifying.\n *\n * @param {IRequestQueryParams} queryParams\n * @return {object}\n */\nfunction buildParamsStringifyOptions(queryParams) {\n    let options = {\n        addQueryPrefix: true,\n        delimiter: (queryParams.options || {}).separator || '&',\n        allowDots: (queryParams.options || {}).shouldAllowDots || false,\n        arrayFormat: (queryParams.options || {}).arrayFormat || 'repeat',\n        encodeValuesOnly: (queryParams.options || {}).shouldOnlyEncodeValues || true\n    };\n    return options;\n}\n/**\n * Decompress/Decode gzip encoded JSON\n * Using Node.js built-in zlib module\n *\n * @param {Buffer} buffer\n * @param {string} charset? - optional; defaults to 'utf-8'\n * @return {Promise<string>}\n */\nfunction decompressGzippedContent(buffer, charset) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n            zlib.gunzip(buffer, function (error, buffer) {\n                if (error) {\n                    reject(error);\n                }\n                else {\n                    resolve(buffer.toString(charset || 'utf-8'));\n                }\n            });\n        }));\n    });\n}\nexports.decompressGzippedContent = decompressGzippedContent;\n/**\n * Builds a RegExp to test urls against for deciding\n * wether to bypass proxy from an entry of the\n * environment variable setting NO_PROXY\n *\n * @param {string} bypass\n * @return {RegExp}\n */\nfunction buildProxyBypassRegexFromEnv(bypass) {\n    try {\n        // We need to keep this around for back-compat purposes\n        return new RegExp(bypass, 'i');\n    }\n    catch (err) {\n        if (err instanceof SyntaxError && (bypass || \"\").startsWith(\"*\")) {\n            let wildcardEscaped = bypass.replace('*', '(.*)');\n            return new RegExp(wildcardEscaped, 'i');\n        }\n        throw err;\n    }\n}\nexports.buildProxyBypassRegexFromEnv = buildProxyBypassRegexFromEnv;\n/**\n * Obtain Response's Content Charset.\n * Through inspecting `content-type` response header.\n * It Returns 'utf-8' if NO charset specified/matched.\n *\n * @param {IHttpClientResponse} response\n * @return {string} - Content Encoding Charset; Default=utf-8\n */\nfunction obtainContentCharset(response) {\n    // Find the charset, if specified.\n    // Search for the `charset=CHARSET` string, not including `;,\\r\\n`\n    // Example: content-type: 'application/json;charset=utf-8'\n    // |__ matches would be ['charset=utf-8', 'utf-8', index: 18, input: 'application/json; charset=utf-8']\n    // |_____ matches[1] would have the charset :tada: , in our example it's utf-8\n    // However, if the matches Array was empty or no charset found, 'utf-8' would be returned by default.\n    const nodeSupportedEncodings = ['ascii', 'utf8', 'utf16le', 'ucs2', 'base64', 'binary', 'hex'];\n    const contentType = response.message.headers['content-type'] || '';\n    const matches = contentType.match(/charset=([^;,\\r\\n]+)/i);\n    return (matches && matches[1] && nodeSupportedEncodings.indexOf(matches[1]) != -1) ? matches[1] : 'utf-8';\n}\nexports.obtainContentCharset = obtainContentCharset;\n","\"use strict\";\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for full license information.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass BasicCredentialHandler {\n    constructor(username, password, allowCrossOriginAuthentication) {\n        this.username = username;\n        this.password = password;\n        this.allowCrossOriginAuthentication = allowCrossOriginAuthentication;\n    }\n    // currently implements pre-authorization\n    // TODO: support preAuth = false where it hooks on 401\n    prepareRequest(options) {\n        if (!this.origin) {\n            this.origin = options.host;\n        }\n        // If this is a redirection, don't set the Authorization header\n        if (this.origin === options.host || this.allowCrossOriginAuthentication) {\n            options.headers['Authorization'] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString('base64')}`;\n        }\n        options.headers['X-TFS-FedAuthRedirect'] = 'Suppress';\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication(response) {\n        return false;\n    }\n    handleAuthentication(httpClient, requestInfo, objs) {\n        return null;\n    }\n}\nexports.BasicCredentialHandler = BasicCredentialHandler;\n","\"use strict\";\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for full license information.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass BearerCredentialHandler {\n    constructor(token, allowCrossOriginAuthentication) {\n        this.token = token;\n        this.allowCrossOriginAuthentication = allowCrossOriginAuthentication;\n    }\n    // currently implements pre-authorization\n    // TODO: support preAuth = false where it hooks on 401\n    prepareRequest(options) {\n        if (!this.origin) {\n            this.origin = options.host;\n        }\n        // If this is a redirection, don't set the Authorization header\n        if (this.origin === options.host || this.allowCrossOriginAuthentication) {\n            options.headers['Authorization'] = `Bearer ${this.token}`;\n        }\n        options.headers['X-TFS-FedAuthRedirect'] = 'Suppress';\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication(response) {\n        return false;\n    }\n    handleAuthentication(httpClient, requestInfo, objs) {\n        return null;\n    }\n}\nexports.BearerCredentialHandler = BearerCredentialHandler;\n","\"use strict\";\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for full license information.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst http = require(\"http\");\nconst https = require(\"https\");\nconst _ = require(\"underscore\");\nconst ntlm = require(\"../opensource/Node-SMB/lib/ntlm\");\nclass NtlmCredentialHandler {\n    constructor(username, password, workstation, domain) {\n        this._ntlmOptions = {};\n        this._ntlmOptions.username = username;\n        this._ntlmOptions.password = password;\n        this._ntlmOptions.domain = domain || '';\n        this._ntlmOptions.workstation = workstation || '';\n    }\n    prepareRequest(options) {\n        // No headers or options need to be set.  We keep the credentials on the handler itself.\n        // If a (proxy) agent is set, remove it as we don't support proxy for NTLM at this time\n        if (options.agent) {\n            delete options.agent;\n        }\n    }\n    canHandleAuthentication(response) {\n        if (response && response.message && response.message.statusCode === 401) {\n            // Ensure that we're talking NTLM here\n            // Once we have the www-authenticate header, split it so we can ensure we can talk NTLM\n            const wwwAuthenticate = response.message.headers['www-authenticate'];\n            return wwwAuthenticate && (wwwAuthenticate.split(', ').indexOf(\"NTLM\") >= 0);\n        }\n        return false;\n    }\n    handleAuthentication(httpClient, requestInfo, objs) {\n        return new Promise((resolve, reject) => {\n            const callbackForResult = function (err, res) {\n                if (err) {\n                    reject(err);\n                }\n                // We have to readbody on the response before continuing otherwise there is a hang.\n                res.readBody().then(() => {\n                    resolve(res);\n                });\n            };\n            this.handleAuthenticationPrivate(httpClient, requestInfo, objs, callbackForResult);\n        });\n    }\n    handleAuthenticationPrivate(httpClient, requestInfo, objs, finalCallback) {\n        // Set up the headers for NTLM authentication\n        requestInfo.options = _.extend(requestInfo.options, {\n            username: this._ntlmOptions.username,\n            password: this._ntlmOptions.password,\n            domain: this._ntlmOptions.domain,\n            workstation: this._ntlmOptions.workstation\n        });\n        requestInfo.options.agent = httpClient.isSsl ?\n            new https.Agent({ keepAlive: true }) :\n            new http.Agent({ keepAlive: true });\n        let self = this;\n        // The following pattern of sending the type1 message following immediately (in a setImmediate) is\n        // critical for the NTLM exchange to happen.  If we removed setImmediate (or call in a different manner)\n        // the NTLM exchange will always fail with a 401.\n        this.sendType1Message(httpClient, requestInfo, objs, function (err, res) {\n            if (err) {\n                return finalCallback(err, null, null);\n            }\n            /// We have to readbody on the response before continuing otherwise there is a hang.\n            res.readBody().then(() => {\n                // It is critical that we have setImmediate here due to how connection requests are queued.\n                // If setImmediate is removed then the NTLM handshake will not work.\n                // setImmediate allows us to queue a second request on the same connection. If this second\n                // request is not queued on the connection when the first request finishes then node closes\n                // the connection. NTLM requires both requests to be on the same connection so we need this.\n                setImmediate(function () {\n                    self.sendType3Message(httpClient, requestInfo, objs, res, finalCallback);\n                });\n            });\n        });\n    }\n    // The following method is an adaptation of code found at https://github.com/SamDecrock/node-http-ntlm/blob/master/httpntlm.js\n    sendType1Message(httpClient, requestInfo, objs, finalCallback) {\n        const type1HexBuffer = ntlm.encodeType1(this._ntlmOptions.workstation, this._ntlmOptions.domain);\n        const type1msg = `NTLM ${type1HexBuffer.toString('base64')}`;\n        const type1options = {\n            headers: {\n                'Connection': 'keep-alive',\n                'Authorization': type1msg\n            },\n            timeout: requestInfo.options.timeout || 0,\n            agent: requestInfo.httpModule,\n        };\n        const type1info = {};\n        type1info.httpModule = requestInfo.httpModule;\n        type1info.parsedUrl = requestInfo.parsedUrl;\n        type1info.options = _.extend(type1options, _.omit(requestInfo.options, 'headers'));\n        return httpClient.requestRawWithCallback(type1info, objs, finalCallback);\n    }\n    // The following method is an adaptation of code found at https://github.com/SamDecrock/node-http-ntlm/blob/master/httpntlm.js\n    sendType3Message(httpClient, requestInfo, objs, res, callback) {\n        if (!res.message.headers && !res.message.headers['www-authenticate']) {\n            throw new Error('www-authenticate not found on response of second request');\n        }\n        /**\n         * Server will respond with challenge/nonce\n         * assigned to response's \"WWW-AUTHENTICATE\" header\n         * and should adhere to RegExp /^NTLM\\s+(.+?)(,|\\s+|$)/\n         */\n        const serverNonceRegex = /^NTLM\\s+(.+?)(,|\\s+|$)/;\n        const serverNonce = Buffer.from((res.message.headers['www-authenticate'].match(serverNonceRegex) || [])[1], 'base64');\n        let type2msg;\n        /**\n         * Wrap decoding the Server's challenge/nonce in\n         * try-catch block to throw more comprehensive\n         * Error with clear message to consumer\n         */\n        try {\n            type2msg = ntlm.decodeType2(serverNonce);\n        }\n        catch (error) {\n            throw new Error(`Decoding Server's Challenge to Obtain Type2Message failed with error: ${error.message}`);\n        }\n        const type3msg = ntlm.encodeType3(this._ntlmOptions.username, this._ntlmOptions.workstation, this._ntlmOptions.domain, type2msg, this._ntlmOptions.password).toString('base64');\n        const type3options = {\n            headers: {\n                'Authorization': `NTLM ${type3msg}`,\n                'Connection': 'Close'\n            },\n            agent: requestInfo.httpModule,\n        };\n        const type3info = {};\n        type3info.httpModule = requestInfo.httpModule;\n        type3info.parsedUrl = requestInfo.parsedUrl;\n        type3options.headers = _.extend(type3options.headers, requestInfo.options.headers);\n        type3info.options = _.extend(type3options, _.omit(requestInfo.options, 'headers'));\n        return httpClient.requestRawWithCallback(type3info, objs, callback);\n    }\n}\nexports.NtlmCredentialHandler = NtlmCredentialHandler;\n","\"use strict\";\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for full license information.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass PersonalAccessTokenCredentialHandler {\n    constructor(token, allowCrossOriginAuthentication) {\n        this.token = token;\n        this.allowCrossOriginAuthentication = allowCrossOriginAuthentication;\n    }\n    // currently implements pre-authorization\n    // TODO: support preAuth = false where it hooks on 401\n    prepareRequest(options) {\n        if (!this.origin) {\n            this.origin = options.host;\n        }\n        // If this is a redirection, don't set the Authorization header\n        if (this.origin === options.host || this.allowCrossOriginAuthentication) {\n            options.headers['Authorization'] = `Basic ${Buffer.from(`PAT:${this.token}`).toString('base64')}`;\n        }\n        options.headers['X-TFS-FedAuthRedirect'] = 'Suppress';\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication(response) {\n        return false;\n    }\n    handleAuthentication(httpClient, requestInfo, objs) {\n        return null;\n    }\n}\nexports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;\n","var crypto = require('crypto');\n\nfunction zeroextend(str, len)\n{\n  while (str.length < len)\n    str = '0' + str;\n  return (str);\n}\n\n/*\n * Fix (odd) parity bits in a 64-bit DES key.\n */\nfunction oddpar(buf)\n{\n  for (var j = 0; j < buf.length; j++) {\n    var par = 1;\n    for (var i = 1; i < 8; i++) {\n      par = (par + ((buf[j] >> i) & 1)) % 2;\n    }\n    buf[j] |= par & 1;\n  }\n  return buf;\n}\n\n/*\n * Expand a 56-bit key buffer to the full 64-bits for DES.\n *\n * Based on code sample in:\n *    http://www.innovation.ch/personal/ronald/ntlm.html\n */\nfunction expandkey(key56)\n{\n  var key64 = new Buffer(8);\n\n  key64[0] = key56[0] & 0xFE;\n  key64[1] = ((key56[0] << 7) & 0xFF) | (key56[1] >> 1);\n  key64[2] = ((key56[1] << 6) & 0xFF) | (key56[2] >> 2);\n  key64[3] = ((key56[2] << 5) & 0xFF) | (key56[3] >> 3);\n  key64[4] = ((key56[3] << 4) & 0xFF) | (key56[4] >> 4);\n  key64[5] = ((key56[4] << 3) & 0xFF) | (key56[5] >> 5);\n  key64[6] = ((key56[5] << 2) & 0xFF) | (key56[6] >> 6);\n  key64[7] =  (key56[6] << 1) & 0xFF;\n\n  return key64;\n}\n\n/*\n * Convert a binary string to a hex string\n */\nfunction bintohex(bin)\n{\n  var buf = (Buffer.isBuffer(buf) ? buf : new Buffer(bin, 'binary'));\n  var str = buf.toString('hex').toUpperCase();\n  return zeroextend(str, 32);\n}\n\n\nmodule.exports.zeroextend = zeroextend;\nmodule.exports.oddpar = oddpar;\nmodule.exports.expandkey = expandkey;\nmodule.exports.bintohex = bintohex;\n","var log = console.log;\nvar crypto = require('crypto');\nvar $ = require('./common');\nvar lmhashbuf = require('./smbhash').lmhashbuf;\nvar nthashbuf = require('./smbhash').nthashbuf;\n\n\nfunction encodeType1(hostname, ntdomain) {\n  hostname = hostname.toUpperCase();\n  ntdomain = ntdomain.toUpperCase();\n  var hostnamelen = Buffer.byteLength(hostname, 'ascii');\n  var ntdomainlen = Buffer.byteLength(ntdomain, 'ascii');\n\n  var pos = 0;\n  var buf = new Buffer(32 + hostnamelen + ntdomainlen);\n\n  buf.write('NTLMSSP', pos, 7, 'ascii'); // byte protocol[8];\n  pos += 7;\n  buf.writeUInt8(0, pos);\n  pos++;\n\n  buf.writeUInt8(0x01, pos); // byte type;\n  pos++;\n\n  buf.fill(0x00, pos, pos + 3); // byte zero[3];\n  pos += 3;\n\n  buf.writeUInt16LE(0xb203, pos); // short flags;\n  pos += 2;\n\n  buf.fill(0x00, pos, pos + 2); // byte zero[2];\n  pos += 2;\n\n  buf.writeUInt16LE(ntdomainlen, pos); // short dom_len;\n  pos += 2;\n  buf.writeUInt16LE(ntdomainlen, pos); // short dom_len;\n  pos += 2;\n\n  var ntdomainoff = 0x20 + hostnamelen;\n  buf.writeUInt16LE(ntdomainoff, pos); // short dom_off;\n  pos += 2;\n\n  buf.fill(0x00, pos, pos + 2); // byte zero[2];\n  pos += 2;\n\n  buf.writeUInt16LE(hostnamelen, pos); // short host_len;\n  pos += 2;\n  buf.writeUInt16LE(hostnamelen, pos); // short host_len;\n  pos += 2;\n\n  buf.writeUInt16LE(0x20, pos); // short host_off;\n  pos += 2;\n\n  buf.fill(0x00, pos, pos + 2); // byte zero[2];\n  pos += 2;\n\n  buf.write(hostname, 0x20, hostnamelen, 'ascii');\n  buf.write(ntdomain, ntdomainoff, ntdomainlen, 'ascii');\n\n  return buf;\n}\n\n\n/*\n * \n */\nfunction decodeType2(buf)\n{\n  var proto = buf.toString('ascii', 0, 7);\n  if (buf[7] !== 0x00 || proto !== 'NTLMSSP')\n    throw new Error('magic was not NTLMSSP');\n\n  var type = buf.readUInt8(8);\n  if (type !== 0x02)\n    throw new Error('message was not NTLMSSP type 0x02');\n\n  //var msg_len = buf.readUInt16LE(16);\n\n  //var flags = buf.readUInt16LE(20);\n\n  var nonce = buf.slice(24, 32);\n  return nonce;\n}\n\nfunction encodeType3(username, hostname, ntdomain, nonce, password) {\n  hostname = hostname.toUpperCase();\n  ntdomain = ntdomain.toUpperCase();\n\n  var lmh = new Buffer(21);\n  lmhashbuf(password).copy(lmh);\n  lmh.fill(0x00, 16); // null pad to 21 bytes\n  var nth = new Buffer(21);\n  nthashbuf(password).copy(nth);\n  nth.fill(0x00, 16); // null pad to 21 bytes\n\n  var lmr = makeResponse(lmh, nonce);\n  var ntr = makeResponse(nth, nonce);\n\n  var usernamelen = Buffer.byteLength(username, 'ucs2');\n  var hostnamelen = Buffer.byteLength(hostname, 'ucs2');\n  var ntdomainlen = Buffer.byteLength(ntdomain, 'ucs2');\n  var lmrlen = 0x18;\n  var ntrlen = 0x18;\n\n  var ntdomainoff = 0x40;\n  var usernameoff = ntdomainoff + ntdomainlen;\n  var hostnameoff = usernameoff + usernamelen;\n  var lmroff = hostnameoff + hostnamelen;\n  var ntroff = lmroff + lmrlen;\n\n  var pos = 0;\n  var msg_len = 64 + ntdomainlen + usernamelen + hostnamelen + lmrlen + ntrlen;\n  var buf = new Buffer(msg_len);\n\n  buf.write('NTLMSSP', pos, 7, 'ascii'); // byte protocol[8];\n  pos += 7;\n  buf.writeUInt8(0, pos);\n  pos++;\n\n  buf.writeUInt8(0x03, pos); // byte type;\n  pos++;\n\n  buf.fill(0x00, pos, pos + 3); // byte zero[3];\n  pos += 3;\n\n  buf.writeUInt16LE(lmrlen, pos); // short lm_resp_len;\n  pos += 2;\n  buf.writeUInt16LE(lmrlen, pos); // short lm_resp_len;\n  pos += 2;\n  buf.writeUInt16LE(lmroff, pos); // short lm_resp_off;\n  pos += 2;\n  buf.fill(0x00, pos, pos + 2); // byte zero[2];\n  pos += 2;\n\n  buf.writeUInt16LE(ntrlen, pos); // short nt_resp_len;\n  pos += 2;\n  buf.writeUInt16LE(ntrlen, pos); // short nt_resp_len;\n  pos += 2;\n  buf.writeUInt16LE(ntroff, pos); // short nt_resp_off;\n  pos += 2;\n  buf.fill(0x00, pos, pos + 2); // byte zero[2];\n  pos += 2;\n\n  buf.writeUInt16LE(ntdomainlen, pos); // short dom_len;\n  pos += 2;\n  buf.writeUInt16LE(ntdomainlen, pos); // short dom_len;\n  pos += 2;\n  buf.writeUInt16LE(ntdomainoff, pos); // short dom_off;\n  pos += 2;\n  buf.fill(0x00, pos, pos + 2); // byte zero[2];\n  pos += 2;\n\n  buf.writeUInt16LE(usernamelen, pos); // short user_len;\n  pos += 2;\n  buf.writeUInt16LE(usernamelen, pos); // short user_len;\n  pos += 2;\n  buf.writeUInt16LE(usernameoff, pos); // short user_off;\n  pos += 2;\n  buf.fill(0x00, pos, pos + 2); // byte zero[2];\n  pos += 2;\n\n  buf.writeUInt16LE(hostnamelen, pos); // short host_len;\n  pos += 2;\n  buf.writeUInt16LE(hostnamelen, pos); // short host_len;\n  pos += 2;\n  buf.writeUInt16LE(hostnameoff, pos); // short host_off;\n  pos += 2;\n  buf.fill(0x00, pos, pos + 6); // byte zero[6];\n  pos += 6;\n\n  buf.writeUInt16LE(msg_len, pos); // short msg_len;\n  pos += 2;\n  buf.fill(0x00, pos, pos + 2); // byte zero[2];\n  pos += 2;\n\n  buf.writeUInt16LE(0x8201, pos); // short flags;\n  pos += 2;\n  buf.fill(0x00, pos, pos + 2); // byte zero[2];\n  pos += 2;\n\n  buf.write(ntdomain, ntdomainoff, ntdomainlen, 'ucs2');\n  buf.write(username, usernameoff, usernamelen, 'ucs2');\n  buf.write(hostname, hostnameoff, hostnamelen, 'ucs2');\n  lmr.copy(buf, lmroff, 0, lmrlen);\n  ntr.copy(buf, ntroff, 0, ntrlen);\n\n  return buf;\n}\n\nfunction makeResponse(hash, nonce)\n{\n  var out = new Buffer(24);\n  for (var i = 0; i < 3; i++) {\n    var keybuf = $.oddpar($.expandkey(hash.slice(i * 7, i * 7 + 7)));\n    var des = crypto.createCipheriv('DES-ECB', keybuf, '');\n    var str = des.update(nonce.toString('binary'), 'binary', 'binary');\n    out.write(str, i * 8, i * 8 + 8, 'binary');\n  }\n  return out;\n}\n\nexports.encodeType1 = encodeType1;\nexports.decodeType2 = decodeType2;\nexports.encodeType3 = encodeType3;\n\n// Convenience methods.\n\nexports.challengeHeader = function (hostname, domain) {\n  return 'NTLM ' + exports.encodeType1(hostname, domain).toString('base64');\n};\n\nexports.responseHeader = function (res, url, domain, username, password) {\n  var serverNonce = new Buffer((res.headers['www-authenticate'].match(/^NTLM\\s+(.+?)(,|\\s+|$)/) || [])[1], 'base64');\n  var hostname = require('url').parse(url).hostname;\n  return 'NTLM ' + exports.encodeType3(username, hostname, domain, exports.decodeType2(serverNonce), password).toString('base64')\n};\n\n// Import smbhash module.\n\nexports.smbhash = require('./smbhash');\n","var crypto = require('crypto');\nvar $ = require('./common');\n\n/*\n * Generate the LM Hash\n */\nfunction lmhashbuf(inputstr)\n{\n  /* ASCII --> uppercase */\n  var x = inputstr.substring(0, 14).toUpperCase();\n  var xl = Buffer.byteLength(x, 'ascii');\n\n  /* null pad to 14 bytes */\n  var y = new Buffer(14);\n  y.write(x, 0, xl, 'ascii');\n  y.fill(0, xl);\n\n  /* insert odd parity bits in key */\n  var halves = [\n    $.oddpar($.expandkey(y.slice(0, 7))),\n    $.oddpar($.expandkey(y.slice(7, 14)))\n  ];\n\n  /* DES encrypt magic number \"KGS!@#$%\" to two\n   * 8-byte ciphertexts, (ECB, no padding)\n   */\n  var buf = new Buffer(16);\n  var pos = 0;\n  var cts = halves.forEach(function(z) {\n    var des = crypto.createCipheriv('DES-ECB', z, '');\n    var str = des.update('KGS!@#$%', 'binary', 'binary');\n    buf.write(str, pos, pos + 8, 'binary');\n    pos += 8;\n  });\n\n  /* concat the two ciphertexts to form 16byte value,\n   * the LM hash */\n  return buf;\n}\n\nfunction nthashbuf(str)\n{\n  /* take MD4 hash of UCS-2 encoded password */\n  var ucs2 = new Buffer(str, 'ucs2');\n  var md4 = crypto.createHash('md4');\n  md4.update(ucs2);\n  return new Buffer(md4.digest('binary'), 'binary');\n}\n\nfunction lmhash(is)\n{\n  return $.bintohex(lmhashbuf(is));\n}\n\nfunction nthash(is)\n{\n  return $.bintohex(nthashbuf(is));\n}\n\nmodule.exports.nthashbuf = nthashbuf;\nmodule.exports.lmhashbuf = lmhashbuf;\n\nmodule.exports.nthash = nthash;\nmodule.exports.lmhash = lmhash;\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function () {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function () {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function () {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function () {\n    return _v4.default;\n  }\n});\nObject.defineProperty(exports, \"NIL\", {\n  enumerable: true,\n  get: function () {\n    return _nil.default;\n  }\n});\nObject.defineProperty(exports, \"version\", {\n  enumerable: true,\n  get: function () {\n    return _version.default;\n  }\n});\nObject.defineProperty(exports, \"validate\", {\n  enumerable: true,\n  get: function () {\n    return _validate.default;\n  }\n});\nObject.defineProperty(exports, \"stringify\", {\n  enumerable: true,\n  get: function () {\n    return _stringify.default;\n  }\n});\nObject.defineProperty(exports, \"parse\", {\n  enumerable: true,\n  get: function () {\n    return _parse.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nvar _nil = _interopRequireDefault(require(\"./nil.js\"));\n\nvar _version = _interopRequireDefault(require(\"./version.js\"));\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nvar _parse = _interopRequireDefault(require(\"./parse.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction md5(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return _crypto.default.createHash('md5').update(bytes).digest();\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = '00000000-0000-0000-0000-000000000000';\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction parse(uuid) {\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  let v;\n  const arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nvar _default = parse;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\n\nfunction rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    _crypto.default.randomFillSync(rnds8Pool);\n\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction sha1(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return _crypto.default.createHash('sha1').update(bytes).digest();\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nvar _default = stringify;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || new Array(16);\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _stringify.default)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.URL = exports.DNS = void 0;\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nvar _parse = _interopRequireDefault(require(\"./parse.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction _default(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = (0, _parse.default)(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return (0, _stringify.default)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _stringify.default)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regex = _interopRequireDefault(require(\"./regex.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && _regex.default.test(uuid);\n}\n\nvar _default = validate;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction version(uuid) {\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.substr(14, 1), 16);\n}\n\nvar _default = version;\nexports.default = _default;","const core = require('@actions/core');\nconst azureDevOpsApi = require('azure-devops-node-api');\nconst path = require('path');\nconst glob = require('glob');\nconst fs = require('fs');\n\n/**\n * Creates attachments for work items.\n *\n * @param {import('azure-devops-node-api/WorkItemTrackingApi').IWorkItemTrackingApi} workItemTrackingApi - The Work Item Tracking API.\n * @param {string[]} attachFiles - An array of file paths to attach.\n * @param {object} [options] - Optional parameters for attachment creation.\n * @param {any} [options.customHeaders] - Custom headers for the request.\n * @param {string} [options.uploadType='Simple'] - The type of upload.\n * @param {string} [options.project=null] - The project to associate the attachment with.\n * @param {string} [options.areaPath=null] - The area path to associate the attachment with.\n * @returns {Promise<object[]>} - A promise that resolves to an array of created attachments.\n */\nasync function createAttachments(\n  workItemTrackingApi,\n  attachFiles,\n  options = {\n    customHeaders: [],\n    uploadType: 'Simple',\n    project: null,\n    areaPath: null\n  }\n) {\n  const { customHeaders, uploadType, project, areaPath } = options;\n  const attachFilesPathArray = [];\n  const attachArray = [];\n\n  // Resolve file paths and save them in array\n  await Promise.all(\n    attachFiles.map(async line => {\n      const matchingFiles = await glob.glob(\n        line.replaceAll(\"'\", '').replaceAll('\"', '').replaceAll('\\\\', '/')\n      );\n      matchingFiles.forEach(matchingFile => {\n        attachFilesPathArray.push(path.resolve(matchingFile));\n      });\n    })\n  );\n\n  // Log attachFilesPathArray if in debug mode\n  if (core.isDebug()) {\n    core.debug(`attachFilesPathArray: ${attachFilesPathArray}`);\n  }\n\n  if (attachFilesPathArray.length <= 0) {\n    throw new Error(\n      'Create Attachments failed. Maybe one of the file not exists.'\n    );\n  }\n  // Create attachments for each file in the array and save them in new array\n  await Promise.all(\n    attachFilesPathArray.map(async filePath => {\n      const fileName = path.basename(filePath);\n      const contentStream = fs.createReadStream(filePath);\n\n      // Attempt to create attachment and catch error if it fails\n      const attachResult = await workItemTrackingApi.createAttachment(\n        customHeaders,\n        contentStream,\n        fileName,\n        uploadType,\n        project,\n        areaPath\n      );\n\n      attachArray.push(attachResult);\n    })\n  );\n\n  // Log attachArray if in debug mode\n  if (core.isDebug()) {\n    core.debug(`attachArray: ${JSON.stringify(attachArray)}`);\n  }\n\n  return attachArray;\n}\n\n/**\n * Sets the fields for a work item.\n * @param {import('azure-devops-node-api/WorkItemTrackingApi').IWorkItemTrackingApi} workItemTrackingApi - The Work Item Tracking API.\n * @param {Map<string, string>} fieldMappingsMap - A map of field mappings where the key is the field name and the value is the field value.\n * @param {string} project - The project name.\n * @returns {Promise<Object>} - A promise that resolves to an object representing the field mappings.\n */\nasync function setFields(workItemTrackingApi, fieldMappingsMap, project) {\n  const fieldMap = new Map();\n  const workItemFields = await workItemTrackingApi.getFields(project);\n\n  fieldMappingsMap.forEach((value, key) => {\n    const fieldObject = workItemFields.find(\n      field =>\n        field.name.toLocaleLowerCase() === key.toLocaleLowerCase() ||\n        field.name.toLocaleLowerCase().replace(' ', '') ===\n          key.toLocaleLowerCase()\n    );\n\n    if (!fieldObject) {\n      throw new Error(\n        `Field '${key}' not found. Please check the if the field name is correct.`\n      );\n    }\n\n    const fieldReferenceName = fieldObject.referenceName;\n\n    fieldMap.set(fieldReferenceName, value);\n  });\n\n  return fieldMap;\n}\n\n/**\n * Creates the body for a work item based on the provided field mappings and attachments.\n * @param {Map<string, any>} fieldMappingsMap - A map containing the field mappings.\n * @param {Array} [options.attachmentsArray=[]] - An array of attachments to be added to the request body.\n * @returns {Array<object>} - The body of the work item.\n */\nfunction createBody(fieldMappingsMap, options = { attachmentsArray: [] }) {\n  const { attachmentsArray } = options;\n  const requestBodyArray = [];\n\n  // Add field mappings to the request body\n  fieldMappingsMap.forEach((Value, key) => {\n    requestBodyArray.push({\n      op: 'add',\n      path: `/fields/${key}`,\n      value: Value\n    });\n  });\n\n  // Add attachments to the request body\n  if (attachmentsArray) {\n    attachmentsArray.forEach(attachment => {\n      requestBodyArray.push({\n        op: 'add',\n        path: '/relations/-',\n        value: {\n          rel: 'AttachedFile',\n          url: attachment.url,\n          attributes: {\n            comment: 'Attachment added'\n          }\n        }\n      });\n    });\n  }\n\n  // Log the request body if in debug mode\n  if (core.isDebug()) {\n    core.debug(`\"Request body\": ${JSON.stringify(requestBodyArray)}`);\n  }\n\n  return requestBodyArray;\n}\n\n/**\n * Creates a new work item using the provided parameters.\n *\n * @param {import('azure-devops-node-api/WorkItemTrackingApi').IWorkItemTrackingApi} workItemTrackingApi - The Work Item Tracking API.\n * @param {string} project - The project name or ID.\n * @param {string} workItemType - The type of work item to create.\n * @param {string[]} fieldMappings - An array of field mappings in the format \"key=value\".\n * @param {object} [options] - Optional parameters for the work item creation.\n * @param {string[]} [options.attachmentsArray=[]] - An array of attachment URLs.\n * @param {any} [options.customHeaders] - Custom headers to include in the request.\n * @param {boolean} [options.validateOnly=false] - Indicates whether to validate the work item without saving it.\n * @param {boolean} [options.bypassRules=false] - Indicates whether to bypass the work item rules.\n * @param {boolean} [options.suppressNotifications=false] - Indicates whether to suppress notifications for the work item.\n * @param {string} [options.expand=None] - The expand parameter for the work item creation.\n * @returns {Promise<object>} A promise that resolves to the created work item object.\n * @throws {Error} If the work item creation fails or if any of the inputs are incorrect.\n */\nasync function createWorkItem(\n  workItemTrackingApi,\n  project,\n  workItemType,\n  fieldMappings,\n  options = {\n    attachmentsArray: [],\n    customHeaders: [],\n    validateOnly: false,\n    bypassRules: false,\n    suppressNotifications: false,\n    expand: 'None'\n  }\n) {\n  const {\n    attachmentsArray,\n    customHeaders,\n    validateOnly,\n    bypassRules,\n    suppressNotifications,\n    expand\n  } = options;\n  const fieldMappingsMap = new Map();\n\n  // Create a map of field key and there values\n  fieldMappings\n    .map(line => line.replaceAll(\"'\", '').replaceAll('\"', ''))\n    .forEach(pair => {\n      const [key, value] = pair.split('=').map(s => s.trim());\n      fieldMappingsMap.set(key, value);\n    });\n\n  // Set the fields for the work item with there reference name\n  const fieldMap = await setFields(\n    workItemTrackingApi,\n    fieldMappingsMap,\n    project\n  );\n\n  // Create the request body for the work item\n  const requestBodyArray = createBody(fieldMap, { attachmentsArray });\n\n  // Attempt to create the work item and catch error if it fails\n  const workItem = await workItemTrackingApi.createWorkItem(\n    customHeaders,\n    requestBodyArray,\n    project,\n    workItemType,\n    validateOnly,\n    bypassRules,\n    suppressNotifications,\n    expand\n  );\n\n  // Return the created work item or throw error\n  if (workItem != null) {\n    return workItem;\n  } else {\n    throw new Error(\n      'Create WorkItem failed. Maybe one of the inputs is incorrect.'\n    );\n  }\n}\n\n/**\n * Main function to perform the action of creating a work item with attachments.\n *\n * @param {string} token - The personal access token for authentication.\n * @param {string} organizationUrl - The URL of the Azure DevOps organization.\n * @param {string} project - The name of the project.\n * @param {string} workItemType - The type of the work item.\n * @param {object[]} fieldMappingsInput - An array of field mappings for the work item.\n * @param {object[]} attachFilesInput - An array of files to attach to the work item.\n * @returns {Promise<void>} - A promise that resolves when the work item is created.\n */\nasync function actionMain(\n  token,\n  organizationUrl,\n  project,\n  workItemType,\n  fieldMappingsInput,\n  attachFilesInput\n) {\n  // Create a new connection to Azure Devops/tfs\n  const authHandler = azureDevOpsApi.getPersonalAccessTokenHandler(token);\n  const connection = new azureDevOpsApi.WebApi(organizationUrl, authHandler);\n  const workItemTrackingApi = await connection.getWorkItemTrackingApi();\n\n  core.startGroup('Create the attachments');\n\n  let attachmentsArray = [];\n  // Create the attachments for the work item\n  if (attachFilesInput) {\n    attachmentsArray = await createAttachments(\n      workItemTrackingApi,\n      attachFilesInput,\n      {\n        customHeaders: [],\n        uploadType: 'Simple',\n        project,\n        areaPath: null\n      }\n    );\n  }\n\n  core.endGroup();\n\n  core.startGroup('Create the workitem');\n\n  // Create the work item with the provided field mappings and attachments\n  const workItem = await createWorkItem(\n    workItemTrackingApi,\n    project,\n    workItemType,\n    fieldMappingsInput,\n    {\n      attachmentsArray\n    }\n  );\n\n  // Log the work item URL and set the output\n  core.debug(`workItem: ${JSON.stringify(workItem)}`);\n  core.info(`Workitem was created: \\x1B[1m${workItem._links.html.href}\\x1B[0m`);\n  core.setOutput('workitem_url', workItem._links.html.href);\n\n  core.endGroup();\n}\n\n/**\n * Runs the main logic of the program.\n * @returns {Promise<void>} A promise that resolves when the program finishes executing.\n */\nasync function run() {\n  // Define inputs\n  /**\n   * Access token for authentication.\n   * @type {string}\n   */\n  const token = core.getInput('token', { required: true });\n  core.debug(`token: ${token}`);\n\n  /**\n   * The URL of the organization.\n   * @type {string}\n   */\n  const organizationUrl = core.getInput('organization_url', {\n    required: true\n  });\n  core.debug(`organization url: ${organizationUrl}`);\n\n  /**\n   * The project name.\n   * @type {string}\n   */\n  const project = core.getInput('project', { required: true });\n  core.debug(`project: ${project}`);\n\n  /**\n   * The type of work item.\n   * @type {string}\n   */\n  const workItemType = core.getInput('workitem_type', { required: true });\n  core.debug(`workitem type: ${workItemType}`);\n\n  /**\n   * Represents the field mappings input.\n   * @type {string[]}\n   */\n  const fieldMappingsInput = core.getMultilineInput('field_mappings', {\n    required: true\n  });\n  core.debug(`field mappings input: ${fieldMappingsInput}`);\n\n  /**\n   * Input for attaching files.\n   * @type {string[]}\n   */\n  const attachFilesInput = core.getMultilineInput('attach_files');\n  core.debug(`attach files input: ${attachFilesInput}`);\n\n  // Run the main logic\n  try {\n    await actionMain(\n      token,\n      organizationUrl,\n      project,\n      workItemType,\n      fieldMappingsInput,\n      attachFilesInput\n    );\n  } catch (error) {\n    core.setFailed(`${error?.message ?? error}`);\n  }\n}\n\nmodule.exports = {\n  createAttachments,\n  run\n};\n","module.exports = require(\"assert\");","module.exports = require(\"crypto\");","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"fs/promises\");","module.exports = require(\"http\");","module.exports = require(\"https\");","module.exports = require(\"net\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"stream\");","module.exports = require(\"string_decoder\");","module.exports = require(\"tls\");","module.exports = require(\"url\");","module.exports = require(\"util\");","module.exports = require(\"zlib\");","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Glob = void 0;\nconst minimatch_1 = require(\"minimatch\");\nconst path_scurry_1 = require(\"path-scurry\");\nconst url_1 = require(\"url\");\nconst pattern_js_1 = require(\"./pattern.js\");\nconst walker_js_1 = require(\"./walker.js\");\n// if no process global, just call it linux.\n// so we default to case-sensitive, / separators\nconst defaultPlatform = typeof process === 'object' &&\n    process &&\n    typeof process.platform === 'string'\n    ? process.platform\n    : 'linux';\n/**\n * An object that can perform glob pattern traversals.\n */\nclass Glob {\n    absolute;\n    cwd;\n    root;\n    dot;\n    dotRelative;\n    follow;\n    ignore;\n    magicalBraces;\n    mark;\n    matchBase;\n    maxDepth;\n    nobrace;\n    nocase;\n    nodir;\n    noext;\n    noglobstar;\n    pattern;\n    platform;\n    realpath;\n    scurry;\n    stat;\n    signal;\n    windowsPathsNoEscape;\n    withFileTypes;\n    /**\n     * The options provided to the constructor.\n     */\n    opts;\n    /**\n     * An array of parsed immutable {@link Pattern} objects.\n     */\n    patterns;\n    /**\n     * All options are stored as properties on the `Glob` object.\n     *\n     * See {@link GlobOptions} for full options descriptions.\n     *\n     * Note that a previous `Glob` object can be passed as the\n     * `GlobOptions` to another `Glob` instantiation to re-use settings\n     * and caches with a new pattern.\n     *\n     * Traversal functions can be called multiple times to run the walk\n     * again.\n     */\n    constructor(pattern, opts) {\n        /* c8 ignore start */\n        if (!opts)\n            throw new TypeError('glob options required');\n        /* c8 ignore stop */\n        this.withFileTypes = !!opts.withFileTypes;\n        this.signal = opts.signal;\n        this.follow = !!opts.follow;\n        this.dot = !!opts.dot;\n        this.dotRelative = !!opts.dotRelative;\n        this.nodir = !!opts.nodir;\n        this.mark = !!opts.mark;\n        if (!opts.cwd) {\n            this.cwd = '';\n        }\n        else if (opts.cwd instanceof URL || opts.cwd.startsWith('file://')) {\n            opts.cwd = (0, url_1.fileURLToPath)(opts.cwd);\n        }\n        this.cwd = opts.cwd || '';\n        this.root = opts.root;\n        this.magicalBraces = !!opts.magicalBraces;\n        this.nobrace = !!opts.nobrace;\n        this.noext = !!opts.noext;\n        this.realpath = !!opts.realpath;\n        this.absolute = opts.absolute;\n        this.noglobstar = !!opts.noglobstar;\n        this.matchBase = !!opts.matchBase;\n        this.maxDepth =\n            typeof opts.maxDepth === 'number' ? opts.maxDepth : Infinity;\n        this.stat = !!opts.stat;\n        this.ignore = opts.ignore;\n        if (this.withFileTypes && this.absolute !== undefined) {\n            throw new Error('cannot set absolute and withFileTypes:true');\n        }\n        if (typeof pattern === 'string') {\n            pattern = [pattern];\n        }\n        this.windowsPathsNoEscape =\n            !!opts.windowsPathsNoEscape ||\n                opts.allowWindowsEscape === false;\n        if (this.windowsPathsNoEscape) {\n            pattern = pattern.map(p => p.replace(/\\\\/g, '/'));\n        }\n        if (this.matchBase) {\n            if (opts.noglobstar) {\n                throw new TypeError('base matching requires globstar');\n            }\n            pattern = pattern.map(p => (p.includes('/') ? p : `./**/${p}`));\n        }\n        this.pattern = pattern;\n        this.platform = opts.platform || defaultPlatform;\n        this.opts = { ...opts, platform: this.platform };\n        if (opts.scurry) {\n            this.scurry = opts.scurry;\n            if (opts.nocase !== undefined &&\n                opts.nocase !== opts.scurry.nocase) {\n                throw new Error('nocase option contradicts provided scurry option');\n            }\n        }\n        else {\n            const Scurry = opts.platform === 'win32'\n                ? path_scurry_1.PathScurryWin32\n                : opts.platform === 'darwin'\n                    ? path_scurry_1.PathScurryDarwin\n                    : opts.platform\n                        ? path_scurry_1.PathScurryPosix\n                        : path_scurry_1.PathScurry;\n            this.scurry = new Scurry(this.cwd, {\n                nocase: opts.nocase,\n                fs: opts.fs,\n            });\n        }\n        this.nocase = this.scurry.nocase;\n        // If you do nocase:true on a case-sensitive file system, then\n        // we need to use regexps instead of strings for non-magic\n        // path portions, because statting `aBc` won't return results\n        // for the file `AbC` for example.\n        const nocaseMagicOnly = this.platform === 'darwin' || this.platform === 'win32';\n        const mmo = {\n            // default nocase based on platform\n            ...opts,\n            dot: this.dot,\n            matchBase: this.matchBase,\n            nobrace: this.nobrace,\n            nocase: this.nocase,\n            nocaseMagicOnly,\n            nocomment: true,\n            noext: this.noext,\n            nonegate: true,\n            optimizationLevel: 2,\n            platform: this.platform,\n            windowsPathsNoEscape: this.windowsPathsNoEscape,\n            debug: !!this.opts.debug,\n        };\n        const mms = this.pattern.map(p => new minimatch_1.Minimatch(p, mmo));\n        const [matchSet, globParts] = mms.reduce((set, m) => {\n            set[0].push(...m.set);\n            set[1].push(...m.globParts);\n            return set;\n        }, [[], []]);\n        this.patterns = matchSet.map((set, i) => {\n            const g = globParts[i];\n            /* c8 ignore start */\n            if (!g)\n                throw new Error('invalid pattern object');\n            /* c8 ignore stop */\n            return new pattern_js_1.Pattern(set, g, 0, this.platform);\n        });\n    }\n    async walk() {\n        // Walkers always return array of Path objects, so we just have to\n        // coerce them into the right shape.  It will have already called\n        // realpath() if the option was set to do so, so we know that's cached.\n        // start out knowing the cwd, at least\n        return [\n            ...(await new walker_js_1.GlobWalker(this.patterns, this.scurry.cwd, {\n                ...this.opts,\n                maxDepth: this.maxDepth !== Infinity\n                    ? this.maxDepth + this.scurry.cwd.depth()\n                    : Infinity,\n                platform: this.platform,\n                nocase: this.nocase,\n            }).walk()),\n        ];\n    }\n    walkSync() {\n        return [\n            ...new walker_js_1.GlobWalker(this.patterns, this.scurry.cwd, {\n                ...this.opts,\n                maxDepth: this.maxDepth !== Infinity\n                    ? this.maxDepth + this.scurry.cwd.depth()\n                    : Infinity,\n                platform: this.platform,\n                nocase: this.nocase,\n            }).walkSync(),\n        ];\n    }\n    stream() {\n        return new walker_js_1.GlobStream(this.patterns, this.scurry.cwd, {\n            ...this.opts,\n            maxDepth: this.maxDepth !== Infinity\n                ? this.maxDepth + this.scurry.cwd.depth()\n                : Infinity,\n            platform: this.platform,\n            nocase: this.nocase,\n        }).stream();\n    }\n    streamSync() {\n        return new walker_js_1.GlobStream(this.patterns, this.scurry.cwd, {\n            ...this.opts,\n            maxDepth: this.maxDepth !== Infinity\n                ? this.maxDepth + this.scurry.cwd.depth()\n                : Infinity,\n            platform: this.platform,\n            nocase: this.nocase,\n        }).streamSync();\n    }\n    /**\n     * Default sync iteration function. Returns a Generator that\n     * iterates over the results.\n     */\n    iterateSync() {\n        return this.streamSync()[Symbol.iterator]();\n    }\n    [Symbol.iterator]() {\n        return this.iterateSync();\n    }\n    /**\n     * Default async iteration function. Returns an AsyncGenerator that\n     * iterates over the results.\n     */\n    iterate() {\n        return this.stream()[Symbol.asyncIterator]();\n    }\n    [Symbol.asyncIterator]() {\n        return this.iterate();\n    }\n}\nexports.Glob = Glob;\n//# sourceMappingURL=glob.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hasMagic = void 0;\nconst minimatch_1 = require(\"minimatch\");\n/**\n * Return true if the patterns provided contain any magic glob characters,\n * given the options provided.\n *\n * Brace expansion is not considered \"magic\" unless the `magicalBraces` option\n * is set, as brace expansion just turns one string into an array of strings.\n * So a pattern like `'x{a,b}y'` would return `false`, because `'xay'` and\n * `'xby'` both do not contain any magic glob characters, and it's treated the\n * same as if you had called it on `['xay', 'xby']`. When `magicalBraces:true`\n * is in the options, brace expansion _is_ treated as a pattern having magic.\n */\nconst hasMagic = (pattern, options = {}) => {\n    if (!Array.isArray(pattern)) {\n        pattern = [pattern];\n    }\n    for (const p of pattern) {\n        if (new minimatch_1.Minimatch(p, options).hasMagic())\n            return true;\n    }\n    return false;\n};\nexports.hasMagic = hasMagic;\n//# sourceMappingURL=has-magic.js.map","\"use strict\";\n// give it a pattern, and it'll be able to tell you if\n// a given path should be ignored.\n// Ignoring a path ignores its children if the pattern ends in /**\n// Ignores are always parsed in dot:true mode\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Ignore = void 0;\nconst minimatch_1 = require(\"minimatch\");\nconst pattern_js_1 = require(\"./pattern.js\");\nconst defaultPlatform = typeof process === 'object' &&\n    process &&\n    typeof process.platform === 'string'\n    ? process.platform\n    : 'linux';\n/**\n * Class used to process ignored patterns\n */\nclass Ignore {\n    relative;\n    relativeChildren;\n    absolute;\n    absoluteChildren;\n    constructor(ignored, { nobrace, nocase, noext, noglobstar, platform = defaultPlatform, }) {\n        this.relative = [];\n        this.absolute = [];\n        this.relativeChildren = [];\n        this.absoluteChildren = [];\n        const mmopts = {\n            dot: true,\n            nobrace,\n            nocase,\n            noext,\n            noglobstar,\n            optimizationLevel: 2,\n            platform,\n            nocomment: true,\n            nonegate: true,\n        };\n        // this is a little weird, but it gives us a clean set of optimized\n        // minimatch matchers, without getting tripped up if one of them\n        // ends in /** inside a brace section, and it's only inefficient at\n        // the start of the walk, not along it.\n        // It'd be nice if the Pattern class just had a .test() method, but\n        // handling globstars is a bit of a pita, and that code already lives\n        // in minimatch anyway.\n        // Another way would be if maybe Minimatch could take its set/globParts\n        // as an option, and then we could at least just use Pattern to test\n        // for absolute-ness.\n        // Yet another way, Minimatch could take an array of glob strings, and\n        // a cwd option, and do the right thing.\n        for (const ign of ignored) {\n            const mm = new minimatch_1.Minimatch(ign, mmopts);\n            for (let i = 0; i < mm.set.length; i++) {\n                const parsed = mm.set[i];\n                const globParts = mm.globParts[i];\n                /* c8 ignore start */\n                if (!parsed || !globParts) {\n                    throw new Error('invalid pattern object');\n                }\n                /* c8 ignore stop */\n                const p = new pattern_js_1.Pattern(parsed, globParts, 0, platform);\n                const m = new minimatch_1.Minimatch(p.globString(), mmopts);\n                const children = globParts[globParts.length - 1] === '**';\n                const absolute = p.isAbsolute();\n                if (absolute)\n                    this.absolute.push(m);\n                else\n                    this.relative.push(m);\n                if (children) {\n                    if (absolute)\n                        this.absoluteChildren.push(m);\n                    else\n                        this.relativeChildren.push(m);\n                }\n            }\n        }\n    }\n    ignored(p) {\n        const fullpath = p.fullpath();\n        const fullpaths = `${fullpath}/`;\n        const relative = p.relative() || '.';\n        const relatives = `${relative}/`;\n        for (const m of this.relative) {\n            if (m.match(relative) || m.match(relatives))\n                return true;\n        }\n        for (const m of this.absolute) {\n            if (m.match(fullpath) || m.match(fullpaths))\n                return true;\n        }\n        return false;\n    }\n    childrenIgnored(p) {\n        const fullpath = p.fullpath() + '/';\n        const relative = (p.relative() || '.') + '/';\n        for (const m of this.relativeChildren) {\n            if (m.match(relative))\n                return true;\n        }\n        for (const m of this.absoluteChildren) {\n            if (m.match(fullpath))\n                return true;\n        }\n        return false;\n    }\n}\nexports.Ignore = Ignore;\n//# sourceMappingURL=ignore.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.glob = exports.hasMagic = exports.Glob = exports.unescape = exports.escape = exports.sync = exports.iterate = exports.iterateSync = exports.stream = exports.streamSync = exports.globIterate = exports.globIterateSync = exports.globSync = exports.globStream = exports.globStreamSync = void 0;\nconst minimatch_1 = require(\"minimatch\");\nconst glob_js_1 = require(\"./glob.js\");\nconst has_magic_js_1 = require(\"./has-magic.js\");\nfunction globStreamSync(pattern, options = {}) {\n    return new glob_js_1.Glob(pattern, options).streamSync();\n}\nexports.globStreamSync = globStreamSync;\nfunction globStream(pattern, options = {}) {\n    return new glob_js_1.Glob(pattern, options).stream();\n}\nexports.globStream = globStream;\nfunction globSync(pattern, options = {}) {\n    return new glob_js_1.Glob(pattern, options).walkSync();\n}\nexports.globSync = globSync;\nasync function glob_(pattern, options = {}) {\n    return new glob_js_1.Glob(pattern, options).walk();\n}\nfunction globIterateSync(pattern, options = {}) {\n    return new glob_js_1.Glob(pattern, options).iterateSync();\n}\nexports.globIterateSync = globIterateSync;\nfunction globIterate(pattern, options = {}) {\n    return new glob_js_1.Glob(pattern, options).iterate();\n}\nexports.globIterate = globIterate;\n// aliases: glob.sync.stream() glob.stream.sync() glob.sync() etc\nexports.streamSync = globStreamSync;\nexports.stream = Object.assign(globStream, { sync: globStreamSync });\nexports.iterateSync = globIterateSync;\nexports.iterate = Object.assign(globIterate, {\n    sync: globIterateSync,\n});\nexports.sync = Object.assign(globSync, {\n    stream: globStreamSync,\n    iterate: globIterateSync,\n});\n/* c8 ignore start */\nvar minimatch_2 = require(\"minimatch\");\nObject.defineProperty(exports, \"escape\", { enumerable: true, get: function () { return minimatch_2.escape; } });\nObject.defineProperty(exports, \"unescape\", { enumerable: true, get: function () { return minimatch_2.unescape; } });\nvar glob_js_2 = require(\"./glob.js\");\nObject.defineProperty(exports, \"Glob\", { enumerable: true, get: function () { return glob_js_2.Glob; } });\nvar has_magic_js_2 = require(\"./has-magic.js\");\nObject.defineProperty(exports, \"hasMagic\", { enumerable: true, get: function () { return has_magic_js_2.hasMagic; } });\n/* c8 ignore stop */\nexports.glob = Object.assign(glob_, {\n    glob: glob_,\n    globSync,\n    sync: exports.sync,\n    globStream,\n    stream: exports.stream,\n    globStreamSync,\n    streamSync: exports.streamSync,\n    globIterate,\n    iterate: exports.iterate,\n    globIterateSync,\n    iterateSync: exports.iterateSync,\n    Glob: glob_js_1.Glob,\n    hasMagic: has_magic_js_1.hasMagic,\n    escape: minimatch_1.escape,\n    unescape: minimatch_1.unescape,\n});\nexports.glob.glob = exports.glob;\n//# sourceMappingURL=index.js.map","\"use strict\";\n// this is just a very light wrapper around 2 arrays with an offset index\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Pattern = void 0;\nconst minimatch_1 = require(\"minimatch\");\nconst isPatternList = (pl) => pl.length >= 1;\nconst isGlobList = (gl) => gl.length >= 1;\n/**\n * An immutable-ish view on an array of glob parts and their parsed\n * results\n */\nclass Pattern {\n    #patternList;\n    #globList;\n    #index;\n    length;\n    #platform;\n    #rest;\n    #globString;\n    #isDrive;\n    #isUNC;\n    #isAbsolute;\n    #followGlobstar = true;\n    constructor(patternList, globList, index, platform) {\n        if (!isPatternList(patternList)) {\n            throw new TypeError('empty pattern list');\n        }\n        if (!isGlobList(globList)) {\n            throw new TypeError('empty glob list');\n        }\n        if (globList.length !== patternList.length) {\n            throw new TypeError('mismatched pattern list and glob list lengths');\n        }\n        this.length = patternList.length;\n        if (index < 0 || index >= this.length) {\n            throw new TypeError('index out of range');\n        }\n        this.#patternList = patternList;\n        this.#globList = globList;\n        this.#index = index;\n        this.#platform = platform;\n        // normalize root entries of absolute patterns on initial creation.\n        if (this.#index === 0) {\n            // c: => ['c:/']\n            // C:/ => ['C:/']\n            // C:/x => ['C:/', 'x']\n            // //host/share => ['//host/share/']\n            // //host/share/ => ['//host/share/']\n            // //host/share/x => ['//host/share/', 'x']\n            // /etc => ['/', 'etc']\n            // / => ['/']\n            if (this.isUNC()) {\n                // '' / '' / 'host' / 'share'\n                const [p0, p1, p2, p3, ...prest] = this.#patternList;\n                const [g0, g1, g2, g3, ...grest] = this.#globList;\n                if (prest[0] === '') {\n                    // ends in /\n                    prest.shift();\n                    grest.shift();\n                }\n                const p = [p0, p1, p2, p3, ''].join('/');\n                const g = [g0, g1, g2, g3, ''].join('/');\n                this.#patternList = [p, ...prest];\n                this.#globList = [g, ...grest];\n                this.length = this.#patternList.length;\n            }\n            else if (this.isDrive() || this.isAbsolute()) {\n                const [p1, ...prest] = this.#patternList;\n                const [g1, ...grest] = this.#globList;\n                if (prest[0] === '') {\n                    // ends in /\n                    prest.shift();\n                    grest.shift();\n                }\n                const p = p1 + '/';\n                const g = g1 + '/';\n                this.#patternList = [p, ...prest];\n                this.#globList = [g, ...grest];\n                this.length = this.#patternList.length;\n            }\n        }\n    }\n    /**\n     * The first entry in the parsed list of patterns\n     */\n    pattern() {\n        return this.#patternList[this.#index];\n    }\n    /**\n     * true of if pattern() returns a string\n     */\n    isString() {\n        return typeof this.#patternList[this.#index] === 'string';\n    }\n    /**\n     * true of if pattern() returns GLOBSTAR\n     */\n    isGlobstar() {\n        return this.#patternList[this.#index] === minimatch_1.GLOBSTAR;\n    }\n    /**\n     * true if pattern() returns a regexp\n     */\n    isRegExp() {\n        return this.#patternList[this.#index] instanceof RegExp;\n    }\n    /**\n     * The /-joined set of glob parts that make up this pattern\n     */\n    globString() {\n        return (this.#globString =\n            this.#globString ||\n                (this.#index === 0\n                    ? this.isAbsolute()\n                        ? this.#globList[0] + this.#globList.slice(1).join('/')\n                        : this.#globList.join('/')\n                    : this.#globList.slice(this.#index).join('/')));\n    }\n    /**\n     * true if there are more pattern parts after this one\n     */\n    hasMore() {\n        return this.length > this.#index + 1;\n    }\n    /**\n     * The rest of the pattern after this part, or null if this is the end\n     */\n    rest() {\n        if (this.#rest !== undefined)\n            return this.#rest;\n        if (!this.hasMore())\n            return (this.#rest = null);\n        this.#rest = new Pattern(this.#patternList, this.#globList, this.#index + 1, this.#platform);\n        this.#rest.#isAbsolute = this.#isAbsolute;\n        this.#rest.#isUNC = this.#isUNC;\n        this.#rest.#isDrive = this.#isDrive;\n        return this.#rest;\n    }\n    /**\n     * true if the pattern represents a //unc/path/ on windows\n     */\n    isUNC() {\n        const pl = this.#patternList;\n        return this.#isUNC !== undefined\n            ? this.#isUNC\n            : (this.#isUNC =\n                this.#platform === 'win32' &&\n                    this.#index === 0 &&\n                    pl[0] === '' &&\n                    pl[1] === '' &&\n                    typeof pl[2] === 'string' &&\n                    !!pl[2] &&\n                    typeof pl[3] === 'string' &&\n                    !!pl[3]);\n    }\n    // pattern like C:/...\n    // split = ['C:', ...]\n    // XXX: would be nice to handle patterns like `c:*` to test the cwd\n    // in c: for *, but I don't know of a way to even figure out what that\n    // cwd is without actually chdir'ing into it?\n    /**\n     * True if the pattern starts with a drive letter on Windows\n     */\n    isDrive() {\n        const pl = this.#patternList;\n        return this.#isDrive !== undefined\n            ? this.#isDrive\n            : (this.#isDrive =\n                this.#platform === 'win32' &&\n                    this.#index === 0 &&\n                    this.length > 1 &&\n                    typeof pl[0] === 'string' &&\n                    /^[a-z]:$/i.test(pl[0]));\n    }\n    // pattern = '/' or '/...' or '/x/...'\n    // split = ['', ''] or ['', ...] or ['', 'x', ...]\n    // Drive and UNC both considered absolute on windows\n    /**\n     * True if the pattern is rooted on an absolute path\n     */\n    isAbsolute() {\n        const pl = this.#patternList;\n        return this.#isAbsolute !== undefined\n            ? this.#isAbsolute\n            : (this.#isAbsolute =\n                (pl[0] === '' && pl.length > 1) ||\n                    this.isDrive() ||\n                    this.isUNC());\n    }\n    /**\n     * consume the root of the pattern, and return it\n     */\n    root() {\n        const p = this.#patternList[0];\n        return typeof p === 'string' && this.isAbsolute() && this.#index === 0\n            ? p\n            : '';\n    }\n    /**\n     * Check to see if the current globstar pattern is allowed to follow\n     * a symbolic link.\n     */\n    checkFollowGlobstar() {\n        return !(this.#index === 0 ||\n            !this.isGlobstar() ||\n            !this.#followGlobstar);\n    }\n    /**\n     * Mark that the current globstar pattern is following a symbolic link\n     */\n    markFollowGlobstar() {\n        if (this.#index === 0 || !this.isGlobstar() || !this.#followGlobstar)\n            return false;\n        this.#followGlobstar = false;\n        return true;\n    }\n}\nexports.Pattern = Pattern;\n//# sourceMappingURL=pattern.js.map","\"use strict\";\n// synchronous utility for filtering entries and calculating subwalks\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Processor = exports.SubWalks = exports.MatchRecord = exports.HasWalkedCache = void 0;\nconst minimatch_1 = require(\"minimatch\");\n/**\n * A cache of which patterns have been processed for a given Path\n */\nclass HasWalkedCache {\n    store;\n    constructor(store = new Map()) {\n        this.store = store;\n    }\n    copy() {\n        return new HasWalkedCache(new Map(this.store));\n    }\n    hasWalked(target, pattern) {\n        return this.store.get(target.fullpath())?.has(pattern.globString());\n    }\n    storeWalked(target, pattern) {\n        const fullpath = target.fullpath();\n        const cached = this.store.get(fullpath);\n        if (cached)\n            cached.add(pattern.globString());\n        else\n            this.store.set(fullpath, new Set([pattern.globString()]));\n    }\n}\nexports.HasWalkedCache = HasWalkedCache;\n/**\n * A record of which paths have been matched in a given walk step,\n * and whether they only are considered a match if they are a directory,\n * and whether their absolute or relative path should be returned.\n */\nclass MatchRecord {\n    store = new Map();\n    add(target, absolute, ifDir) {\n        const n = (absolute ? 2 : 0) | (ifDir ? 1 : 0);\n        const current = this.store.get(target);\n        this.store.set(target, current === undefined ? n : n & current);\n    }\n    // match, absolute, ifdir\n    entries() {\n        return [...this.store.entries()].map(([path, n]) => [\n            path,\n            !!(n & 2),\n            !!(n & 1),\n        ]);\n    }\n}\nexports.MatchRecord = MatchRecord;\n/**\n * A collection of patterns that must be processed in a subsequent step\n * for a given path.\n */\nclass SubWalks {\n    store = new Map();\n    add(target, pattern) {\n        if (!target.canReaddir()) {\n            return;\n        }\n        const subs = this.store.get(target);\n        if (subs) {\n            if (!subs.find(p => p.globString() === pattern.globString())) {\n                subs.push(pattern);\n            }\n        }\n        else\n            this.store.set(target, [pattern]);\n    }\n    get(target) {\n        const subs = this.store.get(target);\n        /* c8 ignore start */\n        if (!subs) {\n            throw new Error('attempting to walk unknown path');\n        }\n        /* c8 ignore stop */\n        return subs;\n    }\n    entries() {\n        return this.keys().map(k => [k, this.store.get(k)]);\n    }\n    keys() {\n        return [...this.store.keys()].filter(t => t.canReaddir());\n    }\n}\nexports.SubWalks = SubWalks;\n/**\n * The class that processes patterns for a given path.\n *\n * Handles child entry filtering, and determining whether a path's\n * directory contents must be read.\n */\nclass Processor {\n    hasWalkedCache;\n    matches = new MatchRecord();\n    subwalks = new SubWalks();\n    patterns;\n    follow;\n    dot;\n    opts;\n    constructor(opts, hasWalkedCache) {\n        this.opts = opts;\n        this.follow = !!opts.follow;\n        this.dot = !!opts.dot;\n        this.hasWalkedCache = hasWalkedCache\n            ? hasWalkedCache.copy()\n            : new HasWalkedCache();\n    }\n    processPatterns(target, patterns) {\n        this.patterns = patterns;\n        const processingSet = patterns.map(p => [target, p]);\n        // map of paths to the magic-starting subwalks they need to walk\n        // first item in patterns is the filter\n        for (let [t, pattern] of processingSet) {\n            this.hasWalkedCache.storeWalked(t, pattern);\n            const root = pattern.root();\n            const absolute = pattern.isAbsolute() && this.opts.absolute !== false;\n            // start absolute patterns at root\n            if (root) {\n                t = t.resolve(root === '/' && this.opts.root !== undefined\n                    ? this.opts.root\n                    : root);\n                const rest = pattern.rest();\n                if (!rest) {\n                    this.matches.add(t, true, false);\n                    continue;\n                }\n                else {\n                    pattern = rest;\n                }\n            }\n            if (t.isENOENT())\n                continue;\n            let p;\n            let rest;\n            let changed = false;\n            while (typeof (p = pattern.pattern()) === 'string' &&\n                (rest = pattern.rest())) {\n                const c = t.resolve(p);\n                t = c;\n                pattern = rest;\n                changed = true;\n            }\n            p = pattern.pattern();\n            rest = pattern.rest();\n            if (changed) {\n                if (this.hasWalkedCache.hasWalked(t, pattern))\n                    continue;\n                this.hasWalkedCache.storeWalked(t, pattern);\n            }\n            // now we have either a final string for a known entry,\n            // more strings for an unknown entry,\n            // or a pattern starting with magic, mounted on t.\n            if (typeof p === 'string') {\n                // must not be final entry, otherwise we would have\n                // concatenated it earlier.\n                const ifDir = p === '..' || p === '' || p === '.';\n                this.matches.add(t.resolve(p), absolute, ifDir);\n                continue;\n            }\n            else if (p === minimatch_1.GLOBSTAR) {\n                // if no rest, match and subwalk pattern\n                // if rest, process rest and subwalk pattern\n                // if it's a symlink, but we didn't get here by way of a\n                // globstar match (meaning it's the first time THIS globstar\n                // has traversed a symlink), then we follow it. Otherwise, stop.\n                if (!t.isSymbolicLink() ||\n                    this.follow ||\n                    pattern.checkFollowGlobstar()) {\n                    this.subwalks.add(t, pattern);\n                }\n                const rp = rest?.pattern();\n                const rrest = rest?.rest();\n                if (!rest || ((rp === '' || rp === '.') && !rrest)) {\n                    // only HAS to be a dir if it ends in **/ or **/.\n                    // but ending in ** will match files as well.\n                    this.matches.add(t, absolute, rp === '' || rp === '.');\n                }\n                else {\n                    if (rp === '..') {\n                        // this would mean you're matching **/.. at the fs root,\n                        // and no thanks, I'm not gonna test that specific case.\n                        /* c8 ignore start */\n                        const tp = t.parent || t;\n                        /* c8 ignore stop */\n                        if (!rrest)\n                            this.matches.add(tp, absolute, true);\n                        else if (!this.hasWalkedCache.hasWalked(tp, rrest)) {\n                            this.subwalks.add(tp, rrest);\n                        }\n                    }\n                }\n            }\n            else if (p instanceof RegExp) {\n                this.subwalks.add(t, pattern);\n            }\n        }\n        return this;\n    }\n    subwalkTargets() {\n        return this.subwalks.keys();\n    }\n    child() {\n        return new Processor(this.opts, this.hasWalkedCache);\n    }\n    // return a new Processor containing the subwalks for each\n    // child entry, and a set of matches, and\n    // a hasWalkedCache that's a copy of this one\n    // then we're going to call\n    filterEntries(parent, entries) {\n        const patterns = this.subwalks.get(parent);\n        // put matches and entry walks into the results processor\n        const results = this.child();\n        for (const e of entries) {\n            for (const pattern of patterns) {\n                const absolute = pattern.isAbsolute();\n                const p = pattern.pattern();\n                const rest = pattern.rest();\n                if (p === minimatch_1.GLOBSTAR) {\n                    results.testGlobstar(e, pattern, rest, absolute);\n                }\n                else if (p instanceof RegExp) {\n                    results.testRegExp(e, p, rest, absolute);\n                }\n                else {\n                    results.testString(e, p, rest, absolute);\n                }\n            }\n        }\n        return results;\n    }\n    testGlobstar(e, pattern, rest, absolute) {\n        if (this.dot || !e.name.startsWith('.')) {\n            if (!pattern.hasMore()) {\n                this.matches.add(e, absolute, false);\n            }\n            if (e.canReaddir()) {\n                // if we're in follow mode or it's not a symlink, just keep\n                // testing the same pattern. If there's more after the globstar,\n                // then this symlink consumes the globstar. If not, then we can\n                // follow at most ONE symlink along the way, so we mark it, which\n                // also checks to ensure that it wasn't already marked.\n                if (this.follow || !e.isSymbolicLink()) {\n                    this.subwalks.add(e, pattern);\n                }\n                else if (e.isSymbolicLink()) {\n                    if (rest && pattern.checkFollowGlobstar()) {\n                        this.subwalks.add(e, rest);\n                    }\n                    else if (pattern.markFollowGlobstar()) {\n                        this.subwalks.add(e, pattern);\n                    }\n                }\n            }\n        }\n        // if the NEXT thing matches this entry, then also add\n        // the rest.\n        if (rest) {\n            const rp = rest.pattern();\n            if (typeof rp === 'string' &&\n                // dots and empty were handled already\n                rp !== '..' &&\n                rp !== '' &&\n                rp !== '.') {\n                this.testString(e, rp, rest.rest(), absolute);\n            }\n            else if (rp === '..') {\n                /* c8 ignore start */\n                const ep = e.parent || e;\n                /* c8 ignore stop */\n                this.subwalks.add(ep, rest);\n            }\n            else if (rp instanceof RegExp) {\n                this.testRegExp(e, rp, rest.rest(), absolute);\n            }\n        }\n    }\n    testRegExp(e, p, rest, absolute) {\n        if (!p.test(e.name))\n            return;\n        if (!rest) {\n            this.matches.add(e, absolute, false);\n        }\n        else {\n            this.subwalks.add(e, rest);\n        }\n    }\n    testString(e, p, rest, absolute) {\n        // should never happen?\n        if (!e.isNamed(p))\n            return;\n        if (!rest) {\n            this.matches.add(e, absolute, false);\n        }\n        else {\n            this.subwalks.add(e, rest);\n        }\n    }\n}\nexports.Processor = Processor;\n//# sourceMappingURL=processor.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GlobStream = exports.GlobWalker = exports.GlobUtil = void 0;\n/**\n * Single-use utility classes to provide functionality to the {@link Glob}\n * methods.\n *\n * @module\n */\nconst minipass_1 = require(\"minipass\");\nconst ignore_js_1 = require(\"./ignore.js\");\nconst processor_js_1 = require(\"./processor.js\");\nconst makeIgnore = (ignore, opts) => typeof ignore === 'string'\n    ? new ignore_js_1.Ignore([ignore], opts)\n    : Array.isArray(ignore)\n        ? new ignore_js_1.Ignore(ignore, opts)\n        : ignore;\n/**\n * basic walking utilities that all the glob walker types use\n */\nclass GlobUtil {\n    path;\n    patterns;\n    opts;\n    seen = new Set();\n    paused = false;\n    aborted = false;\n    #onResume = [];\n    #ignore;\n    #sep;\n    signal;\n    maxDepth;\n    constructor(patterns, path, opts) {\n        this.patterns = patterns;\n        this.path = path;\n        this.opts = opts;\n        this.#sep = !opts.posix && opts.platform === 'win32' ? '\\\\' : '/';\n        if (opts.ignore) {\n            this.#ignore = makeIgnore(opts.ignore, opts);\n        }\n        // ignore, always set with maxDepth, but it's optional on the\n        // GlobOptions type\n        /* c8 ignore start */\n        this.maxDepth = opts.maxDepth || Infinity;\n        /* c8 ignore stop */\n        if (opts.signal) {\n            this.signal = opts.signal;\n            this.signal.addEventListener('abort', () => {\n                this.#onResume.length = 0;\n            });\n        }\n    }\n    #ignored(path) {\n        return this.seen.has(path) || !!this.#ignore?.ignored?.(path);\n    }\n    #childrenIgnored(path) {\n        return !!this.#ignore?.childrenIgnored?.(path);\n    }\n    // backpressure mechanism\n    pause() {\n        this.paused = true;\n    }\n    resume() {\n        /* c8 ignore start */\n        if (this.signal?.aborted)\n            return;\n        /* c8 ignore stop */\n        this.paused = false;\n        let fn = undefined;\n        while (!this.paused && (fn = this.#onResume.shift())) {\n            fn();\n        }\n    }\n    onResume(fn) {\n        if (this.signal?.aborted)\n            return;\n        /* c8 ignore start */\n        if (!this.paused) {\n            fn();\n        }\n        else {\n            /* c8 ignore stop */\n            this.#onResume.push(fn);\n        }\n    }\n    // do the requisite realpath/stat checking, and return the path\n    // to add or undefined to filter it out.\n    async matchCheck(e, ifDir) {\n        if (ifDir && this.opts.nodir)\n            return undefined;\n        let rpc;\n        if (this.opts.realpath) {\n            rpc = e.realpathCached() || (await e.realpath());\n            if (!rpc)\n                return undefined;\n            e = rpc;\n        }\n        const needStat = e.isUnknown() || this.opts.stat;\n        return this.matchCheckTest(needStat ? await e.lstat() : e, ifDir);\n    }\n    matchCheckTest(e, ifDir) {\n        return e &&\n            (this.maxDepth === Infinity || e.depth() <= this.maxDepth) &&\n            (!ifDir || e.canReaddir()) &&\n            (!this.opts.nodir || !e.isDirectory()) &&\n            !this.#ignored(e)\n            ? e\n            : undefined;\n    }\n    matchCheckSync(e, ifDir) {\n        if (ifDir && this.opts.nodir)\n            return undefined;\n        let rpc;\n        if (this.opts.realpath) {\n            rpc = e.realpathCached() || e.realpathSync();\n            if (!rpc)\n                return undefined;\n            e = rpc;\n        }\n        const needStat = e.isUnknown() || this.opts.stat;\n        return this.matchCheckTest(needStat ? e.lstatSync() : e, ifDir);\n    }\n    matchFinish(e, absolute) {\n        if (this.#ignored(e))\n            return;\n        const abs = this.opts.absolute === undefined ? absolute : this.opts.absolute;\n        this.seen.add(e);\n        const mark = this.opts.mark && e.isDirectory() ? this.#sep : '';\n        // ok, we have what we need!\n        if (this.opts.withFileTypes) {\n            this.matchEmit(e);\n        }\n        else if (abs) {\n            const abs = this.opts.posix ? e.fullpathPosix() : e.fullpath();\n            this.matchEmit(abs + mark);\n        }\n        else {\n            const rel = this.opts.posix ? e.relativePosix() : e.relative();\n            const pre = this.opts.dotRelative && !rel.startsWith('..' + this.#sep)\n                ? '.' + this.#sep\n                : '';\n            this.matchEmit(!rel ? '.' + mark : pre + rel + mark);\n        }\n    }\n    async match(e, absolute, ifDir) {\n        const p = await this.matchCheck(e, ifDir);\n        if (p)\n            this.matchFinish(p, absolute);\n    }\n    matchSync(e, absolute, ifDir) {\n        const p = this.matchCheckSync(e, ifDir);\n        if (p)\n            this.matchFinish(p, absolute);\n    }\n    walkCB(target, patterns, cb) {\n        /* c8 ignore start */\n        if (this.signal?.aborted)\n            cb();\n        /* c8 ignore stop */\n        this.walkCB2(target, patterns, new processor_js_1.Processor(this.opts), cb);\n    }\n    walkCB2(target, patterns, processor, cb) {\n        if (this.#childrenIgnored(target))\n            return cb();\n        if (this.signal?.aborted)\n            cb();\n        if (this.paused) {\n            this.onResume(() => this.walkCB2(target, patterns, processor, cb));\n            return;\n        }\n        processor.processPatterns(target, patterns);\n        // done processing.  all of the above is sync, can be abstracted out.\n        // subwalks is a map of paths to the entry filters they need\n        // matches is a map of paths to [absolute, ifDir] tuples.\n        let tasks = 1;\n        const next = () => {\n            if (--tasks === 0)\n                cb();\n        };\n        for (const [m, absolute, ifDir] of processor.matches.entries()) {\n            if (this.#ignored(m))\n                continue;\n            tasks++;\n            this.match(m, absolute, ifDir).then(() => next());\n        }\n        for (const t of processor.subwalkTargets()) {\n            if (this.maxDepth !== Infinity && t.depth() >= this.maxDepth) {\n                continue;\n            }\n            tasks++;\n            const childrenCached = t.readdirCached();\n            if (t.calledReaddir())\n                this.walkCB3(t, childrenCached, processor, next);\n            else {\n                t.readdirCB((_, entries) => this.walkCB3(t, entries, processor, next), true);\n            }\n        }\n        next();\n    }\n    walkCB3(target, entries, processor, cb) {\n        processor = processor.filterEntries(target, entries);\n        let tasks = 1;\n        const next = () => {\n            if (--tasks === 0)\n                cb();\n        };\n        for (const [m, absolute, ifDir] of processor.matches.entries()) {\n            if (this.#ignored(m))\n                continue;\n            tasks++;\n            this.match(m, absolute, ifDir).then(() => next());\n        }\n        for (const [target, patterns] of processor.subwalks.entries()) {\n            tasks++;\n            this.walkCB2(target, patterns, processor.child(), next);\n        }\n        next();\n    }\n    walkCBSync(target, patterns, cb) {\n        /* c8 ignore start */\n        if (this.signal?.aborted)\n            cb();\n        /* c8 ignore stop */\n        this.walkCB2Sync(target, patterns, new processor_js_1.Processor(this.opts), cb);\n    }\n    walkCB2Sync(target, patterns, processor, cb) {\n        if (this.#childrenIgnored(target))\n            return cb();\n        if (this.signal?.aborted)\n            cb();\n        if (this.paused) {\n            this.onResume(() => this.walkCB2Sync(target, patterns, processor, cb));\n            return;\n        }\n        processor.processPatterns(target, patterns);\n        // done processing.  all of the above is sync, can be abstracted out.\n        // subwalks is a map of paths to the entry filters they need\n        // matches is a map of paths to [absolute, ifDir] tuples.\n        let tasks = 1;\n        const next = () => {\n            if (--tasks === 0)\n                cb();\n        };\n        for (const [m, absolute, ifDir] of processor.matches.entries()) {\n            if (this.#ignored(m))\n                continue;\n            this.matchSync(m, absolute, ifDir);\n        }\n        for (const t of processor.subwalkTargets()) {\n            if (this.maxDepth !== Infinity && t.depth() >= this.maxDepth) {\n                continue;\n            }\n            tasks++;\n            const children = t.readdirSync();\n            this.walkCB3Sync(t, children, processor, next);\n        }\n        next();\n    }\n    walkCB3Sync(target, entries, processor, cb) {\n        processor = processor.filterEntries(target, entries);\n        let tasks = 1;\n        const next = () => {\n            if (--tasks === 0)\n                cb();\n        };\n        for (const [m, absolute, ifDir] of processor.matches.entries()) {\n            if (this.#ignored(m))\n                continue;\n            this.matchSync(m, absolute, ifDir);\n        }\n        for (const [target, patterns] of processor.subwalks.entries()) {\n            tasks++;\n            this.walkCB2Sync(target, patterns, processor.child(), next);\n        }\n        next();\n    }\n}\nexports.GlobUtil = GlobUtil;\nclass GlobWalker extends GlobUtil {\n    matches;\n    constructor(patterns, path, opts) {\n        super(patterns, path, opts);\n        this.matches = new Set();\n    }\n    matchEmit(e) {\n        this.matches.add(e);\n    }\n    async walk() {\n        if (this.signal?.aborted)\n            throw this.signal.reason;\n        if (this.path.isUnknown()) {\n            await this.path.lstat();\n        }\n        await new Promise((res, rej) => {\n            this.walkCB(this.path, this.patterns, () => {\n                if (this.signal?.aborted) {\n                    rej(this.signal.reason);\n                }\n                else {\n                    res(this.matches);\n                }\n            });\n        });\n        return this.matches;\n    }\n    walkSync() {\n        if (this.signal?.aborted)\n            throw this.signal.reason;\n        if (this.path.isUnknown()) {\n            this.path.lstatSync();\n        }\n        // nothing for the callback to do, because this never pauses\n        this.walkCBSync(this.path, this.patterns, () => {\n            if (this.signal?.aborted)\n                throw this.signal.reason;\n        });\n        return this.matches;\n    }\n}\nexports.GlobWalker = GlobWalker;\nclass GlobStream extends GlobUtil {\n    results;\n    constructor(patterns, path, opts) {\n        super(patterns, path, opts);\n        this.results = new minipass_1.Minipass({\n            signal: this.signal,\n            objectMode: true,\n        });\n        this.results.on('drain', () => this.resume());\n        this.results.on('resume', () => this.resume());\n    }\n    matchEmit(e) {\n        this.results.write(e);\n        if (!this.results.flowing)\n            this.pause();\n    }\n    stream() {\n        const target = this.path;\n        if (target.isUnknown()) {\n            target.lstat().then(() => {\n                this.walkCB(target, this.patterns, () => this.results.end());\n            });\n        }\n        else {\n            this.walkCB(target, this.patterns, () => this.results.end());\n        }\n        return this.results;\n    }\n    streamSync() {\n        if (this.path.isUnknown()) {\n            this.path.lstatSync();\n        }\n        this.walkCBSync(this.path, this.patterns, () => this.results.end());\n        return this.results;\n    }\n}\nexports.GlobStream = GlobStream;\n//# sourceMappingURL=walker.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertValidPattern = void 0;\nconst MAX_PATTERN_LENGTH = 1024 * 64;\nconst assertValidPattern = (pattern) => {\n    if (typeof pattern !== 'string') {\n        throw new TypeError('invalid pattern');\n    }\n    if (pattern.length > MAX_PATTERN_LENGTH) {\n        throw new TypeError('pattern is too long');\n    }\n};\nexports.assertValidPattern = assertValidPattern;\n//# sourceMappingURL=assert-valid-pattern.js.map","\"use strict\";\n// parse a single path portion\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AST = void 0;\nconst brace_expressions_js_1 = require(\"./brace-expressions.js\");\nconst unescape_js_1 = require(\"./unescape.js\");\nconst types = new Set(['!', '?', '+', '*', '@']);\nconst isExtglobType = (c) => types.has(c);\n// Patterns that get prepended to bind to the start of either the\n// entire string, or just a single path portion, to prevent dots\n// and/or traversal patterns, when needed.\n// Exts don't need the ^ or / bit, because the root binds that already.\nconst startNoTraversal = '(?!(?:^|/)\\\\.\\\\.?(?:$|/))';\nconst startNoDot = '(?!\\\\.)';\n// characters that indicate a start of pattern needs the \"no dots\" bit,\n// because a dot *might* be matched. ( is not in the list, because in\n// the case of a child extglob, it will handle the prevention itself.\nconst addPatternStart = new Set(['[', '.']);\n// cases where traversal is A-OK, no dot prevention needed\nconst justDots = new Set(['..', '.']);\nconst reSpecials = new Set('().*{}+?[]^$\\\\!');\nconst regExpEscape = (s) => s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n// any single thing other than /\nconst qmark = '[^/]';\n// * => any number of characters\nconst star = qmark + '*?';\n// use + when we need to ensure that *something* matches, because the * is\n// the only thing in the path portion.\nconst starNoEmpty = qmark + '+?';\n// remove the \\ chars that we added if we end up doing a nonmagic compare\n// const deslash = (s: string) => s.replace(/\\\\(.)/g, '$1')\nclass AST {\n    type;\n    #root;\n    #hasMagic;\n    #uflag = false;\n    #parts = [];\n    #parent;\n    #parentIndex;\n    #negs;\n    #filledNegs = false;\n    #options;\n    #toString;\n    // set to true if it's an extglob with no children\n    // (which really means one child of '')\n    #emptyExt = false;\n    constructor(type, parent, options = {}) {\n        this.type = type;\n        // extglobs are inherently magical\n        if (type)\n            this.#hasMagic = true;\n        this.#parent = parent;\n        this.#root = this.#parent ? this.#parent.#root : this;\n        this.#options = this.#root === this ? options : this.#root.#options;\n        this.#negs = this.#root === this ? [] : this.#root.#negs;\n        if (type === '!' && !this.#root.#filledNegs)\n            this.#negs.push(this);\n        this.#parentIndex = this.#parent ? this.#parent.#parts.length : 0;\n    }\n    get hasMagic() {\n        /* c8 ignore start */\n        if (this.#hasMagic !== undefined)\n            return this.#hasMagic;\n        /* c8 ignore stop */\n        for (const p of this.#parts) {\n            if (typeof p === 'string')\n                continue;\n            if (p.type || p.hasMagic)\n                return (this.#hasMagic = true);\n        }\n        // note: will be undefined until we generate the regexp src and find out\n        return this.#hasMagic;\n    }\n    // reconstructs the pattern\n    toString() {\n        if (this.#toString !== undefined)\n            return this.#toString;\n        if (!this.type) {\n            return (this.#toString = this.#parts.map(p => String(p)).join(''));\n        }\n        else {\n            return (this.#toString =\n                this.type + '(' + this.#parts.map(p => String(p)).join('|') + ')');\n        }\n    }\n    #fillNegs() {\n        /* c8 ignore start */\n        if (this !== this.#root)\n            throw new Error('should only call on root');\n        if (this.#filledNegs)\n            return this;\n        /* c8 ignore stop */\n        // call toString() once to fill this out\n        this.toString();\n        this.#filledNegs = true;\n        let n;\n        while ((n = this.#negs.pop())) {\n            if (n.type !== '!')\n                continue;\n            // walk up the tree, appending everthing that comes AFTER parentIndex\n            let p = n;\n            let pp = p.#parent;\n            while (pp) {\n                for (let i = p.#parentIndex + 1; !pp.type && i < pp.#parts.length; i++) {\n                    for (const part of n.#parts) {\n                        /* c8 ignore start */\n                        if (typeof part === 'string') {\n                            throw new Error('string part in extglob AST??');\n                        }\n                        /* c8 ignore stop */\n                        part.copyIn(pp.#parts[i]);\n                    }\n                }\n                p = pp;\n                pp = p.#parent;\n            }\n        }\n        return this;\n    }\n    push(...parts) {\n        for (const p of parts) {\n            if (p === '')\n                continue;\n            /* c8 ignore start */\n            if (typeof p !== 'string' && !(p instanceof AST && p.#parent === this)) {\n                throw new Error('invalid part: ' + p);\n            }\n            /* c8 ignore stop */\n            this.#parts.push(p);\n        }\n    }\n    toJSON() {\n        const ret = this.type === null\n            ? this.#parts.slice().map(p => (typeof p === 'string' ? p : p.toJSON()))\n            : [this.type, ...this.#parts.map(p => p.toJSON())];\n        if (this.isStart() && !this.type)\n            ret.unshift([]);\n        if (this.isEnd() &&\n            (this === this.#root ||\n                (this.#root.#filledNegs && this.#parent?.type === '!'))) {\n            ret.push({});\n        }\n        return ret;\n    }\n    isStart() {\n        if (this.#root === this)\n            return true;\n        // if (this.type) return !!this.#parent?.isStart()\n        if (!this.#parent?.isStart())\n            return false;\n        if (this.#parentIndex === 0)\n            return true;\n        // if everything AHEAD of this is a negation, then it's still the \"start\"\n        const p = this.#parent;\n        for (let i = 0; i < this.#parentIndex; i++) {\n            const pp = p.#parts[i];\n            if (!(pp instanceof AST && pp.type === '!')) {\n                return false;\n            }\n        }\n        return true;\n    }\n    isEnd() {\n        if (this.#root === this)\n            return true;\n        if (this.#parent?.type === '!')\n            return true;\n        if (!this.#parent?.isEnd())\n            return false;\n        if (!this.type)\n            return this.#parent?.isEnd();\n        // if not root, it'll always have a parent\n        /* c8 ignore start */\n        const pl = this.#parent ? this.#parent.#parts.length : 0;\n        /* c8 ignore stop */\n        return this.#parentIndex === pl - 1;\n    }\n    copyIn(part) {\n        if (typeof part === 'string')\n            this.push(part);\n        else\n            this.push(part.clone(this));\n    }\n    clone(parent) {\n        const c = new AST(this.type, parent);\n        for (const p of this.#parts) {\n            c.copyIn(p);\n        }\n        return c;\n    }\n    static #parseAST(str, ast, pos, opt) {\n        let escaping = false;\n        let inBrace = false;\n        let braceStart = -1;\n        let braceNeg = false;\n        if (ast.type === null) {\n            // outside of a extglob, append until we find a start\n            let i = pos;\n            let acc = '';\n            while (i < str.length) {\n                const c = str.charAt(i++);\n                // still accumulate escapes at this point, but we do ignore\n                // starts that are escaped\n                if (escaping || c === '\\\\') {\n                    escaping = !escaping;\n                    acc += c;\n                    continue;\n                }\n                if (inBrace) {\n                    if (i === braceStart + 1) {\n                        if (c === '^' || c === '!') {\n                            braceNeg = true;\n                        }\n                    }\n                    else if (c === ']' && !(i === braceStart + 2 && braceNeg)) {\n                        inBrace = false;\n                    }\n                    acc += c;\n                    continue;\n                }\n                else if (c === '[') {\n                    inBrace = true;\n                    braceStart = i;\n                    braceNeg = false;\n                    acc += c;\n                    continue;\n                }\n                if (!opt.noext && isExtglobType(c) && str.charAt(i) === '(') {\n                    ast.push(acc);\n                    acc = '';\n                    const ext = new AST(c, ast);\n                    i = AST.#parseAST(str, ext, i, opt);\n                    ast.push(ext);\n                    continue;\n                }\n                acc += c;\n            }\n            ast.push(acc);\n            return i;\n        }\n        // some kind of extglob, pos is at the (\n        // find the next | or )\n        let i = pos + 1;\n        let part = new AST(null, ast);\n        const parts = [];\n        let acc = '';\n        while (i < str.length) {\n            const c = str.charAt(i++);\n            // still accumulate escapes at this point, but we do ignore\n            // starts that are escaped\n            if (escaping || c === '\\\\') {\n                escaping = !escaping;\n                acc += c;\n                continue;\n            }\n            if (inBrace) {\n                if (i === braceStart + 1) {\n                    if (c === '^' || c === '!') {\n                        braceNeg = true;\n                    }\n                }\n                else if (c === ']' && !(i === braceStart + 2 && braceNeg)) {\n                    inBrace = false;\n                }\n                acc += c;\n                continue;\n            }\n            else if (c === '[') {\n                inBrace = true;\n                braceStart = i;\n                braceNeg = false;\n                acc += c;\n                continue;\n            }\n            if (isExtglobType(c) && str.charAt(i) === '(') {\n                part.push(acc);\n                acc = '';\n                const ext = new AST(c, part);\n                part.push(ext);\n                i = AST.#parseAST(str, ext, i, opt);\n                continue;\n            }\n            if (c === '|') {\n                part.push(acc);\n                acc = '';\n                parts.push(part);\n                part = new AST(null, ast);\n                continue;\n            }\n            if (c === ')') {\n                if (acc === '' && ast.#parts.length === 0) {\n                    ast.#emptyExt = true;\n                }\n                part.push(acc);\n                acc = '';\n                ast.push(...parts, part);\n                return i;\n            }\n            acc += c;\n        }\n        // unfinished extglob\n        // if we got here, it was a malformed extglob! not an extglob, but\n        // maybe something else in there.\n        ast.type = null;\n        ast.#hasMagic = undefined;\n        ast.#parts = [str.substring(pos - 1)];\n        return i;\n    }\n    static fromGlob(pattern, options = {}) {\n        const ast = new AST(null, undefined, options);\n        AST.#parseAST(pattern, ast, 0, options);\n        return ast;\n    }\n    // returns the regular expression if there's magic, or the unescaped\n    // string if not.\n    toMMPattern() {\n        // should only be called on root\n        /* c8 ignore start */\n        if (this !== this.#root)\n            return this.#root.toMMPattern();\n        /* c8 ignore stop */\n        const glob = this.toString();\n        const [re, body, hasMagic, uflag] = this.toRegExpSource();\n        // if we're in nocase mode, and not nocaseMagicOnly, then we do\n        // still need a regular expression if we have to case-insensitively\n        // match capital/lowercase characters.\n        const anyMagic = hasMagic ||\n            this.#hasMagic ||\n            (this.#options.nocase &&\n                !this.#options.nocaseMagicOnly &&\n                glob.toUpperCase() !== glob.toLowerCase());\n        if (!anyMagic) {\n            return body;\n        }\n        const flags = (this.#options.nocase ? 'i' : '') + (uflag ? 'u' : '');\n        return Object.assign(new RegExp(`^${re}$`, flags), {\n            _src: re,\n            _glob: glob,\n        });\n    }\n    // returns the string match, the regexp source, whether there's magic\n    // in the regexp (so a regular expression is required) and whether or\n    // not the uflag is needed for the regular expression (for posix classes)\n    // TODO: instead of injecting the start/end at this point, just return\n    // the BODY of the regexp, along with the start/end portions suitable\n    // for binding the start/end in either a joined full-path makeRe context\n    // (where we bind to (^|/), or a standalone matchPart context (where\n    // we bind to ^, and not /).  Otherwise slashes get duped!\n    //\n    // In part-matching mode, the start is:\n    // - if not isStart: nothing\n    // - if traversal possible, but not allowed: ^(?!\\.\\.?$)\n    // - if dots allowed or not possible: ^\n    // - if dots possible and not allowed: ^(?!\\.)\n    // end is:\n    // - if not isEnd(): nothing\n    // - else: $\n    //\n    // In full-path matching mode, we put the slash at the START of the\n    // pattern, so start is:\n    // - if first pattern: same as part-matching mode\n    // - if not isStart(): nothing\n    // - if traversal possible, but not allowed: /(?!\\.\\.?(?:$|/))\n    // - if dots allowed or not possible: /\n    // - if dots possible and not allowed: /(?!\\.)\n    // end is:\n    // - if last pattern, same as part-matching mode\n    // - else nothing\n    //\n    // Always put the (?:$|/) on negated tails, though, because that has to be\n    // there to bind the end of the negated pattern portion, and it's easier to\n    // just stick it in now rather than try to inject it later in the middle of\n    // the pattern.\n    //\n    // We can just always return the same end, and leave it up to the caller\n    // to know whether it's going to be used joined or in parts.\n    // And, if the start is adjusted slightly, can do the same there:\n    // - if not isStart: nothing\n    // - if traversal possible, but not allowed: (?:/|^)(?!\\.\\.?$)\n    // - if dots allowed or not possible: (?:/|^)\n    // - if dots possible and not allowed: (?:/|^)(?!\\.)\n    //\n    // But it's better to have a simpler binding without a conditional, for\n    // performance, so probably better to return both start options.\n    //\n    // Then the caller just ignores the end if it's not the first pattern,\n    // and the start always gets applied.\n    //\n    // But that's always going to be $ if it's the ending pattern, or nothing,\n    // so the caller can just attach $ at the end of the pattern when building.\n    //\n    // So the todo is:\n    // - better detect what kind of start is needed\n    // - return both flavors of starting pattern\n    // - attach $ at the end of the pattern when creating the actual RegExp\n    //\n    // Ah, but wait, no, that all only applies to the root when the first pattern\n    // is not an extglob. If the first pattern IS an extglob, then we need all\n    // that dot prevention biz to live in the extglob portions, because eg\n    // +(*|.x*) can match .xy but not .yx.\n    //\n    // So, return the two flavors if it's #root and the first child is not an\n    // AST, otherwise leave it to the child AST to handle it, and there,\n    // use the (?:^|/) style of start binding.\n    //\n    // Even simplified further:\n    // - Since the start for a join is eg /(?!\\.) and the start for a part\n    // is ^(?!\\.), we can just prepend (?!\\.) to the pattern (either root\n    // or start or whatever) and prepend ^ or / at the Regexp construction.\n    toRegExpSource(allowDot) {\n        const dot = allowDot ?? !!this.#options.dot;\n        if (this.#root === this)\n            this.#fillNegs();\n        if (!this.type) {\n            const noEmpty = this.isStart() && this.isEnd();\n            const src = this.#parts\n                .map(p => {\n                const [re, _, hasMagic, uflag] = typeof p === 'string'\n                    ? AST.#parseGlob(p, this.#hasMagic, noEmpty)\n                    : p.toRegExpSource(allowDot);\n                this.#hasMagic = this.#hasMagic || hasMagic;\n                this.#uflag = this.#uflag || uflag;\n                return re;\n            })\n                .join('');\n            let start = '';\n            if (this.isStart()) {\n                if (typeof this.#parts[0] === 'string') {\n                    // this is the string that will match the start of the pattern,\n                    // so we need to protect against dots and such.\n                    // '.' and '..' cannot match unless the pattern is that exactly,\n                    // even if it starts with . or dot:true is set.\n                    const dotTravAllowed = this.#parts.length === 1 && justDots.has(this.#parts[0]);\n                    if (!dotTravAllowed) {\n                        const aps = addPatternStart;\n                        // check if we have a possibility of matching . or ..,\n                        // and prevent that.\n                        const needNoTrav = \n                        // dots are allowed, and the pattern starts with [ or .\n                        (dot && aps.has(src.charAt(0))) ||\n                            // the pattern starts with \\., and then [ or .\n                            (src.startsWith('\\\\.') && aps.has(src.charAt(2))) ||\n                            // the pattern starts with \\.\\., and then [ or .\n                            (src.startsWith('\\\\.\\\\.') && aps.has(src.charAt(4)));\n                        // no need to prevent dots if it can't match a dot, or if a\n                        // sub-pattern will be preventing it anyway.\n                        const needNoDot = !dot && !allowDot && aps.has(src.charAt(0));\n                        start = needNoTrav ? startNoTraversal : needNoDot ? startNoDot : '';\n                    }\n                }\n            }\n            // append the \"end of path portion\" pattern to negation tails\n            let end = '';\n            if (this.isEnd() &&\n                this.#root.#filledNegs &&\n                this.#parent?.type === '!') {\n                end = '(?:$|\\\\/)';\n            }\n            const final = start + src + end;\n            return [\n                final,\n                (0, unescape_js_1.unescape)(src),\n                (this.#hasMagic = !!this.#hasMagic),\n                this.#uflag,\n            ];\n        }\n        // We need to calculate the body *twice* if it's a repeat pattern\n        // at the start, once in nodot mode, then again in dot mode, so a\n        // pattern like *(?) can match 'x.y'\n        const repeated = this.type === '*' || this.type === '+';\n        // some kind of extglob\n        const start = this.type === '!' ? '(?:(?!(?:' : '(?:';\n        let body = this.#partsToRegExp(dot);\n        if (this.isStart() && this.isEnd() && !body && this.type !== '!') {\n            // invalid extglob, has to at least be *something* present, if it's\n            // the entire path portion.\n            const s = this.toString();\n            this.#parts = [s];\n            this.type = null;\n            this.#hasMagic = undefined;\n            return [s, (0, unescape_js_1.unescape)(this.toString()), false, false];\n        }\n        // XXX abstract out this map method\n        let bodyDotAllowed = !repeated || allowDot || dot || !startNoDot\n            ? ''\n            : this.#partsToRegExp(true);\n        if (bodyDotAllowed === body) {\n            bodyDotAllowed = '';\n        }\n        if (bodyDotAllowed) {\n            body = `(?:${body})(?:${bodyDotAllowed})*?`;\n        }\n        // an empty !() is exactly equivalent to a starNoEmpty\n        let final = '';\n        if (this.type === '!' && this.#emptyExt) {\n            final = (this.isStart() && !dot ? startNoDot : '') + starNoEmpty;\n        }\n        else {\n            const close = this.type === '!'\n                ? // !() must match something,but !(x) can match ''\n                    '))' +\n                        (this.isStart() && !dot && !allowDot ? startNoDot : '') +\n                        star +\n                        ')'\n                : this.type === '@'\n                    ? ')'\n                    : this.type === '?'\n                        ? ')?'\n                        : this.type === '+' && bodyDotAllowed\n                            ? ')'\n                            : this.type === '*' && bodyDotAllowed\n                                ? `)?`\n                                : `)${this.type}`;\n            final = start + body + close;\n        }\n        return [\n            final,\n            (0, unescape_js_1.unescape)(body),\n            (this.#hasMagic = !!this.#hasMagic),\n            this.#uflag,\n        ];\n    }\n    #partsToRegExp(dot) {\n        return this.#parts\n            .map(p => {\n            // extglob ASTs should only contain parent ASTs\n            /* c8 ignore start */\n            if (typeof p === 'string') {\n                throw new Error('string type in extglob ast??');\n            }\n            /* c8 ignore stop */\n            // can ignore hasMagic, because extglobs are already always magic\n            const [re, _, _hasMagic, uflag] = p.toRegExpSource(dot);\n            this.#uflag = this.#uflag || uflag;\n            return re;\n        })\n            .filter(p => !(this.isStart() && this.isEnd()) || !!p)\n            .join('|');\n    }\n    static #parseGlob(glob, hasMagic, noEmpty = false) {\n        let escaping = false;\n        let re = '';\n        let uflag = false;\n        for (let i = 0; i < glob.length; i++) {\n            const c = glob.charAt(i);\n            if (escaping) {\n                escaping = false;\n                re += (reSpecials.has(c) ? '\\\\' : '') + c;\n                continue;\n            }\n            if (c === '\\\\') {\n                if (i === glob.length - 1) {\n                    re += '\\\\\\\\';\n                }\n                else {\n                    escaping = true;\n                }\n                continue;\n            }\n            if (c === '[') {\n                const [src, needUflag, consumed, magic] = (0, brace_expressions_js_1.parseClass)(glob, i);\n                if (consumed) {\n                    re += src;\n                    uflag = uflag || needUflag;\n                    i += consumed - 1;\n                    hasMagic = hasMagic || magic;\n                    continue;\n                }\n            }\n            if (c === '*') {\n                if (noEmpty && glob === '*')\n                    re += starNoEmpty;\n                else\n                    re += star;\n                hasMagic = true;\n                continue;\n            }\n            if (c === '?') {\n                re += qmark;\n                hasMagic = true;\n                continue;\n            }\n            re += regExpEscape(c);\n        }\n        return [re, (0, unescape_js_1.unescape)(glob), !!hasMagic, uflag];\n    }\n}\nexports.AST = AST;\n//# sourceMappingURL=ast.js.map","\"use strict\";\n// translate the various posix character classes into unicode properties\n// this works across all unicode locales\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseClass = void 0;\n// { <posix class>: [<translation>, /u flag required, negated]\nconst posixClasses = {\n    '[:alnum:]': ['\\\\p{L}\\\\p{Nl}\\\\p{Nd}', true],\n    '[:alpha:]': ['\\\\p{L}\\\\p{Nl}', true],\n    '[:ascii:]': ['\\\\x' + '00-\\\\x' + '7f', false],\n    '[:blank:]': ['\\\\p{Zs}\\\\t', true],\n    '[:cntrl:]': ['\\\\p{Cc}', true],\n    '[:digit:]': ['\\\\p{Nd}', true],\n    '[:graph:]': ['\\\\p{Z}\\\\p{C}', true, true],\n    '[:lower:]': ['\\\\p{Ll}', true],\n    '[:print:]': ['\\\\p{C}', true],\n    '[:punct:]': ['\\\\p{P}', true],\n    '[:space:]': ['\\\\p{Z}\\\\t\\\\r\\\\n\\\\v\\\\f', true],\n    '[:upper:]': ['\\\\p{Lu}', true],\n    '[:word:]': ['\\\\p{L}\\\\p{Nl}\\\\p{Nd}\\\\p{Pc}', true],\n    '[:xdigit:]': ['A-Fa-f0-9', false],\n};\n// only need to escape a few things inside of brace expressions\n// escapes: [ \\ ] -\nconst braceEscape = (s) => s.replace(/[[\\]\\\\-]/g, '\\\\$&');\n// escape all regexp magic characters\nconst regexpEscape = (s) => s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n// everything has already been escaped, we just have to join\nconst rangesToString = (ranges) => ranges.join('');\n// takes a glob string at a posix brace expression, and returns\n// an equivalent regular expression source, and boolean indicating\n// whether the /u flag needs to be applied, and the number of chars\n// consumed to parse the character class.\n// This also removes out of order ranges, and returns ($.) if the\n// entire class just no good.\nconst parseClass = (glob, position) => {\n    const pos = position;\n    /* c8 ignore start */\n    if (glob.charAt(pos) !== '[') {\n        throw new Error('not in a brace expression');\n    }\n    /* c8 ignore stop */\n    const ranges = [];\n    const negs = [];\n    let i = pos + 1;\n    let sawStart = false;\n    let uflag = false;\n    let escaping = false;\n    let negate = false;\n    let endPos = pos;\n    let rangeStart = '';\n    WHILE: while (i < glob.length) {\n        const c = glob.charAt(i);\n        if ((c === '!' || c === '^') && i === pos + 1) {\n            negate = true;\n            i++;\n            continue;\n        }\n        if (c === ']' && sawStart && !escaping) {\n            endPos = i + 1;\n            break;\n        }\n        sawStart = true;\n        if (c === '\\\\') {\n            if (!escaping) {\n                escaping = true;\n                i++;\n                continue;\n            }\n            // escaped \\ char, fall through and treat like normal char\n        }\n        if (c === '[' && !escaping) {\n            // either a posix class, a collation equivalent, or just a [\n            for (const [cls, [unip, u, neg]] of Object.entries(posixClasses)) {\n                if (glob.startsWith(cls, i)) {\n                    // invalid, [a-[] is fine, but not [a-[:alpha]]\n                    if (rangeStart) {\n                        return ['$.', false, glob.length - pos, true];\n                    }\n                    i += cls.length;\n                    if (neg)\n                        negs.push(unip);\n                    else\n                        ranges.push(unip);\n                    uflag = uflag || u;\n                    continue WHILE;\n                }\n            }\n        }\n        // now it's just a normal character, effectively\n        escaping = false;\n        if (rangeStart) {\n            // throw this range away if it's not valid, but others\n            // can still match.\n            if (c > rangeStart) {\n                ranges.push(braceEscape(rangeStart) + '-' + braceEscape(c));\n            }\n            else if (c === rangeStart) {\n                ranges.push(braceEscape(c));\n            }\n            rangeStart = '';\n            i++;\n            continue;\n        }\n        // now might be the start of a range.\n        // can be either c-d or c-] or c<more...>] or c] at this point\n        if (glob.startsWith('-]', i + 1)) {\n            ranges.push(braceEscape(c + '-'));\n            i += 2;\n            continue;\n        }\n        if (glob.startsWith('-', i + 1)) {\n            rangeStart = c;\n            i += 2;\n            continue;\n        }\n        // not the start of a range, just a single character\n        ranges.push(braceEscape(c));\n        i++;\n    }\n    if (endPos < i) {\n        // didn't see the end of the class, not a valid class,\n        // but might still be valid as a literal match.\n        return ['', false, 0, false];\n    }\n    // if we got no ranges and no negates, then we have a range that\n    // cannot possibly match anything, and that poisons the whole glob\n    if (!ranges.length && !negs.length) {\n        return ['$.', false, glob.length - pos, true];\n    }\n    // if we got one positive range, and it's a single character, then that's\n    // not actually a magic pattern, it's just that one literal character.\n    // we should not treat that as \"magic\", we should just return the literal\n    // character. [_] is a perfectly valid way to escape glob magic chars.\n    if (negs.length === 0 &&\n        ranges.length === 1 &&\n        /^\\\\?.$/.test(ranges[0]) &&\n        !negate) {\n        const r = ranges[0].length === 2 ? ranges[0].slice(-1) : ranges[0];\n        return [regexpEscape(r), false, endPos - pos, false];\n    }\n    const sranges = '[' + (negate ? '^' : '') + rangesToString(ranges) + ']';\n    const snegs = '[' + (negate ? '' : '^') + rangesToString(negs) + ']';\n    const comb = ranges.length && negs.length\n        ? '(' + sranges + '|' + snegs + ')'\n        : ranges.length\n            ? sranges\n            : snegs;\n    return [comb, uflag, endPos - pos, true];\n};\nexports.parseClass = parseClass;\n//# sourceMappingURL=brace-expressions.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.escape = void 0;\n/**\n * Escape all magic characters in a glob pattern.\n *\n * If the {@link windowsPathsNoEscape | GlobOptions.windowsPathsNoEscape}\n * option is used, then characters are escaped by wrapping in `[]`, because\n * a magic character wrapped in a character class can only be satisfied by\n * that exact character.  In this mode, `\\` is _not_ escaped, because it is\n * not interpreted as a magic character, but instead as a path separator.\n */\nconst escape = (s, { windowsPathsNoEscape = false, } = {}) => {\n    // don't need to escape +@! because we escape the parens\n    // that make those magic, and escaping ! as [!] isn't valid,\n    // because [!]] is a valid glob class meaning not ']'.\n    return windowsPathsNoEscape\n        ? s.replace(/[?*()[\\]]/g, '[$&]')\n        : s.replace(/[?*()[\\]\\\\]/g, '\\\\$&');\n};\nexports.escape = escape;\n//# sourceMappingURL=escape.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.unescape = exports.escape = exports.AST = exports.Minimatch = exports.match = exports.makeRe = exports.braceExpand = exports.defaults = exports.filter = exports.GLOBSTAR = exports.sep = exports.minimatch = void 0;\nconst brace_expansion_1 = __importDefault(require(\"brace-expansion\"));\nconst assert_valid_pattern_js_1 = require(\"./assert-valid-pattern.js\");\nconst ast_js_1 = require(\"./ast.js\");\nconst escape_js_1 = require(\"./escape.js\");\nconst unescape_js_1 = require(\"./unescape.js\");\nconst minimatch = (p, pattern, options = {}) => {\n    (0, assert_valid_pattern_js_1.assertValidPattern)(pattern);\n    // shortcut: comments match nothing.\n    if (!options.nocomment && pattern.charAt(0) === '#') {\n        return false;\n    }\n    return new Minimatch(pattern, options).match(p);\n};\nexports.minimatch = minimatch;\n// Optimized checking for the most common glob patterns.\nconst starDotExtRE = /^\\*+([^+@!?\\*\\[\\(]*)$/;\nconst starDotExtTest = (ext) => (f) => !f.startsWith('.') && f.endsWith(ext);\nconst starDotExtTestDot = (ext) => (f) => f.endsWith(ext);\nconst starDotExtTestNocase = (ext) => {\n    ext = ext.toLowerCase();\n    return (f) => !f.startsWith('.') && f.toLowerCase().endsWith(ext);\n};\nconst starDotExtTestNocaseDot = (ext) => {\n    ext = ext.toLowerCase();\n    return (f) => f.toLowerCase().endsWith(ext);\n};\nconst starDotStarRE = /^\\*+\\.\\*+$/;\nconst starDotStarTest = (f) => !f.startsWith('.') && f.includes('.');\nconst starDotStarTestDot = (f) => f !== '.' && f !== '..' && f.includes('.');\nconst dotStarRE = /^\\.\\*+$/;\nconst dotStarTest = (f) => f !== '.' && f !== '..' && f.startsWith('.');\nconst starRE = /^\\*+$/;\nconst starTest = (f) => f.length !== 0 && !f.startsWith('.');\nconst starTestDot = (f) => f.length !== 0 && f !== '.' && f !== '..';\nconst qmarksRE = /^\\?+([^+@!?\\*\\[\\(]*)?$/;\nconst qmarksTestNocase = ([$0, ext = '']) => {\n    const noext = qmarksTestNoExt([$0]);\n    if (!ext)\n        return noext;\n    ext = ext.toLowerCase();\n    return (f) => noext(f) && f.toLowerCase().endsWith(ext);\n};\nconst qmarksTestNocaseDot = ([$0, ext = '']) => {\n    const noext = qmarksTestNoExtDot([$0]);\n    if (!ext)\n        return noext;\n    ext = ext.toLowerCase();\n    return (f) => noext(f) && f.toLowerCase().endsWith(ext);\n};\nconst qmarksTestDot = ([$0, ext = '']) => {\n    const noext = qmarksTestNoExtDot([$0]);\n    return !ext ? noext : (f) => noext(f) && f.endsWith(ext);\n};\nconst qmarksTest = ([$0, ext = '']) => {\n    const noext = qmarksTestNoExt([$0]);\n    return !ext ? noext : (f) => noext(f) && f.endsWith(ext);\n};\nconst qmarksTestNoExt = ([$0]) => {\n    const len = $0.length;\n    return (f) => f.length === len && !f.startsWith('.');\n};\nconst qmarksTestNoExtDot = ([$0]) => {\n    const len = $0.length;\n    return (f) => f.length === len && f !== '.' && f !== '..';\n};\n/* c8 ignore start */\nconst defaultPlatform = (typeof process === 'object' && process\n    ? (typeof process.env === 'object' &&\n        process.env &&\n        process.env.__MINIMATCH_TESTING_PLATFORM__) ||\n        process.platform\n    : 'posix');\nconst path = {\n    win32: { sep: '\\\\' },\n    posix: { sep: '/' },\n};\n/* c8 ignore stop */\nexports.sep = defaultPlatform === 'win32' ? path.win32.sep : path.posix.sep;\nexports.minimatch.sep = exports.sep;\nexports.GLOBSTAR = Symbol('globstar **');\nexports.minimatch.GLOBSTAR = exports.GLOBSTAR;\n// any single thing other than /\n// don't need to escape / when using new RegExp()\nconst qmark = '[^/]';\n// * => any number of characters\nconst star = qmark + '*?';\n// ** when dots are allowed.  Anything goes, except .. and .\n// not (^ or / followed by one or two dots followed by $ or /),\n// followed by anything, any number of times.\nconst twoStarDot = '(?:(?!(?:\\\\/|^)(?:\\\\.{1,2})($|\\\\/)).)*?';\n// not a ^ or / followed by a dot,\n// followed by anything, any number of times.\nconst twoStarNoDot = '(?:(?!(?:\\\\/|^)\\\\.).)*?';\nconst filter = (pattern, options = {}) => (p) => (0, exports.minimatch)(p, pattern, options);\nexports.filter = filter;\nexports.minimatch.filter = exports.filter;\nconst ext = (a, b = {}) => Object.assign({}, a, b);\nconst defaults = (def) => {\n    if (!def || typeof def !== 'object' || !Object.keys(def).length) {\n        return exports.minimatch;\n    }\n    const orig = exports.minimatch;\n    const m = (p, pattern, options = {}) => orig(p, pattern, ext(def, options));\n    return Object.assign(m, {\n        Minimatch: class Minimatch extends orig.Minimatch {\n            constructor(pattern, options = {}) {\n                super(pattern, ext(def, options));\n            }\n            static defaults(options) {\n                return orig.defaults(ext(def, options)).Minimatch;\n            }\n        },\n        AST: class AST extends orig.AST {\n            /* c8 ignore start */\n            constructor(type, parent, options = {}) {\n                super(type, parent, ext(def, options));\n            }\n            /* c8 ignore stop */\n            static fromGlob(pattern, options = {}) {\n                return orig.AST.fromGlob(pattern, ext(def, options));\n            }\n        },\n        unescape: (s, options = {}) => orig.unescape(s, ext(def, options)),\n        escape: (s, options = {}) => orig.escape(s, ext(def, options)),\n        filter: (pattern, options = {}) => orig.filter(pattern, ext(def, options)),\n        defaults: (options) => orig.defaults(ext(def, options)),\n        makeRe: (pattern, options = {}) => orig.makeRe(pattern, ext(def, options)),\n        braceExpand: (pattern, options = {}) => orig.braceExpand(pattern, ext(def, options)),\n        match: (list, pattern, options = {}) => orig.match(list, pattern, ext(def, options)),\n        sep: orig.sep,\n        GLOBSTAR: exports.GLOBSTAR,\n    });\n};\nexports.defaults = defaults;\nexports.minimatch.defaults = exports.defaults;\n// Brace expansion:\n// a{b,c}d -> abd acd\n// a{b,}c -> abc ac\n// a{0..3}d -> a0d a1d a2d a3d\n// a{b,c{d,e}f}g -> abg acdfg acefg\n// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg\n//\n// Invalid sets are not expanded.\n// a{2..}b -> a{2..}b\n// a{b}c -> a{b}c\nconst braceExpand = (pattern, options = {}) => {\n    (0, assert_valid_pattern_js_1.assertValidPattern)(pattern);\n    // Thanks to Yeting Li <https://github.com/yetingli> for\n    // improving this regexp to avoid a ReDOS vulnerability.\n    if (options.nobrace || !/\\{(?:(?!\\{).)*\\}/.test(pattern)) {\n        // shortcut. no need to expand.\n        return [pattern];\n    }\n    return (0, brace_expansion_1.default)(pattern);\n};\nexports.braceExpand = braceExpand;\nexports.minimatch.braceExpand = exports.braceExpand;\n// parse a component of the expanded set.\n// At this point, no pattern may contain \"/\" in it\n// so we're going to return a 2d array, where each entry is the full\n// pattern, split on '/', and then turned into a regular expression.\n// A regexp is made at the end which joins each array with an\n// escaped /, and another full one which joins each regexp with |.\n//\n// Following the lead of Bash 4.1, note that \"**\" only has special meaning\n// when it is the *only* thing in a path portion.  Otherwise, any series\n// of * is equivalent to a single *.  Globstar behavior is enabled by\n// default, and can be disabled by setting options.noglobstar.\nconst makeRe = (pattern, options = {}) => new Minimatch(pattern, options).makeRe();\nexports.makeRe = makeRe;\nexports.minimatch.makeRe = exports.makeRe;\nconst match = (list, pattern, options = {}) => {\n    const mm = new Minimatch(pattern, options);\n    list = list.filter(f => mm.match(f));\n    if (mm.options.nonull && !list.length) {\n        list.push(pattern);\n    }\n    return list;\n};\nexports.match = match;\nexports.minimatch.match = exports.match;\n// replace stuff like \\* with *\nconst globMagic = /[?*]|[+@!]\\(.*?\\)|\\[|\\]/;\nconst regExpEscape = (s) => s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\nclass Minimatch {\n    options;\n    set;\n    pattern;\n    windowsPathsNoEscape;\n    nonegate;\n    negate;\n    comment;\n    empty;\n    preserveMultipleSlashes;\n    partial;\n    globSet;\n    globParts;\n    nocase;\n    isWindows;\n    platform;\n    windowsNoMagicRoot;\n    regexp;\n    constructor(pattern, options = {}) {\n        (0, assert_valid_pattern_js_1.assertValidPattern)(pattern);\n        options = options || {};\n        this.options = options;\n        this.pattern = pattern;\n        this.platform = options.platform || defaultPlatform;\n        this.isWindows = this.platform === 'win32';\n        this.windowsPathsNoEscape =\n            !!options.windowsPathsNoEscape || options.allowWindowsEscape === false;\n        if (this.windowsPathsNoEscape) {\n            this.pattern = this.pattern.replace(/\\\\/g, '/');\n        }\n        this.preserveMultipleSlashes = !!options.preserveMultipleSlashes;\n        this.regexp = null;\n        this.negate = false;\n        this.nonegate = !!options.nonegate;\n        this.comment = false;\n        this.empty = false;\n        this.partial = !!options.partial;\n        this.nocase = !!this.options.nocase;\n        this.windowsNoMagicRoot =\n            options.windowsNoMagicRoot !== undefined\n                ? options.windowsNoMagicRoot\n                : !!(this.isWindows && this.nocase);\n        this.globSet = [];\n        this.globParts = [];\n        this.set = [];\n        // make the set of regexps etc.\n        this.make();\n    }\n    hasMagic() {\n        if (this.options.magicalBraces && this.set.length > 1) {\n            return true;\n        }\n        for (const pattern of this.set) {\n            for (const part of pattern) {\n                if (typeof part !== 'string')\n                    return true;\n            }\n        }\n        return false;\n    }\n    debug(..._) { }\n    make() {\n        const pattern = this.pattern;\n        const options = this.options;\n        // empty patterns and comments match nothing.\n        if (!options.nocomment && pattern.charAt(0) === '#') {\n            this.comment = true;\n            return;\n        }\n        if (!pattern) {\n            this.empty = true;\n            return;\n        }\n        // step 1: figure out negation, etc.\n        this.parseNegate();\n        // step 2: expand braces\n        this.globSet = [...new Set(this.braceExpand())];\n        if (options.debug) {\n            this.debug = (...args) => console.error(...args);\n        }\n        this.debug(this.pattern, this.globSet);\n        // step 3: now we have a set, so turn each one into a series of\n        // path-portion matching patterns.\n        // These will be regexps, except in the case of \"**\", which is\n        // set to the GLOBSTAR object for globstar behavior,\n        // and will not contain any / characters\n        //\n        // First, we preprocess to make the glob pattern sets a bit simpler\n        // and deduped.  There are some perf-killing patterns that can cause\n        // problems with a glob walk, but we can simplify them down a bit.\n        const rawGlobParts = this.globSet.map(s => this.slashSplit(s));\n        this.globParts = this.preprocess(rawGlobParts);\n        this.debug(this.pattern, this.globParts);\n        // glob --> regexps\n        let set = this.globParts.map((s, _, __) => {\n            if (this.isWindows && this.windowsNoMagicRoot) {\n                // check if it's a drive or unc path.\n                const isUNC = s[0] === '' &&\n                    s[1] === '' &&\n                    (s[2] === '?' || !globMagic.test(s[2])) &&\n                    !globMagic.test(s[3]);\n                const isDrive = /^[a-z]:/i.test(s[0]);\n                if (isUNC) {\n                    return [...s.slice(0, 4), ...s.slice(4).map(ss => this.parse(ss))];\n                }\n                else if (isDrive) {\n                    return [s[0], ...s.slice(1).map(ss => this.parse(ss))];\n                }\n            }\n            return s.map(ss => this.parse(ss));\n        });\n        this.debug(this.pattern, set);\n        // filter out everything that didn't compile properly.\n        this.set = set.filter(s => s.indexOf(false) === -1);\n        // do not treat the ? in UNC paths as magic\n        if (this.isWindows) {\n            for (let i = 0; i < this.set.length; i++) {\n                const p = this.set[i];\n                if (p[0] === '' &&\n                    p[1] === '' &&\n                    this.globParts[i][2] === '?' &&\n                    typeof p[3] === 'string' &&\n                    /^[a-z]:$/i.test(p[3])) {\n                    p[2] = '?';\n                }\n            }\n        }\n        this.debug(this.pattern, this.set);\n    }\n    // various transforms to equivalent pattern sets that are\n    // faster to process in a filesystem walk.  The goal is to\n    // eliminate what we can, and push all ** patterns as far\n    // to the right as possible, even if it increases the number\n    // of patterns that we have to process.\n    preprocess(globParts) {\n        // if we're not in globstar mode, then turn all ** into *\n        if (this.options.noglobstar) {\n            for (let i = 0; i < globParts.length; i++) {\n                for (let j = 0; j < globParts[i].length; j++) {\n                    if (globParts[i][j] === '**') {\n                        globParts[i][j] = '*';\n                    }\n                }\n            }\n        }\n        const { optimizationLevel = 1 } = this.options;\n        if (optimizationLevel >= 2) {\n            // aggressive optimization for the purpose of fs walking\n            globParts = this.firstPhasePreProcess(globParts);\n            globParts = this.secondPhasePreProcess(globParts);\n        }\n        else if (optimizationLevel >= 1) {\n            // just basic optimizations to remove some .. parts\n            globParts = this.levelOneOptimize(globParts);\n        }\n        else {\n            globParts = this.adjascentGlobstarOptimize(globParts);\n        }\n        return globParts;\n    }\n    // just get rid of adjascent ** portions\n    adjascentGlobstarOptimize(globParts) {\n        return globParts.map(parts => {\n            let gs = -1;\n            while (-1 !== (gs = parts.indexOf('**', gs + 1))) {\n                let i = gs;\n                while (parts[i + 1] === '**') {\n                    i++;\n                }\n                if (i !== gs) {\n                    parts.splice(gs, i - gs);\n                }\n            }\n            return parts;\n        });\n    }\n    // get rid of adjascent ** and resolve .. portions\n    levelOneOptimize(globParts) {\n        return globParts.map(parts => {\n            parts = parts.reduce((set, part) => {\n                const prev = set[set.length - 1];\n                if (part === '**' && prev === '**') {\n                    return set;\n                }\n                if (part === '..') {\n                    if (prev && prev !== '..' && prev !== '.' && prev !== '**') {\n                        set.pop();\n                        return set;\n                    }\n                }\n                set.push(part);\n                return set;\n            }, []);\n            return parts.length === 0 ? [''] : parts;\n        });\n    }\n    levelTwoFileOptimize(parts) {\n        if (!Array.isArray(parts)) {\n            parts = this.slashSplit(parts);\n        }\n        let didSomething = false;\n        do {\n            didSomething = false;\n            // <pre>/<e>/<rest> -> <pre>/<rest>\n            if (!this.preserveMultipleSlashes) {\n                for (let i = 1; i < parts.length - 1; i++) {\n                    const p = parts[i];\n                    // don't squeeze out UNC patterns\n                    if (i === 1 && p === '' && parts[0] === '')\n                        continue;\n                    if (p === '.' || p === '') {\n                        didSomething = true;\n                        parts.splice(i, 1);\n                        i--;\n                    }\n                }\n                if (parts[0] === '.' &&\n                    parts.length === 2 &&\n                    (parts[1] === '.' || parts[1] === '')) {\n                    didSomething = true;\n                    parts.pop();\n                }\n            }\n            // <pre>/<p>/../<rest> -> <pre>/<rest>\n            let dd = 0;\n            while (-1 !== (dd = parts.indexOf('..', dd + 1))) {\n                const p = parts[dd - 1];\n                if (p && p !== '.' && p !== '..' && p !== '**') {\n                    didSomething = true;\n                    parts.splice(dd - 1, 2);\n                    dd -= 2;\n                }\n            }\n        } while (didSomething);\n        return parts.length === 0 ? [''] : parts;\n    }\n    // First phase: single-pattern processing\n    // <pre> is 1 or more portions\n    // <rest> is 1 or more portions\n    // <p> is any portion other than ., .., '', or **\n    // <e> is . or ''\n    //\n    // **/.. is *brutal* for filesystem walking performance, because\n    // it effectively resets the recursive walk each time it occurs,\n    // and ** cannot be reduced out by a .. pattern part like a regexp\n    // or most strings (other than .., ., and '') can be.\n    //\n    // <pre>/**/../<p>/<p>/<rest> -> {<pre>/../<p>/<p>/<rest>,<pre>/**/<p>/<p>/<rest>}\n    // <pre>/<e>/<rest> -> <pre>/<rest>\n    // <pre>/<p>/../<rest> -> <pre>/<rest>\n    // **/**/<rest> -> **/<rest>\n    //\n    // **/*/<rest> -> */**/<rest> <== not valid because ** doesn't follow\n    // this WOULD be allowed if ** did follow symlinks, or * didn't\n    firstPhasePreProcess(globParts) {\n        let didSomething = false;\n        do {\n            didSomething = false;\n            // <pre>/**/../<p>/<p>/<rest> -> {<pre>/../<p>/<p>/<rest>,<pre>/**/<p>/<p>/<rest>}\n            for (let parts of globParts) {\n                let gs = -1;\n                while (-1 !== (gs = parts.indexOf('**', gs + 1))) {\n                    let gss = gs;\n                    while (parts[gss + 1] === '**') {\n                        // <pre>/**/**/<rest> -> <pre>/**/<rest>\n                        gss++;\n                    }\n                    // eg, if gs is 2 and gss is 4, that means we have 3 **\n                    // parts, and can remove 2 of them.\n                    if (gss > gs) {\n                        parts.splice(gs + 1, gss - gs);\n                    }\n                    let next = parts[gs + 1];\n                    const p = parts[gs + 2];\n                    const p2 = parts[gs + 3];\n                    if (next !== '..')\n                        continue;\n                    if (!p ||\n                        p === '.' ||\n                        p === '..' ||\n                        !p2 ||\n                        p2 === '.' ||\n                        p2 === '..') {\n                        continue;\n                    }\n                    didSomething = true;\n                    // edit parts in place, and push the new one\n                    parts.splice(gs, 1);\n                    const other = parts.slice(0);\n                    other[gs] = '**';\n                    globParts.push(other);\n                    gs--;\n                }\n                // <pre>/<e>/<rest> -> <pre>/<rest>\n                if (!this.preserveMultipleSlashes) {\n                    for (let i = 1; i < parts.length - 1; i++) {\n                        const p = parts[i];\n                        // don't squeeze out UNC patterns\n                        if (i === 1 && p === '' && parts[0] === '')\n                            continue;\n                        if (p === '.' || p === '') {\n                            didSomething = true;\n                            parts.splice(i, 1);\n                            i--;\n                        }\n                    }\n                    if (parts[0] === '.' &&\n                        parts.length === 2 &&\n                        (parts[1] === '.' || parts[1] === '')) {\n                        didSomething = true;\n                        parts.pop();\n                    }\n                }\n                // <pre>/<p>/../<rest> -> <pre>/<rest>\n                let dd = 0;\n                while (-1 !== (dd = parts.indexOf('..', dd + 1))) {\n                    const p = parts[dd - 1];\n                    if (p && p !== '.' && p !== '..' && p !== '**') {\n                        didSomething = true;\n                        const needDot = dd === 1 && parts[dd + 1] === '**';\n                        const splin = needDot ? ['.'] : [];\n                        parts.splice(dd - 1, 2, ...splin);\n                        if (parts.length === 0)\n                            parts.push('');\n                        dd -= 2;\n                    }\n                }\n            }\n        } while (didSomething);\n        return globParts;\n    }\n    // second phase: multi-pattern dedupes\n    // {<pre>/*/<rest>,<pre>/<p>/<rest>} -> <pre>/*/<rest>\n    // {<pre>/<rest>,<pre>/<rest>} -> <pre>/<rest>\n    // {<pre>/**/<rest>,<pre>/<rest>} -> <pre>/**/<rest>\n    //\n    // {<pre>/**/<rest>,<pre>/**/<p>/<rest>} -> <pre>/**/<rest>\n    // ^-- not valid because ** doens't follow symlinks\n    secondPhasePreProcess(globParts) {\n        for (let i = 0; i < globParts.length - 1; i++) {\n            for (let j = i + 1; j < globParts.length; j++) {\n                const matched = this.partsMatch(globParts[i], globParts[j], !this.preserveMultipleSlashes);\n                if (!matched)\n                    continue;\n                globParts[i] = matched;\n                globParts[j] = [];\n            }\n        }\n        return globParts.filter(gs => gs.length);\n    }\n    partsMatch(a, b, emptyGSMatch = false) {\n        let ai = 0;\n        let bi = 0;\n        let result = [];\n        let which = '';\n        while (ai < a.length && bi < b.length) {\n            if (a[ai] === b[bi]) {\n                result.push(which === 'b' ? b[bi] : a[ai]);\n                ai++;\n                bi++;\n            }\n            else if (emptyGSMatch && a[ai] === '**' && b[bi] === a[ai + 1]) {\n                result.push(a[ai]);\n                ai++;\n            }\n            else if (emptyGSMatch && b[bi] === '**' && a[ai] === b[bi + 1]) {\n                result.push(b[bi]);\n                bi++;\n            }\n            else if (a[ai] === '*' &&\n                b[bi] &&\n                (this.options.dot || !b[bi].startsWith('.')) &&\n                b[bi] !== '**') {\n                if (which === 'b')\n                    return false;\n                which = 'a';\n                result.push(a[ai]);\n                ai++;\n                bi++;\n            }\n            else if (b[bi] === '*' &&\n                a[ai] &&\n                (this.options.dot || !a[ai].startsWith('.')) &&\n                a[ai] !== '**') {\n                if (which === 'a')\n                    return false;\n                which = 'b';\n                result.push(b[bi]);\n                ai++;\n                bi++;\n            }\n            else {\n                return false;\n            }\n        }\n        // if we fall out of the loop, it means they two are identical\n        // as long as their lengths match\n        return a.length === b.length && result;\n    }\n    parseNegate() {\n        if (this.nonegate)\n            return;\n        const pattern = this.pattern;\n        let negate = false;\n        let negateOffset = 0;\n        for (let i = 0; i < pattern.length && pattern.charAt(i) === '!'; i++) {\n            negate = !negate;\n            negateOffset++;\n        }\n        if (negateOffset)\n            this.pattern = pattern.slice(negateOffset);\n        this.negate = negate;\n    }\n    // set partial to true to test if, for example,\n    // \"/a/b\" matches the start of \"/*/b/*/d\"\n    // Partial means, if you run out of file before you run\n    // out of pattern, then that's fine, as long as all\n    // the parts match.\n    matchOne(file, pattern, partial = false) {\n        const options = this.options;\n        // UNC paths like //?/X:/... can match X:/... and vice versa\n        // Drive letters in absolute drive or unc paths are always compared\n        // case-insensitively.\n        if (this.isWindows) {\n            const fileDrive = typeof file[0] === 'string' && /^[a-z]:$/i.test(file[0]);\n            const fileUNC = !fileDrive &&\n                file[0] === '' &&\n                file[1] === '' &&\n                file[2] === '?' &&\n                /^[a-z]:$/i.test(file[3]);\n            const patternDrive = typeof pattern[0] === 'string' && /^[a-z]:$/i.test(pattern[0]);\n            const patternUNC = !patternDrive &&\n                pattern[0] === '' &&\n                pattern[1] === '' &&\n                pattern[2] === '?' &&\n                typeof pattern[3] === 'string' &&\n                /^[a-z]:$/i.test(pattern[3]);\n            const fdi = fileUNC ? 3 : fileDrive ? 0 : undefined;\n            const pdi = patternUNC ? 3 : patternDrive ? 0 : undefined;\n            if (typeof fdi === 'number' && typeof pdi === 'number') {\n                const [fd, pd] = [file[fdi], pattern[pdi]];\n                if (fd.toLowerCase() === pd.toLowerCase()) {\n                    pattern[pdi] = fd;\n                    if (pdi > fdi) {\n                        pattern = pattern.slice(pdi);\n                    }\n                    else if (fdi > pdi) {\n                        file = file.slice(fdi);\n                    }\n                }\n            }\n        }\n        // resolve and reduce . and .. portions in the file as well.\n        // dont' need to do the second phase, because it's only one string[]\n        const { optimizationLevel = 1 } = this.options;\n        if (optimizationLevel >= 2) {\n            file = this.levelTwoFileOptimize(file);\n        }\n        this.debug('matchOne', this, { file, pattern });\n        this.debug('matchOne', file.length, pattern.length);\n        for (var fi = 0, pi = 0, fl = file.length, pl = pattern.length; fi < fl && pi < pl; fi++, pi++) {\n            this.debug('matchOne loop');\n            var p = pattern[pi];\n            var f = file[fi];\n            this.debug(pattern, p, f);\n            // should be impossible.\n            // some invalid regexp stuff in the set.\n            /* c8 ignore start */\n            if (p === false) {\n                return false;\n            }\n            /* c8 ignore stop */\n            if (p === exports.GLOBSTAR) {\n                this.debug('GLOBSTAR', [pattern, p, f]);\n                // \"**\"\n                // a/**/b/**/c would match the following:\n                // a/b/x/y/z/c\n                // a/x/y/z/b/c\n                // a/b/x/b/x/c\n                // a/b/c\n                // To do this, take the rest of the pattern after\n                // the **, and see if it would match the file remainder.\n                // If so, return success.\n                // If not, the ** \"swallows\" a segment, and try again.\n                // This is recursively awful.\n                //\n                // a/**/b/**/c matching a/b/x/y/z/c\n                // - a matches a\n                // - doublestar\n                //   - matchOne(b/x/y/z/c, b/**/c)\n                //     - b matches b\n                //     - doublestar\n                //       - matchOne(x/y/z/c, c) -> no\n                //       - matchOne(y/z/c, c) -> no\n                //       - matchOne(z/c, c) -> no\n                //       - matchOne(c, c) yes, hit\n                var fr = fi;\n                var pr = pi + 1;\n                if (pr === pl) {\n                    this.debug('** at the end');\n                    // a ** at the end will just swallow the rest.\n                    // We have found a match.\n                    // however, it will not swallow /.x, unless\n                    // options.dot is set.\n                    // . and .. are *never* matched by **, for explosively\n                    // exponential reasons.\n                    for (; fi < fl; fi++) {\n                        if (file[fi] === '.' ||\n                            file[fi] === '..' ||\n                            (!options.dot && file[fi].charAt(0) === '.'))\n                            return false;\n                    }\n                    return true;\n                }\n                // ok, let's see if we can swallow whatever we can.\n                while (fr < fl) {\n                    var swallowee = file[fr];\n                    this.debug('\\nglobstar while', file, fr, pattern, pr, swallowee);\n                    // XXX remove this slice.  Just pass the start index.\n                    if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {\n                        this.debug('globstar found match!', fr, fl, swallowee);\n                        // found a match.\n                        return true;\n                    }\n                    else {\n                        // can't swallow \".\" or \"..\" ever.\n                        // can only swallow \".foo\" when explicitly asked.\n                        if (swallowee === '.' ||\n                            swallowee === '..' ||\n                            (!options.dot && swallowee.charAt(0) === '.')) {\n                            this.debug('dot detected!', file, fr, pattern, pr);\n                            break;\n                        }\n                        // ** swallows a segment, and continue.\n                        this.debug('globstar swallow a segment, and continue');\n                        fr++;\n                    }\n                }\n                // no match was found.\n                // However, in partial mode, we can't say this is necessarily over.\n                /* c8 ignore start */\n                if (partial) {\n                    // ran out of file\n                    this.debug('\\n>>> no match, partial?', file, fr, pattern, pr);\n                    if (fr === fl) {\n                        return true;\n                    }\n                }\n                /* c8 ignore stop */\n                return false;\n            }\n            // something other than **\n            // non-magic patterns just have to match exactly\n            // patterns with magic have been turned into regexps.\n            let hit;\n            if (typeof p === 'string') {\n                hit = f === p;\n                this.debug('string match', p, f, hit);\n            }\n            else {\n                hit = p.test(f);\n                this.debug('pattern match', p, f, hit);\n            }\n            if (!hit)\n                return false;\n        }\n        // Note: ending in / means that we'll get a final \"\"\n        // at the end of the pattern.  This can only match a\n        // corresponding \"\" at the end of the file.\n        // If the file ends in /, then it can only match a\n        // a pattern that ends in /, unless the pattern just\n        // doesn't have any more for it. But, a/b/ should *not*\n        // match \"a/b/*\", even though \"\" matches against the\n        // [^/]*? pattern, except in partial mode, where it might\n        // simply not be reached yet.\n        // However, a/b/ should still satisfy a/*\n        // now either we fell off the end of the pattern, or we're done.\n        if (fi === fl && pi === pl) {\n            // ran out of pattern and filename at the same time.\n            // an exact hit!\n            return true;\n        }\n        else if (fi === fl) {\n            // ran out of file, but still had pattern left.\n            // this is ok if we're doing the match as part of\n            // a glob fs traversal.\n            return partial;\n        }\n        else if (pi === pl) {\n            // ran out of pattern, still have file left.\n            // this is only acceptable if we're on the very last\n            // empty segment of a file with a trailing slash.\n            // a/* should match a/b/\n            return fi === fl - 1 && file[fi] === '';\n            /* c8 ignore start */\n        }\n        else {\n            // should be unreachable.\n            throw new Error('wtf?');\n        }\n        /* c8 ignore stop */\n    }\n    braceExpand() {\n        return (0, exports.braceExpand)(this.pattern, this.options);\n    }\n    parse(pattern) {\n        (0, assert_valid_pattern_js_1.assertValidPattern)(pattern);\n        const options = this.options;\n        // shortcuts\n        if (pattern === '**')\n            return exports.GLOBSTAR;\n        if (pattern === '')\n            return '';\n        // far and away, the most common glob pattern parts are\n        // *, *.*, and *.<ext>  Add a fast check method for those.\n        let m;\n        let fastTest = null;\n        if ((m = pattern.match(starRE))) {\n            fastTest = options.dot ? starTestDot : starTest;\n        }\n        else if ((m = pattern.match(starDotExtRE))) {\n            fastTest = (options.nocase\n                ? options.dot\n                    ? starDotExtTestNocaseDot\n                    : starDotExtTestNocase\n                : options.dot\n                    ? starDotExtTestDot\n                    : starDotExtTest)(m[1]);\n        }\n        else if ((m = pattern.match(qmarksRE))) {\n            fastTest = (options.nocase\n                ? options.dot\n                    ? qmarksTestNocaseDot\n                    : qmarksTestNocase\n                : options.dot\n                    ? qmarksTestDot\n                    : qmarksTest)(m);\n        }\n        else if ((m = pattern.match(starDotStarRE))) {\n            fastTest = options.dot ? starDotStarTestDot : starDotStarTest;\n        }\n        else if ((m = pattern.match(dotStarRE))) {\n            fastTest = dotStarTest;\n        }\n        const re = ast_js_1.AST.fromGlob(pattern, this.options).toMMPattern();\n        return fastTest ? Object.assign(re, { test: fastTest }) : re;\n    }\n    makeRe() {\n        if (this.regexp || this.regexp === false)\n            return this.regexp;\n        // at this point, this.set is a 2d array of partial\n        // pattern strings, or \"**\".\n        //\n        // It's better to use .match().  This function shouldn't\n        // be used, really, but it's pretty convenient sometimes,\n        // when you just want to work with a regex.\n        const set = this.set;\n        if (!set.length) {\n            this.regexp = false;\n            return this.regexp;\n        }\n        const options = this.options;\n        const twoStar = options.noglobstar\n            ? star\n            : options.dot\n                ? twoStarDot\n                : twoStarNoDot;\n        const flags = new Set(options.nocase ? ['i'] : []);\n        // regexpify non-globstar patterns\n        // if ** is only item, then we just do one twoStar\n        // if ** is first, and there are more, prepend (\\/|twoStar\\/)? to next\n        // if ** is last, append (\\/twoStar|) to previous\n        // if ** is in the middle, append (\\/|\\/twoStar\\/) to previous\n        // then filter out GLOBSTAR symbols\n        let re = set\n            .map(pattern => {\n            const pp = pattern.map(p => {\n                if (p instanceof RegExp) {\n                    for (const f of p.flags.split(''))\n                        flags.add(f);\n                }\n                return typeof p === 'string'\n                    ? regExpEscape(p)\n                    : p === exports.GLOBSTAR\n                        ? exports.GLOBSTAR\n                        : p._src;\n            });\n            pp.forEach((p, i) => {\n                const next = pp[i + 1];\n                const prev = pp[i - 1];\n                if (p !== exports.GLOBSTAR || prev === exports.GLOBSTAR) {\n                    return;\n                }\n                if (prev === undefined) {\n                    if (next !== undefined && next !== exports.GLOBSTAR) {\n                        pp[i + 1] = '(?:\\\\/|' + twoStar + '\\\\/)?' + next;\n                    }\n                    else {\n                        pp[i] = twoStar;\n                    }\n                }\n                else if (next === undefined) {\n                    pp[i - 1] = prev + '(?:\\\\/|' + twoStar + ')?';\n                }\n                else if (next !== exports.GLOBSTAR) {\n                    pp[i - 1] = prev + '(?:\\\\/|\\\\/' + twoStar + '\\\\/)' + next;\n                    pp[i + 1] = exports.GLOBSTAR;\n                }\n            });\n            return pp.filter(p => p !== exports.GLOBSTAR).join('/');\n        })\n            .join('|');\n        // need to wrap in parens if we had more than one thing with |,\n        // otherwise only the first will be anchored to ^ and the last to $\n        const [open, close] = set.length > 1 ? ['(?:', ')'] : ['', ''];\n        // must match entire pattern\n        // ending in a * or ** will make it less strict.\n        re = '^' + open + re + close + '$';\n        // can match anything, as long as it's not this.\n        if (this.negate)\n            re = '^(?!' + re + ').+$';\n        try {\n            this.regexp = new RegExp(re, [...flags].join(''));\n            /* c8 ignore start */\n        }\n        catch (ex) {\n            // should be impossible\n            this.regexp = false;\n        }\n        /* c8 ignore stop */\n        return this.regexp;\n    }\n    slashSplit(p) {\n        // if p starts with // on windows, we preserve that\n        // so that UNC paths aren't broken.  Otherwise, any number of\n        // / characters are coalesced into one, unless\n        // preserveMultipleSlashes is set to true.\n        if (this.preserveMultipleSlashes) {\n            return p.split('/');\n        }\n        else if (this.isWindows && /^\\/\\/[^\\/]+/.test(p)) {\n            // add an extra '' for the one we lose\n            return ['', ...p.split(/\\/+/)];\n        }\n        else {\n            return p.split(/\\/+/);\n        }\n    }\n    match(f, partial = this.partial) {\n        this.debug('match', f, this.pattern);\n        // short-circuit in the case of busted things.\n        // comments, etc.\n        if (this.comment) {\n            return false;\n        }\n        if (this.empty) {\n            return f === '';\n        }\n        if (f === '/' && partial) {\n            return true;\n        }\n        const options = this.options;\n        // windows: need to use /, not \\\n        if (this.isWindows) {\n            f = f.split('\\\\').join('/');\n        }\n        // treat the test path as a set of pathparts.\n        const ff = this.slashSplit(f);\n        this.debug(this.pattern, 'split', ff);\n        // just ONE of the pattern sets in this.set needs to match\n        // in order for it to be valid.  If negating, then just one\n        // match means that we have failed.\n        // Either way, return on the first hit.\n        const set = this.set;\n        this.debug(this.pattern, 'set', set);\n        // Find the basename of the path by looking for the last non-empty segment\n        let filename = ff[ff.length - 1];\n        if (!filename) {\n            for (let i = ff.length - 2; !filename && i >= 0; i--) {\n                filename = ff[i];\n            }\n        }\n        for (let i = 0; i < set.length; i++) {\n            const pattern = set[i];\n            let file = ff;\n            if (options.matchBase && pattern.length === 1) {\n                file = [filename];\n            }\n            const hit = this.matchOne(file, pattern, partial);\n            if (hit) {\n                if (options.flipNegate) {\n                    return true;\n                }\n                return !this.negate;\n            }\n        }\n        // didn't get any hits.  this is success if it's a negative\n        // pattern, failure otherwise.\n        if (options.flipNegate) {\n            return false;\n        }\n        return this.negate;\n    }\n    static defaults(def) {\n        return exports.minimatch.defaults(def).Minimatch;\n    }\n}\nexports.Minimatch = Minimatch;\n/* c8 ignore start */\nvar ast_js_2 = require(\"./ast.js\");\nObject.defineProperty(exports, \"AST\", { enumerable: true, get: function () { return ast_js_2.AST; } });\nvar escape_js_2 = require(\"./escape.js\");\nObject.defineProperty(exports, \"escape\", { enumerable: true, get: function () { return escape_js_2.escape; } });\nvar unescape_js_2 = require(\"./unescape.js\");\nObject.defineProperty(exports, \"unescape\", { enumerable: true, get: function () { return unescape_js_2.unescape; } });\n/* c8 ignore stop */\nexports.minimatch.AST = ast_js_1.AST;\nexports.minimatch.Minimatch = Minimatch;\nexports.minimatch.escape = escape_js_1.escape;\nexports.minimatch.unescape = unescape_js_1.unescape;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.unescape = void 0;\n/**\n * Un-escape a string that has been escaped with {@link escape}.\n *\n * If the {@link windowsPathsNoEscape} option is used, then square-brace\n * escapes are removed, but not backslash escapes.  For example, it will turn\n * the string `'[*]'` into `*`, but it will not turn `'\\\\*'` into `'*'`,\n * becuase `\\` is a path separator in `windowsPathsNoEscape` mode.\n *\n * When `windowsPathsNoEscape` is not set, then both brace escapes and\n * backslash escapes are removed.\n *\n * Slashes (and backslashes in `windowsPathsNoEscape` mode) cannot be escaped\n * or unescaped.\n */\nconst unescape = (s, { windowsPathsNoEscape = false, } = {}) => {\n    return windowsPathsNoEscape\n        ? s.replace(/\\[([^\\/\\\\])\\]/g, '$1')\n        : s.replace(/((?!\\\\).|^)\\[([^\\/\\\\])\\]/g, '$1$2').replace(/\\\\([^\\/])/g, '$1');\n};\nexports.unescape = unescape;\n//# sourceMappingURL=unescape.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Minipass = exports.isWritable = exports.isReadable = exports.isStream = void 0;\nconst proc = typeof process === 'object' && process\n    ? process\n    : {\n        stdout: null,\n        stderr: null,\n    };\nconst events_1 = require(\"events\");\nconst stream_1 = __importDefault(require(\"stream\"));\nconst string_decoder_1 = require(\"string_decoder\");\n/**\n * Return true if the argument is a Minipass stream, Node stream, or something\n * else that Minipass can interact with.\n */\nconst isStream = (s) => !!s &&\n    typeof s === 'object' &&\n    (s instanceof Minipass ||\n        s instanceof stream_1.default ||\n        (0, exports.isReadable)(s) ||\n        (0, exports.isWritable)(s));\nexports.isStream = isStream;\n/**\n * Return true if the argument is a valid {@link Minipass.Readable}\n */\nconst isReadable = (s) => !!s &&\n    typeof s === 'object' &&\n    s instanceof events_1.EventEmitter &&\n    typeof s.pipe === 'function' &&\n    // node core Writable streams have a pipe() method, but it throws\n    s.pipe !== stream_1.default.Writable.prototype.pipe;\nexports.isReadable = isReadable;\n/**\n * Return true if the argument is a valid {@link Minipass.Writable}\n */\nconst isWritable = (s) => !!s &&\n    typeof s === 'object' &&\n    s instanceof events_1.EventEmitter &&\n    typeof s.write === 'function' &&\n    typeof s.end === 'function';\nexports.isWritable = isWritable;\nconst EOF = Symbol('EOF');\nconst MAYBE_EMIT_END = Symbol('maybeEmitEnd');\nconst EMITTED_END = Symbol('emittedEnd');\nconst EMITTING_END = Symbol('emittingEnd');\nconst EMITTED_ERROR = Symbol('emittedError');\nconst CLOSED = Symbol('closed');\nconst READ = Symbol('read');\nconst FLUSH = Symbol('flush');\nconst FLUSHCHUNK = Symbol('flushChunk');\nconst ENCODING = Symbol('encoding');\nconst DECODER = Symbol('decoder');\nconst FLOWING = Symbol('flowing');\nconst PAUSED = Symbol('paused');\nconst RESUME = Symbol('resume');\nconst BUFFER = Symbol('buffer');\nconst PIPES = Symbol('pipes');\nconst BUFFERLENGTH = Symbol('bufferLength');\nconst BUFFERPUSH = Symbol('bufferPush');\nconst BUFFERSHIFT = Symbol('bufferShift');\nconst OBJECTMODE = Symbol('objectMode');\n// internal event when stream is destroyed\nconst DESTROYED = Symbol('destroyed');\n// internal event when stream has an error\nconst ERROR = Symbol('error');\nconst EMITDATA = Symbol('emitData');\nconst EMITEND = Symbol('emitEnd');\nconst EMITEND2 = Symbol('emitEnd2');\nconst ASYNC = Symbol('async');\nconst ABORT = Symbol('abort');\nconst ABORTED = Symbol('aborted');\nconst SIGNAL = Symbol('signal');\nconst DATALISTENERS = Symbol('dataListeners');\nconst DISCARDED = Symbol('discarded');\nconst defer = (fn) => Promise.resolve().then(fn);\nconst nodefer = (fn) => fn();\nconst isEndish = (ev) => ev === 'end' || ev === 'finish' || ev === 'prefinish';\nconst isArrayBufferLike = (b) => b instanceof ArrayBuffer ||\n    (!!b &&\n        typeof b === 'object' &&\n        b.constructor &&\n        b.constructor.name === 'ArrayBuffer' &&\n        b.byteLength >= 0);\nconst isArrayBufferView = (b) => !Buffer.isBuffer(b) && ArrayBuffer.isView(b);\n/**\n * Internal class representing a pipe to a destination stream.\n *\n * @internal\n */\nclass Pipe {\n    src;\n    dest;\n    opts;\n    ondrain;\n    constructor(src, dest, opts) {\n        this.src = src;\n        this.dest = dest;\n        this.opts = opts;\n        this.ondrain = () => src[RESUME]();\n        this.dest.on('drain', this.ondrain);\n    }\n    unpipe() {\n        this.dest.removeListener('drain', this.ondrain);\n    }\n    // only here for the prototype\n    /* c8 ignore start */\n    proxyErrors(_er) { }\n    /* c8 ignore stop */\n    end() {\n        this.unpipe();\n        if (this.opts.end)\n            this.dest.end();\n    }\n}\n/**\n * Internal class representing a pipe to a destination stream where\n * errors are proxied.\n *\n * @internal\n */\nclass PipeProxyErrors extends Pipe {\n    unpipe() {\n        this.src.removeListener('error', this.proxyErrors);\n        super.unpipe();\n    }\n    constructor(src, dest, opts) {\n        super(src, dest, opts);\n        this.proxyErrors = er => dest.emit('error', er);\n        src.on('error', this.proxyErrors);\n    }\n}\nconst isObjectModeOptions = (o) => !!o.objectMode;\nconst isEncodingOptions = (o) => !o.objectMode && !!o.encoding && o.encoding !== 'buffer';\n/**\n * Main export, the Minipass class\n *\n * `RType` is the type of data emitted, defaults to Buffer\n *\n * `WType` is the type of data to be written, if RType is buffer or string,\n * then any {@link Minipass.ContiguousData} is allowed.\n *\n * `Events` is the set of event handler signatures that this object\n * will emit, see {@link Minipass.Events}\n */\nclass Minipass extends events_1.EventEmitter {\n    [FLOWING] = false;\n    [PAUSED] = false;\n    [PIPES] = [];\n    [BUFFER] = [];\n    [OBJECTMODE];\n    [ENCODING];\n    [ASYNC];\n    [DECODER];\n    [EOF] = false;\n    [EMITTED_END] = false;\n    [EMITTING_END] = false;\n    [CLOSED] = false;\n    [EMITTED_ERROR] = null;\n    [BUFFERLENGTH] = 0;\n    [DESTROYED] = false;\n    [SIGNAL];\n    [ABORTED] = false;\n    [DATALISTENERS] = 0;\n    [DISCARDED] = false;\n    /**\n     * true if the stream can be written\n     */\n    writable = true;\n    /**\n     * true if the stream can be read\n     */\n    readable = true;\n    /**\n     * If `RType` is Buffer, then options do not need to be provided.\n     * Otherwise, an options object must be provided to specify either\n     * {@link Minipass.SharedOptions.objectMode} or\n     * {@link Minipass.SharedOptions.encoding}, as appropriate.\n     */\n    constructor(...args) {\n        const options = (args[0] ||\n            {});\n        super();\n        if (options.objectMode && typeof options.encoding === 'string') {\n            throw new TypeError('Encoding and objectMode may not be used together');\n        }\n        if (isObjectModeOptions(options)) {\n            this[OBJECTMODE] = true;\n            this[ENCODING] = null;\n        }\n        else if (isEncodingOptions(options)) {\n            this[ENCODING] = options.encoding;\n            this[OBJECTMODE] = false;\n        }\n        else {\n            this[OBJECTMODE] = false;\n            this[ENCODING] = null;\n        }\n        this[ASYNC] = !!options.async;\n        this[DECODER] = this[ENCODING]\n            ? new string_decoder_1.StringDecoder(this[ENCODING])\n            : null;\n        //@ts-ignore - private option for debugging and testing\n        if (options && options.debugExposeBuffer === true) {\n            Object.defineProperty(this, 'buffer', { get: () => this[BUFFER] });\n        }\n        //@ts-ignore - private option for debugging and testing\n        if (options && options.debugExposePipes === true) {\n            Object.defineProperty(this, 'pipes', { get: () => this[PIPES] });\n        }\n        const { signal } = options;\n        if (signal) {\n            this[SIGNAL] = signal;\n            if (signal.aborted) {\n                this[ABORT]();\n            }\n            else {\n                signal.addEventListener('abort', () => this[ABORT]());\n            }\n        }\n    }\n    /**\n     * The amount of data stored in the buffer waiting to be read.\n     *\n     * For Buffer strings, this will be the total byte length.\n     * For string encoding streams, this will be the string character length,\n     * according to JavaScript's `string.length` logic.\n     * For objectMode streams, this is a count of the items waiting to be\n     * emitted.\n     */\n    get bufferLength() {\n        return this[BUFFERLENGTH];\n    }\n    /**\n     * The `BufferEncoding` currently in use, or `null`\n     */\n    get encoding() {\n        return this[ENCODING];\n    }\n    /**\n     * @deprecated - This is a read only property\n     */\n    set encoding(_enc) {\n        throw new Error('Encoding must be set at instantiation time');\n    }\n    /**\n     * @deprecated - Encoding may only be set at instantiation time\n     */\n    setEncoding(_enc) {\n        throw new Error('Encoding must be set at instantiation time');\n    }\n    /**\n     * True if this is an objectMode stream\n     */\n    get objectMode() {\n        return this[OBJECTMODE];\n    }\n    /**\n     * @deprecated - This is a read-only property\n     */\n    set objectMode(_om) {\n        throw new Error('objectMode must be set at instantiation time');\n    }\n    /**\n     * true if this is an async stream\n     */\n    get ['async']() {\n        return this[ASYNC];\n    }\n    /**\n     * Set to true to make this stream async.\n     *\n     * Once set, it cannot be unset, as this would potentially cause incorrect\n     * behavior.  Ie, a sync stream can be made async, but an async stream\n     * cannot be safely made sync.\n     */\n    set ['async'](a) {\n        this[ASYNC] = this[ASYNC] || !!a;\n    }\n    // drop everything and get out of the flow completely\n    [ABORT]() {\n        this[ABORTED] = true;\n        this.emit('abort', this[SIGNAL]?.reason);\n        this.destroy(this[SIGNAL]?.reason);\n    }\n    /**\n     * True if the stream has been aborted.\n     */\n    get aborted() {\n        return this[ABORTED];\n    }\n    /**\n     * No-op setter. Stream aborted status is set via the AbortSignal provided\n     * in the constructor options.\n     */\n    set aborted(_) { }\n    write(chunk, encoding, cb) {\n        if (this[ABORTED])\n            return false;\n        if (this[EOF])\n            throw new Error('write after end');\n        if (this[DESTROYED]) {\n            this.emit('error', Object.assign(new Error('Cannot call write after a stream was destroyed'), { code: 'ERR_STREAM_DESTROYED' }));\n            return true;\n        }\n        if (typeof encoding === 'function') {\n            cb = encoding;\n            encoding = 'utf8';\n        }\n        if (!encoding)\n            encoding = 'utf8';\n        const fn = this[ASYNC] ? defer : nodefer;\n        // convert array buffers and typed array views into buffers\n        // at some point in the future, we may want to do the opposite!\n        // leave strings and buffers as-is\n        // anything is only allowed if in object mode, so throw\n        if (!this[OBJECTMODE] && !Buffer.isBuffer(chunk)) {\n            if (isArrayBufferView(chunk)) {\n                //@ts-ignore - sinful unsafe type changing\n                chunk = Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength);\n            }\n            else if (isArrayBufferLike(chunk)) {\n                //@ts-ignore - sinful unsafe type changing\n                chunk = Buffer.from(chunk);\n            }\n            else if (typeof chunk !== 'string') {\n                throw new Error('Non-contiguous data written to non-objectMode stream');\n            }\n        }\n        // handle object mode up front, since it's simpler\n        // this yields better performance, fewer checks later.\n        if (this[OBJECTMODE]) {\n            // maybe impossible?\n            /* c8 ignore start */\n            if (this[FLOWING] && this[BUFFERLENGTH] !== 0)\n                this[FLUSH](true);\n            /* c8 ignore stop */\n            if (this[FLOWING])\n                this.emit('data', chunk);\n            else\n                this[BUFFERPUSH](chunk);\n            if (this[BUFFERLENGTH] !== 0)\n                this.emit('readable');\n            if (cb)\n                fn(cb);\n            return this[FLOWING];\n        }\n        // at this point the chunk is a buffer or string\n        // don't buffer it up or send it to the decoder\n        if (!chunk.length) {\n            if (this[BUFFERLENGTH] !== 0)\n                this.emit('readable');\n            if (cb)\n                fn(cb);\n            return this[FLOWING];\n        }\n        // fast-path writing strings of same encoding to a stream with\n        // an empty buffer, skipping the buffer/decoder dance\n        if (typeof chunk === 'string' &&\n            // unless it is a string already ready for us to use\n            !(encoding === this[ENCODING] && !this[DECODER]?.lastNeed)) {\n            //@ts-ignore - sinful unsafe type change\n            chunk = Buffer.from(chunk, encoding);\n        }\n        if (Buffer.isBuffer(chunk) && this[ENCODING]) {\n            //@ts-ignore - sinful unsafe type change\n            chunk = this[DECODER].write(chunk);\n        }\n        // Note: flushing CAN potentially switch us into not-flowing mode\n        if (this[FLOWING] && this[BUFFERLENGTH] !== 0)\n            this[FLUSH](true);\n        if (this[FLOWING])\n            this.emit('data', chunk);\n        else\n            this[BUFFERPUSH](chunk);\n        if (this[BUFFERLENGTH] !== 0)\n            this.emit('readable');\n        if (cb)\n            fn(cb);\n        return this[FLOWING];\n    }\n    /**\n     * Low-level explicit read method.\n     *\n     * In objectMode, the argument is ignored, and one item is returned if\n     * available.\n     *\n     * `n` is the number of bytes (or in the case of encoding streams,\n     * characters) to consume. If `n` is not provided, then the entire buffer\n     * is returned, or `null` is returned if no data is available.\n     *\n     * If `n` is greater that the amount of data in the internal buffer,\n     * then `null` is returned.\n     */\n    read(n) {\n        if (this[DESTROYED])\n            return null;\n        this[DISCARDED] = false;\n        if (this[BUFFERLENGTH] === 0 ||\n            n === 0 ||\n            (n && n > this[BUFFERLENGTH])) {\n            this[MAYBE_EMIT_END]();\n            return null;\n        }\n        if (this[OBJECTMODE])\n            n = null;\n        if (this[BUFFER].length > 1 && !this[OBJECTMODE]) {\n            // not object mode, so if we have an encoding, then RType is string\n            // otherwise, must be Buffer\n            this[BUFFER] = [\n                (this[ENCODING]\n                    ? this[BUFFER].join('')\n                    : Buffer.concat(this[BUFFER], this[BUFFERLENGTH])),\n            ];\n        }\n        const ret = this[READ](n || null, this[BUFFER][0]);\n        this[MAYBE_EMIT_END]();\n        return ret;\n    }\n    [READ](n, chunk) {\n        if (this[OBJECTMODE])\n            this[BUFFERSHIFT]();\n        else {\n            const c = chunk;\n            if (n === c.length || n === null)\n                this[BUFFERSHIFT]();\n            else if (typeof c === 'string') {\n                this[BUFFER][0] = c.slice(n);\n                chunk = c.slice(0, n);\n                this[BUFFERLENGTH] -= n;\n            }\n            else {\n                this[BUFFER][0] = c.subarray(n);\n                chunk = c.subarray(0, n);\n                this[BUFFERLENGTH] -= n;\n            }\n        }\n        this.emit('data', chunk);\n        if (!this[BUFFER].length && !this[EOF])\n            this.emit('drain');\n        return chunk;\n    }\n    end(chunk, encoding, cb) {\n        if (typeof chunk === 'function') {\n            cb = chunk;\n            chunk = undefined;\n        }\n        if (typeof encoding === 'function') {\n            cb = encoding;\n            encoding = 'utf8';\n        }\n        if (chunk !== undefined)\n            this.write(chunk, encoding);\n        if (cb)\n            this.once('end', cb);\n        this[EOF] = true;\n        this.writable = false;\n        // if we haven't written anything, then go ahead and emit,\n        // even if we're not reading.\n        // we'll re-emit if a new 'end' listener is added anyway.\n        // This makes MP more suitable to write-only use cases.\n        if (this[FLOWING] || !this[PAUSED])\n            this[MAYBE_EMIT_END]();\n        return this;\n    }\n    // don't let the internal resume be overwritten\n    [RESUME]() {\n        if (this[DESTROYED])\n            return;\n        if (!this[DATALISTENERS] && !this[PIPES].length) {\n            this[DISCARDED] = true;\n        }\n        this[PAUSED] = false;\n        this[FLOWING] = true;\n        this.emit('resume');\n        if (this[BUFFER].length)\n            this[FLUSH]();\n        else if (this[EOF])\n            this[MAYBE_EMIT_END]();\n        else\n            this.emit('drain');\n    }\n    /**\n     * Resume the stream if it is currently in a paused state\n     *\n     * If called when there are no pipe destinations or `data` event listeners,\n     * this will place the stream in a \"discarded\" state, where all data will\n     * be thrown away. The discarded state is removed if a pipe destination or\n     * data handler is added, if pause() is called, or if any synchronous or\n     * asynchronous iteration is started.\n     */\n    resume() {\n        return this[RESUME]();\n    }\n    /**\n     * Pause the stream\n     */\n    pause() {\n        this[FLOWING] = false;\n        this[PAUSED] = true;\n        this[DISCARDED] = false;\n    }\n    /**\n     * true if the stream has been forcibly destroyed\n     */\n    get destroyed() {\n        return this[DESTROYED];\n    }\n    /**\n     * true if the stream is currently in a flowing state, meaning that\n     * any writes will be immediately emitted.\n     */\n    get flowing() {\n        return this[FLOWING];\n    }\n    /**\n     * true if the stream is currently in a paused state\n     */\n    get paused() {\n        return this[PAUSED];\n    }\n    [BUFFERPUSH](chunk) {\n        if (this[OBJECTMODE])\n            this[BUFFERLENGTH] += 1;\n        else\n            this[BUFFERLENGTH] += chunk.length;\n        this[BUFFER].push(chunk);\n    }\n    [BUFFERSHIFT]() {\n        if (this[OBJECTMODE])\n            this[BUFFERLENGTH] -= 1;\n        else\n            this[BUFFERLENGTH] -= this[BUFFER][0].length;\n        return this[BUFFER].shift();\n    }\n    [FLUSH](noDrain = false) {\n        do { } while (this[FLUSHCHUNK](this[BUFFERSHIFT]()) &&\n            this[BUFFER].length);\n        if (!noDrain && !this[BUFFER].length && !this[EOF])\n            this.emit('drain');\n    }\n    [FLUSHCHUNK](chunk) {\n        this.emit('data', chunk);\n        return this[FLOWING];\n    }\n    /**\n     * Pipe all data emitted by this stream into the destination provided.\n     *\n     * Triggers the flow of data.\n     */\n    pipe(dest, opts) {\n        if (this[DESTROYED])\n            return dest;\n        this[DISCARDED] = false;\n        const ended = this[EMITTED_END];\n        opts = opts || {};\n        if (dest === proc.stdout || dest === proc.stderr)\n            opts.end = false;\n        else\n            opts.end = opts.end !== false;\n        opts.proxyErrors = !!opts.proxyErrors;\n        // piping an ended stream ends immediately\n        if (ended) {\n            if (opts.end)\n                dest.end();\n        }\n        else {\n            // \"as\" here just ignores the WType, which pipes don't care about,\n            // since they're only consuming from us, and writing to the dest\n            this[PIPES].push(!opts.proxyErrors\n                ? new Pipe(this, dest, opts)\n                : new PipeProxyErrors(this, dest, opts));\n            if (this[ASYNC])\n                defer(() => this[RESUME]());\n            else\n                this[RESUME]();\n        }\n        return dest;\n    }\n    /**\n     * Fully unhook a piped destination stream.\n     *\n     * If the destination stream was the only consumer of this stream (ie,\n     * there are no other piped destinations or `'data'` event listeners)\n     * then the flow of data will stop until there is another consumer or\n     * {@link Minipass#resume} is explicitly called.\n     */\n    unpipe(dest) {\n        const p = this[PIPES].find(p => p.dest === dest);\n        if (p) {\n            if (this[PIPES].length === 1) {\n                if (this[FLOWING] && this[DATALISTENERS] === 0) {\n                    this[FLOWING] = false;\n                }\n                this[PIPES] = [];\n            }\n            else\n                this[PIPES].splice(this[PIPES].indexOf(p), 1);\n            p.unpipe();\n        }\n    }\n    /**\n     * Alias for {@link Minipass#on}\n     */\n    addListener(ev, handler) {\n        return this.on(ev, handler);\n    }\n    /**\n     * Mostly identical to `EventEmitter.on`, with the following\n     * behavior differences to prevent data loss and unnecessary hangs:\n     *\n     * - Adding a 'data' event handler will trigger the flow of data\n     *\n     * - Adding a 'readable' event handler when there is data waiting to be read\n     *   will cause 'readable' to be emitted immediately.\n     *\n     * - Adding an 'endish' event handler ('end', 'finish', etc.) which has\n     *   already passed will cause the event to be emitted immediately and all\n     *   handlers removed.\n     *\n     * - Adding an 'error' event handler after an error has been emitted will\n     *   cause the event to be re-emitted immediately with the error previously\n     *   raised.\n     */\n    on(ev, handler) {\n        const ret = super.on(ev, handler);\n        if (ev === 'data') {\n            this[DISCARDED] = false;\n            this[DATALISTENERS]++;\n            if (!this[PIPES].length && !this[FLOWING]) {\n                this[RESUME]();\n            }\n        }\n        else if (ev === 'readable' && this[BUFFERLENGTH] !== 0) {\n            super.emit('readable');\n        }\n        else if (isEndish(ev) && this[EMITTED_END]) {\n            super.emit(ev);\n            this.removeAllListeners(ev);\n        }\n        else if (ev === 'error' && this[EMITTED_ERROR]) {\n            const h = handler;\n            if (this[ASYNC])\n                defer(() => h.call(this, this[EMITTED_ERROR]));\n            else\n                h.call(this, this[EMITTED_ERROR]);\n        }\n        return ret;\n    }\n    /**\n     * Alias for {@link Minipass#off}\n     */\n    removeListener(ev, handler) {\n        return this.off(ev, handler);\n    }\n    /**\n     * Mostly identical to `EventEmitter.off`\n     *\n     * If a 'data' event handler is removed, and it was the last consumer\n     * (ie, there are no pipe destinations or other 'data' event listeners),\n     * then the flow of data will stop until there is another consumer or\n     * {@link Minipass#resume} is explicitly called.\n     */\n    off(ev, handler) {\n        const ret = super.off(ev, handler);\n        // if we previously had listeners, and now we don't, and we don't\n        // have any pipes, then stop the flow, unless it's been explicitly\n        // put in a discarded flowing state via stream.resume().\n        if (ev === 'data') {\n            this[DATALISTENERS] = this.listeners('data').length;\n            if (this[DATALISTENERS] === 0 &&\n                !this[DISCARDED] &&\n                !this[PIPES].length) {\n                this[FLOWING] = false;\n            }\n        }\n        return ret;\n    }\n    /**\n     * Mostly identical to `EventEmitter.removeAllListeners`\n     *\n     * If all 'data' event handlers are removed, and they were the last consumer\n     * (ie, there are no pipe destinations), then the flow of data will stop\n     * until there is another consumer or {@link Minipass#resume} is explicitly\n     * called.\n     */\n    removeAllListeners(ev) {\n        const ret = super.removeAllListeners(ev);\n        if (ev === 'data' || ev === undefined) {\n            this[DATALISTENERS] = 0;\n            if (!this[DISCARDED] && !this[PIPES].length) {\n                this[FLOWING] = false;\n            }\n        }\n        return ret;\n    }\n    /**\n     * true if the 'end' event has been emitted\n     */\n    get emittedEnd() {\n        return this[EMITTED_END];\n    }\n    [MAYBE_EMIT_END]() {\n        if (!this[EMITTING_END] &&\n            !this[EMITTED_END] &&\n            !this[DESTROYED] &&\n            this[BUFFER].length === 0 &&\n            this[EOF]) {\n            this[EMITTING_END] = true;\n            this.emit('end');\n            this.emit('prefinish');\n            this.emit('finish');\n            if (this[CLOSED])\n                this.emit('close');\n            this[EMITTING_END] = false;\n        }\n    }\n    /**\n     * Mostly identical to `EventEmitter.emit`, with the following\n     * behavior differences to prevent data loss and unnecessary hangs:\n     *\n     * If the stream has been destroyed, and the event is something other\n     * than 'close' or 'error', then `false` is returned and no handlers\n     * are called.\n     *\n     * If the event is 'end', and has already been emitted, then the event\n     * is ignored. If the stream is in a paused or non-flowing state, then\n     * the event will be deferred until data flow resumes. If the stream is\n     * async, then handlers will be called on the next tick rather than\n     * immediately.\n     *\n     * If the event is 'close', and 'end' has not yet been emitted, then\n     * the event will be deferred until after 'end' is emitted.\n     *\n     * If the event is 'error', and an AbortSignal was provided for the stream,\n     * and there are no listeners, then the event is ignored, matching the\n     * behavior of node core streams in the presense of an AbortSignal.\n     *\n     * If the event is 'finish' or 'prefinish', then all listeners will be\n     * removed after emitting the event, to prevent double-firing.\n     */\n    emit(ev, ...args) {\n        const data = args[0];\n        // error and close are only events allowed after calling destroy()\n        if (ev !== 'error' &&\n            ev !== 'close' &&\n            ev !== DESTROYED &&\n            this[DESTROYED]) {\n            return false;\n        }\n        else if (ev === 'data') {\n            return !this[OBJECTMODE] && !data\n                ? false\n                : this[ASYNC]\n                    ? (defer(() => this[EMITDATA](data)), true)\n                    : this[EMITDATA](data);\n        }\n        else if (ev === 'end') {\n            return this[EMITEND]();\n        }\n        else if (ev === 'close') {\n            this[CLOSED] = true;\n            // don't emit close before 'end' and 'finish'\n            if (!this[EMITTED_END] && !this[DESTROYED])\n                return false;\n            const ret = super.emit('close');\n            this.removeAllListeners('close');\n            return ret;\n        }\n        else if (ev === 'error') {\n            this[EMITTED_ERROR] = data;\n            super.emit(ERROR, data);\n            const ret = !this[SIGNAL] || this.listeners('error').length\n                ? super.emit('error', data)\n                : false;\n            this[MAYBE_EMIT_END]();\n            return ret;\n        }\n        else if (ev === 'resume') {\n            const ret = super.emit('resume');\n            this[MAYBE_EMIT_END]();\n            return ret;\n        }\n        else if (ev === 'finish' || ev === 'prefinish') {\n            const ret = super.emit(ev);\n            this.removeAllListeners(ev);\n            return ret;\n        }\n        // Some other unknown event\n        const ret = super.emit(ev, ...args);\n        this[MAYBE_EMIT_END]();\n        return ret;\n    }\n    [EMITDATA](data) {\n        for (const p of this[PIPES]) {\n            if (p.dest.write(data) === false)\n                this.pause();\n        }\n        const ret = this[DISCARDED] ? false : super.emit('data', data);\n        this[MAYBE_EMIT_END]();\n        return ret;\n    }\n    [EMITEND]() {\n        if (this[EMITTED_END])\n            return false;\n        this[EMITTED_END] = true;\n        this.readable = false;\n        return this[ASYNC]\n            ? (defer(() => this[EMITEND2]()), true)\n            : this[EMITEND2]();\n    }\n    [EMITEND2]() {\n        if (this[DECODER]) {\n            const data = this[DECODER].end();\n            if (data) {\n                for (const p of this[PIPES]) {\n                    p.dest.write(data);\n                }\n                if (!this[DISCARDED])\n                    super.emit('data', data);\n            }\n        }\n        for (const p of this[PIPES]) {\n            p.end();\n        }\n        const ret = super.emit('end');\n        this.removeAllListeners('end');\n        return ret;\n    }\n    /**\n     * Return a Promise that resolves to an array of all emitted data once\n     * the stream ends.\n     */\n    async collect() {\n        const buf = Object.assign([], {\n            dataLength: 0,\n        });\n        if (!this[OBJECTMODE])\n            buf.dataLength = 0;\n        // set the promise first, in case an error is raised\n        // by triggering the flow here.\n        const p = this.promise();\n        this.on('data', c => {\n            buf.push(c);\n            if (!this[OBJECTMODE])\n                buf.dataLength += c.length;\n        });\n        await p;\n        return buf;\n    }\n    /**\n     * Return a Promise that resolves to the concatenation of all emitted data\n     * once the stream ends.\n     *\n     * Not allowed on objectMode streams.\n     */\n    async concat() {\n        if (this[OBJECTMODE]) {\n            throw new Error('cannot concat in objectMode');\n        }\n        const buf = await this.collect();\n        return (this[ENCODING]\n            ? buf.join('')\n            : Buffer.concat(buf, buf.dataLength));\n    }\n    /**\n     * Return a void Promise that resolves once the stream ends.\n     */\n    async promise() {\n        return new Promise((resolve, reject) => {\n            this.on(DESTROYED, () => reject(new Error('stream destroyed')));\n            this.on('error', er => reject(er));\n            this.on('end', () => resolve());\n        });\n    }\n    /**\n     * Asynchronous `for await of` iteration.\n     *\n     * This will continue emitting all chunks until the stream terminates.\n     */\n    [Symbol.asyncIterator]() {\n        // set this up front, in case the consumer doesn't call next()\n        // right away.\n        this[DISCARDED] = false;\n        let stopped = false;\n        const stop = async () => {\n            this.pause();\n            stopped = true;\n            return { value: undefined, done: true };\n        };\n        const next = () => {\n            if (stopped)\n                return stop();\n            const res = this.read();\n            if (res !== null)\n                return Promise.resolve({ done: false, value: res });\n            if (this[EOF])\n                return stop();\n            let resolve;\n            let reject;\n            const onerr = (er) => {\n                this.off('data', ondata);\n                this.off('end', onend);\n                this.off(DESTROYED, ondestroy);\n                stop();\n                reject(er);\n            };\n            const ondata = (value) => {\n                this.off('error', onerr);\n                this.off('end', onend);\n                this.off(DESTROYED, ondestroy);\n                this.pause();\n                resolve({ value, done: !!this[EOF] });\n            };\n            const onend = () => {\n                this.off('error', onerr);\n                this.off('data', ondata);\n                this.off(DESTROYED, ondestroy);\n                stop();\n                resolve({ done: true, value: undefined });\n            };\n            const ondestroy = () => onerr(new Error('stream destroyed'));\n            return new Promise((res, rej) => {\n                reject = rej;\n                resolve = res;\n                this.once(DESTROYED, ondestroy);\n                this.once('error', onerr);\n                this.once('end', onend);\n                this.once('data', ondata);\n            });\n        };\n        return {\n            next,\n            throw: stop,\n            return: stop,\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n        };\n    }\n    /**\n     * Synchronous `for of` iteration.\n     *\n     * The iteration will terminate when the internal buffer runs out, even\n     * if the stream has not yet terminated.\n     */\n    [Symbol.iterator]() {\n        // set this up front, in case the consumer doesn't call next()\n        // right away.\n        this[DISCARDED] = false;\n        let stopped = false;\n        const stop = () => {\n            this.pause();\n            this.off(ERROR, stop);\n            this.off(DESTROYED, stop);\n            this.off('end', stop);\n            stopped = true;\n            return { done: true, value: undefined };\n        };\n        const next = () => {\n            if (stopped)\n                return stop();\n            const value = this.read();\n            return value === null ? stop() : { done: false, value };\n        };\n        this.once('end', stop);\n        this.once(ERROR, stop);\n        this.once(DESTROYED, stop);\n        return {\n            next,\n            throw: stop,\n            return: stop,\n            [Symbol.iterator]() {\n                return this;\n            },\n        };\n    }\n    /**\n     * Destroy a stream, preventing it from being used for any further purpose.\n     *\n     * If the stream has a `close()` method, then it will be called on\n     * destruction.\n     *\n     * After destruction, any attempt to write data, read data, or emit most\n     * events will be ignored.\n     *\n     * If an error argument is provided, then it will be emitted in an\n     * 'error' event.\n     */\n    destroy(er) {\n        if (this[DESTROYED]) {\n            if (er)\n                this.emit('error', er);\n            else\n                this.emit(DESTROYED);\n            return this;\n        }\n        this[DESTROYED] = true;\n        this[DISCARDED] = true;\n        // throw away all buffered data, it's never coming out\n        this[BUFFER].length = 0;\n        this[BUFFERLENGTH] = 0;\n        const wc = this;\n        if (typeof wc.close === 'function' && !this[CLOSED])\n            wc.close();\n        if (er)\n            this.emit('error', er);\n        // if no error to emit, still reject pending promises\n        else\n            this.emit(DESTROYED);\n        return this;\n    }\n    /**\n     * Alias for {@link isStream}\n     *\n     * Former export location, maintained for backwards compatibility.\n     *\n     * @deprecated\n     */\n    static get isStream() {\n        return exports.isStream;\n    }\n}\nexports.Minipass = Minipass;\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PathScurry = exports.Path = exports.PathScurryDarwin = exports.PathScurryPosix = exports.PathScurryWin32 = exports.PathScurryBase = exports.PathPosix = exports.PathWin32 = exports.PathBase = exports.ChildrenCache = exports.ResolveCache = void 0;\nconst lru_cache_1 = require(\"lru-cache\");\nconst path_1 = require(\"path\");\nconst url_1 = require(\"url\");\nconst actualFS = __importStar(require(\"fs\"));\nconst fs_1 = require(\"fs\");\nconst realpathSync = fs_1.realpathSync.native;\n// TODO: test perf of fs/promises realpath vs realpathCB,\n// since the promises one uses realpath.native\nconst promises_1 = require(\"fs/promises\");\nconst minipass_1 = require(\"minipass\");\nconst defaultFS = {\n    lstatSync: fs_1.lstatSync,\n    readdir: fs_1.readdir,\n    readdirSync: fs_1.readdirSync,\n    readlinkSync: fs_1.readlinkSync,\n    realpathSync,\n    promises: {\n        lstat: promises_1.lstat,\n        readdir: promises_1.readdir,\n        readlink: promises_1.readlink,\n        realpath: promises_1.realpath,\n    },\n};\n// if they just gave us require('fs') then use our default\nconst fsFromOption = (fsOption) => !fsOption || fsOption === defaultFS || fsOption === actualFS\n    ? defaultFS\n    : {\n        ...defaultFS,\n        ...fsOption,\n        promises: {\n            ...defaultFS.promises,\n            ...(fsOption.promises || {}),\n        },\n    };\n// turn something like //?/c:/ into c:\\\nconst uncDriveRegexp = /^\\\\\\\\\\?\\\\([a-z]:)\\\\?$/i;\nconst uncToDrive = (rootPath) => rootPath.replace(/\\//g, '\\\\').replace(uncDriveRegexp, '$1\\\\');\n// windows paths are separated by either / or \\\nconst eitherSep = /[\\\\\\/]/;\nconst UNKNOWN = 0; // may not even exist, for all we know\nconst IFIFO = 0b0001;\nconst IFCHR = 0b0010;\nconst IFDIR = 0b0100;\nconst IFBLK = 0b0110;\nconst IFREG = 0b1000;\nconst IFLNK = 0b1010;\nconst IFSOCK = 0b1100;\nconst IFMT = 0b1111;\n// mask to unset low 4 bits\nconst IFMT_UNKNOWN = ~IFMT;\n// set after successfully calling readdir() and getting entries.\nconst READDIR_CALLED = 16;\n// set after a successful lstat()\nconst LSTAT_CALLED = 32;\n// set if an entry (or one of its parents) is definitely not a dir\nconst ENOTDIR = 64;\n// set if an entry (or one of its parents) does not exist\n// (can also be set on lstat errors like EACCES or ENAMETOOLONG)\nconst ENOENT = 128;\n// cannot have child entries -- also verify &IFMT is either IFDIR or IFLNK\n// set if we fail to readlink\nconst ENOREADLINK = 256;\n// set if we know realpath() will fail\nconst ENOREALPATH = 512;\nconst ENOCHILD = ENOTDIR | ENOENT | ENOREALPATH;\nconst TYPEMASK = 1023;\nconst entToType = (s) => s.isFile()\n    ? IFREG\n    : s.isDirectory()\n        ? IFDIR\n        : s.isSymbolicLink()\n            ? IFLNK\n            : s.isCharacterDevice()\n                ? IFCHR\n                : s.isBlockDevice()\n                    ? IFBLK\n                    : s.isSocket()\n                        ? IFSOCK\n                        : s.isFIFO()\n                            ? IFIFO\n                            : UNKNOWN;\n// normalize unicode path names\nconst normalizeCache = new Map();\nconst normalize = (s) => {\n    const c = normalizeCache.get(s);\n    if (c)\n        return c;\n    const n = s.normalize('NFKD');\n    normalizeCache.set(s, n);\n    return n;\n};\nconst normalizeNocaseCache = new Map();\nconst normalizeNocase = (s) => {\n    const c = normalizeNocaseCache.get(s);\n    if (c)\n        return c;\n    const n = normalize(s.toLowerCase());\n    normalizeNocaseCache.set(s, n);\n    return n;\n};\n/**\n * An LRUCache for storing resolved path strings or Path objects.\n * @internal\n */\nclass ResolveCache extends lru_cache_1.LRUCache {\n    constructor() {\n        super({ max: 256 });\n    }\n}\nexports.ResolveCache = ResolveCache;\n// In order to prevent blowing out the js heap by allocating hundreds of\n// thousands of Path entries when walking extremely large trees, the \"children\"\n// in this tree are represented by storing an array of Path entries in an\n// LRUCache, indexed by the parent.  At any time, Path.children() may return an\n// empty array, indicating that it doesn't know about any of its children, and\n// thus has to rebuild that cache.  This is fine, it just means that we don't\n// benefit as much from having the cached entries, but huge directory walks\n// don't blow out the stack, and smaller ones are still as fast as possible.\n//\n//It does impose some complexity when building up the readdir data, because we\n//need to pass a reference to the children array that we started with.\n/**\n * an LRUCache for storing child entries.\n * @internal\n */\nclass ChildrenCache extends lru_cache_1.LRUCache {\n    constructor(maxSize = 16 * 1024) {\n        super({\n            maxSize,\n            // parent + children\n            sizeCalculation: a => a.length + 1,\n        });\n    }\n}\nexports.ChildrenCache = ChildrenCache;\nconst setAsCwd = Symbol('PathScurry setAsCwd');\n/**\n * Path objects are sort of like a super-powered\n * {@link https://nodejs.org/docs/latest/api/fs.html#class-fsdirent fs.Dirent}\n *\n * Each one represents a single filesystem entry on disk, which may or may not\n * exist. It includes methods for reading various types of information via\n * lstat, readlink, and readdir, and caches all information to the greatest\n * degree possible.\n *\n * Note that fs operations that would normally throw will instead return an\n * \"empty\" value. This is in order to prevent excessive overhead from error\n * stack traces.\n */\nclass PathBase {\n    /**\n     * the basename of this path\n     *\n     * **Important**: *always* test the path name against any test string\n     * usingthe {@link isNamed} method, and not by directly comparing this\n     * string. Otherwise, unicode path strings that the system sees as identical\n     * will not be properly treated as the same path, leading to incorrect\n     * behavior and possible security issues.\n     */\n    name;\n    /**\n     * the Path entry corresponding to the path root.\n     *\n     * @internal\n     */\n    root;\n    /**\n     * All roots found within the current PathScurry family\n     *\n     * @internal\n     */\n    roots;\n    /**\n     * a reference to the parent path, or undefined in the case of root entries\n     *\n     * @internal\n     */\n    parent;\n    /**\n     * boolean indicating whether paths are compared case-insensitively\n     * @internal\n     */\n    nocase;\n    // potential default fs override\n    #fs;\n    // Stats fields\n    #dev;\n    get dev() {\n        return this.#dev;\n    }\n    #mode;\n    get mode() {\n        return this.#mode;\n    }\n    #nlink;\n    get nlink() {\n        return this.#nlink;\n    }\n    #uid;\n    get uid() {\n        return this.#uid;\n    }\n    #gid;\n    get gid() {\n        return this.#gid;\n    }\n    #rdev;\n    get rdev() {\n        return this.#rdev;\n    }\n    #blksize;\n    get blksize() {\n        return this.#blksize;\n    }\n    #ino;\n    get ino() {\n        return this.#ino;\n    }\n    #size;\n    get size() {\n        return this.#size;\n    }\n    #blocks;\n    get blocks() {\n        return this.#blocks;\n    }\n    #atimeMs;\n    get atimeMs() {\n        return this.#atimeMs;\n    }\n    #mtimeMs;\n    get mtimeMs() {\n        return this.#mtimeMs;\n    }\n    #ctimeMs;\n    get ctimeMs() {\n        return this.#ctimeMs;\n    }\n    #birthtimeMs;\n    get birthtimeMs() {\n        return this.#birthtimeMs;\n    }\n    #atime;\n    get atime() {\n        return this.#atime;\n    }\n    #mtime;\n    get mtime() {\n        return this.#mtime;\n    }\n    #ctime;\n    get ctime() {\n        return this.#ctime;\n    }\n    #birthtime;\n    get birthtime() {\n        return this.#birthtime;\n    }\n    #matchName;\n    #depth;\n    #fullpath;\n    #fullpathPosix;\n    #relative;\n    #relativePosix;\n    #type;\n    #children;\n    #linkTarget;\n    #realpath;\n    /**\n     * This property is for compatibility with the Dirent class as of\n     * Node v20, where Dirent['path'] refers to the path of the directory\n     * that was passed to readdir.  So, somewhat counterintuitively, this\n     * property refers to the *parent* path, not the path object itself.\n     * For root entries, it's the path to the entry itself.\n     */\n    get path() {\n        return (this.parent || this).fullpath();\n    }\n    /**\n     * Do not create new Path objects directly.  They should always be accessed\n     * via the PathScurry class or other methods on the Path class.\n     *\n     * @internal\n     */\n    constructor(name, type = UNKNOWN, root, roots, nocase, children, opts) {\n        this.name = name;\n        this.#matchName = nocase ? normalizeNocase(name) : normalize(name);\n        this.#type = type & TYPEMASK;\n        this.nocase = nocase;\n        this.roots = roots;\n        this.root = root || this;\n        this.#children = children;\n        this.#fullpath = opts.fullpath;\n        this.#relative = opts.relative;\n        this.#relativePosix = opts.relativePosix;\n        this.parent = opts.parent;\n        if (this.parent) {\n            this.#fs = this.parent.#fs;\n        }\n        else {\n            this.#fs = fsFromOption(opts.fs);\n        }\n    }\n    /**\n     * Returns the depth of the Path object from its root.\n     *\n     * For example, a path at `/foo/bar` would have a depth of 2.\n     */\n    depth() {\n        if (this.#depth !== undefined)\n            return this.#depth;\n        if (!this.parent)\n            return (this.#depth = 0);\n        return (this.#depth = this.parent.depth() + 1);\n    }\n    /**\n     * @internal\n     */\n    childrenCache() {\n        return this.#children;\n    }\n    /**\n     * Get the Path object referenced by the string path, resolved from this Path\n     */\n    resolve(path) {\n        if (!path) {\n            return this;\n        }\n        const rootPath = this.getRootString(path);\n        const dir = path.substring(rootPath.length);\n        const dirParts = dir.split(this.splitSep);\n        const result = rootPath\n            ? this.getRoot(rootPath).#resolveParts(dirParts)\n            : this.#resolveParts(dirParts);\n        return result;\n    }\n    #resolveParts(dirParts) {\n        let p = this;\n        for (const part of dirParts) {\n            p = p.child(part);\n        }\n        return p;\n    }\n    /**\n     * Returns the cached children Path objects, if still available.  If they\n     * have fallen out of the cache, then returns an empty array, and resets the\n     * READDIR_CALLED bit, so that future calls to readdir() will require an fs\n     * lookup.\n     *\n     * @internal\n     */\n    children() {\n        const cached = this.#children.get(this);\n        if (cached) {\n            return cached;\n        }\n        const children = Object.assign([], { provisional: 0 });\n        this.#children.set(this, children);\n        this.#type &= ~READDIR_CALLED;\n        return children;\n    }\n    /**\n     * Resolves a path portion and returns or creates the child Path.\n     *\n     * Returns `this` if pathPart is `''` or `'.'`, or `parent` if pathPart is\n     * `'..'`.\n     *\n     * This should not be called directly.  If `pathPart` contains any path\n     * separators, it will lead to unsafe undefined behavior.\n     *\n     * Use `Path.resolve()` instead.\n     *\n     * @internal\n     */\n    child(pathPart, opts) {\n        if (pathPart === '' || pathPart === '.') {\n            return this;\n        }\n        if (pathPart === '..') {\n            return this.parent || this;\n        }\n        // find the child\n        const children = this.children();\n        const name = this.nocase\n            ? normalizeNocase(pathPart)\n            : normalize(pathPart);\n        for (const p of children) {\n            if (p.#matchName === name) {\n                return p;\n            }\n        }\n        // didn't find it, create provisional child, since it might not\n        // actually exist.  If we know the parent isn't a dir, then\n        // in fact it CAN'T exist.\n        const s = this.parent ? this.sep : '';\n        const fullpath = this.#fullpath\n            ? this.#fullpath + s + pathPart\n            : undefined;\n        const pchild = this.newChild(pathPart, UNKNOWN, {\n            ...opts,\n            parent: this,\n            fullpath,\n        });\n        if (!this.canReaddir()) {\n            pchild.#type |= ENOENT;\n        }\n        // don't have to update provisional, because if we have real children,\n        // then provisional is set to children.length, otherwise a lower number\n        children.push(pchild);\n        return pchild;\n    }\n    /**\n     * The relative path from the cwd. If it does not share an ancestor with\n     * the cwd, then this ends up being equivalent to the fullpath()\n     */\n    relative() {\n        if (this.#relative !== undefined) {\n            return this.#relative;\n        }\n        const name = this.name;\n        const p = this.parent;\n        if (!p) {\n            return (this.#relative = this.name);\n        }\n        const pv = p.relative();\n        return pv + (!pv || !p.parent ? '' : this.sep) + name;\n    }\n    /**\n     * The relative path from the cwd, using / as the path separator.\n     * If it does not share an ancestor with\n     * the cwd, then this ends up being equivalent to the fullpathPosix()\n     * On posix systems, this is identical to relative().\n     */\n    relativePosix() {\n        if (this.sep === '/')\n            return this.relative();\n        if (this.#relativePosix !== undefined)\n            return this.#relativePosix;\n        const name = this.name;\n        const p = this.parent;\n        if (!p) {\n            return (this.#relativePosix = this.fullpathPosix());\n        }\n        const pv = p.relativePosix();\n        return pv + (!pv || !p.parent ? '' : '/') + name;\n    }\n    /**\n     * The fully resolved path string for this Path entry\n     */\n    fullpath() {\n        if (this.#fullpath !== undefined) {\n            return this.#fullpath;\n        }\n        const name = this.name;\n        const p = this.parent;\n        if (!p) {\n            return (this.#fullpath = this.name);\n        }\n        const pv = p.fullpath();\n        const fp = pv + (!p.parent ? '' : this.sep) + name;\n        return (this.#fullpath = fp);\n    }\n    /**\n     * On platforms other than windows, this is identical to fullpath.\n     *\n     * On windows, this is overridden to return the forward-slash form of the\n     * full UNC path.\n     */\n    fullpathPosix() {\n        if (this.#fullpathPosix !== undefined)\n            return this.#fullpathPosix;\n        if (this.sep === '/')\n            return (this.#fullpathPosix = this.fullpath());\n        if (!this.parent) {\n            const p = this.fullpath().replace(/\\\\/g, '/');\n            if (/^[a-z]:\\//i.test(p)) {\n                return (this.#fullpathPosix = `//?/${p}`);\n            }\n            else {\n                return (this.#fullpathPosix = p);\n            }\n        }\n        const p = this.parent;\n        const pfpp = p.fullpathPosix();\n        const fpp = pfpp + (!pfpp || !p.parent ? '' : '/') + this.name;\n        return (this.#fullpathPosix = fpp);\n    }\n    /**\n     * Is the Path of an unknown type?\n     *\n     * Note that we might know *something* about it if there has been a previous\n     * filesystem operation, for example that it does not exist, or is not a\n     * link, or whether it has child entries.\n     */\n    isUnknown() {\n        return (this.#type & IFMT) === UNKNOWN;\n    }\n    isType(type) {\n        return this[`is${type}`]();\n    }\n    getType() {\n        return this.isUnknown()\n            ? 'Unknown'\n            : this.isDirectory()\n                ? 'Directory'\n                : this.isFile()\n                    ? 'File'\n                    : this.isSymbolicLink()\n                        ? 'SymbolicLink'\n                        : this.isFIFO()\n                            ? 'FIFO'\n                            : this.isCharacterDevice()\n                                ? 'CharacterDevice'\n                                : this.isBlockDevice()\n                                    ? 'BlockDevice'\n                                    : /* c8 ignore start */ this.isSocket()\n                                        ? 'Socket'\n                                        : 'Unknown';\n        /* c8 ignore stop */\n    }\n    /**\n     * Is the Path a regular file?\n     */\n    isFile() {\n        return (this.#type & IFMT) === IFREG;\n    }\n    /**\n     * Is the Path a directory?\n     */\n    isDirectory() {\n        return (this.#type & IFMT) === IFDIR;\n    }\n    /**\n     * Is the path a character device?\n     */\n    isCharacterDevice() {\n        return (this.#type & IFMT) === IFCHR;\n    }\n    /**\n     * Is the path a block device?\n     */\n    isBlockDevice() {\n        return (this.#type & IFMT) === IFBLK;\n    }\n    /**\n     * Is the path a FIFO pipe?\n     */\n    isFIFO() {\n        return (this.#type & IFMT) === IFIFO;\n    }\n    /**\n     * Is the path a socket?\n     */\n    isSocket() {\n        return (this.#type & IFMT) === IFSOCK;\n    }\n    /**\n     * Is the path a symbolic link?\n     */\n    isSymbolicLink() {\n        return (this.#type & IFLNK) === IFLNK;\n    }\n    /**\n     * Return the entry if it has been subject of a successful lstat, or\n     * undefined otherwise.\n     *\n     * Does not read the filesystem, so an undefined result *could* simply\n     * mean that we haven't called lstat on it.\n     */\n    lstatCached() {\n        return this.#type & LSTAT_CALLED ? this : undefined;\n    }\n    /**\n     * Return the cached link target if the entry has been the subject of a\n     * successful readlink, or undefined otherwise.\n     *\n     * Does not read the filesystem, so an undefined result *could* just mean we\n     * don't have any cached data. Only use it if you are very sure that a\n     * readlink() has been called at some point.\n     */\n    readlinkCached() {\n        return this.#linkTarget;\n    }\n    /**\n     * Returns the cached realpath target if the entry has been the subject\n     * of a successful realpath, or undefined otherwise.\n     *\n     * Does not read the filesystem, so an undefined result *could* just mean we\n     * don't have any cached data. Only use it if you are very sure that a\n     * realpath() has been called at some point.\n     */\n    realpathCached() {\n        return this.#realpath;\n    }\n    /**\n     * Returns the cached child Path entries array if the entry has been the\n     * subject of a successful readdir(), or [] otherwise.\n     *\n     * Does not read the filesystem, so an empty array *could* just mean we\n     * don't have any cached data. Only use it if you are very sure that a\n     * readdir() has been called recently enough to still be valid.\n     */\n    readdirCached() {\n        const children = this.children();\n        return children.slice(0, children.provisional);\n    }\n    /**\n     * Return true if it's worth trying to readlink.  Ie, we don't (yet) have\n     * any indication that readlink will definitely fail.\n     *\n     * Returns false if the path is known to not be a symlink, if a previous\n     * readlink failed, or if the entry does not exist.\n     */\n    canReadlink() {\n        if (this.#linkTarget)\n            return true;\n        if (!this.parent)\n            return false;\n        // cases where it cannot possibly succeed\n        const ifmt = this.#type & IFMT;\n        return !((ifmt !== UNKNOWN && ifmt !== IFLNK) ||\n            this.#type & ENOREADLINK ||\n            this.#type & ENOENT);\n    }\n    /**\n     * Return true if readdir has previously been successfully called on this\n     * path, indicating that cachedReaddir() is likely valid.\n     */\n    calledReaddir() {\n        return !!(this.#type & READDIR_CALLED);\n    }\n    /**\n     * Returns true if the path is known to not exist. That is, a previous lstat\n     * or readdir failed to verify its existence when that would have been\n     * expected, or a parent entry was marked either enoent or enotdir.\n     */\n    isENOENT() {\n        return !!(this.#type & ENOENT);\n    }\n    /**\n     * Return true if the path is a match for the given path name.  This handles\n     * case sensitivity and unicode normalization.\n     *\n     * Note: even on case-sensitive systems, it is **not** safe to test the\n     * equality of the `.name` property to determine whether a given pathname\n     * matches, due to unicode normalization mismatches.\n     *\n     * Always use this method instead of testing the `path.name` property\n     * directly.\n     */\n    isNamed(n) {\n        return !this.nocase\n            ? this.#matchName === normalize(n)\n            : this.#matchName === normalizeNocase(n);\n    }\n    /**\n     * Return the Path object corresponding to the target of a symbolic link.\n     *\n     * If the Path is not a symbolic link, or if the readlink call fails for any\n     * reason, `undefined` is returned.\n     *\n     * Result is cached, and thus may be outdated if the filesystem is mutated.\n     */\n    async readlink() {\n        const target = this.#linkTarget;\n        if (target) {\n            return target;\n        }\n        if (!this.canReadlink()) {\n            return undefined;\n        }\n        /* c8 ignore start */\n        // already covered by the canReadlink test, here for ts grumples\n        if (!this.parent) {\n            return undefined;\n        }\n        /* c8 ignore stop */\n        try {\n            const read = await this.#fs.promises.readlink(this.fullpath());\n            const linkTarget = this.parent.resolve(read);\n            if (linkTarget) {\n                return (this.#linkTarget = linkTarget);\n            }\n        }\n        catch (er) {\n            this.#readlinkFail(er.code);\n            return undefined;\n        }\n    }\n    /**\n     * Synchronous {@link PathBase.readlink}\n     */\n    readlinkSync() {\n        const target = this.#linkTarget;\n        if (target) {\n            return target;\n        }\n        if (!this.canReadlink()) {\n            return undefined;\n        }\n        /* c8 ignore start */\n        // already covered by the canReadlink test, here for ts grumples\n        if (!this.parent) {\n            return undefined;\n        }\n        /* c8 ignore stop */\n        try {\n            const read = this.#fs.readlinkSync(this.fullpath());\n            const linkTarget = this.parent.resolve(read);\n            if (linkTarget) {\n                return (this.#linkTarget = linkTarget);\n            }\n        }\n        catch (er) {\n            this.#readlinkFail(er.code);\n            return undefined;\n        }\n    }\n    #readdirSuccess(children) {\n        // succeeded, mark readdir called bit\n        this.#type |= READDIR_CALLED;\n        // mark all remaining provisional children as ENOENT\n        for (let p = children.provisional; p < children.length; p++) {\n            children[p].#markENOENT();\n        }\n    }\n    #markENOENT() {\n        // mark as UNKNOWN and ENOENT\n        if (this.#type & ENOENT)\n            return;\n        this.#type = (this.#type | ENOENT) & IFMT_UNKNOWN;\n        this.#markChildrenENOENT();\n    }\n    #markChildrenENOENT() {\n        // all children are provisional and do not exist\n        const children = this.children();\n        children.provisional = 0;\n        for (const p of children) {\n            p.#markENOENT();\n        }\n    }\n    #markENOREALPATH() {\n        this.#type |= ENOREALPATH;\n        this.#markENOTDIR();\n    }\n    // save the information when we know the entry is not a dir\n    #markENOTDIR() {\n        // entry is not a directory, so any children can't exist.\n        // this *should* be impossible, since any children created\n        // after it's been marked ENOTDIR should be marked ENOENT,\n        // so it won't even get to this point.\n        /* c8 ignore start */\n        if (this.#type & ENOTDIR)\n            return;\n        /* c8 ignore stop */\n        let t = this.#type;\n        // this could happen if we stat a dir, then delete it,\n        // then try to read it or one of its children.\n        if ((t & IFMT) === IFDIR)\n            t &= IFMT_UNKNOWN;\n        this.#type = t | ENOTDIR;\n        this.#markChildrenENOENT();\n    }\n    #readdirFail(code = '') {\n        // markENOTDIR and markENOENT also set provisional=0\n        if (code === 'ENOTDIR' || code === 'EPERM') {\n            this.#markENOTDIR();\n        }\n        else if (code === 'ENOENT') {\n            this.#markENOENT();\n        }\n        else {\n            this.children().provisional = 0;\n        }\n    }\n    #lstatFail(code = '') {\n        // Windows just raises ENOENT in this case, disable for win CI\n        /* c8 ignore start */\n        if (code === 'ENOTDIR') {\n            // already know it has a parent by this point\n            const p = this.parent;\n            p.#markENOTDIR();\n        }\n        else if (code === 'ENOENT') {\n            /* c8 ignore stop */\n            this.#markENOENT();\n        }\n    }\n    #readlinkFail(code = '') {\n        let ter = this.#type;\n        ter |= ENOREADLINK;\n        if (code === 'ENOENT')\n            ter |= ENOENT;\n        // windows gets a weird error when you try to readlink a file\n        if (code === 'EINVAL' || code === 'UNKNOWN') {\n            // exists, but not a symlink, we don't know WHAT it is, so remove\n            // all IFMT bits.\n            ter &= IFMT_UNKNOWN;\n        }\n        this.#type = ter;\n        // windows just gets ENOENT in this case.  We do cover the case,\n        // just disabled because it's impossible on Windows CI\n        /* c8 ignore start */\n        if (code === 'ENOTDIR' && this.parent) {\n            this.parent.#markENOTDIR();\n        }\n        /* c8 ignore stop */\n    }\n    #readdirAddChild(e, c) {\n        return (this.#readdirMaybePromoteChild(e, c) ||\n            this.#readdirAddNewChild(e, c));\n    }\n    #readdirAddNewChild(e, c) {\n        // alloc new entry at head, so it's never provisional\n        const type = entToType(e);\n        const child = this.newChild(e.name, type, { parent: this });\n        const ifmt = child.#type & IFMT;\n        if (ifmt !== IFDIR && ifmt !== IFLNK && ifmt !== UNKNOWN) {\n            child.#type |= ENOTDIR;\n        }\n        c.unshift(child);\n        c.provisional++;\n        return child;\n    }\n    #readdirMaybePromoteChild(e, c) {\n        for (let p = c.provisional; p < c.length; p++) {\n            const pchild = c[p];\n            const name = this.nocase\n                ? normalizeNocase(e.name)\n                : normalize(e.name);\n            if (name !== pchild.#matchName) {\n                continue;\n            }\n            return this.#readdirPromoteChild(e, pchild, p, c);\n        }\n    }\n    #readdirPromoteChild(e, p, index, c) {\n        const v = p.name;\n        // retain any other flags, but set ifmt from dirent\n        p.#type = (p.#type & IFMT_UNKNOWN) | entToType(e);\n        // case sensitivity fixing when we learn the true name.\n        if (v !== e.name)\n            p.name = e.name;\n        // just advance provisional index (potentially off the list),\n        // otherwise we have to splice/pop it out and re-insert at head\n        if (index !== c.provisional) {\n            if (index === c.length - 1)\n                c.pop();\n            else\n                c.splice(index, 1);\n            c.unshift(p);\n        }\n        c.provisional++;\n        return p;\n    }\n    /**\n     * Call lstat() on this Path, and update all known information that can be\n     * determined.\n     *\n     * Note that unlike `fs.lstat()`, the returned value does not contain some\n     * information, such as `mode`, `dev`, `nlink`, and `ino`.  If that\n     * information is required, you will need to call `fs.lstat` yourself.\n     *\n     * If the Path refers to a nonexistent file, or if the lstat call fails for\n     * any reason, `undefined` is returned.  Otherwise the updated Path object is\n     * returned.\n     *\n     * Results are cached, and thus may be out of date if the filesystem is\n     * mutated.\n     */\n    async lstat() {\n        if ((this.#type & ENOENT) === 0) {\n            try {\n                this.#applyStat(await this.#fs.promises.lstat(this.fullpath()));\n                return this;\n            }\n            catch (er) {\n                this.#lstatFail(er.code);\n            }\n        }\n    }\n    /**\n     * synchronous {@link PathBase.lstat}\n     */\n    lstatSync() {\n        if ((this.#type & ENOENT) === 0) {\n            try {\n                this.#applyStat(this.#fs.lstatSync(this.fullpath()));\n                return this;\n            }\n            catch (er) {\n                this.#lstatFail(er.code);\n            }\n        }\n    }\n    #applyStat(st) {\n        const { atime, atimeMs, birthtime, birthtimeMs, blksize, blocks, ctime, ctimeMs, dev, gid, ino, mode, mtime, mtimeMs, nlink, rdev, size, uid, } = st;\n        this.#atime = atime;\n        this.#atimeMs = atimeMs;\n        this.#birthtime = birthtime;\n        this.#birthtimeMs = birthtimeMs;\n        this.#blksize = blksize;\n        this.#blocks = blocks;\n        this.#ctime = ctime;\n        this.#ctimeMs = ctimeMs;\n        this.#dev = dev;\n        this.#gid = gid;\n        this.#ino = ino;\n        this.#mode = mode;\n        this.#mtime = mtime;\n        this.#mtimeMs = mtimeMs;\n        this.#nlink = nlink;\n        this.#rdev = rdev;\n        this.#size = size;\n        this.#uid = uid;\n        const ifmt = entToType(st);\n        // retain any other flags, but set the ifmt\n        this.#type = (this.#type & IFMT_UNKNOWN) | ifmt | LSTAT_CALLED;\n        if (ifmt !== UNKNOWN && ifmt !== IFDIR && ifmt !== IFLNK) {\n            this.#type |= ENOTDIR;\n        }\n    }\n    #onReaddirCB = [];\n    #readdirCBInFlight = false;\n    #callOnReaddirCB(children) {\n        this.#readdirCBInFlight = false;\n        const cbs = this.#onReaddirCB.slice();\n        this.#onReaddirCB.length = 0;\n        cbs.forEach(cb => cb(null, children));\n    }\n    /**\n     * Standard node-style callback interface to get list of directory entries.\n     *\n     * If the Path cannot or does not contain any children, then an empty array\n     * is returned.\n     *\n     * Results are cached, and thus may be out of date if the filesystem is\n     * mutated.\n     *\n     * @param cb The callback called with (er, entries).  Note that the `er`\n     * param is somewhat extraneous, as all readdir() errors are handled and\n     * simply result in an empty set of entries being returned.\n     * @param allowZalgo Boolean indicating that immediately known results should\n     * *not* be deferred with `queueMicrotask`. Defaults to `false`. Release\n     * zalgo at your peril, the dark pony lord is devious and unforgiving.\n     */\n    readdirCB(cb, allowZalgo = false) {\n        if (!this.canReaddir()) {\n            if (allowZalgo)\n                cb(null, []);\n            else\n                queueMicrotask(() => cb(null, []));\n            return;\n        }\n        const children = this.children();\n        if (this.calledReaddir()) {\n            const c = children.slice(0, children.provisional);\n            if (allowZalgo)\n                cb(null, c);\n            else\n                queueMicrotask(() => cb(null, c));\n            return;\n        }\n        // don't have to worry about zalgo at this point.\n        this.#onReaddirCB.push(cb);\n        if (this.#readdirCBInFlight) {\n            return;\n        }\n        this.#readdirCBInFlight = true;\n        // else read the directory, fill up children\n        // de-provisionalize any provisional children.\n        const fullpath = this.fullpath();\n        this.#fs.readdir(fullpath, { withFileTypes: true }, (er, entries) => {\n            if (er) {\n                this.#readdirFail(er.code);\n                children.provisional = 0;\n            }\n            else {\n                // if we didn't get an error, we always get entries.\n                //@ts-ignore\n                for (const e of entries) {\n                    this.#readdirAddChild(e, children);\n                }\n                this.#readdirSuccess(children);\n            }\n            this.#callOnReaddirCB(children.slice(0, children.provisional));\n            return;\n        });\n    }\n    #asyncReaddirInFlight;\n    /**\n     * Return an array of known child entries.\n     *\n     * If the Path cannot or does not contain any children, then an empty array\n     * is returned.\n     *\n     * Results are cached, and thus may be out of date if the filesystem is\n     * mutated.\n     */\n    async readdir() {\n        if (!this.canReaddir()) {\n            return [];\n        }\n        const children = this.children();\n        if (this.calledReaddir()) {\n            return children.slice(0, children.provisional);\n        }\n        // else read the directory, fill up children\n        // de-provisionalize any provisional children.\n        const fullpath = this.fullpath();\n        if (this.#asyncReaddirInFlight) {\n            await this.#asyncReaddirInFlight;\n        }\n        else {\n            /* c8 ignore start */\n            let resolve = () => { };\n            /* c8 ignore stop */\n            this.#asyncReaddirInFlight = new Promise(res => (resolve = res));\n            try {\n                for (const e of await this.#fs.promises.readdir(fullpath, {\n                    withFileTypes: true,\n                })) {\n                    this.#readdirAddChild(e, children);\n                }\n                this.#readdirSuccess(children);\n            }\n            catch (er) {\n                this.#readdirFail(er.code);\n                children.provisional = 0;\n            }\n            this.#asyncReaddirInFlight = undefined;\n            resolve();\n        }\n        return children.slice(0, children.provisional);\n    }\n    /**\n     * synchronous {@link PathBase.readdir}\n     */\n    readdirSync() {\n        if (!this.canReaddir()) {\n            return [];\n        }\n        const children = this.children();\n        if (this.calledReaddir()) {\n            return children.slice(0, children.provisional);\n        }\n        // else read the directory, fill up children\n        // de-provisionalize any provisional children.\n        const fullpath = this.fullpath();\n        try {\n            for (const e of this.#fs.readdirSync(fullpath, {\n                withFileTypes: true,\n            })) {\n                this.#readdirAddChild(e, children);\n            }\n            this.#readdirSuccess(children);\n        }\n        catch (er) {\n            this.#readdirFail(er.code);\n            children.provisional = 0;\n        }\n        return children.slice(0, children.provisional);\n    }\n    canReaddir() {\n        if (this.#type & ENOCHILD)\n            return false;\n        const ifmt = IFMT & this.#type;\n        // we always set ENOTDIR when setting IFMT, so should be impossible\n        /* c8 ignore start */\n        if (!(ifmt === UNKNOWN || ifmt === IFDIR || ifmt === IFLNK)) {\n            return false;\n        }\n        /* c8 ignore stop */\n        return true;\n    }\n    shouldWalk(dirs, walkFilter) {\n        return ((this.#type & IFDIR) === IFDIR &&\n            !(this.#type & ENOCHILD) &&\n            !dirs.has(this) &&\n            (!walkFilter || walkFilter(this)));\n    }\n    /**\n     * Return the Path object corresponding to path as resolved\n     * by realpath(3).\n     *\n     * If the realpath call fails for any reason, `undefined` is returned.\n     *\n     * Result is cached, and thus may be outdated if the filesystem is mutated.\n     * On success, returns a Path object.\n     */\n    async realpath() {\n        if (this.#realpath)\n            return this.#realpath;\n        if ((ENOREALPATH | ENOREADLINK | ENOENT) & this.#type)\n            return undefined;\n        try {\n            const rp = await this.#fs.promises.realpath(this.fullpath());\n            return (this.#realpath = this.resolve(rp));\n        }\n        catch (_) {\n            this.#markENOREALPATH();\n        }\n    }\n    /**\n     * Synchronous {@link realpath}\n     */\n    realpathSync() {\n        if (this.#realpath)\n            return this.#realpath;\n        if ((ENOREALPATH | ENOREADLINK | ENOENT) & this.#type)\n            return undefined;\n        try {\n            const rp = this.#fs.realpathSync(this.fullpath());\n            return (this.#realpath = this.resolve(rp));\n        }\n        catch (_) {\n            this.#markENOREALPATH();\n        }\n    }\n    /**\n     * Internal method to mark this Path object as the scurry cwd,\n     * called by {@link PathScurry#chdir}\n     *\n     * @internal\n     */\n    [setAsCwd](oldCwd) {\n        if (oldCwd === this)\n            return;\n        const changed = new Set([]);\n        let rp = [];\n        let p = this;\n        while (p && p.parent) {\n            changed.add(p);\n            p.#relative = rp.join(this.sep);\n            p.#relativePosix = rp.join('/');\n            p = p.parent;\n            rp.push('..');\n        }\n        // now un-memoize parents of old cwd\n        p = oldCwd;\n        while (p && p.parent && !changed.has(p)) {\n            p.#relative = undefined;\n            p.#relativePosix = undefined;\n            p = p.parent;\n        }\n    }\n}\nexports.PathBase = PathBase;\n/**\n * Path class used on win32 systems\n *\n * Uses `'\\\\'` as the path separator for returned paths, either `'\\\\'` or `'/'`\n * as the path separator for parsing paths.\n */\nclass PathWin32 extends PathBase {\n    /**\n     * Separator for generating path strings.\n     */\n    sep = '\\\\';\n    /**\n     * Separator for parsing path strings.\n     */\n    splitSep = eitherSep;\n    /**\n     * Do not create new Path objects directly.  They should always be accessed\n     * via the PathScurry class or other methods on the Path class.\n     *\n     * @internal\n     */\n    constructor(name, type = UNKNOWN, root, roots, nocase, children, opts) {\n        super(name, type, root, roots, nocase, children, opts);\n    }\n    /**\n     * @internal\n     */\n    newChild(name, type = UNKNOWN, opts = {}) {\n        return new PathWin32(name, type, this.root, this.roots, this.nocase, this.childrenCache(), opts);\n    }\n    /**\n     * @internal\n     */\n    getRootString(path) {\n        return path_1.win32.parse(path).root;\n    }\n    /**\n     * @internal\n     */\n    getRoot(rootPath) {\n        rootPath = uncToDrive(rootPath.toUpperCase());\n        if (rootPath === this.root.name) {\n            return this.root;\n        }\n        // ok, not that one, check if it matches another we know about\n        for (const [compare, root] of Object.entries(this.roots)) {\n            if (this.sameRoot(rootPath, compare)) {\n                return (this.roots[rootPath] = root);\n            }\n        }\n        // otherwise, have to create a new one.\n        return (this.roots[rootPath] = new PathScurryWin32(rootPath, this).root);\n    }\n    /**\n     * @internal\n     */\n    sameRoot(rootPath, compare = this.root.name) {\n        // windows can (rarely) have case-sensitive filesystem, but\n        // UNC and drive letters are always case-insensitive, and canonically\n        // represented uppercase.\n        rootPath = rootPath\n            .toUpperCase()\n            .replace(/\\//g, '\\\\')\n            .replace(uncDriveRegexp, '$1\\\\');\n        return rootPath === compare;\n    }\n}\nexports.PathWin32 = PathWin32;\n/**\n * Path class used on all posix systems.\n *\n * Uses `'/'` as the path separator.\n */\nclass PathPosix extends PathBase {\n    /**\n     * separator for parsing path strings\n     */\n    splitSep = '/';\n    /**\n     * separator for generating path strings\n     */\n    sep = '/';\n    /**\n     * Do not create new Path objects directly.  They should always be accessed\n     * via the PathScurry class or other methods on the Path class.\n     *\n     * @internal\n     */\n    constructor(name, type = UNKNOWN, root, roots, nocase, children, opts) {\n        super(name, type, root, roots, nocase, children, opts);\n    }\n    /**\n     * @internal\n     */\n    getRootString(path) {\n        return path.startsWith('/') ? '/' : '';\n    }\n    /**\n     * @internal\n     */\n    getRoot(_rootPath) {\n        return this.root;\n    }\n    /**\n     * @internal\n     */\n    newChild(name, type = UNKNOWN, opts = {}) {\n        return new PathPosix(name, type, this.root, this.roots, this.nocase, this.childrenCache(), opts);\n    }\n}\nexports.PathPosix = PathPosix;\n/**\n * The base class for all PathScurry classes, providing the interface for path\n * resolution and filesystem operations.\n *\n * Typically, you should *not* instantiate this class directly, but rather one\n * of the platform-specific classes, or the exported {@link PathScurry} which\n * defaults to the current platform.\n */\nclass PathScurryBase {\n    /**\n     * The root Path entry for the current working directory of this Scurry\n     */\n    root;\n    /**\n     * The string path for the root of this Scurry's current working directory\n     */\n    rootPath;\n    /**\n     * A collection of all roots encountered, referenced by rootPath\n     */\n    roots;\n    /**\n     * The Path entry corresponding to this PathScurry's current working directory.\n     */\n    cwd;\n    #resolveCache;\n    #resolvePosixCache;\n    #children;\n    /**\n     * Perform path comparisons case-insensitively.\n     *\n     * Defaults true on Darwin and Windows systems, false elsewhere.\n     */\n    nocase;\n    #fs;\n    /**\n     * This class should not be instantiated directly.\n     *\n     * Use PathScurryWin32, PathScurryDarwin, PathScurryPosix, or PathScurry\n     *\n     * @internal\n     */\n    constructor(cwd = process.cwd(), pathImpl, sep, { nocase, childrenCacheSize = 16 * 1024, fs = defaultFS, } = {}) {\n        this.#fs = fsFromOption(fs);\n        if (cwd instanceof URL || cwd.startsWith('file://')) {\n            cwd = (0, url_1.fileURLToPath)(cwd);\n        }\n        // resolve and split root, and then add to the store.\n        // this is the only time we call path.resolve()\n        const cwdPath = pathImpl.resolve(cwd);\n        this.roots = Object.create(null);\n        this.rootPath = this.parseRootPath(cwdPath);\n        this.#resolveCache = new ResolveCache();\n        this.#resolvePosixCache = new ResolveCache();\n        this.#children = new ChildrenCache(childrenCacheSize);\n        const split = cwdPath.substring(this.rootPath.length).split(sep);\n        // resolve('/') leaves '', splits to [''], we don't want that.\n        if (split.length === 1 && !split[0]) {\n            split.pop();\n        }\n        /* c8 ignore start */\n        if (nocase === undefined) {\n            throw new TypeError('must provide nocase setting to PathScurryBase ctor');\n        }\n        /* c8 ignore stop */\n        this.nocase = nocase;\n        this.root = this.newRoot(this.#fs);\n        this.roots[this.rootPath] = this.root;\n        let prev = this.root;\n        let len = split.length - 1;\n        const joinSep = pathImpl.sep;\n        let abs = this.rootPath;\n        let sawFirst = false;\n        for (const part of split) {\n            const l = len--;\n            prev = prev.child(part, {\n                relative: new Array(l).fill('..').join(joinSep),\n                relativePosix: new Array(l).fill('..').join('/'),\n                fullpath: (abs += (sawFirst ? '' : joinSep) + part),\n            });\n            sawFirst = true;\n        }\n        this.cwd = prev;\n    }\n    /**\n     * Get the depth of a provided path, string, or the cwd\n     */\n    depth(path = this.cwd) {\n        if (typeof path === 'string') {\n            path = this.cwd.resolve(path);\n        }\n        return path.depth();\n    }\n    /**\n     * Return the cache of child entries.  Exposed so subclasses can create\n     * child Path objects in a platform-specific way.\n     *\n     * @internal\n     */\n    childrenCache() {\n        return this.#children;\n    }\n    /**\n     * Resolve one or more path strings to a resolved string\n     *\n     * Same interface as require('path').resolve.\n     *\n     * Much faster than path.resolve() when called multiple times for the same\n     * path, because the resolved Path objects are cached.  Much slower\n     * otherwise.\n     */\n    resolve(...paths) {\n        // first figure out the minimum number of paths we have to test\n        // we always start at cwd, but any absolutes will bump the start\n        let r = '';\n        for (let i = paths.length - 1; i >= 0; i--) {\n            const p = paths[i];\n            if (!p || p === '.')\n                continue;\n            r = r ? `${p}/${r}` : p;\n            if (this.isAbsolute(p)) {\n                break;\n            }\n        }\n        const cached = this.#resolveCache.get(r);\n        if (cached !== undefined) {\n            return cached;\n        }\n        const result = this.cwd.resolve(r).fullpath();\n        this.#resolveCache.set(r, result);\n        return result;\n    }\n    /**\n     * Resolve one or more path strings to a resolved string, returning\n     * the posix path.  Identical to .resolve() on posix systems, but on\n     * windows will return a forward-slash separated UNC path.\n     *\n     * Same interface as require('path').resolve.\n     *\n     * Much faster than path.resolve() when called multiple times for the same\n     * path, because the resolved Path objects are cached.  Much slower\n     * otherwise.\n     */\n    resolvePosix(...paths) {\n        // first figure out the minimum number of paths we have to test\n        // we always start at cwd, but any absolutes will bump the start\n        let r = '';\n        for (let i = paths.length - 1; i >= 0; i--) {\n            const p = paths[i];\n            if (!p || p === '.')\n                continue;\n            r = r ? `${p}/${r}` : p;\n            if (this.isAbsolute(p)) {\n                break;\n            }\n        }\n        const cached = this.#resolvePosixCache.get(r);\n        if (cached !== undefined) {\n            return cached;\n        }\n        const result = this.cwd.resolve(r).fullpathPosix();\n        this.#resolvePosixCache.set(r, result);\n        return result;\n    }\n    /**\n     * find the relative path from the cwd to the supplied path string or entry\n     */\n    relative(entry = this.cwd) {\n        if (typeof entry === 'string') {\n            entry = this.cwd.resolve(entry);\n        }\n        return entry.relative();\n    }\n    /**\n     * find the relative path from the cwd to the supplied path string or\n     * entry, using / as the path delimiter, even on Windows.\n     */\n    relativePosix(entry = this.cwd) {\n        if (typeof entry === 'string') {\n            entry = this.cwd.resolve(entry);\n        }\n        return entry.relativePosix();\n    }\n    /**\n     * Return the basename for the provided string or Path object\n     */\n    basename(entry = this.cwd) {\n        if (typeof entry === 'string') {\n            entry = this.cwd.resolve(entry);\n        }\n        return entry.name;\n    }\n    /**\n     * Return the dirname for the provided string or Path object\n     */\n    dirname(entry = this.cwd) {\n        if (typeof entry === 'string') {\n            entry = this.cwd.resolve(entry);\n        }\n        return (entry.parent || entry).fullpath();\n    }\n    async readdir(entry = this.cwd, opts = {\n        withFileTypes: true,\n    }) {\n        if (typeof entry === 'string') {\n            entry = this.cwd.resolve(entry);\n        }\n        else if (!(entry instanceof PathBase)) {\n            opts = entry;\n            entry = this.cwd;\n        }\n        const { withFileTypes } = opts;\n        if (!entry.canReaddir()) {\n            return [];\n        }\n        else {\n            const p = await entry.readdir();\n            return withFileTypes ? p : p.map(e => e.name);\n        }\n    }\n    readdirSync(entry = this.cwd, opts = {\n        withFileTypes: true,\n    }) {\n        if (typeof entry === 'string') {\n            entry = this.cwd.resolve(entry);\n        }\n        else if (!(entry instanceof PathBase)) {\n            opts = entry;\n            entry = this.cwd;\n        }\n        const { withFileTypes = true } = opts;\n        if (!entry.canReaddir()) {\n            return [];\n        }\n        else if (withFileTypes) {\n            return entry.readdirSync();\n        }\n        else {\n            return entry.readdirSync().map(e => e.name);\n        }\n    }\n    /**\n     * Call lstat() on the string or Path object, and update all known\n     * information that can be determined.\n     *\n     * Note that unlike `fs.lstat()`, the returned value does not contain some\n     * information, such as `mode`, `dev`, `nlink`, and `ino`.  If that\n     * information is required, you will need to call `fs.lstat` yourself.\n     *\n     * If the Path refers to a nonexistent file, or if the lstat call fails for\n     * any reason, `undefined` is returned.  Otherwise the updated Path object is\n     * returned.\n     *\n     * Results are cached, and thus may be out of date if the filesystem is\n     * mutated.\n     */\n    async lstat(entry = this.cwd) {\n        if (typeof entry === 'string') {\n            entry = this.cwd.resolve(entry);\n        }\n        return entry.lstat();\n    }\n    /**\n     * synchronous {@link PathScurryBase.lstat}\n     */\n    lstatSync(entry = this.cwd) {\n        if (typeof entry === 'string') {\n            entry = this.cwd.resolve(entry);\n        }\n        return entry.lstatSync();\n    }\n    async readlink(entry = this.cwd, { withFileTypes } = {\n        withFileTypes: false,\n    }) {\n        if (typeof entry === 'string') {\n            entry = this.cwd.resolve(entry);\n        }\n        else if (!(entry instanceof PathBase)) {\n            withFileTypes = entry.withFileTypes;\n            entry = this.cwd;\n        }\n        const e = await entry.readlink();\n        return withFileTypes ? e : e?.fullpath();\n    }\n    readlinkSync(entry = this.cwd, { withFileTypes } = {\n        withFileTypes: false,\n    }) {\n        if (typeof entry === 'string') {\n            entry = this.cwd.resolve(entry);\n        }\n        else if (!(entry instanceof PathBase)) {\n            withFileTypes = entry.withFileTypes;\n            entry = this.cwd;\n        }\n        const e = entry.readlinkSync();\n        return withFileTypes ? e : e?.fullpath();\n    }\n    async realpath(entry = this.cwd, { withFileTypes } = {\n        withFileTypes: false,\n    }) {\n        if (typeof entry === 'string') {\n            entry = this.cwd.resolve(entry);\n        }\n        else if (!(entry instanceof PathBase)) {\n            withFileTypes = entry.withFileTypes;\n            entry = this.cwd;\n        }\n        const e = await entry.realpath();\n        return withFileTypes ? e : e?.fullpath();\n    }\n    realpathSync(entry = this.cwd, { withFileTypes } = {\n        withFileTypes: false,\n    }) {\n        if (typeof entry === 'string') {\n            entry = this.cwd.resolve(entry);\n        }\n        else if (!(entry instanceof PathBase)) {\n            withFileTypes = entry.withFileTypes;\n            entry = this.cwd;\n        }\n        const e = entry.realpathSync();\n        return withFileTypes ? e : e?.fullpath();\n    }\n    async walk(entry = this.cwd, opts = {}) {\n        if (typeof entry === 'string') {\n            entry = this.cwd.resolve(entry);\n        }\n        else if (!(entry instanceof PathBase)) {\n            opts = entry;\n            entry = this.cwd;\n        }\n        const { withFileTypes = true, follow = false, filter, walkFilter, } = opts;\n        const results = [];\n        if (!filter || filter(entry)) {\n            results.push(withFileTypes ? entry : entry.fullpath());\n        }\n        const dirs = new Set();\n        const walk = (dir, cb) => {\n            dirs.add(dir);\n            dir.readdirCB((er, entries) => {\n                /* c8 ignore start */\n                if (er) {\n                    return cb(er);\n                }\n                /* c8 ignore stop */\n                let len = entries.length;\n                if (!len)\n                    return cb();\n                const next = () => {\n                    if (--len === 0) {\n                        cb();\n                    }\n                };\n                for (const e of entries) {\n                    if (!filter || filter(e)) {\n                        results.push(withFileTypes ? e : e.fullpath());\n                    }\n                    if (follow && e.isSymbolicLink()) {\n                        e.realpath()\n                            .then(r => (r?.isUnknown() ? r.lstat() : r))\n                            .then(r => r?.shouldWalk(dirs, walkFilter) ? walk(r, next) : next());\n                    }\n                    else {\n                        if (e.shouldWalk(dirs, walkFilter)) {\n                            walk(e, next);\n                        }\n                        else {\n                            next();\n                        }\n                    }\n                }\n            }, true); // zalgooooooo\n        };\n        const start = entry;\n        return new Promise((res, rej) => {\n            walk(start, er => {\n                /* c8 ignore start */\n                if (er)\n                    return rej(er);\n                /* c8 ignore stop */\n                res(results);\n            });\n        });\n    }\n    walkSync(entry = this.cwd, opts = {}) {\n        if (typeof entry === 'string') {\n            entry = this.cwd.resolve(entry);\n        }\n        else if (!(entry instanceof PathBase)) {\n            opts = entry;\n            entry = this.cwd;\n        }\n        const { withFileTypes = true, follow = false, filter, walkFilter, } = opts;\n        const results = [];\n        if (!filter || filter(entry)) {\n            results.push(withFileTypes ? entry : entry.fullpath());\n        }\n        const dirs = new Set([entry]);\n        for (const dir of dirs) {\n            const entries = dir.readdirSync();\n            for (const e of entries) {\n                if (!filter || filter(e)) {\n                    results.push(withFileTypes ? e : e.fullpath());\n                }\n                let r = e;\n                if (e.isSymbolicLink()) {\n                    if (!(follow && (r = e.realpathSync())))\n                        continue;\n                    if (r.isUnknown())\n                        r.lstatSync();\n                }\n                if (r.shouldWalk(dirs, walkFilter)) {\n                    dirs.add(r);\n                }\n            }\n        }\n        return results;\n    }\n    /**\n     * Support for `for await`\n     *\n     * Alias for {@link PathScurryBase.iterate}\n     *\n     * Note: As of Node 19, this is very slow, compared to other methods of\n     * walking.  Consider using {@link PathScurryBase.stream} if memory overhead\n     * and backpressure are concerns, or {@link PathScurryBase.walk} if not.\n     */\n    [Symbol.asyncIterator]() {\n        return this.iterate();\n    }\n    iterate(entry = this.cwd, options = {}) {\n        // iterating async over the stream is significantly more performant,\n        // especially in the warm-cache scenario, because it buffers up directory\n        // entries in the background instead of waiting for a yield for each one.\n        if (typeof entry === 'string') {\n            entry = this.cwd.resolve(entry);\n        }\n        else if (!(entry instanceof PathBase)) {\n            options = entry;\n            entry = this.cwd;\n        }\n        return this.stream(entry, options)[Symbol.asyncIterator]();\n    }\n    /**\n     * Iterating over a PathScurry performs a synchronous walk.\n     *\n     * Alias for {@link PathScurryBase.iterateSync}\n     */\n    [Symbol.iterator]() {\n        return this.iterateSync();\n    }\n    *iterateSync(entry = this.cwd, opts = {}) {\n        if (typeof entry === 'string') {\n            entry = this.cwd.resolve(entry);\n        }\n        else if (!(entry instanceof PathBase)) {\n            opts = entry;\n            entry = this.cwd;\n        }\n        const { withFileTypes = true, follow = false, filter, walkFilter, } = opts;\n        if (!filter || filter(entry)) {\n            yield withFileTypes ? entry : entry.fullpath();\n        }\n        const dirs = new Set([entry]);\n        for (const dir of dirs) {\n            const entries = dir.readdirSync();\n            for (const e of entries) {\n                if (!filter || filter(e)) {\n                    yield withFileTypes ? e : e.fullpath();\n                }\n                let r = e;\n                if (e.isSymbolicLink()) {\n                    if (!(follow && (r = e.realpathSync())))\n                        continue;\n                    if (r.isUnknown())\n                        r.lstatSync();\n                }\n                if (r.shouldWalk(dirs, walkFilter)) {\n                    dirs.add(r);\n                }\n            }\n        }\n    }\n    stream(entry = this.cwd, opts = {}) {\n        if (typeof entry === 'string') {\n            entry = this.cwd.resolve(entry);\n        }\n        else if (!(entry instanceof PathBase)) {\n            opts = entry;\n            entry = this.cwd;\n        }\n        const { withFileTypes = true, follow = false, filter, walkFilter, } = opts;\n        const results = new minipass_1.Minipass({ objectMode: true });\n        if (!filter || filter(entry)) {\n            results.write(withFileTypes ? entry : entry.fullpath());\n        }\n        const dirs = new Set();\n        const queue = [entry];\n        let processing = 0;\n        const process = () => {\n            let paused = false;\n            while (!paused) {\n                const dir = queue.shift();\n                if (!dir) {\n                    if (processing === 0)\n                        results.end();\n                    return;\n                }\n                processing++;\n                dirs.add(dir);\n                const onReaddir = (er, entries, didRealpaths = false) => {\n                    /* c8 ignore start */\n                    if (er)\n                        return results.emit('error', er);\n                    /* c8 ignore stop */\n                    if (follow && !didRealpaths) {\n                        const promises = [];\n                        for (const e of entries) {\n                            if (e.isSymbolicLink()) {\n                                promises.push(e\n                                    .realpath()\n                                    .then((r) => r?.isUnknown() ? r.lstat() : r));\n                            }\n                        }\n                        if (promises.length) {\n                            Promise.all(promises).then(() => onReaddir(null, entries, true));\n                            return;\n                        }\n                    }\n                    for (const e of entries) {\n                        if (e && (!filter || filter(e))) {\n                            if (!results.write(withFileTypes ? e : e.fullpath())) {\n                                paused = true;\n                            }\n                        }\n                    }\n                    processing--;\n                    for (const e of entries) {\n                        const r = e.realpathCached() || e;\n                        if (r.shouldWalk(dirs, walkFilter)) {\n                            queue.push(r);\n                        }\n                    }\n                    if (paused && !results.flowing) {\n                        results.once('drain', process);\n                    }\n                    else if (!sync) {\n                        process();\n                    }\n                };\n                // zalgo containment\n                let sync = true;\n                dir.readdirCB(onReaddir, true);\n                sync = false;\n            }\n        };\n        process();\n        return results;\n    }\n    streamSync(entry = this.cwd, opts = {}) {\n        if (typeof entry === 'string') {\n            entry = this.cwd.resolve(entry);\n        }\n        else if (!(entry instanceof PathBase)) {\n            opts = entry;\n            entry = this.cwd;\n        }\n        const { withFileTypes = true, follow = false, filter, walkFilter, } = opts;\n        const results = new minipass_1.Minipass({ objectMode: true });\n        const dirs = new Set();\n        if (!filter || filter(entry)) {\n            results.write(withFileTypes ? entry : entry.fullpath());\n        }\n        const queue = [entry];\n        let processing = 0;\n        const process = () => {\n            let paused = false;\n            while (!paused) {\n                const dir = queue.shift();\n                if (!dir) {\n                    if (processing === 0)\n                        results.end();\n                    return;\n                }\n                processing++;\n                dirs.add(dir);\n                const entries = dir.readdirSync();\n                for (const e of entries) {\n                    if (!filter || filter(e)) {\n                        if (!results.write(withFileTypes ? e : e.fullpath())) {\n                            paused = true;\n                        }\n                    }\n                }\n                processing--;\n                for (const e of entries) {\n                    let r = e;\n                    if (e.isSymbolicLink()) {\n                        if (!(follow && (r = e.realpathSync())))\n                            continue;\n                        if (r.isUnknown())\n                            r.lstatSync();\n                    }\n                    if (r.shouldWalk(dirs, walkFilter)) {\n                        queue.push(r);\n                    }\n                }\n            }\n            if (paused && !results.flowing)\n                results.once('drain', process);\n        };\n        process();\n        return results;\n    }\n    chdir(path = this.cwd) {\n        const oldCwd = this.cwd;\n        this.cwd = typeof path === 'string' ? this.cwd.resolve(path) : path;\n        this.cwd[setAsCwd](oldCwd);\n    }\n}\nexports.PathScurryBase = PathScurryBase;\n/**\n * Windows implementation of {@link PathScurryBase}\n *\n * Defaults to case insensitve, uses `'\\\\'` to generate path strings.  Uses\n * {@link PathWin32} for Path objects.\n */\nclass PathScurryWin32 extends PathScurryBase {\n    /**\n     * separator for generating path strings\n     */\n    sep = '\\\\';\n    constructor(cwd = process.cwd(), opts = {}) {\n        const { nocase = true } = opts;\n        super(cwd, path_1.win32, '\\\\', { ...opts, nocase });\n        this.nocase = nocase;\n        for (let p = this.cwd; p; p = p.parent) {\n            p.nocase = this.nocase;\n        }\n    }\n    /**\n     * @internal\n     */\n    parseRootPath(dir) {\n        // if the path starts with a single separator, it's not a UNC, and we'll\n        // just get separator as the root, and driveFromUNC will return \\\n        // In that case, mount \\ on the root from the cwd.\n        return path_1.win32.parse(dir).root.toUpperCase();\n    }\n    /**\n     * @internal\n     */\n    newRoot(fs) {\n        return new PathWin32(this.rootPath, IFDIR, undefined, this.roots, this.nocase, this.childrenCache(), { fs });\n    }\n    /**\n     * Return true if the provided path string is an absolute path\n     */\n    isAbsolute(p) {\n        return (p.startsWith('/') || p.startsWith('\\\\') || /^[a-z]:(\\/|\\\\)/i.test(p));\n    }\n}\nexports.PathScurryWin32 = PathScurryWin32;\n/**\n * {@link PathScurryBase} implementation for all posix systems other than Darwin.\n *\n * Defaults to case-sensitive matching, uses `'/'` to generate path strings.\n *\n * Uses {@link PathPosix} for Path objects.\n */\nclass PathScurryPosix extends PathScurryBase {\n    /**\n     * separator for generating path strings\n     */\n    sep = '/';\n    constructor(cwd = process.cwd(), opts = {}) {\n        const { nocase = false } = opts;\n        super(cwd, path_1.posix, '/', { ...opts, nocase });\n        this.nocase = nocase;\n    }\n    /**\n     * @internal\n     */\n    parseRootPath(_dir) {\n        return '/';\n    }\n    /**\n     * @internal\n     */\n    newRoot(fs) {\n        return new PathPosix(this.rootPath, IFDIR, undefined, this.roots, this.nocase, this.childrenCache(), { fs });\n    }\n    /**\n     * Return true if the provided path string is an absolute path\n     */\n    isAbsolute(p) {\n        return p.startsWith('/');\n    }\n}\nexports.PathScurryPosix = PathScurryPosix;\n/**\n * {@link PathScurryBase} implementation for Darwin (macOS) systems.\n *\n * Defaults to case-insensitive matching, uses `'/'` for generating path\n * strings.\n *\n * Uses {@link PathPosix} for Path objects.\n */\nclass PathScurryDarwin extends PathScurryPosix {\n    constructor(cwd = process.cwd(), opts = {}) {\n        const { nocase = true } = opts;\n        super(cwd, { ...opts, nocase });\n    }\n}\nexports.PathScurryDarwin = PathScurryDarwin;\n/**\n * Default {@link PathBase} implementation for the current platform.\n *\n * {@link PathWin32} on Windows systems, {@link PathPosix} on all others.\n */\nexports.Path = process.platform === 'win32' ? PathWin32 : PathPosix;\n/**\n * Default {@link PathScurryBase} implementation for the current platform.\n *\n * {@link PathScurryWin32} on Windows systems, {@link PathScurryDarwin} on\n * Darwin (macOS) systems, {@link PathScurryPosix} on all others.\n */\nexports.PathScurry = process.platform === 'win32'\n    ? PathScurryWin32\n    : process.platform === 'darwin'\n        ? PathScurryDarwin\n        : PathScurryPosix;\n//# sourceMappingURL=index.js.map","\"use strict\";\n/**\n * @module LRUCache\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LRUCache = void 0;\nconst perf = typeof performance === 'object' &&\n    performance &&\n    typeof performance.now === 'function'\n    ? performance\n    : Date;\nconst warned = new Set();\n/* c8 ignore start */\nconst PROCESS = (typeof process === 'object' && !!process ? process : {});\n/* c8 ignore start */\nconst emitWarning = (msg, type, code, fn) => {\n    typeof PROCESS.emitWarning === 'function'\n        ? PROCESS.emitWarning(msg, type, code, fn)\n        : console.error(`[${code}] ${type}: ${msg}`);\n};\nlet AC = globalThis.AbortController;\nlet AS = globalThis.AbortSignal;\n/* c8 ignore start */\nif (typeof AC === 'undefined') {\n    //@ts-ignore\n    AS = class AbortSignal {\n        onabort;\n        _onabort = [];\n        reason;\n        aborted = false;\n        addEventListener(_, fn) {\n            this._onabort.push(fn);\n        }\n    };\n    //@ts-ignore\n    AC = class AbortController {\n        constructor() {\n            warnACPolyfill();\n        }\n        signal = new AS();\n        abort(reason) {\n            if (this.signal.aborted)\n                return;\n            //@ts-ignore\n            this.signal.reason = reason;\n            //@ts-ignore\n            this.signal.aborted = true;\n            //@ts-ignore\n            for (const fn of this.signal._onabort) {\n                fn(reason);\n            }\n            this.signal.onabort?.(reason);\n        }\n    };\n    let printACPolyfillWarning = PROCESS.env?.LRU_CACHE_IGNORE_AC_WARNING !== '1';\n    const warnACPolyfill = () => {\n        if (!printACPolyfillWarning)\n            return;\n        printACPolyfillWarning = false;\n        emitWarning('AbortController is not defined. If using lru-cache in ' +\n            'node 14, load an AbortController polyfill from the ' +\n            '`node-abort-controller` package. A minimal polyfill is ' +\n            'provided for use by LRUCache.fetch(), but it should not be ' +\n            'relied upon in other contexts (eg, passing it to other APIs that ' +\n            'use AbortController/AbortSignal might have undesirable effects). ' +\n            'You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.', 'NO_ABORT_CONTROLLER', 'ENOTSUP', warnACPolyfill);\n    };\n}\n/* c8 ignore stop */\nconst shouldWarn = (code) => !warned.has(code);\nconst TYPE = Symbol('type');\nconst isPosInt = (n) => n && n === Math.floor(n) && n > 0 && isFinite(n);\n/* c8 ignore start */\n// This is a little bit ridiculous, tbh.\n// The maximum array length is 2^32-1 or thereabouts on most JS impls.\n// And well before that point, you're caching the entire world, I mean,\n// that's ~32GB of just integers for the next/prev links, plus whatever\n// else to hold that many keys and values.  Just filling the memory with\n// zeroes at init time is brutal when you get that big.\n// But why not be complete?\n// Maybe in the future, these limits will have expanded.\nconst getUintArray = (max) => !isPosInt(max)\n    ? null\n    : max <= Math.pow(2, 8)\n        ? Uint8Array\n        : max <= Math.pow(2, 16)\n            ? Uint16Array\n            : max <= Math.pow(2, 32)\n                ? Uint32Array\n                : max <= Number.MAX_SAFE_INTEGER\n                    ? ZeroArray\n                    : null;\n/* c8 ignore stop */\nclass ZeroArray extends Array {\n    constructor(size) {\n        super(size);\n        this.fill(0);\n    }\n}\nclass Stack {\n    heap;\n    length;\n    // private constructor\n    static #constructing = false;\n    static create(max) {\n        const HeapCls = getUintArray(max);\n        if (!HeapCls)\n            return [];\n        Stack.#constructing = true;\n        const s = new Stack(max, HeapCls);\n        Stack.#constructing = false;\n        return s;\n    }\n    constructor(max, HeapCls) {\n        /* c8 ignore start */\n        if (!Stack.#constructing) {\n            throw new TypeError('instantiate Stack using Stack.create(n)');\n        }\n        /* c8 ignore stop */\n        this.heap = new HeapCls(max);\n        this.length = 0;\n    }\n    push(n) {\n        this.heap[this.length++] = n;\n    }\n    pop() {\n        return this.heap[--this.length];\n    }\n}\n/**\n * Default export, the thing you're using this module to get.\n *\n * All properties from the options object (with the exception of\n * {@link OptionsBase.max} and {@link OptionsBase.maxSize}) are added as\n * normal public members. (`max` and `maxBase` are read-only getters.)\n * Changing any of these will alter the defaults for subsequent method calls,\n * but is otherwise safe.\n */\nclass LRUCache {\n    // properties coming in from the options of these, only max and maxSize\n    // really *need* to be protected. The rest can be modified, as they just\n    // set defaults for various methods.\n    #max;\n    #maxSize;\n    #dispose;\n    #disposeAfter;\n    #fetchMethod;\n    /**\n     * {@link LRUCache.OptionsBase.ttl}\n     */\n    ttl;\n    /**\n     * {@link LRUCache.OptionsBase.ttlResolution}\n     */\n    ttlResolution;\n    /**\n     * {@link LRUCache.OptionsBase.ttlAutopurge}\n     */\n    ttlAutopurge;\n    /**\n     * {@link LRUCache.OptionsBase.updateAgeOnGet}\n     */\n    updateAgeOnGet;\n    /**\n     * {@link LRUCache.OptionsBase.updateAgeOnHas}\n     */\n    updateAgeOnHas;\n    /**\n     * {@link LRUCache.OptionsBase.allowStale}\n     */\n    allowStale;\n    /**\n     * {@link LRUCache.OptionsBase.noDisposeOnSet}\n     */\n    noDisposeOnSet;\n    /**\n     * {@link LRUCache.OptionsBase.noUpdateTTL}\n     */\n    noUpdateTTL;\n    /**\n     * {@link LRUCache.OptionsBase.maxEntrySize}\n     */\n    maxEntrySize;\n    /**\n     * {@link LRUCache.OptionsBase.sizeCalculation}\n     */\n    sizeCalculation;\n    /**\n     * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}\n     */\n    noDeleteOnFetchRejection;\n    /**\n     * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}\n     */\n    noDeleteOnStaleGet;\n    /**\n     * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}\n     */\n    allowStaleOnFetchAbort;\n    /**\n     * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}\n     */\n    allowStaleOnFetchRejection;\n    /**\n     * {@link LRUCache.OptionsBase.ignoreFetchAbort}\n     */\n    ignoreFetchAbort;\n    // computed properties\n    #size;\n    #calculatedSize;\n    #keyMap;\n    #keyList;\n    #valList;\n    #next;\n    #prev;\n    #head;\n    #tail;\n    #free;\n    #disposed;\n    #sizes;\n    #starts;\n    #ttls;\n    #hasDispose;\n    #hasFetchMethod;\n    #hasDisposeAfter;\n    /**\n     * Do not call this method unless you need to inspect the\n     * inner workings of the cache.  If anything returned by this\n     * object is modified in any way, strange breakage may occur.\n     *\n     * These fields are private for a reason!\n     *\n     * @internal\n     */\n    static unsafeExposeInternals(c) {\n        return {\n            // properties\n            starts: c.#starts,\n            ttls: c.#ttls,\n            sizes: c.#sizes,\n            keyMap: c.#keyMap,\n            keyList: c.#keyList,\n            valList: c.#valList,\n            next: c.#next,\n            prev: c.#prev,\n            get head() {\n                return c.#head;\n            },\n            get tail() {\n                return c.#tail;\n            },\n            free: c.#free,\n            // methods\n            isBackgroundFetch: (p) => c.#isBackgroundFetch(p),\n            backgroundFetch: (k, index, options, context) => c.#backgroundFetch(k, index, options, context),\n            moveToTail: (index) => c.#moveToTail(index),\n            indexes: (options) => c.#indexes(options),\n            rindexes: (options) => c.#rindexes(options),\n            isStale: (index) => c.#isStale(index),\n        };\n    }\n    // Protected read-only members\n    /**\n     * {@link LRUCache.OptionsBase.max} (read-only)\n     */\n    get max() {\n        return this.#max;\n    }\n    /**\n     * {@link LRUCache.OptionsBase.maxSize} (read-only)\n     */\n    get maxSize() {\n        return this.#maxSize;\n    }\n    /**\n     * The total computed size of items in the cache (read-only)\n     */\n    get calculatedSize() {\n        return this.#calculatedSize;\n    }\n    /**\n     * The number of items stored in the cache (read-only)\n     */\n    get size() {\n        return this.#size;\n    }\n    /**\n     * {@link LRUCache.OptionsBase.fetchMethod} (read-only)\n     */\n    get fetchMethod() {\n        return this.#fetchMethod;\n    }\n    /**\n     * {@link LRUCache.OptionsBase.dispose} (read-only)\n     */\n    get dispose() {\n        return this.#dispose;\n    }\n    /**\n     * {@link LRUCache.OptionsBase.disposeAfter} (read-only)\n     */\n    get disposeAfter() {\n        return this.#disposeAfter;\n    }\n    constructor(options) {\n        const { max = 0, ttl, ttlResolution = 1, ttlAutopurge, updateAgeOnGet, updateAgeOnHas, allowStale, dispose, disposeAfter, noDisposeOnSet, noUpdateTTL, maxSize = 0, maxEntrySize = 0, sizeCalculation, fetchMethod, noDeleteOnFetchRejection, noDeleteOnStaleGet, allowStaleOnFetchRejection, allowStaleOnFetchAbort, ignoreFetchAbort, } = options;\n        if (max !== 0 && !isPosInt(max)) {\n            throw new TypeError('max option must be a nonnegative integer');\n        }\n        const UintArray = max ? getUintArray(max) : Array;\n        if (!UintArray) {\n            throw new Error('invalid max value: ' + max);\n        }\n        this.#max = max;\n        this.#maxSize = maxSize;\n        this.maxEntrySize = maxEntrySize || this.#maxSize;\n        this.sizeCalculation = sizeCalculation;\n        if (this.sizeCalculation) {\n            if (!this.#maxSize && !this.maxEntrySize) {\n                throw new TypeError('cannot set sizeCalculation without setting maxSize or maxEntrySize');\n            }\n            if (typeof this.sizeCalculation !== 'function') {\n                throw new TypeError('sizeCalculation set to non-function');\n            }\n        }\n        if (fetchMethod !== undefined &&\n            typeof fetchMethod !== 'function') {\n            throw new TypeError('fetchMethod must be a function if specified');\n        }\n        this.#fetchMethod = fetchMethod;\n        this.#hasFetchMethod = !!fetchMethod;\n        this.#keyMap = new Map();\n        this.#keyList = new Array(max).fill(undefined);\n        this.#valList = new Array(max).fill(undefined);\n        this.#next = new UintArray(max);\n        this.#prev = new UintArray(max);\n        this.#head = 0;\n        this.#tail = 0;\n        this.#free = Stack.create(max);\n        this.#size = 0;\n        this.#calculatedSize = 0;\n        if (typeof dispose === 'function') {\n            this.#dispose = dispose;\n        }\n        if (typeof disposeAfter === 'function') {\n            this.#disposeAfter = disposeAfter;\n            this.#disposed = [];\n        }\n        else {\n            this.#disposeAfter = undefined;\n            this.#disposed = undefined;\n        }\n        this.#hasDispose = !!this.#dispose;\n        this.#hasDisposeAfter = !!this.#disposeAfter;\n        this.noDisposeOnSet = !!noDisposeOnSet;\n        this.noUpdateTTL = !!noUpdateTTL;\n        this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection;\n        this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection;\n        this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort;\n        this.ignoreFetchAbort = !!ignoreFetchAbort;\n        // NB: maxEntrySize is set to maxSize if it's set\n        if (this.maxEntrySize !== 0) {\n            if (this.#maxSize !== 0) {\n                if (!isPosInt(this.#maxSize)) {\n                    throw new TypeError('maxSize must be a positive integer if specified');\n                }\n            }\n            if (!isPosInt(this.maxEntrySize)) {\n                throw new TypeError('maxEntrySize must be a positive integer if specified');\n            }\n            this.#initializeSizeTracking();\n        }\n        this.allowStale = !!allowStale;\n        this.noDeleteOnStaleGet = !!noDeleteOnStaleGet;\n        this.updateAgeOnGet = !!updateAgeOnGet;\n        this.updateAgeOnHas = !!updateAgeOnHas;\n        this.ttlResolution =\n            isPosInt(ttlResolution) || ttlResolution === 0\n                ? ttlResolution\n                : 1;\n        this.ttlAutopurge = !!ttlAutopurge;\n        this.ttl = ttl || 0;\n        if (this.ttl) {\n            if (!isPosInt(this.ttl)) {\n                throw new TypeError('ttl must be a positive integer if specified');\n            }\n            this.#initializeTTLTracking();\n        }\n        // do not allow completely unbounded caches\n        if (this.#max === 0 && this.ttl === 0 && this.#maxSize === 0) {\n            throw new TypeError('At least one of max, maxSize, or ttl is required');\n        }\n        if (!this.ttlAutopurge && !this.#max && !this.#maxSize) {\n            const code = 'LRU_CACHE_UNBOUNDED';\n            if (shouldWarn(code)) {\n                warned.add(code);\n                const msg = 'TTL caching without ttlAutopurge, max, or maxSize can ' +\n                    'result in unbounded memory consumption.';\n                emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache);\n            }\n        }\n    }\n    /**\n     * Return the remaining TTL time for a given entry key\n     */\n    getRemainingTTL(key) {\n        return this.#keyMap.has(key) ? Infinity : 0;\n    }\n    #initializeTTLTracking() {\n        const ttls = new ZeroArray(this.#max);\n        const starts = new ZeroArray(this.#max);\n        this.#ttls = ttls;\n        this.#starts = starts;\n        this.#setItemTTL = (index, ttl, start = perf.now()) => {\n            starts[index] = ttl !== 0 ? start : 0;\n            ttls[index] = ttl;\n            if (ttl !== 0 && this.ttlAutopurge) {\n                const t = setTimeout(() => {\n                    if (this.#isStale(index)) {\n                        this.delete(this.#keyList[index]);\n                    }\n                }, ttl + 1);\n                // unref() not supported on all platforms\n                /* c8 ignore start */\n                if (t.unref) {\n                    t.unref();\n                }\n                /* c8 ignore stop */\n            }\n        };\n        this.#updateItemAge = index => {\n            starts[index] = ttls[index] !== 0 ? perf.now() : 0;\n        };\n        this.#statusTTL = (status, index) => {\n            if (ttls[index]) {\n                const ttl = ttls[index];\n                const start = starts[index];\n                /* c8 ignore next */\n                if (!ttl || !start)\n                    return;\n                status.ttl = ttl;\n                status.start = start;\n                status.now = cachedNow || getNow();\n                const age = status.now - start;\n                status.remainingTTL = ttl - age;\n            }\n        };\n        // debounce calls to perf.now() to 1s so we're not hitting\n        // that costly call repeatedly.\n        let cachedNow = 0;\n        const getNow = () => {\n            const n = perf.now();\n            if (this.ttlResolution > 0) {\n                cachedNow = n;\n                const t = setTimeout(() => (cachedNow = 0), this.ttlResolution);\n                // not available on all platforms\n                /* c8 ignore start */\n                if (t.unref) {\n                    t.unref();\n                }\n                /* c8 ignore stop */\n            }\n            return n;\n        };\n        this.getRemainingTTL = key => {\n            const index = this.#keyMap.get(key);\n            if (index === undefined) {\n                return 0;\n            }\n            const ttl = ttls[index];\n            const start = starts[index];\n            if (!ttl || !start) {\n                return Infinity;\n            }\n            const age = (cachedNow || getNow()) - start;\n            return ttl - age;\n        };\n        this.#isStale = index => {\n            const s = starts[index];\n            const t = ttls[index];\n            return !!t && !!s && (cachedNow || getNow()) - s > t;\n        };\n    }\n    // conditionally set private methods related to TTL\n    #updateItemAge = () => { };\n    #statusTTL = () => { };\n    #setItemTTL = () => { };\n    /* c8 ignore stop */\n    #isStale = () => false;\n    #initializeSizeTracking() {\n        const sizes = new ZeroArray(this.#max);\n        this.#calculatedSize = 0;\n        this.#sizes = sizes;\n        this.#removeItemSize = index => {\n            this.#calculatedSize -= sizes[index];\n            sizes[index] = 0;\n        };\n        this.#requireSize = (k, v, size, sizeCalculation) => {\n            // provisionally accept background fetches.\n            // actual value size will be checked when they return.\n            if (this.#isBackgroundFetch(v)) {\n                return 0;\n            }\n            if (!isPosInt(size)) {\n                if (sizeCalculation) {\n                    if (typeof sizeCalculation !== 'function') {\n                        throw new TypeError('sizeCalculation must be a function');\n                    }\n                    size = sizeCalculation(v, k);\n                    if (!isPosInt(size)) {\n                        throw new TypeError('sizeCalculation return invalid (expect positive integer)');\n                    }\n                }\n                else {\n                    throw new TypeError('invalid size value (must be positive integer). ' +\n                        'When maxSize or maxEntrySize is used, sizeCalculation ' +\n                        'or size must be set.');\n                }\n            }\n            return size;\n        };\n        this.#addItemSize = (index, size, status) => {\n            sizes[index] = size;\n            if (this.#maxSize) {\n                const maxSize = this.#maxSize - sizes[index];\n                while (this.#calculatedSize > maxSize) {\n                    this.#evict(true);\n                }\n            }\n            this.#calculatedSize += sizes[index];\n            if (status) {\n                status.entrySize = size;\n                status.totalCalculatedSize = this.#calculatedSize;\n            }\n        };\n    }\n    #removeItemSize = _i => { };\n    #addItemSize = (_i, _s, _st) => { };\n    #requireSize = (_k, _v, size, sizeCalculation) => {\n        if (size || sizeCalculation) {\n            throw new TypeError('cannot set size without setting maxSize or maxEntrySize on cache');\n        }\n        return 0;\n    };\n    *#indexes({ allowStale = this.allowStale } = {}) {\n        if (this.#size) {\n            for (let i = this.#tail; true;) {\n                if (!this.#isValidIndex(i)) {\n                    break;\n                }\n                if (allowStale || !this.#isStale(i)) {\n                    yield i;\n                }\n                if (i === this.#head) {\n                    break;\n                }\n                else {\n                    i = this.#prev[i];\n                }\n            }\n        }\n    }\n    *#rindexes({ allowStale = this.allowStale } = {}) {\n        if (this.#size) {\n            for (let i = this.#head; true;) {\n                if (!this.#isValidIndex(i)) {\n                    break;\n                }\n                if (allowStale || !this.#isStale(i)) {\n                    yield i;\n                }\n                if (i === this.#tail) {\n                    break;\n                }\n                else {\n                    i = this.#next[i];\n                }\n            }\n        }\n    }\n    #isValidIndex(index) {\n        return (index !== undefined &&\n            this.#keyMap.get(this.#keyList[index]) === index);\n    }\n    /**\n     * Return a generator yielding `[key, value]` pairs,\n     * in order from most recently used to least recently used.\n     */\n    *entries() {\n        for (const i of this.#indexes()) {\n            if (this.#valList[i] !== undefined &&\n                this.#keyList[i] !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield [this.#keyList[i], this.#valList[i]];\n            }\n        }\n    }\n    /**\n     * Inverse order version of {@link LRUCache.entries}\n     *\n     * Return a generator yielding `[key, value]` pairs,\n     * in order from least recently used to most recently used.\n     */\n    *rentries() {\n        for (const i of this.#rindexes()) {\n            if (this.#valList[i] !== undefined &&\n                this.#keyList[i] !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield [this.#keyList[i], this.#valList[i]];\n            }\n        }\n    }\n    /**\n     * Return a generator yielding the keys in the cache,\n     * in order from most recently used to least recently used.\n     */\n    *keys() {\n        for (const i of this.#indexes()) {\n            const k = this.#keyList[i];\n            if (k !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield k;\n            }\n        }\n    }\n    /**\n     * Inverse order version of {@link LRUCache.keys}\n     *\n     * Return a generator yielding the keys in the cache,\n     * in order from least recently used to most recently used.\n     */\n    *rkeys() {\n        for (const i of this.#rindexes()) {\n            const k = this.#keyList[i];\n            if (k !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield k;\n            }\n        }\n    }\n    /**\n     * Return a generator yielding the values in the cache,\n     * in order from most recently used to least recently used.\n     */\n    *values() {\n        for (const i of this.#indexes()) {\n            const v = this.#valList[i];\n            if (v !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield this.#valList[i];\n            }\n        }\n    }\n    /**\n     * Inverse order version of {@link LRUCache.values}\n     *\n     * Return a generator yielding the values in the cache,\n     * in order from least recently used to most recently used.\n     */\n    *rvalues() {\n        for (const i of this.#rindexes()) {\n            const v = this.#valList[i];\n            if (v !== undefined &&\n                !this.#isBackgroundFetch(this.#valList[i])) {\n                yield this.#valList[i];\n            }\n        }\n    }\n    /**\n     * Iterating over the cache itself yields the same results as\n     * {@link LRUCache.entries}\n     */\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n    /**\n     * A String value that is used in the creation of the default string description of an object.\n     * Called by the built-in method Object.prototype.toString.\n     */\n    [Symbol.toStringTag] = 'LRUCache';\n    /**\n     * Find a value for which the supplied fn method returns a truthy value,\n     * similar to Array.find().  fn is called as fn(value, key, cache).\n     */\n    find(fn, getOptions = {}) {\n        for (const i of this.#indexes()) {\n            const v = this.#valList[i];\n            const value = this.#isBackgroundFetch(v)\n                ? v.__staleWhileFetching\n                : v;\n            if (value === undefined)\n                continue;\n            if (fn(value, this.#keyList[i], this)) {\n                return this.get(this.#keyList[i], getOptions);\n            }\n        }\n    }\n    /**\n     * Call the supplied function on each item in the cache, in order from\n     * most recently used to least recently used.  fn is called as\n     * fn(value, key, cache).  Does not update age or recenty of use.\n     * Does not iterate over stale values.\n     */\n    forEach(fn, thisp = this) {\n        for (const i of this.#indexes()) {\n            const v = this.#valList[i];\n            const value = this.#isBackgroundFetch(v)\n                ? v.__staleWhileFetching\n                : v;\n            if (value === undefined)\n                continue;\n            fn.call(thisp, value, this.#keyList[i], this);\n        }\n    }\n    /**\n     * The same as {@link LRUCache.forEach} but items are iterated over in\n     * reverse order.  (ie, less recently used items are iterated over first.)\n     */\n    rforEach(fn, thisp = this) {\n        for (const i of this.#rindexes()) {\n            const v = this.#valList[i];\n            const value = this.#isBackgroundFetch(v)\n                ? v.__staleWhileFetching\n                : v;\n            if (value === undefined)\n                continue;\n            fn.call(thisp, value, this.#keyList[i], this);\n        }\n    }\n    /**\n     * Delete any stale entries. Returns true if anything was removed,\n     * false otherwise.\n     */\n    purgeStale() {\n        let deleted = false;\n        for (const i of this.#rindexes({ allowStale: true })) {\n            if (this.#isStale(i)) {\n                this.delete(this.#keyList[i]);\n                deleted = true;\n            }\n        }\n        return deleted;\n    }\n    /**\n     * Get the extended info about a given entry, to get its value, size, and\n     * TTL info simultaneously. Like {@link LRUCache#dump}, but just for a\n     * single key. Always returns stale values, if their info is found in the\n     * cache, so be sure to check for expired TTLs if relevant.\n     */\n    info(key) {\n        const i = this.#keyMap.get(key);\n        if (i === undefined)\n            return undefined;\n        const v = this.#valList[i];\n        const value = this.#isBackgroundFetch(v)\n            ? v.__staleWhileFetching\n            : v;\n        if (value === undefined)\n            return undefined;\n        const entry = { value };\n        if (this.#ttls && this.#starts) {\n            const ttl = this.#ttls[i];\n            const start = this.#starts[i];\n            if (ttl && start) {\n                const remain = ttl - (perf.now() - start);\n                entry.ttl = remain;\n                entry.start = Date.now();\n            }\n        }\n        if (this.#sizes) {\n            entry.size = this.#sizes[i];\n        }\n        return entry;\n    }\n    /**\n     * Return an array of [key, {@link LRUCache.Entry}] tuples which can be\n     * passed to cache.load()\n     */\n    dump() {\n        const arr = [];\n        for (const i of this.#indexes({ allowStale: true })) {\n            const key = this.#keyList[i];\n            const v = this.#valList[i];\n            const value = this.#isBackgroundFetch(v)\n                ? v.__staleWhileFetching\n                : v;\n            if (value === undefined || key === undefined)\n                continue;\n            const entry = { value };\n            if (this.#ttls && this.#starts) {\n                entry.ttl = this.#ttls[i];\n                // always dump the start relative to a portable timestamp\n                // it's ok for this to be a bit slow, it's a rare operation.\n                const age = perf.now() - this.#starts[i];\n                entry.start = Math.floor(Date.now() - age);\n            }\n            if (this.#sizes) {\n                entry.size = this.#sizes[i];\n            }\n            arr.unshift([key, entry]);\n        }\n        return arr;\n    }\n    /**\n     * Reset the cache and load in the items in entries in the order listed.\n     * Note that the shape of the resulting cache may be different if the\n     * same options are not used in both caches.\n     */\n    load(arr) {\n        this.clear();\n        for (const [key, entry] of arr) {\n            if (entry.start) {\n                // entry.start is a portable timestamp, but we may be using\n                // node's performance.now(), so calculate the offset, so that\n                // we get the intended remaining TTL, no matter how long it's\n                // been on ice.\n                //\n                // it's ok for this to be a bit slow, it's a rare operation.\n                const age = Date.now() - entry.start;\n                entry.start = perf.now() - age;\n            }\n            this.set(key, entry.value, entry);\n        }\n    }\n    /**\n     * Add a value to the cache.\n     *\n     * Note: if `undefined` is specified as a value, this is an alias for\n     * {@link LRUCache#delete}\n     */\n    set(k, v, setOptions = {}) {\n        if (v === undefined) {\n            this.delete(k);\n            return this;\n        }\n        const { ttl = this.ttl, start, noDisposeOnSet = this.noDisposeOnSet, sizeCalculation = this.sizeCalculation, status, } = setOptions;\n        let { noUpdateTTL = this.noUpdateTTL } = setOptions;\n        const size = this.#requireSize(k, v, setOptions.size || 0, sizeCalculation);\n        // if the item doesn't fit, don't do anything\n        // NB: maxEntrySize set to maxSize by default\n        if (this.maxEntrySize && size > this.maxEntrySize) {\n            if (status) {\n                status.set = 'miss';\n                status.maxEntrySizeExceeded = true;\n            }\n            // have to delete, in case something is there already.\n            this.delete(k);\n            return this;\n        }\n        let index = this.#size === 0 ? undefined : this.#keyMap.get(k);\n        if (index === undefined) {\n            // addition\n            index = (this.#size === 0\n                ? this.#tail\n                : this.#free.length !== 0\n                    ? this.#free.pop()\n                    : this.#size === this.#max\n                        ? this.#evict(false)\n                        : this.#size);\n            this.#keyList[index] = k;\n            this.#valList[index] = v;\n            this.#keyMap.set(k, index);\n            this.#next[this.#tail] = index;\n            this.#prev[index] = this.#tail;\n            this.#tail = index;\n            this.#size++;\n            this.#addItemSize(index, size, status);\n            if (status)\n                status.set = 'add';\n            noUpdateTTL = false;\n        }\n        else {\n            // update\n            this.#moveToTail(index);\n            const oldVal = this.#valList[index];\n            if (v !== oldVal) {\n                if (this.#hasFetchMethod && this.#isBackgroundFetch(oldVal)) {\n                    oldVal.__abortController.abort(new Error('replaced'));\n                    const { __staleWhileFetching: s } = oldVal;\n                    if (s !== undefined && !noDisposeOnSet) {\n                        if (this.#hasDispose) {\n                            this.#dispose?.(s, k, 'set');\n                        }\n                        if (this.#hasDisposeAfter) {\n                            this.#disposed?.push([s, k, 'set']);\n                        }\n                    }\n                }\n                else if (!noDisposeOnSet) {\n                    if (this.#hasDispose) {\n                        this.#dispose?.(oldVal, k, 'set');\n                    }\n                    if (this.#hasDisposeAfter) {\n                        this.#disposed?.push([oldVal, k, 'set']);\n                    }\n                }\n                this.#removeItemSize(index);\n                this.#addItemSize(index, size, status);\n                this.#valList[index] = v;\n                if (status) {\n                    status.set = 'replace';\n                    const oldValue = oldVal && this.#isBackgroundFetch(oldVal)\n                        ? oldVal.__staleWhileFetching\n                        : oldVal;\n                    if (oldValue !== undefined)\n                        status.oldValue = oldValue;\n                }\n            }\n            else if (status) {\n                status.set = 'update';\n            }\n        }\n        if (ttl !== 0 && !this.#ttls) {\n            this.#initializeTTLTracking();\n        }\n        if (this.#ttls) {\n            if (!noUpdateTTL) {\n                this.#setItemTTL(index, ttl, start);\n            }\n            if (status)\n                this.#statusTTL(status, index);\n        }\n        if (!noDisposeOnSet && this.#hasDisposeAfter && this.#disposed) {\n            const dt = this.#disposed;\n            let task;\n            while ((task = dt?.shift())) {\n                this.#disposeAfter?.(...task);\n            }\n        }\n        return this;\n    }\n    /**\n     * Evict the least recently used item, returning its value or\n     * `undefined` if cache is empty.\n     */\n    pop() {\n        try {\n            while (this.#size) {\n                const val = this.#valList[this.#head];\n                this.#evict(true);\n                if (this.#isBackgroundFetch(val)) {\n                    if (val.__staleWhileFetching) {\n                        return val.__staleWhileFetching;\n                    }\n                }\n                else if (val !== undefined) {\n                    return val;\n                }\n            }\n        }\n        finally {\n            if (this.#hasDisposeAfter && this.#disposed) {\n                const dt = this.#disposed;\n                let task;\n                while ((task = dt?.shift())) {\n                    this.#disposeAfter?.(...task);\n                }\n            }\n        }\n    }\n    #evict(free) {\n        const head = this.#head;\n        const k = this.#keyList[head];\n        const v = this.#valList[head];\n        if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) {\n            v.__abortController.abort(new Error('evicted'));\n        }\n        else if (this.#hasDispose || this.#hasDisposeAfter) {\n            if (this.#hasDispose) {\n                this.#dispose?.(v, k, 'evict');\n            }\n            if (this.#hasDisposeAfter) {\n                this.#disposed?.push([v, k, 'evict']);\n            }\n        }\n        this.#removeItemSize(head);\n        // if we aren't about to use the index, then null these out\n        if (free) {\n            this.#keyList[head] = undefined;\n            this.#valList[head] = undefined;\n            this.#free.push(head);\n        }\n        if (this.#size === 1) {\n            this.#head = this.#tail = 0;\n            this.#free.length = 0;\n        }\n        else {\n            this.#head = this.#next[head];\n        }\n        this.#keyMap.delete(k);\n        this.#size--;\n        return head;\n    }\n    /**\n     * Check if a key is in the cache, without updating the recency of use.\n     * Will return false if the item is stale, even though it is technically\n     * in the cache.\n     *\n     * Will not update item age unless\n     * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.\n     */\n    has(k, hasOptions = {}) {\n        const { updateAgeOnHas = this.updateAgeOnHas, status } = hasOptions;\n        const index = this.#keyMap.get(k);\n        if (index !== undefined) {\n            const v = this.#valList[index];\n            if (this.#isBackgroundFetch(v) &&\n                v.__staleWhileFetching === undefined) {\n                return false;\n            }\n            if (!this.#isStale(index)) {\n                if (updateAgeOnHas) {\n                    this.#updateItemAge(index);\n                }\n                if (status) {\n                    status.has = 'hit';\n                    this.#statusTTL(status, index);\n                }\n                return true;\n            }\n            else if (status) {\n                status.has = 'stale';\n                this.#statusTTL(status, index);\n            }\n        }\n        else if (status) {\n            status.has = 'miss';\n        }\n        return false;\n    }\n    /**\n     * Like {@link LRUCache#get} but doesn't update recency or delete stale\n     * items.\n     *\n     * Returns `undefined` if the item is stale, unless\n     * {@link LRUCache.OptionsBase.allowStale} is set.\n     */\n    peek(k, peekOptions = {}) {\n        const { allowStale = this.allowStale } = peekOptions;\n        const index = this.#keyMap.get(k);\n        if (index === undefined ||\n            (!allowStale && this.#isStale(index))) {\n            return;\n        }\n        const v = this.#valList[index];\n        // either stale and allowed, or forcing a refresh of non-stale value\n        return this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;\n    }\n    #backgroundFetch(k, index, options, context) {\n        const v = index === undefined ? undefined : this.#valList[index];\n        if (this.#isBackgroundFetch(v)) {\n            return v;\n        }\n        const ac = new AC();\n        const { signal } = options;\n        // when/if our AC signals, then stop listening to theirs.\n        signal?.addEventListener('abort', () => ac.abort(signal.reason), {\n            signal: ac.signal,\n        });\n        const fetchOpts = {\n            signal: ac.signal,\n            options,\n            context,\n        };\n        const cb = (v, updateCache = false) => {\n            const { aborted } = ac.signal;\n            const ignoreAbort = options.ignoreFetchAbort && v !== undefined;\n            if (options.status) {\n                if (aborted && !updateCache) {\n                    options.status.fetchAborted = true;\n                    options.status.fetchError = ac.signal.reason;\n                    if (ignoreAbort)\n                        options.status.fetchAbortIgnored = true;\n                }\n                else {\n                    options.status.fetchResolved = true;\n                }\n            }\n            if (aborted && !ignoreAbort && !updateCache) {\n                return fetchFail(ac.signal.reason);\n            }\n            // either we didn't abort, and are still here, or we did, and ignored\n            const bf = p;\n            if (this.#valList[index] === p) {\n                if (v === undefined) {\n                    if (bf.__staleWhileFetching) {\n                        this.#valList[index] = bf.__staleWhileFetching;\n                    }\n                    else {\n                        this.delete(k);\n                    }\n                }\n                else {\n                    if (options.status)\n                        options.status.fetchUpdated = true;\n                    this.set(k, v, fetchOpts.options);\n                }\n            }\n            return v;\n        };\n        const eb = (er) => {\n            if (options.status) {\n                options.status.fetchRejected = true;\n                options.status.fetchError = er;\n            }\n            return fetchFail(er);\n        };\n        const fetchFail = (er) => {\n            const { aborted } = ac.signal;\n            const allowStaleAborted = aborted && options.allowStaleOnFetchAbort;\n            const allowStale = allowStaleAborted || options.allowStaleOnFetchRejection;\n            const noDelete = allowStale || options.noDeleteOnFetchRejection;\n            const bf = p;\n            if (this.#valList[index] === p) {\n                // if we allow stale on fetch rejections, then we need to ensure that\n                // the stale value is not removed from the cache when the fetch fails.\n                const del = !noDelete || bf.__staleWhileFetching === undefined;\n                if (del) {\n                    this.delete(k);\n                }\n                else if (!allowStaleAborted) {\n                    // still replace the *promise* with the stale value,\n                    // since we are done with the promise at this point.\n                    // leave it untouched if we're still waiting for an\n                    // aborted background fetch that hasn't yet returned.\n                    this.#valList[index] = bf.__staleWhileFetching;\n                }\n            }\n            if (allowStale) {\n                if (options.status && bf.__staleWhileFetching !== undefined) {\n                    options.status.returnedStale = true;\n                }\n                return bf.__staleWhileFetching;\n            }\n            else if (bf.__returned === bf) {\n                throw er;\n            }\n        };\n        const pcall = (res, rej) => {\n            const fmp = this.#fetchMethod?.(k, v, fetchOpts);\n            if (fmp && fmp instanceof Promise) {\n                fmp.then(v => res(v === undefined ? undefined : v), rej);\n            }\n            // ignored, we go until we finish, regardless.\n            // defer check until we are actually aborting,\n            // so fetchMethod can override.\n            ac.signal.addEventListener('abort', () => {\n                if (!options.ignoreFetchAbort ||\n                    options.allowStaleOnFetchAbort) {\n                    res(undefined);\n                    // when it eventually resolves, update the cache.\n                    if (options.allowStaleOnFetchAbort) {\n                        res = v => cb(v, true);\n                    }\n                }\n            });\n        };\n        if (options.status)\n            options.status.fetchDispatched = true;\n        const p = new Promise(pcall).then(cb, eb);\n        const bf = Object.assign(p, {\n            __abortController: ac,\n            __staleWhileFetching: v,\n            __returned: undefined,\n        });\n        if (index === undefined) {\n            // internal, don't expose status.\n            this.set(k, bf, { ...fetchOpts.options, status: undefined });\n            index = this.#keyMap.get(k);\n        }\n        else {\n            this.#valList[index] = bf;\n        }\n        return bf;\n    }\n    #isBackgroundFetch(p) {\n        if (!this.#hasFetchMethod)\n            return false;\n        const b = p;\n        return (!!b &&\n            b instanceof Promise &&\n            b.hasOwnProperty('__staleWhileFetching') &&\n            b.__abortController instanceof AC);\n    }\n    async fetch(k, fetchOptions = {}) {\n        const { \n        // get options\n        allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, \n        // set options\n        ttl = this.ttl, noDisposeOnSet = this.noDisposeOnSet, size = 0, sizeCalculation = this.sizeCalculation, noUpdateTTL = this.noUpdateTTL, \n        // fetch exclusive options\n        noDeleteOnFetchRejection = this.noDeleteOnFetchRejection, allowStaleOnFetchRejection = this.allowStaleOnFetchRejection, ignoreFetchAbort = this.ignoreFetchAbort, allowStaleOnFetchAbort = this.allowStaleOnFetchAbort, context, forceRefresh = false, status, signal, } = fetchOptions;\n        if (!this.#hasFetchMethod) {\n            if (status)\n                status.fetch = 'get';\n            return this.get(k, {\n                allowStale,\n                updateAgeOnGet,\n                noDeleteOnStaleGet,\n                status,\n            });\n        }\n        const options = {\n            allowStale,\n            updateAgeOnGet,\n            noDeleteOnStaleGet,\n            ttl,\n            noDisposeOnSet,\n            size,\n            sizeCalculation,\n            noUpdateTTL,\n            noDeleteOnFetchRejection,\n            allowStaleOnFetchRejection,\n            allowStaleOnFetchAbort,\n            ignoreFetchAbort,\n            status,\n            signal,\n        };\n        let index = this.#keyMap.get(k);\n        if (index === undefined) {\n            if (status)\n                status.fetch = 'miss';\n            const p = this.#backgroundFetch(k, index, options, context);\n            return (p.__returned = p);\n        }\n        else {\n            // in cache, maybe already fetching\n            const v = this.#valList[index];\n            if (this.#isBackgroundFetch(v)) {\n                const stale = allowStale && v.__staleWhileFetching !== undefined;\n                if (status) {\n                    status.fetch = 'inflight';\n                    if (stale)\n                        status.returnedStale = true;\n                }\n                return stale ? v.__staleWhileFetching : (v.__returned = v);\n            }\n            // if we force a refresh, that means do NOT serve the cached value,\n            // unless we are already in the process of refreshing the cache.\n            const isStale = this.#isStale(index);\n            if (!forceRefresh && !isStale) {\n                if (status)\n                    status.fetch = 'hit';\n                this.#moveToTail(index);\n                if (updateAgeOnGet) {\n                    this.#updateItemAge(index);\n                }\n                if (status)\n                    this.#statusTTL(status, index);\n                return v;\n            }\n            // ok, it is stale or a forced refresh, and not already fetching.\n            // refresh the cache.\n            const p = this.#backgroundFetch(k, index, options, context);\n            const hasStale = p.__staleWhileFetching !== undefined;\n            const staleVal = hasStale && allowStale;\n            if (status) {\n                status.fetch = isStale ? 'stale' : 'refresh';\n                if (staleVal && isStale)\n                    status.returnedStale = true;\n            }\n            return staleVal ? p.__staleWhileFetching : (p.__returned = p);\n        }\n    }\n    /**\n     * Return a value from the cache. Will update the recency of the cache\n     * entry found.\n     *\n     * If the key is not found, get() will return `undefined`.\n     */\n    get(k, getOptions = {}) {\n        const { allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, status, } = getOptions;\n        const index = this.#keyMap.get(k);\n        if (index !== undefined) {\n            const value = this.#valList[index];\n            const fetching = this.#isBackgroundFetch(value);\n            if (status)\n                this.#statusTTL(status, index);\n            if (this.#isStale(index)) {\n                if (status)\n                    status.get = 'stale';\n                // delete only if not an in-flight background fetch\n                if (!fetching) {\n                    if (!noDeleteOnStaleGet) {\n                        this.delete(k);\n                    }\n                    if (status && allowStale)\n                        status.returnedStale = true;\n                    return allowStale ? value : undefined;\n                }\n                else {\n                    if (status &&\n                        allowStale &&\n                        value.__staleWhileFetching !== undefined) {\n                        status.returnedStale = true;\n                    }\n                    return allowStale ? value.__staleWhileFetching : undefined;\n                }\n            }\n            else {\n                if (status)\n                    status.get = 'hit';\n                // if we're currently fetching it, we don't actually have it yet\n                // it's not stale, which means this isn't a staleWhileRefetching.\n                // If it's not stale, and fetching, AND has a __staleWhileFetching\n                // value, then that means the user fetched with {forceRefresh:true},\n                // so it's safe to return that value.\n                if (fetching) {\n                    return value.__staleWhileFetching;\n                }\n                this.#moveToTail(index);\n                if (updateAgeOnGet) {\n                    this.#updateItemAge(index);\n                }\n                return value;\n            }\n        }\n        else if (status) {\n            status.get = 'miss';\n        }\n    }\n    #connect(p, n) {\n        this.#prev[n] = p;\n        this.#next[p] = n;\n    }\n    #moveToTail(index) {\n        // if tail already, nothing to do\n        // if head, move head to next[index]\n        // else\n        //   move next[prev[index]] to next[index] (head has no prev)\n        //   move prev[next[index]] to prev[index]\n        // prev[index] = tail\n        // next[tail] = index\n        // tail = index\n        if (index !== this.#tail) {\n            if (index === this.#head) {\n                this.#head = this.#next[index];\n            }\n            else {\n                this.#connect(this.#prev[index], this.#next[index]);\n            }\n            this.#connect(this.#tail, index);\n            this.#tail = index;\n        }\n    }\n    /**\n     * Deletes a key out of the cache.\n     * Returns true if the key was deleted, false otherwise.\n     */\n    delete(k) {\n        let deleted = false;\n        if (this.#size !== 0) {\n            const index = this.#keyMap.get(k);\n            if (index !== undefined) {\n                deleted = true;\n                if (this.#size === 1) {\n                    this.clear();\n                }\n                else {\n                    this.#removeItemSize(index);\n                    const v = this.#valList[index];\n                    if (this.#isBackgroundFetch(v)) {\n                        v.__abortController.abort(new Error('deleted'));\n                    }\n                    else if (this.#hasDispose || this.#hasDisposeAfter) {\n                        if (this.#hasDispose) {\n                            this.#dispose?.(v, k, 'delete');\n                        }\n                        if (this.#hasDisposeAfter) {\n                            this.#disposed?.push([v, k, 'delete']);\n                        }\n                    }\n                    this.#keyMap.delete(k);\n                    this.#keyList[index] = undefined;\n                    this.#valList[index] = undefined;\n                    if (index === this.#tail) {\n                        this.#tail = this.#prev[index];\n                    }\n                    else if (index === this.#head) {\n                        this.#head = this.#next[index];\n                    }\n                    else {\n                        const pi = this.#prev[index];\n                        this.#next[pi] = this.#next[index];\n                        const ni = this.#next[index];\n                        this.#prev[ni] = this.#prev[index];\n                    }\n                    this.#size--;\n                    this.#free.push(index);\n                }\n            }\n        }\n        if (this.#hasDisposeAfter && this.#disposed?.length) {\n            const dt = this.#disposed;\n            let task;\n            while ((task = dt?.shift())) {\n                this.#disposeAfter?.(...task);\n            }\n        }\n        return deleted;\n    }\n    /**\n     * Clear the cache entirely, throwing away all values.\n     */\n    clear() {\n        for (const index of this.#rindexes({ allowStale: true })) {\n            const v = this.#valList[index];\n            if (this.#isBackgroundFetch(v)) {\n                v.__abortController.abort(new Error('deleted'));\n            }\n            else {\n                const k = this.#keyList[index];\n                if (this.#hasDispose) {\n                    this.#dispose?.(v, k, 'delete');\n                }\n                if (this.#hasDisposeAfter) {\n                    this.#disposed?.push([v, k, 'delete']);\n                }\n            }\n        }\n        this.#keyMap.clear();\n        this.#valList.fill(undefined);\n        this.#keyList.fill(undefined);\n        if (this.#ttls && this.#starts) {\n            this.#ttls.fill(0);\n            this.#starts.fill(0);\n        }\n        if (this.#sizes) {\n            this.#sizes.fill(0);\n        }\n        this.#head = 0;\n        this.#tail = 0;\n        this.#free.length = 0;\n        this.#calculatedSize = 0;\n        this.#size = 0;\n        if (this.#hasDisposeAfter && this.#disposed) {\n            const dt = this.#disposed;\n            let task;\n            while ((task = dt?.shift())) {\n                this.#disposeAfter?.(...task);\n            }\n        }\n    }\n}\nexports.LRUCache = LRUCache;\n//# sourceMappingURL=index.js.map","//     Underscore.js 1.13.6\n//     https://underscorejs.org\n//     (c) 2009-2022 Jeremy Ashkenas, Julian Gonggrijp, and DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n// Current version.\nvar VERSION = '1.13.6';\n\n// Establish the root object, `window` (`self`) in the browser, `global`\n// on the server, or `this` in some virtual machines. We use `self`\n// instead of `window` for `WebWorker` support.\nvar root = (typeof self == 'object' && self.self === self && self) ||\n          (typeof global == 'object' && global.global === global && global) ||\n          Function('return this')() ||\n          {};\n\n// Save bytes in the minified (but not gzipped) version:\nvar ArrayProto = Array.prototype, ObjProto = Object.prototype;\nvar SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\n\n// Create quick reference variables for speed access to core prototypes.\nvar push = ArrayProto.push,\n    slice = ArrayProto.slice,\n    toString = ObjProto.toString,\n    hasOwnProperty = ObjProto.hasOwnProperty;\n\n// Modern feature detection.\nvar supportsArrayBuffer = typeof ArrayBuffer !== 'undefined',\n    supportsDataView = typeof DataView !== 'undefined';\n\n// All **ECMAScript 5+** native function implementations that we hope to use\n// are declared here.\nvar nativeIsArray = Array.isArray,\n    nativeKeys = Object.keys,\n    nativeCreate = Object.create,\n    nativeIsView = supportsArrayBuffer && ArrayBuffer.isView;\n\n// Create references to these builtin functions because we override them.\nvar _isNaN = isNaN,\n    _isFinite = isFinite;\n\n// Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\nvar hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\nvar nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n  'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n// The largest integer that can be represented exactly.\nvar MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n\n// Some functions take a variable number of arguments, or a few expected\n// arguments at the beginning and then a variable number of values to operate\n// on. This helper accumulates all remaining arguments past the function’s\n// argument length (or an explicit `startIndex`), into an array that becomes\n// the last argument. Similar to ES6’s \"rest parameter\".\nfunction restArguments(func, startIndex) {\n  startIndex = startIndex == null ? func.length - 1 : +startIndex;\n  return function() {\n    var length = Math.max(arguments.length - startIndex, 0),\n        rest = Array(length),\n        index = 0;\n    for (; index < length; index++) {\n      rest[index] = arguments[index + startIndex];\n    }\n    switch (startIndex) {\n      case 0: return func.call(this, rest);\n      case 1: return func.call(this, arguments[0], rest);\n      case 2: return func.call(this, arguments[0], arguments[1], rest);\n    }\n    var args = Array(startIndex + 1);\n    for (index = 0; index < startIndex; index++) {\n      args[index] = arguments[index];\n    }\n    args[startIndex] = rest;\n    return func.apply(this, args);\n  };\n}\n\n// Is a given variable an object?\nfunction isObject(obj) {\n  var type = typeof obj;\n  return type === 'function' || (type === 'object' && !!obj);\n}\n\n// Is a given value equal to null?\nfunction isNull(obj) {\n  return obj === null;\n}\n\n// Is a given variable undefined?\nfunction isUndefined(obj) {\n  return obj === void 0;\n}\n\n// Is a given value a boolean?\nfunction isBoolean(obj) {\n  return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n}\n\n// Is a given value a DOM element?\nfunction isElement(obj) {\n  return !!(obj && obj.nodeType === 1);\n}\n\n// Internal function for creating a `toString`-based type tester.\nfunction tagTester(name) {\n  var tag = '[object ' + name + ']';\n  return function(obj) {\n    return toString.call(obj) === tag;\n  };\n}\n\nvar isString = tagTester('String');\n\nvar isNumber = tagTester('Number');\n\nvar isDate = tagTester('Date');\n\nvar isRegExp = tagTester('RegExp');\n\nvar isError = tagTester('Error');\n\nvar isSymbol = tagTester('Symbol');\n\nvar isArrayBuffer = tagTester('ArrayBuffer');\n\nvar isFunction = tagTester('Function');\n\n// Optimize `isFunction` if appropriate. Work around some `typeof` bugs in old\n// v8, IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).\nvar nodelist = root.document && root.document.childNodes;\nif (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {\n  isFunction = function(obj) {\n    return typeof obj == 'function' || false;\n  };\n}\n\nvar isFunction$1 = isFunction;\n\nvar hasObjectTag = tagTester('Object');\n\n// In IE 10 - Edge 13, `DataView` has string tag `'[object Object]'`.\n// In IE 11, the most common among them, this problem also applies to\n// `Map`, `WeakMap` and `Set`.\nvar hasStringTagBug = (\n      supportsDataView && hasObjectTag(new DataView(new ArrayBuffer(8)))\n    ),\n    isIE11 = (typeof Map !== 'undefined' && hasObjectTag(new Map));\n\nvar isDataView = tagTester('DataView');\n\n// In IE 10 - Edge 13, we need a different heuristic\n// to determine whether an object is a `DataView`.\nfunction ie10IsDataView(obj) {\n  return obj != null && isFunction$1(obj.getInt8) && isArrayBuffer(obj.buffer);\n}\n\nvar isDataView$1 = (hasStringTagBug ? ie10IsDataView : isDataView);\n\n// Is a given value an array?\n// Delegates to ECMA5's native `Array.isArray`.\nvar isArray = nativeIsArray || tagTester('Array');\n\n// Internal function to check whether `key` is an own property name of `obj`.\nfunction has$1(obj, key) {\n  return obj != null && hasOwnProperty.call(obj, key);\n}\n\nvar isArguments = tagTester('Arguments');\n\n// Define a fallback version of the method in browsers (ahem, IE < 9), where\n// there isn't any inspectable \"Arguments\" type.\n(function() {\n  if (!isArguments(arguments)) {\n    isArguments = function(obj) {\n      return has$1(obj, 'callee');\n    };\n  }\n}());\n\nvar isArguments$1 = isArguments;\n\n// Is a given object a finite number?\nfunction isFinite$1(obj) {\n  return !isSymbol(obj) && _isFinite(obj) && !isNaN(parseFloat(obj));\n}\n\n// Is the given value `NaN`?\nfunction isNaN$1(obj) {\n  return isNumber(obj) && _isNaN(obj);\n}\n\n// Predicate-generating function. Often useful outside of Underscore.\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\n// Common internal logic for `isArrayLike` and `isBufferLike`.\nfunction createSizePropertyCheck(getSizeProperty) {\n  return function(collection) {\n    var sizeProperty = getSizeProperty(collection);\n    return typeof sizeProperty == 'number' && sizeProperty >= 0 && sizeProperty <= MAX_ARRAY_INDEX;\n  }\n}\n\n// Internal helper to generate a function to obtain property `key` from `obj`.\nfunction shallowProperty(key) {\n  return function(obj) {\n    return obj == null ? void 0 : obj[key];\n  };\n}\n\n// Internal helper to obtain the `byteLength` property of an object.\nvar getByteLength = shallowProperty('byteLength');\n\n// Internal helper to determine whether we should spend extensive checks against\n// `ArrayBuffer` et al.\nvar isBufferLike = createSizePropertyCheck(getByteLength);\n\n// Is a given value a typed array?\nvar typedArrayPattern = /\\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\\]/;\nfunction isTypedArray(obj) {\n  // `ArrayBuffer.isView` is the most future-proof, so use it when available.\n  // Otherwise, fall back on the above regular expression.\n  return nativeIsView ? (nativeIsView(obj) && !isDataView$1(obj)) :\n                isBufferLike(obj) && typedArrayPattern.test(toString.call(obj));\n}\n\nvar isTypedArray$1 = supportsArrayBuffer ? isTypedArray : constant(false);\n\n// Internal helper to obtain the `length` property of an object.\nvar getLength = shallowProperty('length');\n\n// Internal helper to create a simple lookup structure.\n// `collectNonEnumProps` used to depend on `_.contains`, but this led to\n// circular imports. `emulatedSet` is a one-off solution that only works for\n// arrays of strings.\nfunction emulatedSet(keys) {\n  var hash = {};\n  for (var l = keys.length, i = 0; i < l; ++i) hash[keys[i]] = true;\n  return {\n    contains: function(key) { return hash[key] === true; },\n    push: function(key) {\n      hash[key] = true;\n      return keys.push(key);\n    }\n  };\n}\n\n// Internal helper. Checks `keys` for the presence of keys in IE < 9 that won't\n// be iterated by `for key in ...` and thus missed. Extends `keys` in place if\n// needed.\nfunction collectNonEnumProps(obj, keys) {\n  keys = emulatedSet(keys);\n  var nonEnumIdx = nonEnumerableProps.length;\n  var constructor = obj.constructor;\n  var proto = (isFunction$1(constructor) && constructor.prototype) || ObjProto;\n\n  // Constructor is a special case.\n  var prop = 'constructor';\n  if (has$1(obj, prop) && !keys.contains(prop)) keys.push(prop);\n\n  while (nonEnumIdx--) {\n    prop = nonEnumerableProps[nonEnumIdx];\n    if (prop in obj && obj[prop] !== proto[prop] && !keys.contains(prop)) {\n      keys.push(prop);\n    }\n  }\n}\n\n// Retrieve the names of an object's own properties.\n// Delegates to **ECMAScript 5**'s native `Object.keys`.\nfunction keys(obj) {\n  if (!isObject(obj)) return [];\n  if (nativeKeys) return nativeKeys(obj);\n  var keys = [];\n  for (var key in obj) if (has$1(obj, key)) keys.push(key);\n  // Ahem, IE < 9.\n  if (hasEnumBug) collectNonEnumProps(obj, keys);\n  return keys;\n}\n\n// Is a given array, string, or object empty?\n// An \"empty\" object has no enumerable own-properties.\nfunction isEmpty(obj) {\n  if (obj == null) return true;\n  // Skip the more expensive `toString`-based type checks if `obj` has no\n  // `.length`.\n  var length = getLength(obj);\n  if (typeof length == 'number' && (\n    isArray(obj) || isString(obj) || isArguments$1(obj)\n  )) return length === 0;\n  return getLength(keys(obj)) === 0;\n}\n\n// Returns whether an object has a given set of `key:value` pairs.\nfunction isMatch(object, attrs) {\n  var _keys = keys(attrs), length = _keys.length;\n  if (object == null) return !length;\n  var obj = Object(object);\n  for (var i = 0; i < length; i++) {\n    var key = _keys[i];\n    if (attrs[key] !== obj[key] || !(key in obj)) return false;\n  }\n  return true;\n}\n\n// If Underscore is called as a function, it returns a wrapped object that can\n// be used OO-style. This wrapper holds altered versions of all functions added\n// through `_.mixin`. Wrapped objects may be chained.\nfunction _$1(obj) {\n  if (obj instanceof _$1) return obj;\n  if (!(this instanceof _$1)) return new _$1(obj);\n  this._wrapped = obj;\n}\n\n_$1.VERSION = VERSION;\n\n// Extracts the result from a wrapped and chained object.\n_$1.prototype.value = function() {\n  return this._wrapped;\n};\n\n// Provide unwrapping proxies for some methods used in engine operations\n// such as arithmetic and JSON stringification.\n_$1.prototype.valueOf = _$1.prototype.toJSON = _$1.prototype.value;\n\n_$1.prototype.toString = function() {\n  return String(this._wrapped);\n};\n\n// Internal function to wrap or shallow-copy an ArrayBuffer,\n// typed array or DataView to a new view, reusing the buffer.\nfunction toBufferView(bufferSource) {\n  return new Uint8Array(\n    bufferSource.buffer || bufferSource,\n    bufferSource.byteOffset || 0,\n    getByteLength(bufferSource)\n  );\n}\n\n// We use this string twice, so give it a name for minification.\nvar tagDataView = '[object DataView]';\n\n// Internal recursive comparison function for `_.isEqual`.\nfunction eq(a, b, aStack, bStack) {\n  // Identical objects are equal. `0 === -0`, but they aren't identical.\n  // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).\n  if (a === b) return a !== 0 || 1 / a === 1 / b;\n  // `null` or `undefined` only equal to itself (strict comparison).\n  if (a == null || b == null) return false;\n  // `NaN`s are equivalent, but non-reflexive.\n  if (a !== a) return b !== b;\n  // Exhaust primitive checks\n  var type = typeof a;\n  if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\n  return deepEq(a, b, aStack, bStack);\n}\n\n// Internal recursive comparison function for `_.isEqual`.\nfunction deepEq(a, b, aStack, bStack) {\n  // Unwrap any wrapped objects.\n  if (a instanceof _$1) a = a._wrapped;\n  if (b instanceof _$1) b = b._wrapped;\n  // Compare `[[Class]]` names.\n  var className = toString.call(a);\n  if (className !== toString.call(b)) return false;\n  // Work around a bug in IE 10 - Edge 13.\n  if (hasStringTagBug && className == '[object Object]' && isDataView$1(a)) {\n    if (!isDataView$1(b)) return false;\n    className = tagDataView;\n  }\n  switch (className) {\n    // These types are compared by value.\n    case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n    case '[object String]':\n      // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n      // equivalent to `new String(\"5\")`.\n      return '' + a === '' + b;\n    case '[object Number]':\n      // `NaN`s are equivalent, but non-reflexive.\n      // Object(NaN) is equivalent to NaN.\n      if (+a !== +a) return +b !== +b;\n      // An `egal` comparison is performed for other numeric values.\n      return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n    case '[object Date]':\n    case '[object Boolean]':\n      // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n      // millisecond representations. Note that invalid dates with millisecond representations\n      // of `NaN` are not equivalent.\n      return +a === +b;\n    case '[object Symbol]':\n      return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\n    case '[object ArrayBuffer]':\n    case tagDataView:\n      // Coerce to typed array so we can fall through.\n      return deepEq(toBufferView(a), toBufferView(b), aStack, bStack);\n  }\n\n  var areArrays = className === '[object Array]';\n  if (!areArrays && isTypedArray$1(a)) {\n      var byteLength = getByteLength(a);\n      if (byteLength !== getByteLength(b)) return false;\n      if (a.buffer === b.buffer && a.byteOffset === b.byteOffset) return true;\n      areArrays = true;\n  }\n  if (!areArrays) {\n    if (typeof a != 'object' || typeof b != 'object') return false;\n\n    // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n    // from different frames are.\n    var aCtor = a.constructor, bCtor = b.constructor;\n    if (aCtor !== bCtor && !(isFunction$1(aCtor) && aCtor instanceof aCtor &&\n                             isFunction$1(bCtor) && bCtor instanceof bCtor)\n                        && ('constructor' in a && 'constructor' in b)) {\n      return false;\n    }\n  }\n  // Assume equality for cyclic structures. The algorithm for detecting cyclic\n  // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n  // Initializing stack of traversed objects.\n  // It's done here since we only need them for objects and arrays comparison.\n  aStack = aStack || [];\n  bStack = bStack || [];\n  var length = aStack.length;\n  while (length--) {\n    // Linear search. Performance is inversely proportional to the number of\n    // unique nested structures.\n    if (aStack[length] === a) return bStack[length] === b;\n  }\n\n  // Add the first object to the stack of traversed objects.\n  aStack.push(a);\n  bStack.push(b);\n\n  // Recursively compare objects and arrays.\n  if (areArrays) {\n    // Compare array lengths to determine if a deep comparison is necessary.\n    length = a.length;\n    if (length !== b.length) return false;\n    // Deep compare the contents, ignoring non-numeric properties.\n    while (length--) {\n      if (!eq(a[length], b[length], aStack, bStack)) return false;\n    }\n  } else {\n    // Deep compare objects.\n    var _keys = keys(a), key;\n    length = _keys.length;\n    // Ensure that both objects contain the same number of properties before comparing deep equality.\n    if (keys(b).length !== length) return false;\n    while (length--) {\n      // Deep compare each member\n      key = _keys[length];\n      if (!(has$1(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n    }\n  }\n  // Remove the first object from the stack of traversed objects.\n  aStack.pop();\n  bStack.pop();\n  return true;\n}\n\n// Perform a deep comparison to check if two objects are equal.\nfunction isEqual(a, b) {\n  return eq(a, b);\n}\n\n// Retrieve all the enumerable property names of an object.\nfunction allKeys(obj) {\n  if (!isObject(obj)) return [];\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  // Ahem, IE < 9.\n  if (hasEnumBug) collectNonEnumProps(obj, keys);\n  return keys;\n}\n\n// Since the regular `Object.prototype.toString` type tests don't work for\n// some types in IE 11, we use a fingerprinting heuristic instead, based\n// on the methods. It's not great, but it's the best we got.\n// The fingerprint method lists are defined below.\nfunction ie11fingerprint(methods) {\n  var length = getLength(methods);\n  return function(obj) {\n    if (obj == null) return false;\n    // `Map`, `WeakMap` and `Set` have no enumerable keys.\n    var keys = allKeys(obj);\n    if (getLength(keys)) return false;\n    for (var i = 0; i < length; i++) {\n      if (!isFunction$1(obj[methods[i]])) return false;\n    }\n    // If we are testing against `WeakMap`, we need to ensure that\n    // `obj` doesn't have a `forEach` method in order to distinguish\n    // it from a regular `Map`.\n    return methods !== weakMapMethods || !isFunction$1(obj[forEachName]);\n  };\n}\n\n// In the interest of compact minification, we write\n// each string in the fingerprints only once.\nvar forEachName = 'forEach',\n    hasName = 'has',\n    commonInit = ['clear', 'delete'],\n    mapTail = ['get', hasName, 'set'];\n\n// `Map`, `WeakMap` and `Set` each have slightly different\n// combinations of the above sublists.\nvar mapMethods = commonInit.concat(forEachName, mapTail),\n    weakMapMethods = commonInit.concat(mapTail),\n    setMethods = ['add'].concat(commonInit, forEachName, hasName);\n\nvar isMap = isIE11 ? ie11fingerprint(mapMethods) : tagTester('Map');\n\nvar isWeakMap = isIE11 ? ie11fingerprint(weakMapMethods) : tagTester('WeakMap');\n\nvar isSet = isIE11 ? ie11fingerprint(setMethods) : tagTester('Set');\n\nvar isWeakSet = tagTester('WeakSet');\n\n// Retrieve the values of an object's properties.\nfunction values(obj) {\n  var _keys = keys(obj);\n  var length = _keys.length;\n  var values = Array(length);\n  for (var i = 0; i < length; i++) {\n    values[i] = obj[_keys[i]];\n  }\n  return values;\n}\n\n// Convert an object into a list of `[key, value]` pairs.\n// The opposite of `_.object` with one argument.\nfunction pairs(obj) {\n  var _keys = keys(obj);\n  var length = _keys.length;\n  var pairs = Array(length);\n  for (var i = 0; i < length; i++) {\n    pairs[i] = [_keys[i], obj[_keys[i]]];\n  }\n  return pairs;\n}\n\n// Invert the keys and values of an object. The values must be serializable.\nfunction invert(obj) {\n  var result = {};\n  var _keys = keys(obj);\n  for (var i = 0, length = _keys.length; i < length; i++) {\n    result[obj[_keys[i]]] = _keys[i];\n  }\n  return result;\n}\n\n// Return a sorted list of the function names available on the object.\nfunction functions(obj) {\n  var names = [];\n  for (var key in obj) {\n    if (isFunction$1(obj[key])) names.push(key);\n  }\n  return names.sort();\n}\n\n// An internal function for creating assigner functions.\nfunction createAssigner(keysFunc, defaults) {\n  return function(obj) {\n    var length = arguments.length;\n    if (defaults) obj = Object(obj);\n    if (length < 2 || obj == null) return obj;\n    for (var index = 1; index < length; index++) {\n      var source = arguments[index],\n          keys = keysFunc(source),\n          l = keys.length;\n      for (var i = 0; i < l; i++) {\n        var key = keys[i];\n        if (!defaults || obj[key] === void 0) obj[key] = source[key];\n      }\n    }\n    return obj;\n  };\n}\n\n// Extend a given object with all the properties in passed-in object(s).\nvar extend = createAssigner(allKeys);\n\n// Assigns a given object with all the own properties in the passed-in\n// object(s).\n// (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\nvar extendOwn = createAssigner(keys);\n\n// Fill in a given object with default properties.\nvar defaults = createAssigner(allKeys, true);\n\n// Create a naked function reference for surrogate-prototype-swapping.\nfunction ctor() {\n  return function(){};\n}\n\n// An internal function for creating a new object that inherits from another.\nfunction baseCreate(prototype) {\n  if (!isObject(prototype)) return {};\n  if (nativeCreate) return nativeCreate(prototype);\n  var Ctor = ctor();\n  Ctor.prototype = prototype;\n  var result = new Ctor;\n  Ctor.prototype = null;\n  return result;\n}\n\n// Creates an object that inherits from the given prototype object.\n// If additional properties are provided then they will be added to the\n// created object.\nfunction create(prototype, props) {\n  var result = baseCreate(prototype);\n  if (props) extendOwn(result, props);\n  return result;\n}\n\n// Create a (shallow-cloned) duplicate of an object.\nfunction clone(obj) {\n  if (!isObject(obj)) return obj;\n  return isArray(obj) ? obj.slice() : extend({}, obj);\n}\n\n// Invokes `interceptor` with the `obj` and then returns `obj`.\n// The primary purpose of this method is to \"tap into\" a method chain, in\n// order to perform operations on intermediate results within the chain.\nfunction tap(obj, interceptor) {\n  interceptor(obj);\n  return obj;\n}\n\n// Normalize a (deep) property `path` to array.\n// Like `_.iteratee`, this function can be customized.\nfunction toPath$1(path) {\n  return isArray(path) ? path : [path];\n}\n_$1.toPath = toPath$1;\n\n// Internal wrapper for `_.toPath` to enable minification.\n// Similar to `cb` for `_.iteratee`.\nfunction toPath(path) {\n  return _$1.toPath(path);\n}\n\n// Internal function to obtain a nested property in `obj` along `path`.\nfunction deepGet(obj, path) {\n  var length = path.length;\n  for (var i = 0; i < length; i++) {\n    if (obj == null) return void 0;\n    obj = obj[path[i]];\n  }\n  return length ? obj : void 0;\n}\n\n// Get the value of the (deep) property on `path` from `object`.\n// If any property in `path` does not exist or if the value is\n// `undefined`, return `defaultValue` instead.\n// The `path` is normalized through `_.toPath`.\nfunction get(object, path, defaultValue) {\n  var value = deepGet(object, toPath(path));\n  return isUndefined(value) ? defaultValue : value;\n}\n\n// Shortcut function for checking if an object has a given property directly on\n// itself (in other words, not on a prototype). Unlike the internal `has`\n// function, this public version can also traverse nested properties.\nfunction has(obj, path) {\n  path = toPath(path);\n  var length = path.length;\n  for (var i = 0; i < length; i++) {\n    var key = path[i];\n    if (!has$1(obj, key)) return false;\n    obj = obj[key];\n  }\n  return !!length;\n}\n\n// Keep the identity function around for default iteratees.\nfunction identity(value) {\n  return value;\n}\n\n// Returns a predicate for checking whether an object has a given set of\n// `key:value` pairs.\nfunction matcher(attrs) {\n  attrs = extendOwn({}, attrs);\n  return function(obj) {\n    return isMatch(obj, attrs);\n  };\n}\n\n// Creates a function that, when passed an object, will traverse that object’s\n// properties down the given `path`, specified as an array of keys or indices.\nfunction property(path) {\n  path = toPath(path);\n  return function(obj) {\n    return deepGet(obj, path);\n  };\n}\n\n// Internal function that returns an efficient (for current engines) version\n// of the passed-in callback, to be repeatedly applied in other Underscore\n// functions.\nfunction optimizeCb(func, context, argCount) {\n  if (context === void 0) return func;\n  switch (argCount == null ? 3 : argCount) {\n    case 1: return function(value) {\n      return func.call(context, value);\n    };\n    // The 2-argument case is omitted because we’re not using it.\n    case 3: return function(value, index, collection) {\n      return func.call(context, value, index, collection);\n    };\n    case 4: return function(accumulator, value, index, collection) {\n      return func.call(context, accumulator, value, index, collection);\n    };\n  }\n  return function() {\n    return func.apply(context, arguments);\n  };\n}\n\n// An internal function to generate callbacks that can be applied to each\n// element in a collection, returning the desired result — either `_.identity`,\n// an arbitrary callback, a property matcher, or a property accessor.\nfunction baseIteratee(value, context, argCount) {\n  if (value == null) return identity;\n  if (isFunction$1(value)) return optimizeCb(value, context, argCount);\n  if (isObject(value) && !isArray(value)) return matcher(value);\n  return property(value);\n}\n\n// External wrapper for our callback generator. Users may customize\n// `_.iteratee` if they want additional predicate/iteratee shorthand styles.\n// This abstraction hides the internal-only `argCount` argument.\nfunction iteratee(value, context) {\n  return baseIteratee(value, context, Infinity);\n}\n_$1.iteratee = iteratee;\n\n// The function we call internally to generate a callback. It invokes\n// `_.iteratee` if overridden, otherwise `baseIteratee`.\nfunction cb(value, context, argCount) {\n  if (_$1.iteratee !== iteratee) return _$1.iteratee(value, context);\n  return baseIteratee(value, context, argCount);\n}\n\n// Returns the results of applying the `iteratee` to each element of `obj`.\n// In contrast to `_.map` it returns an object.\nfunction mapObject(obj, iteratee, context) {\n  iteratee = cb(iteratee, context);\n  var _keys = keys(obj),\n      length = _keys.length,\n      results = {};\n  for (var index = 0; index < length; index++) {\n    var currentKey = _keys[index];\n    results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n  }\n  return results;\n}\n\n// Predicate-generating function. Often useful outside of Underscore.\nfunction noop(){}\n\n// Generates a function for a given object that returns a given property.\nfunction propertyOf(obj) {\n  if (obj == null) return noop;\n  return function(path) {\n    return get(obj, path);\n  };\n}\n\n// Run a function **n** times.\nfunction times(n, iteratee, context) {\n  var accum = Array(Math.max(0, n));\n  iteratee = optimizeCb(iteratee, context, 1);\n  for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n  return accum;\n}\n\n// Return a random integer between `min` and `max` (inclusive).\nfunction random(min, max) {\n  if (max == null) {\n    max = min;\n    min = 0;\n  }\n  return min + Math.floor(Math.random() * (max - min + 1));\n}\n\n// A (possibly faster) way to get the current timestamp as an integer.\nvar now = Date.now || function() {\n  return new Date().getTime();\n};\n\n// Internal helper to generate functions for escaping and unescaping strings\n// to/from HTML interpolation.\nfunction createEscaper(map) {\n  var escaper = function(match) {\n    return map[match];\n  };\n  // Regexes for identifying a key that needs to be escaped.\n  var source = '(?:' + keys(map).join('|') + ')';\n  var testRegexp = RegExp(source);\n  var replaceRegexp = RegExp(source, 'g');\n  return function(string) {\n    string = string == null ? '' : '' + string;\n    return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n  };\n}\n\n// Internal list of HTML entities for escaping.\nvar escapeMap = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;'\n};\n\n// Function for escaping strings to HTML interpolation.\nvar _escape = createEscaper(escapeMap);\n\n// Internal list of HTML entities for unescaping.\nvar unescapeMap = invert(escapeMap);\n\n// Function for unescaping strings from HTML interpolation.\nvar _unescape = createEscaper(unescapeMap);\n\n// By default, Underscore uses ERB-style template delimiters. Change the\n// following template settings to use alternative delimiters.\nvar templateSettings = _$1.templateSettings = {\n  evaluate: /<%([\\s\\S]+?)%>/g,\n  interpolate: /<%=([\\s\\S]+?)%>/g,\n  escape: /<%-([\\s\\S]+?)%>/g\n};\n\n// When customizing `_.templateSettings`, if you don't want to define an\n// interpolation, evaluation or escaping regex, we need one that is\n// guaranteed not to match.\nvar noMatch = /(.)^/;\n\n// Certain characters need to be escaped so that they can be put into a\n// string literal.\nvar escapes = {\n  \"'\": \"'\",\n  '\\\\': '\\\\',\n  '\\r': 'r',\n  '\\n': 'n',\n  '\\u2028': 'u2028',\n  '\\u2029': 'u2029'\n};\n\nvar escapeRegExp = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\nfunction escapeChar(match) {\n  return '\\\\' + escapes[match];\n}\n\n// In order to prevent third-party code injection through\n// `_.templateSettings.variable`, we test it against the following regular\n// expression. It is intentionally a bit more liberal than just matching valid\n// identifiers, but still prevents possible loopholes through defaults or\n// destructuring assignment.\nvar bareIdentifier = /^\\s*(\\w|\\$)+\\s*$/;\n\n// JavaScript micro-templating, similar to John Resig's implementation.\n// Underscore templating handles arbitrary delimiters, preserves whitespace,\n// and correctly escapes quotes within interpolated code.\n// NB: `oldSettings` only exists for backwards compatibility.\nfunction template(text, settings, oldSettings) {\n  if (!settings && oldSettings) settings = oldSettings;\n  settings = defaults({}, settings, _$1.templateSettings);\n\n  // Combine delimiters into one regular expression via alternation.\n  var matcher = RegExp([\n    (settings.escape || noMatch).source,\n    (settings.interpolate || noMatch).source,\n    (settings.evaluate || noMatch).source\n  ].join('|') + '|$', 'g');\n\n  // Compile the template source, escaping string literals appropriately.\n  var index = 0;\n  var source = \"__p+='\";\n  text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n    source += text.slice(index, offset).replace(escapeRegExp, escapeChar);\n    index = offset + match.length;\n\n    if (escape) {\n      source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n    } else if (interpolate) {\n      source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n    } else if (evaluate) {\n      source += \"';\\n\" + evaluate + \"\\n__p+='\";\n    }\n\n    // Adobe VMs need the match returned to produce the correct offset.\n    return match;\n  });\n  source += \"';\\n\";\n\n  var argument = settings.variable;\n  if (argument) {\n    // Insure against third-party code injection. (CVE-2021-23358)\n    if (!bareIdentifier.test(argument)) throw new Error(\n      'variable is not a bare identifier: ' + argument\n    );\n  } else {\n    // If a variable is not specified, place data values in local scope.\n    source = 'with(obj||{}){\\n' + source + '}\\n';\n    argument = 'obj';\n  }\n\n  source = \"var __t,__p='',__j=Array.prototype.join,\" +\n    \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n    source + 'return __p;\\n';\n\n  var render;\n  try {\n    render = new Function(argument, '_', source);\n  } catch (e) {\n    e.source = source;\n    throw e;\n  }\n\n  var template = function(data) {\n    return render.call(this, data, _$1);\n  };\n\n  // Provide the compiled source as a convenience for precompilation.\n  template.source = 'function(' + argument + '){\\n' + source + '}';\n\n  return template;\n}\n\n// Traverses the children of `obj` along `path`. If a child is a function, it\n// is invoked with its parent as context. Returns the value of the final\n// child, or `fallback` if any child is undefined.\nfunction result(obj, path, fallback) {\n  path = toPath(path);\n  var length = path.length;\n  if (!length) {\n    return isFunction$1(fallback) ? fallback.call(obj) : fallback;\n  }\n  for (var i = 0; i < length; i++) {\n    var prop = obj == null ? void 0 : obj[path[i]];\n    if (prop === void 0) {\n      prop = fallback;\n      i = length; // Ensure we don't continue iterating.\n    }\n    obj = isFunction$1(prop) ? prop.call(obj) : prop;\n  }\n  return obj;\n}\n\n// Generate a unique integer id (unique within the entire client session).\n// Useful for temporary DOM ids.\nvar idCounter = 0;\nfunction uniqueId(prefix) {\n  var id = ++idCounter + '';\n  return prefix ? prefix + id : id;\n}\n\n// Start chaining a wrapped Underscore object.\nfunction chain(obj) {\n  var instance = _$1(obj);\n  instance._chain = true;\n  return instance;\n}\n\n// Internal function to execute `sourceFunc` bound to `context` with optional\n// `args`. Determines whether to execute a function as a constructor or as a\n// normal function.\nfunction executeBound(sourceFunc, boundFunc, context, callingContext, args) {\n  if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n  var self = baseCreate(sourceFunc.prototype);\n  var result = sourceFunc.apply(self, args);\n  if (isObject(result)) return result;\n  return self;\n}\n\n// Partially apply a function by creating a version that has had some of its\n// arguments pre-filled, without changing its dynamic `this` context. `_` acts\n// as a placeholder by default, allowing any combination of arguments to be\n// pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.\nvar partial = restArguments(function(func, boundArgs) {\n  var placeholder = partial.placeholder;\n  var bound = function() {\n    var position = 0, length = boundArgs.length;\n    var args = Array(length);\n    for (var i = 0; i < length; i++) {\n      args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];\n    }\n    while (position < arguments.length) args.push(arguments[position++]);\n    return executeBound(func, bound, this, this, args);\n  };\n  return bound;\n});\n\npartial.placeholder = _$1;\n\n// Create a function bound to a given object (assigning `this`, and arguments,\n// optionally).\nvar bind = restArguments(function(func, context, args) {\n  if (!isFunction$1(func)) throw new TypeError('Bind must be called on a function');\n  var bound = restArguments(function(callArgs) {\n    return executeBound(func, bound, context, this, args.concat(callArgs));\n  });\n  return bound;\n});\n\n// Internal helper for collection methods to determine whether a collection\n// should be iterated as an array or as an object.\n// Related: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n// Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\nvar isArrayLike = createSizePropertyCheck(getLength);\n\n// Internal implementation of a recursive `flatten` function.\nfunction flatten$1(input, depth, strict, output) {\n  output = output || [];\n  if (!depth && depth !== 0) {\n    depth = Infinity;\n  } else if (depth <= 0) {\n    return output.concat(input);\n  }\n  var idx = output.length;\n  for (var i = 0, length = getLength(input); i < length; i++) {\n    var value = input[i];\n    if (isArrayLike(value) && (isArray(value) || isArguments$1(value))) {\n      // Flatten current level of array or arguments object.\n      if (depth > 1) {\n        flatten$1(value, depth - 1, strict, output);\n        idx = output.length;\n      } else {\n        var j = 0, len = value.length;\n        while (j < len) output[idx++] = value[j++];\n      }\n    } else if (!strict) {\n      output[idx++] = value;\n    }\n  }\n  return output;\n}\n\n// Bind a number of an object's methods to that object. Remaining arguments\n// are the method names to be bound. Useful for ensuring that all callbacks\n// defined on an object belong to it.\nvar bindAll = restArguments(function(obj, keys) {\n  keys = flatten$1(keys, false, false);\n  var index = keys.length;\n  if (index < 1) throw new Error('bindAll must be passed function names');\n  while (index--) {\n    var key = keys[index];\n    obj[key] = bind(obj[key], obj);\n  }\n  return obj;\n});\n\n// Memoize an expensive function by storing its results.\nfunction memoize(func, hasher) {\n  var memoize = function(key) {\n    var cache = memoize.cache;\n    var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n    if (!has$1(cache, address)) cache[address] = func.apply(this, arguments);\n    return cache[address];\n  };\n  memoize.cache = {};\n  return memoize;\n}\n\n// Delays a function for the given number of milliseconds, and then calls\n// it with the arguments supplied.\nvar delay = restArguments(function(func, wait, args) {\n  return setTimeout(function() {\n    return func.apply(null, args);\n  }, wait);\n});\n\n// Defers a function, scheduling it to run after the current call stack has\n// cleared.\nvar defer = partial(delay, _$1, 1);\n\n// Returns a function, that, when invoked, will only be triggered at most once\n// during a given window of time. Normally, the throttled function will run\n// as much as it can, without ever going more than once per `wait` duration;\n// but if you'd like to disable the execution on the leading edge, pass\n// `{leading: false}`. To disable execution on the trailing edge, ditto.\nfunction throttle(func, wait, options) {\n  var timeout, context, args, result;\n  var previous = 0;\n  if (!options) options = {};\n\n  var later = function() {\n    previous = options.leading === false ? 0 : now();\n    timeout = null;\n    result = func.apply(context, args);\n    if (!timeout) context = args = null;\n  };\n\n  var throttled = function() {\n    var _now = now();\n    if (!previous && options.leading === false) previous = _now;\n    var remaining = wait - (_now - previous);\n    context = this;\n    args = arguments;\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      previous = _now;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n    return result;\n  };\n\n  throttled.cancel = function() {\n    clearTimeout(timeout);\n    previous = 0;\n    timeout = context = args = null;\n  };\n\n  return throttled;\n}\n\n// When a sequence of calls of the returned function ends, the argument\n// function is triggered. The end of a sequence is defined by the `wait`\n// parameter. If `immediate` is passed, the argument function will be\n// triggered at the beginning of the sequence instead of at the end.\nfunction debounce(func, wait, immediate) {\n  var timeout, previous, args, result, context;\n\n  var later = function() {\n    var passed = now() - previous;\n    if (wait > passed) {\n      timeout = setTimeout(later, wait - passed);\n    } else {\n      timeout = null;\n      if (!immediate) result = func.apply(context, args);\n      // This check is needed because `func` can recursively invoke `debounced`.\n      if (!timeout) args = context = null;\n    }\n  };\n\n  var debounced = restArguments(function(_args) {\n    context = this;\n    args = _args;\n    previous = now();\n    if (!timeout) {\n      timeout = setTimeout(later, wait);\n      if (immediate) result = func.apply(context, args);\n    }\n    return result;\n  });\n\n  debounced.cancel = function() {\n    clearTimeout(timeout);\n    timeout = args = context = null;\n  };\n\n  return debounced;\n}\n\n// Returns the first function passed as an argument to the second,\n// allowing you to adjust arguments, run code before and after, and\n// conditionally execute the original function.\nfunction wrap(func, wrapper) {\n  return partial(wrapper, func);\n}\n\n// Returns a negated version of the passed-in predicate.\nfunction negate(predicate) {\n  return function() {\n    return !predicate.apply(this, arguments);\n  };\n}\n\n// Returns a function that is the composition of a list of functions, each\n// consuming the return value of the function that follows.\nfunction compose() {\n  var args = arguments;\n  var start = args.length - 1;\n  return function() {\n    var i = start;\n    var result = args[start].apply(this, arguments);\n    while (i--) result = args[i].call(this, result);\n    return result;\n  };\n}\n\n// Returns a function that will only be executed on and after the Nth call.\nfunction after(times, func) {\n  return function() {\n    if (--times < 1) {\n      return func.apply(this, arguments);\n    }\n  };\n}\n\n// Returns a function that will only be executed up to (but not including) the\n// Nth call.\nfunction before(times, func) {\n  var memo;\n  return function() {\n    if (--times > 0) {\n      memo = func.apply(this, arguments);\n    }\n    if (times <= 1) func = null;\n    return memo;\n  };\n}\n\n// Returns a function that will be executed at most one time, no matter how\n// often you call it. Useful for lazy initialization.\nvar once = partial(before, 2);\n\n// Returns the first key on an object that passes a truth test.\nfunction findKey(obj, predicate, context) {\n  predicate = cb(predicate, context);\n  var _keys = keys(obj), key;\n  for (var i = 0, length = _keys.length; i < length; i++) {\n    key = _keys[i];\n    if (predicate(obj[key], key, obj)) return key;\n  }\n}\n\n// Internal function to generate `_.findIndex` and `_.findLastIndex`.\nfunction createPredicateIndexFinder(dir) {\n  return function(array, predicate, context) {\n    predicate = cb(predicate, context);\n    var length = getLength(array);\n    var index = dir > 0 ? 0 : length - 1;\n    for (; index >= 0 && index < length; index += dir) {\n      if (predicate(array[index], index, array)) return index;\n    }\n    return -1;\n  };\n}\n\n// Returns the first index on an array-like that passes a truth test.\nvar findIndex = createPredicateIndexFinder(1);\n\n// Returns the last index on an array-like that passes a truth test.\nvar findLastIndex = createPredicateIndexFinder(-1);\n\n// Use a comparator function to figure out the smallest index at which\n// an object should be inserted so as to maintain order. Uses binary search.\nfunction sortedIndex(array, obj, iteratee, context) {\n  iteratee = cb(iteratee, context, 1);\n  var value = iteratee(obj);\n  var low = 0, high = getLength(array);\n  while (low < high) {\n    var mid = Math.floor((low + high) / 2);\n    if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n  }\n  return low;\n}\n\n// Internal function to generate the `_.indexOf` and `_.lastIndexOf` functions.\nfunction createIndexFinder(dir, predicateFind, sortedIndex) {\n  return function(array, item, idx) {\n    var i = 0, length = getLength(array);\n    if (typeof idx == 'number') {\n      if (dir > 0) {\n        i = idx >= 0 ? idx : Math.max(idx + length, i);\n      } else {\n        length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n      }\n    } else if (sortedIndex && idx && length) {\n      idx = sortedIndex(array, item);\n      return array[idx] === item ? idx : -1;\n    }\n    if (item !== item) {\n      idx = predicateFind(slice.call(array, i, length), isNaN$1);\n      return idx >= 0 ? idx + i : -1;\n    }\n    for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n      if (array[idx] === item) return idx;\n    }\n    return -1;\n  };\n}\n\n// Return the position of the first occurrence of an item in an array,\n// or -1 if the item is not included in the array.\n// If the array is large and already in sort order, pass `true`\n// for **isSorted** to use binary search.\nvar indexOf = createIndexFinder(1, findIndex, sortedIndex);\n\n// Return the position of the last occurrence of an item in an array,\n// or -1 if the item is not included in the array.\nvar lastIndexOf = createIndexFinder(-1, findLastIndex);\n\n// Return the first value which passes a truth test.\nfunction find(obj, predicate, context) {\n  var keyFinder = isArrayLike(obj) ? findIndex : findKey;\n  var key = keyFinder(obj, predicate, context);\n  if (key !== void 0 && key !== -1) return obj[key];\n}\n\n// Convenience version of a common use case of `_.find`: getting the first\n// object containing specific `key:value` pairs.\nfunction findWhere(obj, attrs) {\n  return find(obj, matcher(attrs));\n}\n\n// The cornerstone for collection functions, an `each`\n// implementation, aka `forEach`.\n// Handles raw objects in addition to array-likes. Treats all\n// sparse array-likes as if they were dense.\nfunction each(obj, iteratee, context) {\n  iteratee = optimizeCb(iteratee, context);\n  var i, length;\n  if (isArrayLike(obj)) {\n    for (i = 0, length = obj.length; i < length; i++) {\n      iteratee(obj[i], i, obj);\n    }\n  } else {\n    var _keys = keys(obj);\n    for (i = 0, length = _keys.length; i < length; i++) {\n      iteratee(obj[_keys[i]], _keys[i], obj);\n    }\n  }\n  return obj;\n}\n\n// Return the results of applying the iteratee to each element.\nfunction map(obj, iteratee, context) {\n  iteratee = cb(iteratee, context);\n  var _keys = !isArrayLike(obj) && keys(obj),\n      length = (_keys || obj).length,\n      results = Array(length);\n  for (var index = 0; index < length; index++) {\n    var currentKey = _keys ? _keys[index] : index;\n    results[index] = iteratee(obj[currentKey], currentKey, obj);\n  }\n  return results;\n}\n\n// Internal helper to create a reducing function, iterating left or right.\nfunction createReduce(dir) {\n  // Wrap code that reassigns argument variables in a separate function than\n  // the one that accesses `arguments.length` to avoid a perf hit. (#1991)\n  var reducer = function(obj, iteratee, memo, initial) {\n    var _keys = !isArrayLike(obj) && keys(obj),\n        length = (_keys || obj).length,\n        index = dir > 0 ? 0 : length - 1;\n    if (!initial) {\n      memo = obj[_keys ? _keys[index] : index];\n      index += dir;\n    }\n    for (; index >= 0 && index < length; index += dir) {\n      var currentKey = _keys ? _keys[index] : index;\n      memo = iteratee(memo, obj[currentKey], currentKey, obj);\n    }\n    return memo;\n  };\n\n  return function(obj, iteratee, memo, context) {\n    var initial = arguments.length >= 3;\n    return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);\n  };\n}\n\n// **Reduce** builds up a single result from a list of values, aka `inject`,\n// or `foldl`.\nvar reduce = createReduce(1);\n\n// The right-associative version of reduce, also known as `foldr`.\nvar reduceRight = createReduce(-1);\n\n// Return all the elements that pass a truth test.\nfunction filter(obj, predicate, context) {\n  var results = [];\n  predicate = cb(predicate, context);\n  each(obj, function(value, index, list) {\n    if (predicate(value, index, list)) results.push(value);\n  });\n  return results;\n}\n\n// Return all the elements for which a truth test fails.\nfunction reject(obj, predicate, context) {\n  return filter(obj, negate(cb(predicate)), context);\n}\n\n// Determine whether all of the elements pass a truth test.\nfunction every(obj, predicate, context) {\n  predicate = cb(predicate, context);\n  var _keys = !isArrayLike(obj) && keys(obj),\n      length = (_keys || obj).length;\n  for (var index = 0; index < length; index++) {\n    var currentKey = _keys ? _keys[index] : index;\n    if (!predicate(obj[currentKey], currentKey, obj)) return false;\n  }\n  return true;\n}\n\n// Determine if at least one element in the object passes a truth test.\nfunction some(obj, predicate, context) {\n  predicate = cb(predicate, context);\n  var _keys = !isArrayLike(obj) && keys(obj),\n      length = (_keys || obj).length;\n  for (var index = 0; index < length; index++) {\n    var currentKey = _keys ? _keys[index] : index;\n    if (predicate(obj[currentKey], currentKey, obj)) return true;\n  }\n  return false;\n}\n\n// Determine if the array or object contains a given item (using `===`).\nfunction contains(obj, item, fromIndex, guard) {\n  if (!isArrayLike(obj)) obj = values(obj);\n  if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n  return indexOf(obj, item, fromIndex) >= 0;\n}\n\n// Invoke a method (with arguments) on every item in a collection.\nvar invoke = restArguments(function(obj, path, args) {\n  var contextPath, func;\n  if (isFunction$1(path)) {\n    func = path;\n  } else {\n    path = toPath(path);\n    contextPath = path.slice(0, -1);\n    path = path[path.length - 1];\n  }\n  return map(obj, function(context) {\n    var method = func;\n    if (!method) {\n      if (contextPath && contextPath.length) {\n        context = deepGet(context, contextPath);\n      }\n      if (context == null) return void 0;\n      method = context[path];\n    }\n    return method == null ? method : method.apply(context, args);\n  });\n});\n\n// Convenience version of a common use case of `_.map`: fetching a property.\nfunction pluck(obj, key) {\n  return map(obj, property(key));\n}\n\n// Convenience version of a common use case of `_.filter`: selecting only\n// objects containing specific `key:value` pairs.\nfunction where(obj, attrs) {\n  return filter(obj, matcher(attrs));\n}\n\n// Return the maximum element (or element-based computation).\nfunction max(obj, iteratee, context) {\n  var result = -Infinity, lastComputed = -Infinity,\n      value, computed;\n  if (iteratee == null || (typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null)) {\n    obj = isArrayLike(obj) ? obj : values(obj);\n    for (var i = 0, length = obj.length; i < length; i++) {\n      value = obj[i];\n      if (value != null && value > result) {\n        result = value;\n      }\n    }\n  } else {\n    iteratee = cb(iteratee, context);\n    each(obj, function(v, index, list) {\n      computed = iteratee(v, index, list);\n      if (computed > lastComputed || (computed === -Infinity && result === -Infinity)) {\n        result = v;\n        lastComputed = computed;\n      }\n    });\n  }\n  return result;\n}\n\n// Return the minimum element (or element-based computation).\nfunction min(obj, iteratee, context) {\n  var result = Infinity, lastComputed = Infinity,\n      value, computed;\n  if (iteratee == null || (typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null)) {\n    obj = isArrayLike(obj) ? obj : values(obj);\n    for (var i = 0, length = obj.length; i < length; i++) {\n      value = obj[i];\n      if (value != null && value < result) {\n        result = value;\n      }\n    }\n  } else {\n    iteratee = cb(iteratee, context);\n    each(obj, function(v, index, list) {\n      computed = iteratee(v, index, list);\n      if (computed < lastComputed || (computed === Infinity && result === Infinity)) {\n        result = v;\n        lastComputed = computed;\n      }\n    });\n  }\n  return result;\n}\n\n// Safely create a real, live array from anything iterable.\nvar reStrSymbol = /[^\\ud800-\\udfff]|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff]/g;\nfunction toArray(obj) {\n  if (!obj) return [];\n  if (isArray(obj)) return slice.call(obj);\n  if (isString(obj)) {\n    // Keep surrogate pair characters together.\n    return obj.match(reStrSymbol);\n  }\n  if (isArrayLike(obj)) return map(obj, identity);\n  return values(obj);\n}\n\n// Sample **n** random values from a collection using the modern version of the\n// [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n// If **n** is not specified, returns a single random element.\n// The internal `guard` argument allows it to work with `_.map`.\nfunction sample(obj, n, guard) {\n  if (n == null || guard) {\n    if (!isArrayLike(obj)) obj = values(obj);\n    return obj[random(obj.length - 1)];\n  }\n  var sample = toArray(obj);\n  var length = getLength(sample);\n  n = Math.max(Math.min(n, length), 0);\n  var last = length - 1;\n  for (var index = 0; index < n; index++) {\n    var rand = random(index, last);\n    var temp = sample[index];\n    sample[index] = sample[rand];\n    sample[rand] = temp;\n  }\n  return sample.slice(0, n);\n}\n\n// Shuffle a collection.\nfunction shuffle(obj) {\n  return sample(obj, Infinity);\n}\n\n// Sort the object's values by a criterion produced by an iteratee.\nfunction sortBy(obj, iteratee, context) {\n  var index = 0;\n  iteratee = cb(iteratee, context);\n  return pluck(map(obj, function(value, key, list) {\n    return {\n      value: value,\n      index: index++,\n      criteria: iteratee(value, key, list)\n    };\n  }).sort(function(left, right) {\n    var a = left.criteria;\n    var b = right.criteria;\n    if (a !== b) {\n      if (a > b || a === void 0) return 1;\n      if (a < b || b === void 0) return -1;\n    }\n    return left.index - right.index;\n  }), 'value');\n}\n\n// An internal function used for aggregate \"group by\" operations.\nfunction group(behavior, partition) {\n  return function(obj, iteratee, context) {\n    var result = partition ? [[], []] : {};\n    iteratee = cb(iteratee, context);\n    each(obj, function(value, index) {\n      var key = iteratee(value, index, obj);\n      behavior(result, value, key);\n    });\n    return result;\n  };\n}\n\n// Groups the object's values by a criterion. Pass either a string attribute\n// to group by, or a function that returns the criterion.\nvar groupBy = group(function(result, value, key) {\n  if (has$1(result, key)) result[key].push(value); else result[key] = [value];\n});\n\n// Indexes the object's values by a criterion, similar to `_.groupBy`, but for\n// when you know that your index values will be unique.\nvar indexBy = group(function(result, value, key) {\n  result[key] = value;\n});\n\n// Counts instances of an object that group by a certain criterion. Pass\n// either a string attribute to count by, or a function that returns the\n// criterion.\nvar countBy = group(function(result, value, key) {\n  if (has$1(result, key)) result[key]++; else result[key] = 1;\n});\n\n// Split a collection into two arrays: one whose elements all pass the given\n// truth test, and one whose elements all do not pass the truth test.\nvar partition = group(function(result, value, pass) {\n  result[pass ? 0 : 1].push(value);\n}, true);\n\n// Return the number of elements in a collection.\nfunction size(obj) {\n  if (obj == null) return 0;\n  return isArrayLike(obj) ? obj.length : keys(obj).length;\n}\n\n// Internal `_.pick` helper function to determine whether `key` is an enumerable\n// property name of `obj`.\nfunction keyInObj(value, key, obj) {\n  return key in obj;\n}\n\n// Return a copy of the object only containing the allowed properties.\nvar pick = restArguments(function(obj, keys) {\n  var result = {}, iteratee = keys[0];\n  if (obj == null) return result;\n  if (isFunction$1(iteratee)) {\n    if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);\n    keys = allKeys(obj);\n  } else {\n    iteratee = keyInObj;\n    keys = flatten$1(keys, false, false);\n    obj = Object(obj);\n  }\n  for (var i = 0, length = keys.length; i < length; i++) {\n    var key = keys[i];\n    var value = obj[key];\n    if (iteratee(value, key, obj)) result[key] = value;\n  }\n  return result;\n});\n\n// Return a copy of the object without the disallowed properties.\nvar omit = restArguments(function(obj, keys) {\n  var iteratee = keys[0], context;\n  if (isFunction$1(iteratee)) {\n    iteratee = negate(iteratee);\n    if (keys.length > 1) context = keys[1];\n  } else {\n    keys = map(flatten$1(keys, false, false), String);\n    iteratee = function(value, key) {\n      return !contains(keys, key);\n    };\n  }\n  return pick(obj, iteratee, context);\n});\n\n// Returns everything but the last entry of the array. Especially useful on\n// the arguments object. Passing **n** will return all the values in\n// the array, excluding the last N.\nfunction initial(array, n, guard) {\n  return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n}\n\n// Get the first element of an array. Passing **n** will return the first N\n// values in the array. The **guard** check allows it to work with `_.map`.\nfunction first(array, n, guard) {\n  if (array == null || array.length < 1) return n == null || guard ? void 0 : [];\n  if (n == null || guard) return array[0];\n  return initial(array, array.length - n);\n}\n\n// Returns everything but the first entry of the `array`. Especially useful on\n// the `arguments` object. Passing an **n** will return the rest N values in the\n// `array`.\nfunction rest(array, n, guard) {\n  return slice.call(array, n == null || guard ? 1 : n);\n}\n\n// Get the last element of an array. Passing **n** will return the last N\n// values in the array.\nfunction last(array, n, guard) {\n  if (array == null || array.length < 1) return n == null || guard ? void 0 : [];\n  if (n == null || guard) return array[array.length - 1];\n  return rest(array, Math.max(0, array.length - n));\n}\n\n// Trim out all falsy values from an array.\nfunction compact(array) {\n  return filter(array, Boolean);\n}\n\n// Flatten out an array, either recursively (by default), or up to `depth`.\n// Passing `true` or `false` as `depth` means `1` or `Infinity`, respectively.\nfunction flatten(array, depth) {\n  return flatten$1(array, depth, false);\n}\n\n// Take the difference between one array and a number of other arrays.\n// Only the elements present in just the first array will remain.\nvar difference = restArguments(function(array, rest) {\n  rest = flatten$1(rest, true, true);\n  return filter(array, function(value){\n    return !contains(rest, value);\n  });\n});\n\n// Return a version of the array that does not contain the specified value(s).\nvar without = restArguments(function(array, otherArrays) {\n  return difference(array, otherArrays);\n});\n\n// Produce a duplicate-free version of the array. If the array has already\n// been sorted, you have the option of using a faster algorithm.\n// The faster algorithm will not work with an iteratee if the iteratee\n// is not a one-to-one function, so providing an iteratee will disable\n// the faster algorithm.\nfunction uniq(array, isSorted, iteratee, context) {\n  if (!isBoolean(isSorted)) {\n    context = iteratee;\n    iteratee = isSorted;\n    isSorted = false;\n  }\n  if (iteratee != null) iteratee = cb(iteratee, context);\n  var result = [];\n  var seen = [];\n  for (var i = 0, length = getLength(array); i < length; i++) {\n    var value = array[i],\n        computed = iteratee ? iteratee(value, i, array) : value;\n    if (isSorted && !iteratee) {\n      if (!i || seen !== computed) result.push(value);\n      seen = computed;\n    } else if (iteratee) {\n      if (!contains(seen, computed)) {\n        seen.push(computed);\n        result.push(value);\n      }\n    } else if (!contains(result, value)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\n// Produce an array that contains the union: each distinct element from all of\n// the passed-in arrays.\nvar union = restArguments(function(arrays) {\n  return uniq(flatten$1(arrays, true, true));\n});\n\n// Produce an array that contains every item shared between all the\n// passed-in arrays.\nfunction intersection(array) {\n  var result = [];\n  var argsLength = arguments.length;\n  for (var i = 0, length = getLength(array); i < length; i++) {\n    var item = array[i];\n    if (contains(result, item)) continue;\n    var j;\n    for (j = 1; j < argsLength; j++) {\n      if (!contains(arguments[j], item)) break;\n    }\n    if (j === argsLength) result.push(item);\n  }\n  return result;\n}\n\n// Complement of zip. Unzip accepts an array of arrays and groups\n// each array's elements on shared indices.\nfunction unzip(array) {\n  var length = (array && max(array, getLength).length) || 0;\n  var result = Array(length);\n\n  for (var index = 0; index < length; index++) {\n    result[index] = pluck(array, index);\n  }\n  return result;\n}\n\n// Zip together multiple lists into a single array -- elements that share\n// an index go together.\nvar zip = restArguments(unzip);\n\n// Converts lists into objects. Pass either a single array of `[key, value]`\n// pairs, or two parallel arrays of the same length -- one of keys, and one of\n// the corresponding values. Passing by pairs is the reverse of `_.pairs`.\nfunction object(list, values) {\n  var result = {};\n  for (var i = 0, length = getLength(list); i < length; i++) {\n    if (values) {\n      result[list[i]] = values[i];\n    } else {\n      result[list[i][0]] = list[i][1];\n    }\n  }\n  return result;\n}\n\n// Generate an integer Array containing an arithmetic progression. A port of\n// the native Python `range()` function. See\n// [the Python documentation](https://docs.python.org/library/functions.html#range).\nfunction range(start, stop, step) {\n  if (stop == null) {\n    stop = start || 0;\n    start = 0;\n  }\n  if (!step) {\n    step = stop < start ? -1 : 1;\n  }\n\n  var length = Math.max(Math.ceil((stop - start) / step), 0);\n  var range = Array(length);\n\n  for (var idx = 0; idx < length; idx++, start += step) {\n    range[idx] = start;\n  }\n\n  return range;\n}\n\n// Chunk a single array into multiple arrays, each containing `count` or fewer\n// items.\nfunction chunk(array, count) {\n  if (count == null || count < 1) return [];\n  var result = [];\n  var i = 0, length = array.length;\n  while (i < length) {\n    result.push(slice.call(array, i, i += count));\n  }\n  return result;\n}\n\n// Helper function to continue chaining intermediate results.\nfunction chainResult(instance, obj) {\n  return instance._chain ? _$1(obj).chain() : obj;\n}\n\n// Add your own custom functions to the Underscore object.\nfunction mixin(obj) {\n  each(functions(obj), function(name) {\n    var func = _$1[name] = obj[name];\n    _$1.prototype[name] = function() {\n      var args = [this._wrapped];\n      push.apply(args, arguments);\n      return chainResult(this, func.apply(_$1, args));\n    };\n  });\n  return _$1;\n}\n\n// Add all mutator `Array` functions to the wrapper.\neach(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n  var method = ArrayProto[name];\n  _$1.prototype[name] = function() {\n    var obj = this._wrapped;\n    if (obj != null) {\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) {\n        delete obj[0];\n      }\n    }\n    return chainResult(this, obj);\n  };\n});\n\n// Add all accessor `Array` functions to the wrapper.\neach(['concat', 'join', 'slice'], function(name) {\n  var method = ArrayProto[name];\n  _$1.prototype[name] = function() {\n    var obj = this._wrapped;\n    if (obj != null) obj = method.apply(obj, arguments);\n    return chainResult(this, obj);\n  };\n});\n\n// Named Exports\n\nvar allExports = {\n  __proto__: null,\n  VERSION: VERSION,\n  restArguments: restArguments,\n  isObject: isObject,\n  isNull: isNull,\n  isUndefined: isUndefined,\n  isBoolean: isBoolean,\n  isElement: isElement,\n  isString: isString,\n  isNumber: isNumber,\n  isDate: isDate,\n  isRegExp: isRegExp,\n  isError: isError,\n  isSymbol: isSymbol,\n  isArrayBuffer: isArrayBuffer,\n  isDataView: isDataView$1,\n  isArray: isArray,\n  isFunction: isFunction$1,\n  isArguments: isArguments$1,\n  isFinite: isFinite$1,\n  isNaN: isNaN$1,\n  isTypedArray: isTypedArray$1,\n  isEmpty: isEmpty,\n  isMatch: isMatch,\n  isEqual: isEqual,\n  isMap: isMap,\n  isWeakMap: isWeakMap,\n  isSet: isSet,\n  isWeakSet: isWeakSet,\n  keys: keys,\n  allKeys: allKeys,\n  values: values,\n  pairs: pairs,\n  invert: invert,\n  functions: functions,\n  methods: functions,\n  extend: extend,\n  extendOwn: extendOwn,\n  assign: extendOwn,\n  defaults: defaults,\n  create: create,\n  clone: clone,\n  tap: tap,\n  get: get,\n  has: has,\n  mapObject: mapObject,\n  identity: identity,\n  constant: constant,\n  noop: noop,\n  toPath: toPath$1,\n  property: property,\n  propertyOf: propertyOf,\n  matcher: matcher,\n  matches: matcher,\n  times: times,\n  random: random,\n  now: now,\n  escape: _escape,\n  unescape: _unescape,\n  templateSettings: templateSettings,\n  template: template,\n  result: result,\n  uniqueId: uniqueId,\n  chain: chain,\n  iteratee: iteratee,\n  partial: partial,\n  bind: bind,\n  bindAll: bindAll,\n  memoize: memoize,\n  delay: delay,\n  defer: defer,\n  throttle: throttle,\n  debounce: debounce,\n  wrap: wrap,\n  negate: negate,\n  compose: compose,\n  after: after,\n  before: before,\n  once: once,\n  findKey: findKey,\n  findIndex: findIndex,\n  findLastIndex: findLastIndex,\n  sortedIndex: sortedIndex,\n  indexOf: indexOf,\n  lastIndexOf: lastIndexOf,\n  find: find,\n  detect: find,\n  findWhere: findWhere,\n  each: each,\n  forEach: each,\n  map: map,\n  collect: map,\n  reduce: reduce,\n  foldl: reduce,\n  inject: reduce,\n  reduceRight: reduceRight,\n  foldr: reduceRight,\n  filter: filter,\n  select: filter,\n  reject: reject,\n  every: every,\n  all: every,\n  some: some,\n  any: some,\n  contains: contains,\n  includes: contains,\n  include: contains,\n  invoke: invoke,\n  pluck: pluck,\n  where: where,\n  max: max,\n  min: min,\n  shuffle: shuffle,\n  sample: sample,\n  sortBy: sortBy,\n  groupBy: groupBy,\n  indexBy: indexBy,\n  countBy: countBy,\n  partition: partition,\n  toArray: toArray,\n  size: size,\n  pick: pick,\n  omit: omit,\n  first: first,\n  head: first,\n  take: first,\n  initial: initial,\n  last: last,\n  rest: rest,\n  tail: rest,\n  drop: rest,\n  compact: compact,\n  flatten: flatten,\n  without: without,\n  uniq: uniq,\n  unique: uniq,\n  union: union,\n  intersection: intersection,\n  difference: difference,\n  unzip: unzip,\n  transpose: unzip,\n  zip: zip,\n  object: object,\n  range: range,\n  chunk: chunk,\n  mixin: mixin,\n  'default': _$1\n};\n\n// Default Export\n\n// Add all of the Underscore functions to the wrapper object.\nvar _ = mixin(allExports);\n// Legacy Node.js API.\n_._ = _;\n\nexports.VERSION = VERSION;\nexports._ = _;\nexports._escape = _escape;\nexports._unescape = _unescape;\nexports.after = after;\nexports.allKeys = allKeys;\nexports.before = before;\nexports.bind = bind;\nexports.bindAll = bindAll;\nexports.chain = chain;\nexports.chunk = chunk;\nexports.clone = clone;\nexports.compact = compact;\nexports.compose = compose;\nexports.constant = constant;\nexports.contains = contains;\nexports.countBy = countBy;\nexports.create = create;\nexports.debounce = debounce;\nexports.defaults = defaults;\nexports.defer = defer;\nexports.delay = delay;\nexports.difference = difference;\nexports.each = each;\nexports.every = every;\nexports.extend = extend;\nexports.extendOwn = extendOwn;\nexports.filter = filter;\nexports.find = find;\nexports.findIndex = findIndex;\nexports.findKey = findKey;\nexports.findLastIndex = findLastIndex;\nexports.findWhere = findWhere;\nexports.first = first;\nexports.flatten = flatten;\nexports.functions = functions;\nexports.get = get;\nexports.groupBy = groupBy;\nexports.has = has;\nexports.identity = identity;\nexports.indexBy = indexBy;\nexports.indexOf = indexOf;\nexports.initial = initial;\nexports.intersection = intersection;\nexports.invert = invert;\nexports.invoke = invoke;\nexports.isArguments = isArguments$1;\nexports.isArray = isArray;\nexports.isArrayBuffer = isArrayBuffer;\nexports.isBoolean = isBoolean;\nexports.isDataView = isDataView$1;\nexports.isDate = isDate;\nexports.isElement = isElement;\nexports.isEmpty = isEmpty;\nexports.isEqual = isEqual;\nexports.isError = isError;\nexports.isFinite = isFinite$1;\nexports.isFunction = isFunction$1;\nexports.isMap = isMap;\nexports.isMatch = isMatch;\nexports.isNaN = isNaN$1;\nexports.isNull = isNull;\nexports.isNumber = isNumber;\nexports.isObject = isObject;\nexports.isRegExp = isRegExp;\nexports.isSet = isSet;\nexports.isString = isString;\nexports.isSymbol = isSymbol;\nexports.isTypedArray = isTypedArray$1;\nexports.isUndefined = isUndefined;\nexports.isWeakMap = isWeakMap;\nexports.isWeakSet = isWeakSet;\nexports.iteratee = iteratee;\nexports.keys = keys;\nexports.last = last;\nexports.lastIndexOf = lastIndexOf;\nexports.map = map;\nexports.mapObject = mapObject;\nexports.matcher = matcher;\nexports.max = max;\nexports.memoize = memoize;\nexports.min = min;\nexports.mixin = mixin;\nexports.negate = negate;\nexports.noop = noop;\nexports.now = now;\nexports.object = object;\nexports.omit = omit;\nexports.once = once;\nexports.pairs = pairs;\nexports.partial = partial;\nexports.partition = partition;\nexports.pick = pick;\nexports.pluck = pluck;\nexports.property = property;\nexports.propertyOf = propertyOf;\nexports.random = random;\nexports.range = range;\nexports.reduce = reduce;\nexports.reduceRight = reduceRight;\nexports.reject = reject;\nexports.rest = rest;\nexports.restArguments = restArguments;\nexports.result = result;\nexports.sample = sample;\nexports.shuffle = shuffle;\nexports.size = size;\nexports.some = some;\nexports.sortBy = sortBy;\nexports.sortedIndex = sortedIndex;\nexports.tap = tap;\nexports.template = template;\nexports.templateSettings = templateSettings;\nexports.throttle = throttle;\nexports.times = times;\nexports.toArray = toArray;\nexports.toPath = toPath$1;\nexports.union = union;\nexports.uniq = uniq;\nexports.uniqueId = uniqueId;\nexports.unzip = unzip;\nexports.values = values;\nexports.where = where;\nexports.without = without;\nexports.wrap = wrap;\nexports.zip = zip;\n//# sourceMappingURL=underscore-node-f.cjs.map\n","//     Underscore.js 1.13.6\n//     https://underscorejs.org\n//     (c) 2009-2022 Jeremy Ashkenas, Julian Gonggrijp, and DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\nvar underscoreNodeF = require('./underscore-node-f.cjs');\n\n\n\nmodule.exports = underscoreNodeF._;\n//# sourceMappingURL=underscore-node.cjs.map\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","/**\n * The entrypoint for the action.\n */\nconst { run } = require('./main');\n\nrun();\n"],"names":[],"sourceRoot":""}